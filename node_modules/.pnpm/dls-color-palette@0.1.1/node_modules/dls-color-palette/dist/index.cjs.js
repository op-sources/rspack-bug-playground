'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

function _slicedToArray(arr, i) {
  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();
}

function _arrayWithHoles(arr) {
  if (Array.isArray(arr)) return arr;
}

function _iterableToArrayLimit(arr, i) {
  var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"];

  if (_i == null) return;
  var _arr = [];
  var _n = true;
  var _d = false;

  var _s, _e;

  try {
    for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {
      _arr.push(_s.value);

      if (i && _arr.length === i) break;
    }
  } catch (err) {
    _d = true;
    _e = err;
  } finally {
    try {
      if (!_n && _i["return"] != null) _i["return"]();
    } finally {
      if (_d) throw _e;
    }
  }

  return _arr;
}

function _unsupportedIterableToArray(o, minLen) {
  if (!o) return;
  if (typeof o === "string") return _arrayLikeToArray(o, minLen);
  var n = Object.prototype.toString.call(o).slice(8, -1);
  if (n === "Object" && o.constructor) n = o.constructor.name;
  if (n === "Map" || n === "Set") return Array.from(o);
  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);
}

function _arrayLikeToArray(arr, len) {
  if (len == null || len > arr.length) len = arr.length;

  for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];

  return arr2;
}

function _nonIterableRest() {
  throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}

function n(n) {
  if (!("number" == typeof n ? 0 <= n && n <= 255 : n.every(function (n) {
    return 0 <= n && n <= 255;
  }))) throw new RangeError("RGB channel value shoud be in range [0, 255].");
}

var r = 1e-6;

function e(n) {
  var t = n[0],
      a = n[1],
      u = n[2];
  return a < r && (t = a = 0), u < r && (t = a = 0), [t, a, u];
}

function o(r) {
  n(r);
  var t = r.map(function (n) {
    return n / 255;
  }),
      a = t[0],
      u = t[1],
      o = t[2],
      i = Math.max(a, u, o),
      c = Math.min(a, u, o),
      f = i - c;
  return e([i === c ? 0 : i === a && u >= o ? 60 * (u - o) / f + 0 : i === a && u < o ? 60 * (u - o) / f + 360 : i === u ? 60 * (o - a) / f + 120 : 60 * (a - u) / f + 240, 0 === i ? 0 : f / i, i]);
}

function l(n) {
  if (n < 0 || n >= 360) throw new RangeError("Hue channel value shoud be in range [0, 360).");
}

function p(n, r) {
  if (n < 0 || n > 1) throw new RangeError(function (n) {
    if (0 === n.length) return n;
    return n.charAt(0).toUpperCase() + n.slice(1);
  }(r) + " channel value shoud be in range [0, 1].");
}

var H = Math.round;

function x(n) {
  return "#" + n.map(k).join("");
}

function k(r) {
  n(r);
  var t = H(r).toString(16);
  return 1 == t.length ? "0" + t : t;
}

var E = /^#(?:[0-9a-f]{3}){1,2}$/i;

function R(n) {
  if (!E.test(n)) throw new Error("Invalid format for hex color value: " + n);
  var r = n.slice(1);
  3 === r.length && (r = r.split("").map(function (n) {
    return n + n;
  }).join(""));
  var t = parseInt(r, 16);
  return [t >> 16, t >> 8 & 255, 255 & t];
}

var A = Math.floor;

function B(n) {
  var r = n[0],
      t = n[1],
      a = n[2];
  l(r), p(t, "satuation"), p(a, "value");
  var u,
      e = A(r / 60),
      o = r / 60 - e,
      i = a * (1 - t),
      c = a * (1 - o * t),
      f = a * (1 - (1 - o) * t);

  switch (e) {
    case 0:
      u = [a, f, i];
      break;

    case 1:
      u = [c, a, i];
      break;

    case 2:
      u = [i, a, f];
      break;

    case 3:
      u = [i, c, a];
      break;

    case 4:
      u = [f, i, a];
      break;

    case 5:
      u = [a, i, c];
      break;

    default:
      u = [0, 0, 0];
  }

  return u.map(function (n) {
    return 255 * n;
  });
}

function isNumber(val) {
  return typeof val === 'number' || !Number.isNaN(val);
}
function isInRanges(h, ranges) {
  return ranges.some(function (range) {
    if (range.length !== 2 || range.some(function (edge) {
      return !isNumber(edge);
    })) {
      return false;
    }

    var _range$sort = range.sort(function (a, b) {
      return a - b;
    }),
        _range$sort2 = _slicedToArray(_range$sort, 2),
        min = _range$sort2[0],
        max = _range$sort2[1];

    return min <= h && h <= max;
  });
}
function normalizeHsv(_ref) {
  var _ref2 = _slicedToArray(_ref, 3),
      h = _ref2[0],
      s = _ref2[1],
      b = _ref2[2];

  return [h, s / 100, b / 100];
}
function hexToHsv(v) {
  return o(R(v));
}
function hsvToHex(v) {
  return x(B(normalizeHsv(v)));
}

var BASE_LEVEL = 7;
var DARK_B_MAXES = [85, 65, 40];
var LIGHT_B_STEP = 20;
var B_MAX = 100;
var B_MIN = 0;
var S_MAX = 100;
var S_MIN = 8;
var B_CLAMP_S_DEVIATION_RATIO = 0.2;
var LOW_S_DEVIATION_RATIO = 0.4;
var S_COEF = 3.2;

function clamp(value, min, max) {
  if (min > max) {
    var _ref = [max, min];
    min = _ref[0];
    max = _ref[1];
  }

  return Math.min(max, Math.max(min, value));
}

function getBrightness(base, level) {
  if (level === BASE_LEVEL) {
    return base;
  } // dark shades


  if (level > BASE_LEVEL) {
    if (base <= B_MIN) {
      return base;
    }

    return B_MIN + (DARK_B_MAXES[level - BASE_LEVEL - 1] - B_MIN) * (base - B_MIN) / (B_MAX - B_MIN);
  } // light shades


  return base + (BASE_LEVEL - level) * LIGHT_B_STEP;
}

function getSatuation(base, level) {
  if (level === BASE_LEVEL) {
    return base;
  } // light shades


  if (level > BASE_LEVEL) {
    level--;
  }

  var pl = BASE_LEVEL - 1;
  var portion = (S_COEF * level * level + (100 - (pl * pl - 1) * S_COEF) * level / (pl - 1) + ((pl * pl - 1) * S_COEF - 100) / (pl - 1) - S_COEF) / 100;

  if (base > S_MIN) {
    return (base - S_MIN) * portion + S_MIN;
  }

  return portion * base;
}

function getShade(color, level) {
  if (!isNumber(level) || level < 1 || level > 10) {
    throw new Error('`level` should be a number that ≥ 1 and ≤ 10.');
  }

  if (level === BASE_LEVEL) {
    return color;
  }

  var _hexToHsv = hexToHsv(color),
      _hexToHsv2 = _slicedToArray(_hexToHsv, 3),
      h = _hexToHsv2[0],
      rawS = _hexToHsv2[1],
      rawB = _hexToHsv2[2];

  var s = rawS * 100;
  var b = rawB * 100;
  var brightness = getBrightness(b, level);
  var deviation = s > 0 ? Math.log2(100 / s) * s / 100 * s * LOW_S_DEVIATION_RATIO : 0;

  if (level < BASE_LEVEL) {
    var bPrev = getBrightness(b, BASE_LEVEL - 1); // brightness may be clamped

    deviation += bPrev > B_MAX ? (bPrev - B_MAX) / LIGHT_B_STEP * B_CLAMP_S_DEVIATION_RATIO * s : 0;
  }

  var saturation = getSatuation(s - deviation, level);
  return hsvToHex([h, clamp(saturation, 0, S_MAX), clamp(brightness, B_MIN, B_MAX)]);
}

var CONTEXTUAL_RANGES = {
  info: [[210, 225]],
  success: [[95, 155]],
  warning: [[30, 45]],
  error: [[0, 10], [350, 360]]
};
var CONTEXTUAL_COLORS = {
  info: [216, 100, 80],
  success: [149, 100, 75],
  warning: [34, 100, 100],
  error: [7, 100, 80]
};

function isInContextualRanges(h, type) {
  return isInRanges(h, CONTEXTUAL_RANGES[type]);
}

function getContextual(color, type) {
  if (!type || ['info', 'success', 'warning', 'error'].indexOf(type.trim().toLowerCase()) === -1) {
    throw new Error('`type` must be one of `info`, `success`, `warning` or `error`.');
  }

  var _hexToHsv = hexToHsv(color),
      _hexToHsv2 = _slicedToArray(_hexToHsv, 1),
      h = _hexToHsv2[0];

  if (isInContextualRanges(h, type)) {
    return color;
  }

  return hsvToHex(CONTEXTUAL_COLORS[type]);
}

exports.getContextual = getContextual;
exports.getShade = getShade;
//# sourceMappingURL=index.cjs.js.map
