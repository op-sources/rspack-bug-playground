import {isFunction} from 'lodash';

export const getPositionFromEvent = event => {
    const {pageX = 0, pageY = 0} = event;
    return {
        x: pageX,
        y: pageY
    };
};

export const removeDocumentListener = () => {
    document.onmousemove = null;
    document.onmouseup = null;
};

export const onMouseDown = (
    {
        event,
        onDragged,
        onMoving,
        onDropped
    }
) => {
    let sourcePos = {};
    let startDragFlag = false;
    event.persist();
    event.stopPropagation();
    event.preventDefault();
    document.onmousemove = moveEvent => {
        moveEvent.preventDefault();
        if (!startDragFlag) {
            if (isFunction(onDragged)) {
                const position = getPositionFromEvent(event);
                onDragged({ele: event.target, position});
                sourcePos = position;
            }
            startDragFlag = true;
        }
        const position = getPositionFromEvent(moveEvent);
        // $emit isMoving
        if (isFunction(onMoving)) {
            onMoving({ele: event.target, position});
        }
    };
    document.onmouseup = upEvent => {
        const position = getPositionFromEvent(upEvent);
        const {x, y} = sourcePos;
        const isEqualSourcePos = +position.x === +x && +position.y === +y;
        // $emit isDropped
        if (isFunction(onDropped) && startDragFlag) {
            onDropped({ele: upEvent.target, position, isEqualSourcePos});
        }
        startDragFlag = false;
        removeDocumentListener();
    };
};
