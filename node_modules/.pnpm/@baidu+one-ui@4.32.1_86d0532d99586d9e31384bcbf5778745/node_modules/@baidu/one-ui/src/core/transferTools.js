export const getCandidateNumber = (allDataMap, candidateList = []) => {
    if (!candidateList.length) {
        return [];
    }
    const newCandidateList = [];
    const conductDown = key => {
        if (allDataMap[key]
            && allDataMap[key].children
            && allDataMap[key].children.length > 0
        ) {
            allDataMap[key].children.forEach(keyId => {
                conductDown(keyId);
            });
        }
        else {
            newCandidateList.push(`${key}`);
        }
    };

    candidateList.map(key => {
        conductDown(key);
    });

    return newCandidateList;
};

export const getParentExpandedKeys = (checkedKeys, entities) => {
    const parentKeys = [...checkedKeys];
    const conductUp = key => {
        if (entities[key]
            && entities[key].parent
            && entities[key].parent.key != null
            && parentKeys.indexOf(entities[key].parent.key) < 0
        ) {
            parentKeys.push(entities[key].parent.key);
            conductUp(entities[key].parent.key);
        }
    };
    checkedKeys.forEach(key => {
        conductUp(key);
    });
    return parentKeys;
};

export const formatParentRelationMap = (allDataMap = {}) => {
    const entities = {};
    Object.keys(allDataMap).forEach(key => {
        if (allDataMap[key] && allDataMap[key].children) {
            allDataMap[key].children.forEach(child => {
                entities[child] = String(allDataMap[key].key);
            });
        }
    });
    return entities;
};

export const formatSelectedList = (
    list,
    parentRelationMap,
    allDataMap
) => {
    const entities = {};
    const topLevel = [];
    const conductUp = key => {
        const parentKey = parentRelationMap[key];
        if (parentKey == null) {
            if (!topLevel.includes(key)) {
                topLevel.push(key);
            }
            return;
        }
        if (!entities[parentKey]) {
            entities[parentKey] = {};
            entities[parentKey].children = [key];
        }
        else if (entities[parentKey].children.indexOf(key) === -1) {
            entities[parentKey].children.push(key);
        }
        if (parentRelationMap[parentKey]) {
            conductUp(parentKey);
        }
        else if (topLevel.indexOf(parentKey) === -1) {
            topLevel.push(parentKey);
        }
    };

    const mergeChildren = key => {
        const keys = allDataMap[key]?.children;
        if (keys && keys.length) {
            entities[key] = {
                children: keys.map(key => String(key))
            };
            keys.forEach(key => mergeChildren(key));
        }
    };

    list.forEach(key => {
        conductUp(key);
        mergeChildren(key);
    });

    return {
        entities,
        topLevel
    };
};

export const getCheckedKeyIsDisabled = (
    key,
    keyEntities,
    allDataMap
) => {
    if (allDataMap[key] && allDataMap[key].disabled) {
        return true;
    }

    const entity = keyEntities[key];
    if (!entity) {
        return false;
    }
    let disabled = false;
    const conductUp = key => {
        const entity = keyEntities[key];
        if (!entity) {
            return false;
        }
        if (allDataMap[key] && allDataMap[key].disabled) {
            disabled = true;
            return;
        }
        const parent = entity.parent;
        if (parent && parent.key != null && disabled === false) {
            conductUp(parent.key);
        }
    };
    const parent = entity.parent;
    if (parent && parent.key != null) {
        conductUp(parent.key);
    }
    return disabled;
};

export const getCheckedKeyIsDisabledByParentRelationMap = (
    key,
    parentRelationMap,
    allDataMap
) => {
    if (allDataMap[key] && allDataMap[key].disabled) {
        return true;
    }

    let disabled = false;
    const conductUp = key => {
        const parentKey = parentRelationMap[key];
        if (allDataMap[key] && allDataMap[key].disabled) {
            disabled = true;
            return;
        }
        if (parentKey != null && disabled === false) {
            conductUp(parentKey);
        }
    };
    const parentKey = parentRelationMap[key];
    if (parentKey == null) {
        return false;
    }
    conductUp(parentKey);
    return disabled;
};
