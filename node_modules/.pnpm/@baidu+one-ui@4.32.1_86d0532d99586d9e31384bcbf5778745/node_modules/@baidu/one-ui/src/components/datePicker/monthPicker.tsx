import React, {MouseEvent, PureComponent} from 'react';
import {Provider, create, Store} from 'mini-store';
import {IconCalendar, IconTimesCircle} from 'dls-icons-react';
import {noop} from 'lodash';
import {
    getDetailDate,
    getTodayDetail,
    transDateFormat,
    validateData,
    formatButtonText
} from '../../core/datePickerTools';
import TitleHeader from './common/titleHeader';
import YearPanel from './common/yearPanel';
import MonthPanel from './common/monthPanel';
import Input from './common/input';
import Layer, {OverlayProps} from '../overlay';
import Button from '../button';
import {classnames} from '../../core/commonTools';
import {align} from './util';
import {MonthPickerProps} from './interface';
import {withConfigConsumer} from '../providerConfig/context';
import {DatePickerStore} from './datePicker';

interface MonthPickerState {
    currentValue?: string,
    visible?: boolean,
    errorMessage?: string
}

@withConfigConsumer('date-picker')
class MonthPicker extends PureComponent<MonthPickerProps, MonthPickerState> {

    static defaultProps = {
        dateFormat: 'YYYY-MM',
        prefixCls: 'one-date-picker',
        disabled: false,
        size: 'medium',
        onVisibleChange: noop,
        onChange: noop,
        onClickButton: noop,
        getPopupContainer: () => document.body,
        showDeleteIcon: false,
        onDelete: noop,
        placeholder: '请选择日期'
    }

    store: Store<DatePickerStore>;

    constructor(props: MonthPickerProps) {
        super(props);
        const {defaultValue, value, visible, defaultVisible} = props;
        const _value = defaultValue || value || '';
        const todayDetail = getTodayDetail();
        const currentDetail = getDetailDate(_value);
        this.state = {
            currentValue: _value,
            visible: defaultVisible || visible || false,
            errorMessage: ''
        };
        this.store = create<DatePickerStore>({
            _value,
            showYear: _value ? currentDetail.fullYear : todayDetail.fullYear,
            showMonth: _value ? currentDetail.fullMonth : todayDetail.fullMonth,
            // 面板展示 month or year - 选择年份 or 月份
            panelType: 'month',
            validateMinDate: transDateFormat(props.validateMinDate) || validateData().validateMinDate,
            validateMaxDate: transDateFormat(props.validateMaxDate) || validateData().validateMaxDate
        });
    }

    static getDerivedStateFromProps = (nextProps: MonthPickerProps) => {
        const newState: MonthPickerState = {};
        if ('value' in nextProps) {
            newState.currentValue = nextProps.value;
        }
        if ('visible' in nextProps) {
            newState.visible = nextProps.visible;
        }
        return newState;
    }

    componentDidUpdate = (prevProps: MonthPickerProps) => {
        let newState = {};
        if ('value' in this.props) {
            const _value = this.props.value || '';
            const todayDetail = getTodayDetail();
            const currentDetail = getDetailDate(_value);
            // 控制一些组件内部属性
            newState = {
                ...newState,
                _value,
                showYear: _value ? currentDetail.fullYear : todayDetail.fullYear,
                showMonth: _value ? currentDetail.fullMonth : todayDetail.fullMonth
            };
        }
        if ('validateMinDate' in this.props
            && this.props.validateMinDate !== prevProps.validateMinDate) {
            newState = {
                ...newState,
                validateMinDate: transDateFormat(this.props.validateMinDate) || validateData().validateMinDate
            };
        }
        if ('validateMaxDate' in this.props
            && this.props.validateMaxDate !== prevProps.validateMaxDate) {
            newState = {
                ...newState,
                validateMaxDate: transDateFormat(this.props.validateMaxDate) || validateData().validateMaxDate
            };
        }
        this.store.setState(newState);
    }

    onSelectMonth = (value: string, colsePanel: boolean = true) => {
        const {onChange, validator} = this.props;
        const newState: MonthPickerState = {};
        if (!('value' in this.props)) {
            // 非受控
            newState.currentValue = value;
        }
        const todayDetail = getTodayDetail();
        const currentDetail = getDetailDate(value);
        this.store.setState({
            _value: value,
            showYear: value ? currentDetail.fullYear : todayDetail.fullYear,
            showMonth: value ? currentDetail.fullMonth : todayDetail.fullMonth
        });
        if (!('visible' in this.props) && colsePanel) {
            // 非受控
            newState.visible = false;
        }
        let validatorError = '';
        validatorError = (validator && typeof validator === 'function')
            ? validator(value)
            : '';
        if (!validatorError) {
            onChange(value);
            newState.errorMessage = '';
        }
        else {
            newState.errorMessage = validatorError;
        }
        this.setState(newState);
    }

    renderDatePickerBody = () => {
        const {prefixCls, size} = this.props;
        const visible = this.state.visible;
        const datePickerPanelClassName = classnames(`${prefixCls}-panel`, `${prefixCls}-panel-${size}`);
        return (
            <Provider store={this.store}>
                <div className={datePickerPanelClassName}>
                    <Input
                        {...this.props}
                        visible={visible}
                        onChange={this.onSelectMonth}
                        inputType="month"
                    />
                    <TitleHeader {...this.props} isMonthRender />
                    <MonthPanel {...this.props} isMonthRender onClickMonth={this.onSelectMonth} />
                    <YearPanel {...this.props} isMonthRender />
                </div>
            </Provider>
        );
    }

    onLayerVisibleChange = (visible: boolean) => {
        this.props.onVisibleChange(visible);
        if (!('visible' in this.props)) {
            this.setState({
                visible
            });
        }
    }

    onOpenDatePicker = (e: MouseEvent) => {
        const onClickButton = this.props.onClickButton;
        let formatValue;
        if ('value' in this.props) {
            formatValue = this.props.value;
        }
        else {
            formatValue = this.state.currentValue;
        }
        const todayDetail = getTodayDetail();
        const currentDetail = getDetailDate(formatValue);
        // 每次打开的时候，重置一下面板的type，并且保证当前value与state的value保持一致
        this.store.setState({
            panelType: 'month',
            _value: formatValue,
            showYear: formatValue ? currentDetail.fullYear : todayDetail.fullYear,
            showMonth: formatValue ? currentDetail.fullMonth : todayDetail.fullMonth
        });
        this.onLayerVisibleChange(true);
        onClickButton(e);
    };

    onDetete = (e: MouseEvent) => {
        e.stopPropagation();
        e.preventDefault();
        this.props.onDelete();
        if (!('value' in this.props)) {
            this.setState({
                currentValue: ''
            });
            this.store.setState({
                _value: ''
            });
        }
    }

    render() {
        const {
            prefixCls, className, disabled, getPopupContainer,
            dateFormat, popupPlacement, size, customButtonTitle,
            showDeleteIcon, placeholder, style
        } = this.props;
        const {currentValue, visible, errorMessage} = this.state;
        let formatValue;
        if ('value' in this.props) {
            formatValue = this.props.value;
        }
        else {
            formatValue = currentValue;
        }
        const buttonText = formatButtonText({
            value: formatValue,
            dateFormat
        });
        const text = customButtonTitle || buttonText || placeholder;
        const datePickerClassNames = classnames(prefixCls, className, {
            [`${prefixCls}-empty`]: !buttonText,
            [`${prefixCls}-disabled`]: disabled,
            [`${prefixCls}-showDeleteIcon`]: showDeleteIcon
        });
        const layerProps: OverlayProps = {
            trigger: disabled ? '' : 'click',
            visible,
            onVisibleChange: this.onLayerVisibleChange,
            overlay: this.renderDatePickerBody(),
            dropdownMatchSelectWidth: false,
            getPopupContainer,
            popupPlacement,
            popupClassName: classnames(`${prefixCls}-overlay`, `${prefixCls}-overlay-${size}`),
            align
        };
        const textClassName = classnames(`${prefixCls}-title-text`, {
            [`${prefixCls}-title-text-empty`]: !formatValue
        });
        return (
            <div className={datePickerClassNames} style={style}>
                <Layer {...layerProps}>
                    <Button
                        className={`${prefixCls}-title`}
                        disabled={disabled}
                        size={size}
                        onClick={this.onOpenDatePicker}
                        type="basic"
                    >
                        <span className={textClassName}>{text}</span>
                        <IconCalendar
                            className={`${prefixCls}-button-icon ${prefixCls}-button-icon-calendar`}
                        />
                        <IconTimesCircle
                            className={`${prefixCls}-button-icon ${prefixCls}-button-icon-close`}
                            onClick={this.onDetete}
                        />
                    </Button>
                </Layer>
                {
                    errorMessage ? (
                        <span className={`${prefixCls}-error-message`}>
                            {errorMessage}
                        </span>
                    ) : null
                }
            </div>
        );
    }
}

export default MonthPicker;
