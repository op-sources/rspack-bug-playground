/**
 * @file 菜单的列
 */

import React, {CSSProperties, PureComponent, ReactElement, ReactNode} from 'react';
import {classnames} from '../../core/commonTools';
import {CascaderOption} from '../cascader';
import Option from './option';

interface ColumnProps {
    prefixCls: string,
    style?: CSSProperties,
    size: 'small' | 'medium' | 'large',
    options: Array<{parent: CascaderOption}>,
    showCheckbox: boolean,
    index: number,
    width: number,
    value: string | number,
    valuePath: Array<string | number>,
    activeValuePath?: Array<string | number>,
    expandIcon: ReactNode,
    loadingIcon: ReactNode,
    loadingMap: Record<string, boolean>,
    onSelect: (key: string, keyPath: string, index: number) => void,
    onHover: (key: string, keyPath: string, index: number) => void,
    onCheck: (key: string) => void,
    expandTrigger: 'click' | 'hover',
    firstColumnGroup: boolean | Array<{label: string, value: string; children: string[]}>,
    CustomItemRender: ReactNode,
    header: ReactNode,
    footer: ReactNode,
    checkboxPrefixCls?: string,
    renderOption?:
        (param: {
            node: ReactElement,
            option: CascaderOption
        }) => ReactElement;
}

export default class Column extends PureComponent<ColumnProps> {
    state = {
        expandedKeys: []
    };

    prefix(name) {
        return `${this.props.prefixCls}-${name}`;
    }

    render() {
        const {
            width,
            style,
            options,
            CustomItemRender,
            firstColumnGroup
        } = this.props;

        const className = classnames({
            [this.prefix('menu')]: true,
            [this.prefix('menu-fixed-width')]: width
        });
        const colStyle = {
            ...style
        };
        if (width) {
            colStyle.width = width;
        }
        const renderGroup = firstColumnGroup === true || (firstColumnGroup && firstColumnGroup.length);
        return (
            <ul
                className={className}
                style={colStyle}
            >
                {this.renderHeader()}
                {CustomItemRender && this.renderCustomItem(CustomItemRender)}
                {
                    renderGroup
                        ? this.renderGroupOptions(options)
                        : this.renderOptions(options)
                }
                {this.renderFooter()}
            </ul>
        );
    }

    renderGroup = (option) => {
        const {
            key,
            expandType
        } = option;
        return (
            <>
                {this.renderOption(option, true)}
                {(expandType !== 'toggle'
                    || (expandType === 'toggle'
                        && this.state.expandedKeys.includes(key)))
                    && (
                        <ul key={`g-${key}`} className={this.prefix('menu-item-group')}>
                            {this.renderOptions(option.children)}
                        </ul>
                    )
                }
            </>
        );
    }

    renderGroupOptions(options) {
        const firstColumnGroup = this.props.firstColumnGroup;
        if (firstColumnGroup === false) {
            return null;
        }
        if (firstColumnGroup === true) {
            return options.map(this.renderGroup);
        }

        return firstColumnGroup.map(group => {
            return (
                <ul key={group.value} className={this.prefix('menu-item-group')}>
                    <div className={this.prefix('menu-item-group-title')}>{group.label}</div>
                    {(group.children || [])
                        .map(key => this.renderOptions(options.filter(opt => opt.key === key)))
                    }
                </ul>
            );
        });
    }

    renderOptions(options) {
        if (!options || options.length === 0) {
            return null;
        }
        return options.map(option => this.renderOption(option));
    }

    renderOption(option, group?) {
        const {
            prefixCls,
            size,
            expandIcon,
            loadingIcon,
            value,
            valuePath,
            activeValuePath,
            showCheckbox,
            checkboxPrefixCls,
            onCheck,
            expandTrigger,
            renderOption,
            loadingMap
        } = this.props;

        const {
            key,
            keyPath,
            checked,
            indeterminate,
            loading,
            selectable,
            expandType
        } = option;

        if ((expandType === 'inline' || expandType === 'toggle') && !group) {
            return this.renderGroup(option);
        }

        const active = !group
            && selectable !== false
            && keyPath.every((key, index) => activeValuePath[index] === key);
        const selected = !group
            && key === value
            && selectable !== false
            && keyPath.every((key, index) => valuePath[index] === key);

        return (
            <Option
                key={key}
                size={size}
                active={active}
                selected={selected}
                checked={checked}
                indeterminate={indeterminate}
                loading={loading || loadingMap[key]}
                option={option}
                prefixCls={prefixCls}
                expandIcon={expandIcon}
                expanded={expandType === 'toggle' && this.state.expandedKeys.includes(key)}
                loadingIcon={loadingIcon}
                onSelect={this.handleOnSelect}
                onHover={this.handleOnHover}
                onCheck={onCheck}
                showCheckbox={showCheckbox}
                checkboxPrefixCls={checkboxPrefixCls}
                expandTrigger={expandTrigger}
                group={group}
                renderOption={renderOption}
            />
        );
    }

    handleOnHover = (key, keyPath) => {
        const {
            onHover,
            index
        } = this.props;
        onHover && onHover(key, keyPath, index);
    }

    static getDerivedStateFromProps(nextProps, prevState) {
        if (prevState.expandedKeys.length === 0
            && nextProps.activeValuePath.length > 0
            && !prevState.inited
        ) {
            return {
                expandedKeys: nextProps.activeValuePath,
                inited: true
            };
        }
        return null;
    }

    componentDidUpdate(prevProps): void {
        if (this.state.expandedKeys.length === 0
            && this.props.activeValuePath.length > 0
            && prevProps.activeValuePath.length === 0
        ) {
            this.setState({
                expandedKeys: this.props.activeValuePath
            });
        }
    }

    handleOnSelect = (key, keyPath) => {
        const {
            onSelect,
            index
        } = this.props;
        const expandedKeys = this.state.expandedKeys;
        if (expandedKeys.includes(key)) {
            this.setState({
                expandedKeys: expandedKeys.filter(o => o !== key)
            });
        }
        else {
            this.setState({
                expandedKeys: expandedKeys.concat(key)
            });
        }
        onSelect && onSelect(key, keyPath, index);
    }

    renderCustomItem(CustomItemRender) {
        return (
            <li className={this.prefix('menu-item')}>{CustomItemRender}</li>
        );
    }

    getParentOption() {
        const options = this.props.options;
        const parentOption = options[0]?.parent;
        return parentOption && !parentOption.root ? parentOption.item : undefined;
    }

    renderHeader() {
        let {
            header,
            index
        } = this.props;
        if (!header) {
            return null;
        }
        if (typeof header === 'function') {
            header = header(index, this.getParentOption());
        }
        if (header) {
            return <li className={this.prefix('menu-header')}>{header}</li>;
        }
        return null;
    }

    renderFooter() {
        let {
            footer,
            index
        } = this.props;
        if (!footer) {
            return null;
        }
        if (typeof footer === 'function') {
            footer = footer(index, this.getParentOption());
        }
        if (footer) {
            return <li className={this.prefix('menu-footer')}>{footer}</li>;
        }
        return null;
    }
}