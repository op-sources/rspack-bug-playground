import React, {PureComponent} from 'react';
import {CSSTransition} from 'react-transition-group';
import {TransitionProps} from './interface';
import {classnames} from '../../core/commonTools';

class Transition extends PureComponent<TransitionProps> {
    static defaultProps = {
        prefixCls: 'one-transition',
        in: true,
        appear: true,
        timeout: {
            appear: 100,
            enter: 100,
            exit: 100
        },
        unmountOnExit: false
    };

    getDurations(timeout) {
        if (typeof timeout === 'number') {
            return {
                in: timeout + 'ms',
                out: timeout + 'ms'
            };
        }
        return {
            in: timeout.enter + 'ms',
            out: timeout.exit + 'ms'
        };
    }

    render() {
        const {
            in: show,
            appear,
            timeout,
            children,
            name,
            prefixCls,
            className,
            unmountOnExit,
            style,
            ...restProps
        } = this.props;

        const durations = this.getDurations(timeout);

        const transitionStyle = {
            '--dls-transition-duration-in': durations.in,
            '--dls-transition-duration-out': durations.out,
            ...style
        };

        const cls = name === 'move' ? classnames(`${prefixCls}-${name}`, className) : className;

        return (
            <CSSTransition
                in={show}
                appear={appear}
                timeout={timeout}
                unmountOnExit={unmountOnExit}
                classNames={`${prefixCls}-${name}`}
                {...restProps}
            >
                {
                    React.isValidElement(children)
                        ? React.cloneElement(children, {
                            className: classnames(children.props.className, cls),
                            style: {
                                ...children.props.style,
                                ...transitionStyle
                            }
                        })
                        : children
                }
            </CSSTransition>
        );
    }
}

export default Transition;