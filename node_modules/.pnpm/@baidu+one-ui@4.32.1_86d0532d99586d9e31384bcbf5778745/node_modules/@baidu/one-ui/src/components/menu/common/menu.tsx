import React from 'react';
import {Provider, create, Store} from 'mini-store';
import SubPopupMenu, {getActiveKey} from './subPopupMenu';
import {classnames} from '../../../core/commonTools';
import {MenuProps} from '../interface';

interface InnerMenuProps extends MenuProps {
    selectable: boolean,
    subMenuOpenDelay: number,
    subMenuCloseDelay: number,
    triggerSubMenuAction: string,
    builtinPlacements: object,
};

export interface MenuStore {
    selectedKeys: Array<string | number>,
    openKeys: Array<string | number>,
    activeKey: {[key: string]: string | number}
}

class Menu extends React.Component<InnerMenuProps> {

    static defaultProps = {
        selectable: true,
        onClick: () => {},
        onSelect: () => {},
        onOpenChange: () => {},
        onDeselect: () => {},
        defaultSelectedKeys: [],
        defaultOpenKeys: [],
        subMenuOpenDelay: 0.1,
        subMenuCloseDelay: 0.1,
        triggerSubMenuAction: 'hover',
        prefixCls: 'one-menu',
        className: '',
        mode: 'vertical',
        builtinPlacements: {},
    };

    isRootMenu;
    store: Store<MenuStore>;
    innerMenu;

    constructor(props) {
        super(props);

        this.isRootMenu = true;

        let selectedKeys = props.defaultSelectedKeys;
        let openKeys = props.defaultOpenKeys;
        if ('selectedKeys' in props) {
            selectedKeys = props.selectedKeys || [];
        }
        if ('openKeys' in props) {
            openKeys = props.openKeys || [];
        }

        this.store = create<MenuStore>({
            selectedKeys,
            openKeys,
            activeKey: {'0-menu-': getActiveKey(props, props.activeKey)}
        });
    }

    componentDidMount() {
        this.updateMiniStore();
    }

    componentDidUpdate() {
        this.updateMiniStore();
    }

    onSelect = selectInfo => {
        const {
            selectable,
            multiple,
            onSelect
        } = this.props;
        if (selectable) {
            let {selectedKeys} = this.store.getState();
            const selectedKey = selectInfo.key;
            if (multiple) {
                if (!selectedKeys.includes(selectedKey)) {
                    selectedKeys = selectedKeys.concat(selectedKey);
                }
            }
            else {
                selectedKeys = [selectedKey];
            }
            if (!('selectedKeys' in this.props)) {
                this.store.setState({
                    selectedKeys
                });
            }
            if (onSelect) {
                onSelect({
                    ...selectInfo,
                    selectedKeys
                });
            }
        }
    };

    // onKeyDown needs to be exposed as a instance method
    // e.g., in rc-select, we need to navigate menu item while
    // current active item is rc-select input box rather than the menu itself
    onKeyDown = (e, callback) => {
        this.innerMenu.getWrappedInstance().onKeyDown(e, callback);
    };

    onOpenChange = event => {
        const openKeys = this.store.getState().openKeys.concat();
        let changed = false;
        const processSingle = e => {
            let oneChanged = false;
            if (e.open) {
                oneChanged = openKeys.indexOf(e.key) === -1;
                if (oneChanged) {
                    openKeys.push(e.key);
                }
            }
            else {
                const index = openKeys.indexOf(e.key);
                oneChanged = index !== -1;
                if (oneChanged) {
                    openKeys.splice(index, 1);
                }
            }
            changed = changed || oneChanged;
        };
        if (Array.isArray(event)) {
            // batch change call
            event.forEach(processSingle);
        }
        else {
            processSingle(event);
        }
        if (changed) {
            if (!('openKeys' in this.props)) {
                this.store.setState({openKeys});
            }
            this.props.onOpenChange(openKeys);
        }
    };

    onDeselect = selectInfo => {
        const {
            selectable,
            onDeselect
        } = this.props;
        if (selectable) {
            const selectedKeys = this.store.getState().selectedKeys.concat();
            const selectedKey = selectInfo.key;
            const index = selectedKeys.indexOf(selectedKey);
            if (index !== -1) {
                selectedKeys.splice(index, 1);
            }
            if (!('selectedKeys' in this.props)) {
                this.store.setState({
                    selectedKeys
                });
            }
            if (onDeselect) {
                onDeselect({
                    ...selectInfo,
                    selectedKeys
                });
            }
        }
    };

    setInnerMenu = node => {
        this.innerMenu = node;
    };

    updateMiniStore() {
        if ('selectedKeys' in this.props) {
            this.store.setState({
                selectedKeys: this.props.selectedKeys || []
            });
        }
        if ('openKeys' in this.props) {
            this.store.setState({
                openKeys: this.props.openKeys || []
            });
        }
    }

    render() {
        const {
            prefixCls,
            className,
            ...restProps
        } = this.props;

        const props = {
            ...restProps,
            prefixCls,
            className: classnames(className, `${prefixCls}-root`),
            onOpenChange: this.onOpenChange,
            onDeselect: this.onDeselect,
            onSelect: this.onSelect,
            parentMenu: this
        };

        return (
            <Provider store={this.store}>
                <SubPopupMenu {...props} ref={this.setInnerMenu}>
                    {this.props.children}
                </SubPopupMenu>
            </Provider>
        );
    }
}

export default Menu;
