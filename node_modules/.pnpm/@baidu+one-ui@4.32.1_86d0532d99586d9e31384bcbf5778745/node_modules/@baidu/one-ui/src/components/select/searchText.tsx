import React, {PureComponent} from 'react';
import {flattenDeep} from 'lodash';
import {classnames} from '../../core/commonTools';

interface SearchTextProps {
    text: string | number;
    showSearch: boolean;
    searchValue: string;
    className: string;
    disabled: boolean;
    prefixCls: string;
};

interface SearchTextState {
    searchValue: string;
};

class SearchText extends PureComponent<SearchTextProps, SearchTextState> {

    static defaultProps = {
        className: '',
        disabled: false,
        prefixCls: 'one-select'
    }

    constructor(props) {
        super(props);
        this.state = {
            searchValue: props.searchValue || ''
        };
    }

    static getDerivedStateFromProps = (nextProps, prevState) => {
        const searchValue = nextProps.searchValue;
        const currentSearchValue = prevState.searchValue;
        if (searchValue !== currentSearchValue) {
            return {
                searchValue
            };
        }
        return null;
    }

    formatTextWithColor = (text, searchValue) => {
        const pivolIndex = text.indexOf(searchValue);
        const prefixCls = this.props.prefixCls;
        if (pivolIndex < 0) {
            return <span>{text}</span>;
        }
        const textArray = flattenDeep(text.split(searchValue).map((node, index) => {
            return index === 0
                ? [<span key={index}>{node}</span>]
                : [
                    <span
                        key={`${index}-highlight`}
                        className={`${prefixCls}-search-text-highlight`}
                    >
                        {searchValue}
                    </span>,
                    <span key={index}>{node}</span>
                ];
        }));

        const strDom = (
            <span>
                {
                    textArray.map(node => {
                        return node;
                    })
                }
            </span>
        );
        return strDom;
    }

    render() {
        const {
            text,
            showSearch,
            className,
            prefixCls,
            disabled
        } = this.props;
        const searchValue = this.state.searchValue;
        const searchTextClassName = classnames({
            [`${prefixCls}-search-text-disabled`]: disabled
        }, className);
        if (!showSearch || !searchValue || typeof text !== 'string') {
            return <span className={className}>{text}</span>;
        }
        return (
            <span className={searchTextClassName}>
                {this.formatTextWithColor(text, searchValue)}
            </span>
        );
    }
}

export default SearchText;
