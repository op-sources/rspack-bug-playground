import React, {cloneElement, isValidElement, PureComponent} from 'react';
import RcTrigger from 'rc-trigger';
import Trigger from './trigger';
import CascaderPane, {CascaderPaneProps} from '../cascaderPane';
import {Tree} from '../../data/tree';
import {last, cloneDeepWith, isEqual} from 'lodash';
import {CascaderOption, CascaderProps} from './interface';
import shallowEqual from 'shallowequal';
import warning from 'warning';
import {classnames} from '../../core/commonTools';
import {withConfigConsumer} from '../providerConfig/context';

const BUILT_IN_PLACEMENTS = {
    bottomLeft: {
        points: ['tl', 'bl'],
        offset: [0, 4],
        overflow: {
            adjustX: 1,
            adjustY: 1
        }
    },
    topLeft: {
        points: ['bl', 'tl'],
        offset: [0, -4],
        overflow: {
            adjustX: 1,
            adjustY: 1
        }
    },
    bottomRight: {
        points: ['tr', 'br'],
        offset: [0, 4],
        overflow: {
            adjustX: 1,
            adjustY: 1
        }
    },
    topRight: {
        points: ['br', 'tr'],
        offset: [0, -4],
        overflow: {
            adjustX: 1,
            adjustY: 1
        }
    }
};

interface CascaderState {
    value?: CascaderProps['value'],
    options?: CascaderOption[],
    optionsClone?: CascaderOption[],
    resultOptions?: CascaderOption[],
    query?: string,
    expanded?: boolean,
    loadData?: boolean,
    tree?: Tree
};

@withConfigConsumer('cascader')
class Cascader extends PureComponent<CascaderProps, CascaderState> {

    static defaultProps = {
        prefixCls: 'one-cascader',
        inputPrefixCls: 'one-input',
        placeholder: '请选择',
        popupPlacement: 'bottomLeft',
        options: [],
        disabled: false,
        allowClear: true,
        notFoundContent: '未找到合适的选项',
        style: {},
        size: 'medium',
        inputIsControlled: false,
        onInputChange: () => {},
        multiple: false,
        showCheckAll: false,
        displayParent: true
    };

    constructor(props) {
        super(props);
        warning(
            !('width' in props),
            'The `width` prop of `Cascader` is deprecated, use `className` or `style` instead'
        );
        this.state = {
            value: props.defaultValue || [],
            options: [],
            optionsClone: [],
            query: ''
        };
    }

    static getDerivedStateFromProps = (props, state) => {
        const newState: CascaderState = {};
        let needBuildTree = false;
        let value = state.value;
        if ('value' in props && !shallowEqual(props.value || [], state.value)) {
            value = props.value || [];
            newState.value = value;
            needBuildTree = true;
        }
        if (!isEqual(props.options, state.optionsClone)) {
            newState.optionsClone = cloneDeepWith(
                props.options, value => isValidElement(value) ? cloneElement(value) : undefined
            );
            newState.options = props.options;
            needBuildTree = true;
        }
        if ('popupVisible' in props) {
            newState.expanded = props.popupVisible;
        }
        if (state.loadData) {
            newState.loadData = false;
            needBuildTree = true;
        }
        if (needBuildTree) {
            const checkedKeys = props.multiple ? value : [];
            const tree = new Tree(newState.options || state.options, checkedKeys, props.fieldNames);
            if (props.multiple) {
                newState.resultOptions = tree.getNormalizedOptions(tree.getCheckedKeys());
            }
            else {
                newState.resultOptions = tree.getNormalizedOptions(value, true);
            }
            newState.tree = tree;
        }

        return newState;
    }

    prefix(key) {
        return `${this.props.prefixCls}-${key}`;
    }

    rcTrigger;

    componentDidUpdate() {
        if (this.rcTrigger) {
            this.rcTrigger.forcePopupAlign();
        }
    }

    render() {
        const {
            prefixCls,
            className,
            style,
            width,
            disabled,
            size,
            fieldNames,
            // options,
            // defaultValue,
            // value,
            onChange,
            changeOnSelect,
            multiple,
            firstColumnGroup,
            inputIsControlled,
            // checkedKeys,
            // defaultCheckedKeys,

            // trigger
            placeholder,
            allowClear,
            showSearch,
            onInputChange,
            inputPrefixCls,
            displayRender,
            displayParent,

            // popup
            popupClassName,
            popupPlacement,
            // onPopupVisibleChange,
            getPopupContainer,
            // popupVisible,

            // cascaderpane
            // loadData,
            loadOnSelect,
            showCheckAll,
            expandTrigger,
            notFoundContent,
            renderOption,
            columnHeader,
            columnFooter,
            header,
            footer,
            before,
            popupWidthStretch,
            children
        } = this.props;

        const {
            expanded,
            resultOptions = [],
            value = [],
            query,
            options
        } = this.state;

        const triggerPorps = {
            placeholder,
            allowClear,
            showSearch: !!showSearch,
            onInputChange,
            inputPrefixCls,
            displayRender,
            displayParent,
            size,
            width,
            style,
            className,
            prefixCls,
            options: resultOptions,
            expanded,
            children,
            disabled,
            multiple,
            query,
            before,
            onRemove: this.handleOnRemove,
            onRemoveAll: this.handleOnRemoveAll,
            onSearch: this.handleOnSearch
        };

        const cascaderPaneProps: CascaderPaneProps = {
            fieldNames,
            options,
            showCheckAll,
            expandTrigger,
            emptyNode: notFoundContent,
            emptyType: 'option',
            columnHeader,
            columnFooter,
            header,
            footer,
            changeOnSelect,
            size,
            showCheckbox: multiple,
            showSearch: false,
            searchValue: query,
            searchConfig: typeof showSearch === 'boolean' ? undefined : showSearch,
            paneWidth: width,
            firstColumnGroup,
            visible: expanded,
            useDefaultFilter: !inputIsControlled,
            onSelect: this.handleOnSelect,
            onHover: this.handleOnHover,
            onClickSearchItem: this.handleOnSelect,
            onCheckboxChange: this.handleCheckboxChange,
            renderOption
        };

        if (multiple) {
            cascaderPaneProps.checkedKeys = value;
        }
        else {
            cascaderPaneProps.value = value;
        }

        const rcTriggerProps = {
            prefixCls: `${prefixCls}-menus`,
            popupClassName: classnames(`${prefixCls}-menus-${size}`, popupClassName),
            popupPlacement,
            builtinPlacements: BUILT_IN_PLACEMENTS,
            getPopupContainer,
            popupTransitionName: 'one-transition-slide-down',
            popupVisible: expanded,
            action: disabled ? undefined : ['click'],
            onPopupVisibleChange: this.toggleExpanded,
            popupAlign: {
                ignoreShake: true
            },
            popup: <CascaderPane {...cascaderPaneProps} />,
            stretch: popupWidthStretch === 'min-width' ? 'minWidth' : popupWidthStretch
        };

        return (
            <RcTrigger {...rcTriggerProps} ref={ref => this.rcTrigger = ref}>
                <Trigger {...triggerPorps} />
            </RcTrigger>
        );
    }

    toggleExpanded = expanded => {
        if (!('popupVisible' in this.props)) {
            this.setState({
                expanded
            });
        }
        this.setState({
            query: ''
        });
        const {onPopupVisibleChange} = this.props;
        if (onPopupVisibleChange) {
            onPopupVisibleChange(expanded);
        }
    }

    handleCheckboxChange = value => {
        let tree = this.state.tree;
        if (!('value' in this.props)) {
            const {
                options,
                fieldNames
            } = this.props;
            tree = new Tree(options, value, fieldNames);
            this.setState({
                value,
                tree,
                resultOptions: tree.getNormalizedOptions(value)
            });
        }

        const {
            onChange
        } = this.props;
        if (onChange) {
            onChange(value, tree.getOptions(value));
        }
    }

    handleOnHover = (option, columnIndex?, value?) => {
        const tree = this.state.tree;
        option = tree.getNormalizedOption(last(value), value);
        if (!option) {
            return;
        }
        this.loadData(option, value);
    }

    handleOnSelect = (option, columnIndex?, value?) => {
        const {
            multiple,
            changeOnSelect,
            onChange
        } = this.props;
        const tree = this.state.tree;
        option = tree.getNormalizedOption(last(value), value);
        if (!option) {
            return;
        }
        this.loadData(option, value);

        if (multiple) {
            return;
        }
        this.setState({
            query: ''
        });
        const existChildren = (option.children && option.children.length > 0) || option.isLeaf === false;
        const change = !multiple && (changeOnSelect || !existChildren);
        if (change && !('value' in this.props)) {
            this.setState({
                value,
                resultOptions: tree.getNormalizedOptions(value, true)
            });
        }
        if (change && onChange) {
            onChange(value, tree.getPathOptions(value));
        }
        if (!multiple && !existChildren) {
            this.toggleExpanded(false);
        }
    }

    handleOnSearch = query => {
        this.setState({
            query
        });
    }

    handleOnRemove = key => {
        const {
            tree,
            value
        } = this.state;
        this.handleCheckboxChange(tree.toggleChecked(key, value));
    }

    handleOnRemoveAll = () => {
        this.handleCheckboxChange([]);
        this.setState({
            query: ''
        });
    };

    private loadData(option, value) {
        const {
            tree
        } = this.state;
        const {
            loadOnSelect,
            loadData
        } = this.props;
        if (option.isLeaf === false
            && (!option.children || loadOnSelect)
            && loadData) {
            loadData(tree.getPathOptions(value));
            // 支持之前mutable操作
            this.setState({
                loadData: true
            });
        }
    }
}

export default Cascader;
