/**
 * @file 步骤条
 * @author huangshiming
 */
import React, {cloneElement, Children, Component, isValidElement} from 'react';
import {classnames} from '../../core/commonTools';
import Step from './step';
import {StepsProps} from './interface';
import {IconCheck, IconTimes} from 'dls-icons-react';
import {withConfigConsumer} from '../providerConfig/context';

function getStatus(stepIndex, stepStatus, currentIndex, currentStatus) {
    if (stepStatus) {
        return stepStatus;
    }
    if (stepIndex === currentIndex) {
        return currentStatus;
    }
    else if (stepIndex < currentIndex) {
        return 'finish';
    }
    return 'wait';
}

@withConfigConsumer('steps')
class Steps extends Component<StepsProps> {
    static Step: typeof Step;

    static defaultProps = {
        prefixCls: 'one-steps',
        current: 0,
        direction: 'horizontal',
        labelPlacement: 'horizontal',
        type: 'default',
        initialStep: 0,
        status: 'process',
        size: 'medium',
        showTipWhenHover: true
    }

    render() {
        const {
            prefixCls,
            style,
            className,
            children,
            direction,
            labelPlacement,
            showTipWhenHover,
            status,
            size,
            type,
            current,
            initialStep,
            onClickStep,
            onChange,
            theme,
            ...restProps
        } = this.props;
        const icons = {
            finish: <IconCheck className={`${prefixCls}-check`} />,
            error: <IconTimes className={`${prefixCls}-close`} />
        };
        const normalizedLabelPlacement = type === 'dot' ? 'vertical' : labelPlacement;
        const filteredChildren = React.Children.toArray(children).filter(child => !!child);
        const stepClxs = classnames(
            prefixCls,
            `${prefixCls}-${direction}`,
            `${prefixCls}-type-${type}`,
            className,
            {
                [`${prefixCls}-${size}`]: size,
                [`${prefixCls}-label-${normalizedLabelPlacement}`]: direction === 'horizontal'
            }
        );
        return (
            <div className={stepClxs} style={style} {...restProps}>
                {
                    Children.map(filteredChildren, (child, index) => {
                        if (!isValidElement(child)) {
                            return child;
                        }
                        const currentStepNumber = initialStep + index;
                        const childProps = {
                            stepNumber: `${currentStepNumber + 1}`,
                            prefixCls,
                            icons,
                            showTipWhenHover,
                            onClickStep,
                            onChange,
                            currentStep: currentStepNumber === current,
                            type,
                            ...child.props
                        };
                        const nextIndex = index + 1;
                        const nextChild = filteredChildren[nextIndex];
                        if (isValidElement(nextChild)) {
                            const nextStatus = getStatus(nextIndex, nextChild.props.status, current, status);
                            childProps.className = classnames(`${prefixCls}-next-${nextStatus}`, childProps.className);
                        }
                        if (!childProps.status) {
                            childProps.status = getStatus(index, childProps.status, current, status);
                        }
                        return cloneElement(child, childProps);
                    })
                }
            </div>
        );
    }
}

export default Steps;
