/**
 * @file transfer main
 * @author huangshiming
 * @date 2020-05-16
 */
import React, {PureComponent} from 'react';
import {uniq} from 'lodash';
import ResizeObserver from 'resize-observer-polyfill';
import CandidatePane, {CandidatePaneProps} from './common/candidatePane';
import SelectedPane, {SelectedPaneProps} from './common/selectedPane';
import {classnames} from '../../core/commonTools';
import CandidateTitle from './common/candidateTitle';
import SearchBoxRender, {CommonSearchProps} from './common/searchBoxRender';
import SelectedTitle from './common/selectedTitle';
import CandidateFooterRender from './common/candidateFooterRender';
import {
    getParentExpandedKeys,
    formatParentRelationMap,
    getCheckedKeyIsDisabled,
    getCheckedKeyIsDisabledByParentRelationMap,
    getCandidateNumber
} from '../../core/transferTools';
import {
    conductCheck
} from '../../core/treeTools';
import {TransferProps} from './interface';
import {walk} from '../../data/tree';
import {propChangeWarning} from '../../util/warning';
import {withConfigConsumer} from '../providerConfig/context';

interface TransferState {
    selectedList?: string[];
    expandedCandidateKeys?: string[];
    expandedSelectedKeys?: string[];
    parentRelationMap?;
    prevProps?: TransferProps;
    searchValue?: string;
    candidateHeight?: number;
    selectedHeight?: number;
    hasSearch?: boolean;
    isShowLevelSelect?: boolean;
    hasEdit?: boolean;
    allDataMap?;
    candidateList?: string[];
}

function normalizeDataSource(dataSource, candidateList) {
    const allDataMap = {};
    walk(dataSource, {
        enter(item) {
            const {
                key,
                children
            } = item;
            const data = {
                ...item
            };

            if (children) {
                data.children = children.map(o => o.key);
            }

            allDataMap[key] = data;
        }
    });
    return {
        allDataMap,
        candidateList: candidateList || dataSource.map(o => o.key)
    };
};

@withConfigConsumer('transfer')
class Transfer extends PureComponent<TransferProps, TransferState> {

    static defaultProps = {
        allDataMap: {},
        treeName: '',
        placeholder: '请搜索',
        className: '',
        candidateTreeStyle: {},
        selectedTreeStyle: {},
        maxSelectedNum: null,
        showCandidateFooter: false,
        candidateItemProps: {},
        selectedItemProps: {},
        showSelectedNum: true,
        showSearchBox: true,
        candidateFooterProps: {},
        isShowLevel: false,
        showCandidateNum: true,
        handleSelect: () => {},
        handleSelectAll: () => {},
        handleDelete: () => {},
        handleDeleteAll: () => {},
        handleSearch: () => {},
        onSearchChange: () => {},
        handleSelectedExpand: () => {},
        handleCandidateExpand: () => {},
        levelOptions: null,
        handleLevelChange: () => {},
        isShowLevelSelect: false,
        searchRenderProps: {},
        onSearchBoxFocus: () => {},
        onSearchBoxBlur: () => {},
        levelKey: null,
        showSelectAll: true,
        prefixCls: 'one-transfer',
        size: 'medium',
        useVirtualScroll: false,
        CustomCandidatePane: CandidatePane,
        CustomSelectedPane: SelectedPane,
        loading: false,
        loadingText: '加载中...',
        mergeChecked: 'downwards',
        candidateEmpty: '没有待选项',
        selectedEmpty: '请选择'
    };

    static CommonTitleRender;
    static CommonItemRender;
    static CommonSearchRender;
    static CommonFooterRender;

    resizeObserver = null;

    constructor(props) {
        super(props);
        propChangeWarning(
            'Transfer',
            props,
            {
                defaultSelectedList: 'defaultValue',
                selectedList: 'value'
            }
        );
        const selectedList = props.defaultValue || props.defaultSelectedList || [];
        const expandedCandidateKeys = props.defaultExpandedCandidateKeys || [];
        const expandedSelectedKeys = props.defaultExpandedSelectedKeys || [];
        const searchValue = props.defaultSearchValue || '';
        const candidateHeight = null;
        const selectedHeight = null;
        this.state = {
            selectedList: selectedList.map(selectedKey => `${selectedKey}`),
            expandedCandidateKeys,
            expandedSelectedKeys,
            prevProps: {},
            searchValue,
            candidateHeight,
            selectedHeight,
            candidateList: []
        };
    }

    candidatePaneRef;
    selectedPaneRef;
    candidateTreeRef;
    selectedTreeRef;

    componentDidMount() {
        const {useVirtualScroll} = this.props;
        if (!useVirtualScroll) {
            return;
        }

        const {candidatePaneRef, selectedPaneRef} = this;

        this.resizeObserver = new ResizeObserver(entries => {
            const newState: TransferState = {};

            entries.forEach(({target, contentRect}) => {
                if (target === candidatePaneRef) {
                    newState.candidateHeight = contentRect.height;
                }
                else if (target === selectedPaneRef) {
                    newState.selectedHeight = contentRect.height;
                }
            });
            this.setState(newState);
        });

        if (candidatePaneRef) {
            this.resizeObserver.observe(candidatePaneRef);
        }
        if (selectedPaneRef) {
            this.resizeObserver.observe(selectedPaneRef);
        }

        this.setState({
            candidateHeight: candidatePaneRef.offsetHeight,
            selectedHeight: selectedPaneRef.offsetHeight
        });
    }

    componentWillUnmount() {
        if (this.resizeObserver) {
            this.resizeObserver.disconnect();
            this.resizeObserver = null;
        }
    }

    static getDerivedStateFromProps = (nextProps, prevState) => {
        const prevProps = prevState.prevProps;
        if (nextProps === prevProps) {
            return null;
        }
        const newState: TransferState = {
            prevProps: nextProps
        };
        if ('selectedList' in nextProps && prevProps.selectedList !== nextProps.selectedList) {
            newState.selectedList = (nextProps.selectedList || []).map(key => String(key));
        }
        else if ('value' in nextProps && prevProps.value !== nextProps.value) {
            newState.selectedList = (nextProps.value || []).map(key => String(key));
        }
        if ('candidateList' in nextProps && prevProps.candidateList !== nextProps.candidateList) {
            newState.candidateList = nextProps.candidateList || [];
        }
        if ('expandedCandidateKeys' in nextProps
            && prevProps.expandedCandidateKeys !== nextProps.expandedCandidateKeys
        ) {
            newState.expandedCandidateKeys = nextProps.expandedCandidateKeys;
        }
        if ('expandedSelectedKeys' in nextProps
            && prevProps.expandedSelectedKeys !== nextProps.expandedSelectedKeys
        ) {
            newState.expandedSelectedKeys = nextProps.expandedSelectedKeys;
        }
        if ('dataSource' in nextProps && prevProps.dataSource !== nextProps.dataSource) {
            const {
                allDataMap,
                candidateList
            } = normalizeDataSource(nextProps.dataSource || [], nextProps.candidateList);
            newState.allDataMap = allDataMap;
            newState.candidateList = candidateList;
            newState.parentRelationMap = formatParentRelationMap(allDataMap);
        }
        else if (JSON.stringify(nextProps.allDataMap) !== JSON.stringify(prevProps.allDataMap)) {
            newState.parentRelationMap = formatParentRelationMap(nextProps.allDataMap);
            newState.allDataMap = nextProps.allDataMap;
        }
        if ('searchValue' in nextProps && prevProps.searchValue !== nextProps.searchValue) {
            newState.searchValue = nextProps.searchValue;
        }
        return newState;
    }

    getExpandedSelectedKeys(keys): string[] {
        const allDataMap = this.state.allDataMap;
        return uniq(keys.map(key => (allDataMap[key] ? allDataMap[key].key : key)));
    }

    mergeChecked(item, checkedKeys) {
        const type = this.props.mergeChecked;
        if (type === 'downwards') {
            return !item.children || item.children.length === 0;
        }
        else if (type === 'upwards') {
            const map = this.state.parentRelationMap;
            const parentKey = map[item.key];
            if (parentKey == null) {
                return true;
            }
            return !checkedKeys.includes(parentKey);
        }
        return true;
    }

    onCheck = (checkedKeys, info) => {
        const {
            handleSelect
        } = this.props;
        const allDataMap = this.state.allDataMap;
        const expandedSelectedKeys = [...this.state.expandedSelectedKeys];
        let newCheckedKeys = [];
        const candiateTreeState = this.candidateTreeRef.getTreeInterState();
        const {
            checkedKeys: oriCheckedKeys
        } = candiateTreeState;
        checkedKeys.forEach(key => {
            const disabled = getCheckedKeyIsDisabledByParentRelationMap(
                key,
                this.state.parentRelationMap,
                allDataMap
            ) && oriCheckedKeys.indexOf(`${key}`) === -1;
            const item = allDataMap[key];
            if (item
                && this.mergeChecked(item, checkedKeys)
                && !disabled) {
                newCheckedKeys.push(typeof item.key === 'number' ? +key : key);
            }
        });

        // 保留已选的disabled选项。TODO: 由Tree来实现
        newCheckedKeys.push(
            ...oriCheckedKeys.reduce(
                (keys, key) => {
                    const {
                        key: rawKey = key,
                        children
                    } = allDataMap[key] || {};

                    // 非叶子节点或者已选
                    if ((children && children.length > 0) || newCheckedKeys.includes(rawKey)) {
                        return keys;
                    }

                    const disabled = getCheckedKeyIsDisabledByParentRelationMap(
                        key,
                        this.state.parentRelationMap,
                        allDataMap
                    );
                    if (disabled) {
                        keys.push(rawKey);
                    }
                    return keys;
                }
                , [])
        );

        const {eventKey, keyEntities} = info;
        const newExpandSelectKeys = getParentExpandedKeys([eventKey], keyEntities);
        const remainSelectedList = this.state.selectedList.filter(key => !keyEntities[key]) || [];
        const event = {
            target: {
                key: eventKey
            }
        };
        newCheckedKeys = [...remainSelectedList, ...newCheckedKeys];
        const expandedKeys = this.getExpandedSelectedKeys([...newExpandSelectKeys, ...expandedSelectedKeys]);
        const newState: TransferState = {};
        if (!('selectedList' in this.props)) {
            newState.selectedList = newCheckedKeys;
        }
        if (!('expandedSelectedKeys' in this.props)) {
            newState.expandedSelectedKeys = expandedKeys;
        }
        this.setState(newState);

        const keys = this.normalizeCheckedKeys(newCheckedKeys);
        handleSelect(
            keys,
            allDataMap,
            expandedKeys,
            event
        );
        this.handleChange(keys);
    }
    onSelect = (selectedKeys, info) => {
        // 逻辑：
        // 1、如果点击的节点下，存在子节点没选中（去除disabled的），则该节点为选中
        // 2、如果点击的节点下，所有的子节点都选中（去除disabled的），则该节点为取消选中
        const allDataMap = this.state.allDataMap;
        const allChildrenKeys = getCandidateNumber(
            allDataMap,
            selectedKeys
        );
        const selectedList = this.state.selectedList;
        const unSelectedKeys = allChildrenKeys
            .map(key => `${key}`)
            .filter(key => selectedList.map(key => `${key}`).indexOf(key) === -1);
        const realUnSelectedKeys = (unSelectedKeys || []).filter(key => {
            return !getCheckedKeyIsDisabledByParentRelationMap(
                key,
                this.state.parentRelationMap,
                allDataMap
            );
        });
        if (realUnSelectedKeys.length) {
            // 存在没选中的，本次点击为选中节点
            this.onCheck(info.checkedKeys, info);
        }
        else {
            // 取消选中
            const realNeedCancelKeys = allChildrenKeys.filter(key => {
                return !getCheckedKeyIsDisabledByParentRelationMap(
                    key,
                    this.state.parentRelationMap,
                    allDataMap
                );
            });
            this.onCheck(info.checkedKeys.filter(key => {
                return realNeedCancelKeys.indexOf(key) === -1;
            }), info);
        }
    }
    onCandidateExpand = (expandedKeys, info) => {
        if (!('expandedCandidateKeys' in this.props)) {
            this.setState({
                expandedCandidateKeys: expandedKeys
            });
        }
        this.props.handleCandidateExpand(expandedKeys, info);
    }

    onSelectedExpand = (...args) => {
        const expandedKeys = this.getExpandedSelectedKeys(args[0]);
        if (!('expandedSelectedKeys' in this.props)) {
            this.setState({
                expandedSelectedKeys: expandedKeys
            });
        }
        this.props.handleSelectedExpand(expandedKeys);
    }

    onSelectedDelete = deleteKey => {
        const {
            handleDelete
        } = this.props;
        const allDataMap = this.state.allDataMap;
        const selectedList = [...this.state.selectedList];
        const deleteItem = allDataMap[deleteKey];
        const selectedTreeState = this.selectedTreeRef.getTreeInterState();
        const keyEntities = selectedTreeState.keyEntities;
        // disable状态不能删除
        if (getCheckedKeyIsDisabled(
            deleteKey,
            keyEntities,
            allDataMap
        )) {
            return;
        }
        let deleteKeys = [deleteKey];

        const mergeChildren = key => {
            const children = this.state.allDataMap[key]?.children;
            if (children && children.length > 0) {
                children.forEach(key => {
                    if (!selectedList.includes(`${key}`)) {
                        selectedList.push(`${key}`);
                    }
                    mergeChildren(key);
                });
            }
        };

        const mergeParent = key => {
            const parentKey = this.state.parentRelationMap[key];
            if (parentKey != null) {
                deleteKeys.push(parentKey);
                mergeParent(parentKey);
                if (selectedList.includes(parentKey)) {
                    mergeChildren(parentKey);
                }
            }
        };
        mergeParent(deleteKey);

        const conductDown = key => {
            const childItem = allDataMap[key];
            if (childItem && childItem.disabled) {
                return;
            }
            if (deleteKeys.indexOf(key) === -1) {
                deleteKeys.push(key);
            }
            if (childItem && childItem.children) {
                childItem.children.forEach(childKey => {
                    conductDown(childKey);
                });
            }
        };
        if (deleteItem && deleteItem.children) {
            deleteItem.children.forEach(child => {
                conductDown(child);
            });
        }
        const newSelectedList = (selectedList || [])
            .map(key => `${key}`)
            .filter(key => (deleteKeys || []).map(key => `${key}`).indexOf(key) === -1);
        if (!('selectedList' in this.props)) {
            this.setState({
                selectedList: newSelectedList
            });
        }
        const keys = this.normalizeCheckedKeys(newSelectedList);
        handleDelete(keys, allDataMap, deleteKey);
        this.handleChange(keys);
    };

    handleSearch = e => {
        this.setState({
            hasSearch: true
        });
        this.props.handleSearch(e);
    };

    onSearchChange = e => {
        const newState: TransferState = {
            hasEdit: true
        };
        if (!('searchValue' in this.props)) {
            newState.searchValue = e.target.value;
        }
        this.setState(newState);
        this.props.onSearchChange(e);
    };

    searchBoxFocus = e => {
        this.setState({
            isShowLevelSelect: true
        });
        this.props.onSearchBoxFocus(e);
    };

    searchBoxBlur = e => {
        const value = e.target.value;
        if (value.length <= 0 && this.state.hasEdit) {
            setTimeout(() => {
                this.setState({
                    isShowLevelSelect: false,
                    hasEdit: false
                });
                this.props.onSearchBoxBlur(e, this.state.isShowLevelSelect);
            }, 20);
        }
    };

    onSelectAll = () => {
        const {handleSelectAll} = this.props;
        const {candidateList, allDataMap} = this.state;
        const candiateTreeState = this.candidateTreeRef.getTreeInterState();
        const {
            keyEntities,
            checkedKeys: oriCheckedKeys,
            halfCheckedKeys: oriHalfCheckedKeys
        } = candiateTreeState;
        // candidateList为disabled且未被选中则需要过滤
        const newCandidateList = [];
        candidateList.forEach(candidateKey => {
            if (!(getCheckedKeyIsDisabledByParentRelationMap(
                candidateKey,
                this.state.parentRelationMap,
                allDataMap
            ) && oriCheckedKeys.indexOf(`${candidateKey}`) === -1)) {
                newCandidateList.push(candidateKey);
            }
        });
        const newCheckedKeysMap = conductCheck(newCandidateList, true, keyEntities, {
            checkedKeys: oriCheckedKeys, halfCheckedKeys: oriHalfCheckedKeys
        });
        let newCheckedKeys = ((newCheckedKeysMap && newCheckedKeysMap.checkedKeys) || [])
            .map(key => allDataMap[key] && allDataMap[key].key)
            .filter(key => {
                const disabled = getCheckedKeyIsDisabledByParentRelationMap(
                    key,
                    this.state.parentRelationMap,
                    allDataMap
                ) && oriCheckedKeys.indexOf(`${key}`) === -1;

                return !disabled && this.mergeChecked(allDataMap[key], newCheckedKeysMap.checkedKeys);
            });
        const newExpandSelectKeys = this.getExpandedSelectedKeys(getParentExpandedKeys(newCheckedKeys, keyEntities));
        const remainSelectedList = this.state.selectedList.filter(key => !keyEntities[key]) || [];
        newCheckedKeys = [...remainSelectedList, ...newCheckedKeys];
        if (!('selectedList' in this.props)) {
            this.setState({
                selectedList: newCheckedKeys
            });
        }
        if (!('expandedSelectedKeys' in this.props)) {
            this.setState({
                expandedSelectedKeys: newExpandSelectKeys
            });
        }
        const keys = this.normalizeCheckedKeys(newCheckedKeys);
        handleSelectAll(keys, allDataMap, newExpandSelectKeys);
        this.handleChange(keys);
    };

    // 先针对输出统一处理类型不一致问题, 后续再全面优化(TODO)
    normalizeCheckedKeys(checkedKeys) {
        const data = this.state.allDataMap;
        return checkedKeys.map(key => (data[key] ? data[key].key : key));
    }

    getCandidatePaneRef = ref => {
        this.candidatePaneRef = ref;
    };

    getSelectedPaneRef = ref => {
        this.selectedPaneRef = ref;
    };

    getCandidateTreeRef = ref => {
        this.candidateTreeRef = ref;
    };

    getSelectedTreeRef = ref => {
        this.selectedTreeRef = ref;
    };

    onDeleteAll = () => {
        const selectedTreeState = this.selectedTreeRef.getTreeInterState();
        const {
            handleDeleteAll
        } = this.props;
        const {
            allDataMap
        } = this.state;
        const selectedList = [...this.state.selectedList];
        const newSelected = [];
        const keyEntities = selectedTreeState.keyEntities;
        selectedList.forEach(key => {
            const entity = keyEntities[key];
            if (!entity) {
                return;
            }
            const disabled = getCheckedKeyIsDisabled(
                key,
                keyEntities,
                allDataMap
            );
            if (disabled) {
                newSelected.push(key);
                return;
            }
            return;
        });
        const newExpandSelectKeys = this.getExpandedSelectedKeys(getParentExpandedKeys(newSelected, keyEntities));
        if (!('selectedList' in this.props)) {
            this.setState({
                selectedList: newSelected
            });
        }
        if (!('expandedSelectedKeys' in this.props)) {
            this.setState({
                expandedSelectedKeys: newExpandSelectKeys
            });
        }
        const keys = this.normalizeCheckedKeys(newSelected);
        handleDeleteAll(keys, allDataMap, newExpandSelectKeys);
        this.handleChange(keys);
    };

    handleChange(keys) {
        const onChange = this.props.onChange;
        if (onChange) {
            onChange(keys);
        }
    }

    render() {
        const {
            prefixCls,
            className,
            size,
            candidateTreeStyle,
            selectedTreeStyle,
            showSearchBox,
            showCandidateFooter,
            placeholder,
            treeName,
            candidateFooterProps,
            CustomCandidatePane,
            CustomSelectedPane,
            BeforeCandidatePane,
            BeforeSelectedPane,
            levelOptions,
            handleLevelChange,
            isShowLevelSelect,
            levelKey,
            useVirtualScroll,
            style,
            display
        } = this.props;

        const transferClassName = classnames(
            `${prefixCls}`,
            `${prefixCls}-${size}`,
            `${className}`
        );

        const {
            selectedList,
            expandedCandidateKeys,
            candidateHeight,
            selectedHeight,
            searchValue,
            candidateList,
            allDataMap,
            parentRelationMap,
            expandedSelectedKeys
        } = this.state;

        const candidatePaneProps: CandidatePaneProps = {
            ...this.props,
            prefixCls,
            selectedList: (useVirtualScroll && !selectedHeight) ? [] : selectedList,
            candidateList: (useVirtualScroll && !candidateHeight) ? [] : candidateList,
            allDataMap,
            expandedCandidateKeys,
            size,
            onCheck: this.onCheck,
            onSelect: this.onSelect,
            onExpand: this.onCandidateExpand,
            candidateTreeRef: this.getCandidateTreeRef,
            parentRelationMap,
            virtualListHeight: candidateHeight,
            searchValue
        };

        const selectedPaneProps: SelectedPaneProps = {
            ...this.props,
            allDataMap,
            expandedSelectedKeys,
            selectedList: (useVirtualScroll && !selectedHeight) ? [] : selectedList,
            parentRelationMap,
            onExpand: this.onSelectedExpand,
            onDelete: this.onSelectedDelete,
            getSelectedTreeRef: this.getSelectedTreeRef,
            virtualListHeight: selectedHeight
        };
        const searchBoxProps = {
            value: searchValue,
            placeholder,
            onSearch: this.handleSearch,
            onChange: this.onSearchChange,
            onFocus: this.searchBoxFocus,
            onBlur: this.searchBoxBlur,
            onClearClick: this.onSearchChange,
            size
        };
        const searchRenderProps: CommonSearchProps = {
            levelOptions,
            handleLevelChange,
            searchBoxProps,
            isShowLevelSelect,
            levelKey,
            ...this.props.searchRenderProps,
            SearchBoxRender: this.props.SearchBoxRender
        };
        return (
            <div className={transferClassName} style={style}>
                {display === 'selected'
                    ? null
                    : (
                        <div
                            className={`${prefixCls}-select`}
                            style={candidateTreeStyle}
                        >
                            <CandidateTitle
                                {...this.props}
                                allDataMap={allDataMap}
                                candidateList={candidateList}
                                selectedList={selectedList}
                                onSelectAll={this.onSelectAll}
                            />
                            <div className={`${prefixCls}-select-main`}>
                                {
                                    showSearchBox
                                        ? <SearchBoxRender
                                            {...searchRenderProps}
                                        />
                                        : null
                                }
                                {
                                    typeof BeforeCandidatePane === 'function'
                                        ? <BeforeCandidatePane />
                                        : BeforeCandidatePane
                                }
                                <div
                                    className={classnames(
                                        `${prefixCls}-select-pane`,
                                        `${prefixCls}-candidate-pane`,
                                        {
                                            [`${prefixCls}-candidate-pane-loading`]: this.props.loading
                                        }
                                    )}
                                    ref={this.getCandidatePaneRef}
                                >
                                    {
                                        typeof CustomCandidatePane === 'function'
                                            ? <CustomCandidatePane {...candidatePaneProps} />
                                            : CustomCandidatePane
                                    }
                                </div>
                                {
                                    showCandidateFooter
                                        ? <CandidateFooterRender
                                            {...{treeName, candidateFooterProps}}
                                            size={size}
                                            prefixCls={prefixCls}
                                            candidateFooterRender={this.props.CandidateFooterRender}
                                        />
                                        : null
                                }
                            </div>
                        </div>
                    )
                }
                {display === 'candidate'
                    ? null
                    : (
                        <div className={`${prefixCls}-select`} style={selectedTreeStyle}>
                            <SelectedTitle
                                {...this.props}
                                selectedList={selectedList}
                                allDataMap={allDataMap}
                                onDeleteAll={this.onDeleteAll}
                                parentRelationMap={parentRelationMap}
                            />
                            <div className={`${prefixCls}-select-main`}>
                                {
                                    BeforeSelectedPane
                                        ? (
                                            typeof BeforeSelectedPane === 'function'
                                                ? <BeforeSelectedPane />
                                                : BeforeSelectedPane
                                        )
                                        : null
                                }
                                <div
                                    className={`${prefixCls}-select-pane`}
                                    ref={this.getSelectedPaneRef}
                                >
                                    {
                                        typeof CustomSelectedPane === 'function'
                                            ? <CustomSelectedPane {...selectedPaneProps} />
                                            : CustomSelectedPane
                                    }
                                </div>
                                {this.renderSeletedPaneFooter()}
                            </div>
                        </div>
                    )
                }
            </div>
        );
    }

    renderSeletedPaneFooter() {
        const {
            selectedPaneFooter,
            prefixCls
        } = this.props;
        if (!selectedPaneFooter) {
            return null;
        }
        const footer = typeof selectedPaneFooter === 'function' ? selectedPaneFooter() : selectedPaneFooter;
        return (
            <div className={`${prefixCls}-select-footer`}>{footer}</div>
        );
    }
};

export default Transfer;
