/**
 * @file 下拉弹层
 * @author huangshiming
 * @date 2020-05-04
 */
import React, {PureComponent} from 'react';
import {
    IconChevronUp,
    IconChevronDown
} from 'dls-icons-react';
import Button from '../button';
import InnerOverlay from './innerOverlay';
import {classnames} from '../../core/commonTools';
import {OverlayProps} from './interface';
import {withConfigConsumer} from '../providerConfig/context';

interface OverlayState {
    visible?: boolean;
    prevProps?: OverlayProps;
}

@withConfigConsumer('overlay')
class Overlay extends PureComponent<OverlayProps, OverlayState> {

    static defaultProps = {
        prefixCls: 'one-overlay',
        trigger: 'hover',
        disabled: false,
        header: '',
        onVisibleChange() {},
        dropdownMatchSelectWidth: true,
        buttonProps: {},
        transitionName: 'one-transition-slide-down'
    }

    constructor(props) {
        super(props);
        this.state = {
            visible: props.visible,
            prevProps: props
        };
    }

    static getDerivedStateFromProps(nextProps, prevState) {
        const newState: OverlayState = {
            prevProps: nextProps
        };
        if ('visible' in nextProps && nextProps.visible !== prevState.prevProps.visible) {
            newState.visible = nextProps.visible;
        }
        return newState;
    }

    onVisibleChange = visible => {
        if (!('visible' in this.props)) {
            this.setState({
                visible
            });
        }
        const onVisibleChange = this.props.onVisibleChange;
        if (onVisibleChange) {
            onVisibleChange(visible);
        }
    }


    renderHeader = prefixCls => {
        const {children, disabled, header, buttonProps} = this.props;
        const visible = this.state.visible;
        if (children) {
            return children;
        }
        const headerClassName = `${prefixCls}-header`;
        const classes = classnames(headerClassName, {
            [`${headerClassName}-open`]: visible,
            [`${headerClassName}-disabled`]: disabled
        });
        return (
            <span className={classes}>
                <Button
                    icon={visible ? <IconChevronUp /> : <IconChevronDown />}
                    disabled={disabled}
                    type="basic"
                    {...buttonProps}
                >
                    {header}
                </Button>
            </span>
        );
    }

    render() {
        const {
            prefixCls,
            ...restProps
        } = this.props;
        const children = this.renderHeader(prefixCls);
        const overlayProps = {
            ...restProps,
            visible: this.state.visible,
            onVisibleChange: this.onVisibleChange,
            prefixCls
        };

        const childrenClassName = classnames(((children.props && children.props.className) || ''), {
            [`${prefixCls}-open`]: !!this.state.visible,
            [`${prefixCls}-close`]: !this.state.visible
        });
        return (
            <InnerOverlay {...overlayProps}>
                {React.cloneElement(children, {className: childrenClassName})}
            </InnerOverlay>
        );
    }
};

export default Overlay;
export * from './interface';

