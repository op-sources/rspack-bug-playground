import React, {PureComponent} from 'react';
import InnerSubMenu from './common/subMenu';
import {classnames} from '../../core/commonTools';
import {SubMenuProps} from './interface';
import omit from 'omit.js';

const sizeArray = ['xsmall', 'small', 'medium', 'large', 'xlarge'];

class SubMenu extends PureComponent<SubMenuProps> {

    static defaultProps = {
        placements: {},
        popupClassName: '',
        size: 'medium',
        type: 'strong',
        prefixCls: 'one-menu'
    }

    static isSubMenu = true;

    render() {
        const {
            placements,
            mode,
            prefixCls,
            size,
            popupClassName,
            icon,
            title,
            className,
            type
        } = this.props;

        let alreadyHasSizeClassName = false;

        sizeArray.forEach(string => {
            if (popupClassName.indexOf(`${prefixCls}-submenu-${string}`) > -1) {
                alreadyHasSizeClassName = true;
                return false;
            }
        });

        const newTitleNode = [<span key="title-node">{title}</span>];
        const hasIcon = icon && React.isValidElement(icon);
        if (hasIcon) {
            newTitleNode.unshift(
                <span key="custom-icon" className={`${prefixCls}-submenu-custom-icon anchor`}>
                    {icon}
                </span>
            );
        }
        const props = {
            ...omit(this.props, ['placements', 'icon']),
            builtinPlacements: placements,
            popupClassName: classnames(popupClassName, {
                [`${prefixCls}-submenu-${size}`]: !!prefixCls && !alreadyHasSizeClassName,
                [`${prefixCls}-type-basic`]: type === 'basic'
            }),
            className: classnames(className, {
                [`${prefixCls}-submenu-has-icon`]: mode === 'inline' && hasIcon
            }),
            title: newTitleNode
        };

        return (
            <InnerSubMenu {...props} />
        );
    }
}

export default SubMenu;
