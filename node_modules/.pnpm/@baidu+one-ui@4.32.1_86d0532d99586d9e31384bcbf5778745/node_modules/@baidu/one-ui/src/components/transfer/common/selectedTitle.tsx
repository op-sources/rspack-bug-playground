/**
 * @file selected title
 * @author huangshiming
 * @date 2020-05-16
 */
import React, {MouseEvent} from 'react';
import Title from './title';
import Button, {ButtonProps, ButtonSize} from '../../button';
import {
    getCheckedKeyIsDisabledByParentRelationMap
} from '../../../core/transferTools';

interface SelectedTitleProps {
    prefixCls?: string,
    size?: ButtonSize,
    selectedList?: string[],
    treeName?: string,
    maxSelectedNum?: number,
    showSelectedNum?: boolean,
    onDeleteAll?(event: MouseEvent),
    showCandidateNum?,
    parentRelationMap?,
    allDataMap?,
    SelectedTitleRender?,
    SelectedTitleButtonRender?,
    CustomSelectedOperation?
};

const getSelectedNum = (allDataMap, selectedList) => {
    const list = [];
    const mergeChildren = children => {
        children.forEach(id => {
            const key = String(id);
            const children = allDataMap[key]?.children;
            const hasChildren = children && children.length;
            if (hasChildren) {
                mergeChildren(children);
            }
            if (!hasChildren && !list.includes(key)) {
                list.push(key);
            }
        });
    };
    mergeChildren(selectedList);
    return list.length;
};

const SelectedTitle = (props: SelectedTitleProps) => {
    const {
        prefixCls,
        size,
        selectedList,
        treeName,
        maxSelectedNum,
        showSelectedNum,
        onDeleteAll,
        showCandidateNum,
        parentRelationMap,
        allDataMap,
        SelectedTitleButtonRender,
        CustomSelectedOperation,
        SelectedTitleRender
    } = props;
    const selectedTitleProps = {
        ...props,
        prefixCls,
        treeName,
        title: '已选',
        selectedNum: getSelectedNum(allDataMap, selectedList || []),
        maxSelectedNum,
        showSelectedNum,
        showCandidateNum,
        SelectedTitleButtonRender
    };

    let titleRender;
    if (typeof SelectedTitleRender === 'function') {
        const CustomSelectedTitle = SelectedTitleRender;
        titleRender = <CustomSelectedTitle {...selectedTitleProps} />;
    }
    else if (SelectedTitleRender && typeof SelectedTitleRender === 'object') {
        titleRender = SelectedTitleRender;
    }
    else {
        titleRender = <Title {...selectedTitleProps} />;
    }
    let buttonDisabled = (selectedList || []).length <= 0;
    const disabledKeys = [];
    selectedList.forEach(key => {
        if (getCheckedKeyIsDisabledByParentRelationMap(
            key,
            parentRelationMap,
            allDataMap
        )) {
            disabledKeys.push(key);
        }
    });
    if (disabledKeys.length === selectedList.length
        && disabledKeys.length > 0) {
        buttonDisabled = true;
    }
    let buttonRender;
    const buttonProps: ButtonProps = {
        className: `${prefixCls}-delete-all`,
        onClick: onDeleteAll,
        type: 'text-strong',
        disabled: buttonDisabled,
        size
    };
    if (SelectedTitleButtonRender) {
        buttonRender = <SelectedTitleButtonRender {...buttonProps} />;
    }
    else if (CustomSelectedOperation) {
        buttonRender = CustomSelectedOperation;
    }
    else {
        buttonRender = (
            <Button {...buttonProps}>
                清空
            </Button>
        );
    }
    return (
        <div className={`${prefixCls}-pane-title`}>
            {titleRender}
            {buttonRender}
        </div>
    );
};

export default SelectedTitle;
