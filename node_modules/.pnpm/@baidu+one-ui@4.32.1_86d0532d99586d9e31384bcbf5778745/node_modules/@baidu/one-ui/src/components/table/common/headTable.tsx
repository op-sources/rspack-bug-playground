import React, {useContext} from 'react';
import BaseTable from './baseTable';
import {InnerTableColumnProps} from './interface';
import Context from './context';
import Loading from '../../loading';
import {omit} from 'lodash';
import classNames from 'classnames';

interface HeadTableProps {
    columns: InnerTableColumnProps,
    tableClassName: string,
    handleBodyScrollLeft,
    expander: object,
    refName: string,
    fixedStyle: object,
    onDragStart,
    onDraging,
    onDragEnd,
    onHeaderCellMouseEnter,
    onHeaderCellMouseLeave,
    updateWidthChange: boolean,
    useStickyFixTop: boolean,
}

export default function HeadTable(props: HeadTableProps) {
    const {table} = useContext(Context);
    const {
        prefixCls,
        scroll,
        showHeader,
        headerFixTop,
        loadingOption,
        headerBottom,
        loading
    } = table.props;
    const {
        columns,
        tableClassName,
        expander,
        onDragStart,
        onDraging,
        onDragEnd,
        onHeaderCellMouseEnter,
        onHeaderCellMouseLeave
    } = props;
    const {
        saveRef,
        containerWidth
    } = table;
    let {useFixedHeader} = table.props;
    const isFixedHeader = typeof headerFixTop === 'number' && headerFixTop != null;
    const refName = 'headTable';
    const headStyle = isFixedHeader
        ? {
            top: headerFixTop
        }
        : {};
    const showLoadBar = !loadingOption || loadingOption.type !== 'spinner';
    if (scroll.y
        || table.props.headerFixTop !== null
        || headerBottom
        || showLoadBar
    ) {
        useFixedHeader = true;
    }

    const headContent = (
        <div
            className={classNames(`${prefixCls}-header-container`, {
                [`${prefixCls}-sticky-header`]: isFixedHeader
            })}
            style={headStyle}
        >
            {!useFixedHeader || !showHeader
                ? null
                : (
                    <div
                        key={refName}
                        ref={saveRef(refName)}
                        className={`${prefixCls}-header`}
                    >
                        <BaseTable
                            tableClassName={tableClassName}
                            hasHead
                            hasBody={false}
                            fixedHeader={isFixedHeader || useFixedHeader}
                            columns={columns}
                            expander={expander}
                            onDragStart={onDragStart}
                            onDraging={onDraging}
                            onDragEnd={onDragEnd}
                            onHeaderCellMouseEnter={onHeaderCellMouseEnter}
                            onHeaderCellMouseLeave={onHeaderCellMouseLeave}
                        />
                    </div>
                )
            }
            {showLoadBar
                ? (
                    <div className={`${prefixCls}-loading-bar`}>
                        <Loading.Bar size="xsmall" loading={loading} {...omit(loadingOption, ['type'])} />
                    </div>
                )
                : null
            }
            {headerBottom
                ? (
                    <div className={`${prefixCls}-header-bottom`}>
                        {headerBottom}
                    </div>
                )
                : null
            }
        </div>
    );
    return headContent;
}

HeadTable.defaultProps = {
    refName: '',
    fixedStyle: {},
    onDragStart() {},
    onDraging() {},
    onDragEnd() {}
};
