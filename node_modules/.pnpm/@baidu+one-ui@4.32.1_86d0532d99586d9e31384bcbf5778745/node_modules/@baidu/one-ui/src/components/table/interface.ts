import {CSSProperties, HTMLAttributes, ReactElement, ReactNode, TdHTMLAttributes} from 'react';
import {DropdownProps} from '../dropdown/interface';
import {BaseProps} from '../interface';
import {PaginationProps} from '../pagination';

type TableColumnFilterItem = {
    /**
     * 标签
     */
    text: string,

    /**
     * 值
     */
    value: string,

    /**
     * 子选项
     */
    children?: TableColumnFilterItem[]
}

export interface TableColumnFilterProps {
    /**
     * 筛选项
     */
    filters?: TableColumnFilterItem[],

    /**
     * 筛选值
     */
    filteredValue?: string[],

    /**
     * 筛选
     */
    onFilter?: (value: string, record: Record<string, any>) => boolean,

    /**
     * 多选
     */
    filterMultiple?: boolean,

    /**
     * 下拉
     */
    filterDropdown?: ReactElement,

    /**
     * 下拉标题
     */
    filterDropdownTitle?: ReactNode,

    /**
     * 下拉是否展示
     */
    filterDropdownVisible?: boolean,

    /**
     * 下拉属性
     */
    filterDropdownProps?: DropdownProps,

    /**
     * 下拉展示切换
     * @param visible 展示
     */
    onFilterDropdownVisibleChange?: (visible: boolean) => void,

    /**
     * @deprecated 下拉icon
     */
    filterIcon?: ReactElement,

    /**
     * 下拉icon不展示
     */
    filterIconVisible?: boolean,

    /**
     * 下拉无确认按钮
     */
    filterWithoutConfirm?: boolean;
}

export type TableColumnFixed = 'left' | 'right' | boolean;
export type TableColumnSortOrder = 'ascend' | 'descend' | boolean;

export interface TableColumnProps extends TableColumnFilterProps {
    /**
     * key
     */
    key?: string,

    /**
     * 标题
     */
    title?: ReactNode,

    /**
     * 数据key
     */
    dataIndex?: string,

    /**
     * 渲染方法
     *
     * @param value 当前列值
     * @param record 当前行值
     * @param index 列索引
     */
    render?: (value: any, record: Record<string, any>, index: number) => (ReactNode | {props?: TdHTMLAttributes<HTMLTableCellElement>, children?: ReactNode}),

    /**
     * 是否可拖拽
     */
    draggable?: boolean;

    /**
     * 排序
     */
    sorter?: boolean | ((a, b) => number),

    /**
     * 列跨度
     */
    colSpan?: number,

    /**
     * 行跨度
     */
    rowSpan?: number,

    /**
     * 宽度
     */
    width?: string | number,

    /**
     * 是否固定宽度
     */
    fixedWidth?: boolean,

    /**
     * className
     */
    className?: string,

    /**
     * 固定
     */
    fixed?: 'left' | 'right' | boolean,

    /**
     * 排序方向
     */
    sortOrder?: 'ascend' | 'descend' | boolean,

    /**
     * 子列
     */
    children?: TableColumnProps[],

    /**
     * 单元格点击
     */
    onCellClick?: () => void,

    /**
     * 自定义操作
     */
    customOperate?: ReactNode[],

    /**
     * 自定义排序节点
     */
    customSortNode?: ReactNode,

    /**
     * 描述tip
     */
    desc?: ReactNode,

    /**
     * 对齐方式
     */
    align?: CSSProperties['textAlign'],

    /**
     * 内容单元格渲染时触发
     */
    onCell?: (record: Record<string, any>) => HTMLAttributes<HTMLTableCellElement>,

    /**
     * 列单元格渲染时触发
     */
    onHeaderCell?: (column: TableColumnProps) => HTMLAttributes<HTMLTableCellElement>,

    /**
     * 排序点击
     */
    toggleSortOrder?: (column: TableColumnProps) => void,
}

export interface TableColumnWidth extends TableColumnProps {
    width: number;
    minWidth: number;
    maxWidth: number;
    left: number;
};

export interface TableProps extends BaseProps {

    /**
     * 表格的数据
     */
    dataSource?: Record<string, any>[];

    /**
     * 表格的表头 详见demo
     */
    columns?: TableColumnProps[];

    /**
     * 自定义表格类名
     */
    prefixCls?: string;

    /**
     * 表格的分页器
     */
    pagination?: boolean | PaginationProps;

    /**
     * 表格行的key
     */
    rowKey?: string | ((record, index) => string);

    /**
     * 表格行的className
     */
    rowClassName?: string;

    /**
     * 字母表子表渲染
     */
    expandedRowRender?: any;

    /**
     * 默认展开的子表的key
     */
    defaultExpandedRowKeys?: Array<string | number>;

    /**
     * 展开的子表的key
     */
    expandedRowKeys?: Array<string | number>;

    /**
     * 展开按钮是否占一个单元格
     */
    expandIconAsCell?: boolean;

    /**
     * 展开字母表行变化的时候触发 Function(expandedRows)
     */
    onExpandedRowsChange?: (expandedRows) => void;

    /**
     * 点击展开/关闭字母表按钮时候触发
     */
    onExpand?: () => void;

    /**
     * 变体
     */
    variant?: 'basic' | 'normal';

    /**
     * 表格是否正在加载中
     */
    loading?: boolean;

    /**
     * loading属性(参考Loading.Bar)
     */
    loadingOption?: {
        /**
         * 条形(默认) | 转圈
         */
        type?: 'bar' | 'spinner',

        /**
         * 模态(默认true)
         */
        modal?: boolean,

        /**
         * 精确控制，不传则是模糊进度
         */
        value?: number
    };

    /**
     * 一些默认话术
     * filterTitle?: '筛选',
     * filterConfirm: '应用',
     *  filterClear: '清空',
     *  emptyText: '暂无数据'
    */
    locale?: {
        /**
         * 筛选
         */
        filterTitle: string;
        /**
         * 应用
         */
        filterConfirm: string;
        /**
         * 清空
         */
        filterClear: string;
        /**
         * 暂无数据
         */
        emptyText: ReactNode;
        /**
         * 全选当页
         */
        selectAll: string;
        /**
         * 反选当页
         */
        selectInvert: string;
        /**
         * 加载中...
         */
        loadingText: ReactNode;
    };

    /**
     * 表格单元格是否需要border
     */
    bordered?: boolean;

    /**
     * 是否展示表头
     */
    showHeader?: boolean;

    /**
     * 表头附加内容
     */
    headerBottom?: ReactNode;

    /**
     * 设置横向或纵向滚动，也可用于指定滚动区域的宽和高，可以设置为像素值，百分比, true { x: number | true, y: number }
     */
    scroll?: {
        x?: number | string;
        y?: number | string
    };

    /**
     * 选择功能
     * rowSelection = {
     * type: 'checkbox',  选择类型，「checkbox」和 「radio」
        selectedRowKeys,  指定选中项的 key 数组，需要和 onChange 进行配合
        getCheckboxProps: record => { getCheckboxProps 选择框的默认属性配置 Function(record)
            return {
                visible: false, // 隐藏
                disabled: (panelIsEditing || !record.campaignId)
            };
        },
        renderCheckbox: record => { // recode存在为row，否则为all
            return <Checkbox />;
        },
        onChange: this.props.onSelectChange 选中项发生变化时的回调 Function(selectedRowKeys, selectedRows)
        fixed 把选择框列固定在左边 boolean
    };    */
    rowSelection?: {

        /**
         * 多选 | 单选
         */
        type?: 'checkbox' | 'radio';

        /**
         * 选中的key
         */
        selectedRowKeys?: Array<string | number>;

        /**
         * 获取当前checkbox属性
         */
        getCheckboxProps?: (record: Record<string, any>) => {
            visible?: boolean, disabled?: boolean, indeterminate: boolean, defaultChecked: boolean
        };

        /**
         * 自定义当前checkbox，record为null代表表头
         */
        renderCheckbox?: (record: Record<string, any> | null, checkboxNode: ReactNode) => ReactElement;

        /**
         * 选择行时触发
         */
        onChange?: (selectedRowKeys: Array<string | number>, selectedRows: object[]) => void;

        /**
         * 固定列
         */
        fixed?: boolean;

        /**
         * 去掉默认的全选和反选
         */
        hideDefaultSelections?: boolean;

        /**
         * 自定义选择项 配置项, 设为 true 时使用默认选择项（全选和反选）
         */
        selections?: {key: string, text: ReactNode, onSelect(): void}[] | boolean;

        /**
         * 选择
         */
        onSelect?: (record: Record<string, any>, checked: boolean, selectedRows: object[]) => void;

        /**
         * 全选
         */
        onSelectAll?: (checked: boolean, selectedRows: object[], changeRows: object[]) => void;

        /**
         * 反选
         */
        onSelectInvert?: (selectedRowKeys: Array<string | number>) => void;
    };

    /**
     * 自定义表格区域 style
     */
    bodyStyle?: CSSProperties;

    /**
     * 筛选dropdown 样式
     */
    dropdownPrefixCls?: string;

    /**
     * 当存在排序icon时候，点击触发函数
     * 非排序态，sortColumn为null
     */
    onSortClick?: (e: {sortOrder: '' | 'descend' | 'ascend', sortColumn: null | TableColumnProps}) => void;

    /**
     * 筛选改变时触发
     */
    onFilterChange?: (filters: {[key: string]: string | number}) => void;

    /**
     * 字母表的expand的icon类名
     */
    expandIconClassName?: string;

    /**
     * 点击expand的icon触发的函数
     */
    onClickExpandIcon?: () => void;

    /**
     * 尺寸
     */
    size?: 'small' | 'medium';

    /**
     * 类型：正常型表, 宽松型, 紧凑型
     */
    type?: 'normal' | 'loose' | 'compact';

    /**
     * 开始拖拽触发
     */
    onDragStart?: (e?: {inner: {showLine: true}}) => void;

    /**
     * 拖拽中触发
     */
    onDraging?: (e?: {
        allColumnWidth: TableColumnWidth[];
        curColumn: {
            fixed: 'left' | 'right';
            key: string;
            width: number
        },
        inner: {
            curKeyLeft: number;
            dynamicWidth: number
        }
    }) => void,

    /**
     * 拖拽完后触发
     */
    onDragEnd?: (allColumnWidth: TableColumnWidth[]) => void;

    /**
     * 表格增加边框
     */
    headBordered?: boolean;

    /**
     * forceUpdate when table width change
     */
    updateWidthChange?: boolean;

    /**
     * 使用sticky方式进行吸顶
     */
    useStickyFixTop?: boolean;

    /**
     * 自动隐藏相关操作, 鼠标hover列头才展示
     */
    autoHideOperation?: 'all' | 'filter' | 'sort';

    /**
     * 固定每行内容行数
     */
    cellLines?: 1 | 2;

    /**
     * 固定表头每行内容行数
     */
    headCellLines?: 1 | 2;

    /**
     * 展开Icon所在列的索引
     */
    expandIconColumnIndex?: number;

    /**
     * 固定头部相对窗口顶部位置
     */
    headerFixTop?: number;

    /**
     * 横向滚动条沉底
     */
    bottomScroll?: {
        bottom: number;
        style?: CSSProperties
    };

    /**
     * @deprecated 使用scroll代替
     */
    useFixedHeader?: boolean;

    /**
     * @deprecated
     * @internal
     */
    saveRef?: any;
};