import React, {Component} from 'react';
import {connect} from 'mini-store';
import TableRow from './tableRow';
import {remove, classnames} from '../../../core/commonTools';
import shallowequal from 'shallowequal';
import {isEqual} from 'lodash';

interface ExpandableTableProps {
    expandIconAsCell: boolean,
    defaultExpandAllRows: boolean,
    defaultExpandedRowKeys: string[],
    expandedRowKeys: string[],
    expandedRowClassName(record, index, indent),
    expandedRowRender(record, index, nextIndent, expanded),
    childrenColumnName: string,
    indentSize: number,
    onExpand(expanded, record),
    onExpandedRowsChange(expandedRowKeys: string[]),
    columnManager: object,
    store: object,
    prefixCls: string,
    data: [],
    children(props),
    getRowKey(),
    expandIconClassName: string,
    onClickExpandIcon()
}

class ExpandableTable extends Component<ExpandableTableProps> {

    static defaultProps = {
        expandIconAsCell: false,
        expandedRowClassName: () => '',
        defaultExpandAllRows: false,
        defaultExpandedRowKeys: [],
        childrenColumnName: 'children',
        indentSize: 20,
        onExpand() {},
        onExpandedRowsChange() {},
        expandIconClassName: ''
    };

    columnManager;
    store;

    constructor(props) {
        super(props);

        const {
            data,
            childrenColumnName,
            defaultExpandAllRows,
            expandedRowKeys,
            defaultExpandedRowKeys,
            getRowKey
        } = props;

        let finnalExpandedRowKeys = [];
        let rows = [...data];

        if (defaultExpandAllRows) {
            for (let i = 0; i < rows.length; i++) {
                const row = rows[i];
                finnalExpandedRowKeys.push(getRowKey(row, i));
                rows = rows.concat(row[childrenColumnName] || []);
            }
        }
        else {
            finnalExpandedRowKeys = expandedRowKeys || defaultExpandedRowKeys;
        }

        this.columnManager = props.columnManager;
        this.store = props.store;

        this.store.setState({
            expandedRowKeys: finnalExpandedRowKeys
        });
    }

    componentDidUpdate() {
        if ('expandedRowKeys' in this.props) {
            this.store.setState({
                expandedRowKeys: this.props.expandedRowKeys
            });
        }
    }

    shouldComponentUpdate(nextProps) {
        return !shallowequal(nextProps, this.props, (a, b, key) => {
            if (key === 'data' || key === 'expandedRowKeys') {
                return isEqual(a, b);
            }
        });
    }

    handleExpandChange = (expanded, record, event, rowKey, destroy = false) => {
        if (event) {
            event.preventDefault();
            event.stopPropagation();
        }

        const {onExpandedRowsChange, onExpand} = this.props;
        let {expandedRowKeys} = this.store.getState();

        if (expanded) {
            // row was expaned
            expandedRowKeys = [...expandedRowKeys, rowKey];
        }
        else {
            // row was collapse
            const expandedRowIndex = expandedRowKeys.indexOf(rowKey);
            if (expandedRowIndex !== -1) {
                expandedRowKeys = remove(expandedRowKeys, rowKey);
            }
        }

        if (!this.props.expandedRowKeys) {
            this.store.setState({expandedRowKeys});
        }

        onExpandedRowsChange(expandedRowKeys);
        if (!destroy) {
            onExpand(expanded, record);
        }
    };

    renderExpandIndentCell = (rows, fixed) => {
        const {prefixCls, expandIconAsCell, expandIconClassName, onClickExpandIcon} = this.props;
        if (!expandIconAsCell || fixed === 'right' || !rows.length) {
            return;
        }
        const iconClassName = classnames(expandIconClassName, `${prefixCls}-expand-icon-th`, {
            [`${prefixCls}-head-cell-sticky-left`]: fixed === 'left'
        });
        const iconColumn = {
            key: 'one-table-expand-icon-cell',
            className: iconClassName,
            title: '',
            rowSpan: rows.length,
            onClick: onClickExpandIcon,
            fixed
        };

        rows[0][0] = ({...iconColumn, column: iconColumn});
    };

    renderExpandedRow(record, index, render, className, ancestorKeys, indent, fixed) {
        const {prefixCls, indentSize, expandIconAsCell} = this.props;
        const parentKey = ancestorKeys[ancestorKeys.length - 1];
        const rowKey = `${parentKey}-extra-row`;
        let colCount;
        if (fixed === 'left') {
            colCount = this.columnManager.leftLeafColumns().length;
        }
        else if (fixed === 'right') {
            colCount = this.columnManager.rightLeafColumns().length;
        }
        else {
            colCount = this.columnManager.leafColumns().length;
        }
        const {expandedRowKeys} = this.store.getState();
        // eslint-disable-next-line no-bitwise
        const expanded = !!~expandedRowKeys.indexOf(parentKey);
        const rowRender = render(record, index, indent, expanded);
        const columns = [
            {
                key: 'extra-row',
                render: () => {
                    return {
                        props: {
                            colSpan: colCount + 1
                        },
                        children: fixed !== 'right' && rowRender ? rowRender : '&nbsp;'
                    };
                }
            }
        ];
        if (expandIconAsCell && fixed !== 'right') {
            columns.unshift({
                key: 'expand-icon-placeholder',
                render: () => null
            });
        }

        return (
            <TableRow
                key={rowKey}
                columns={columns}
                className={className}
                rowKey={rowKey}
                ancestorKeys={ancestorKeys}
                prefixCls={`${prefixCls}-expanded-row`}
                indentSize={indentSize}
                indent={indent}
                fixed={fixed}
                expandedRow
            />
        );
    }

    renderRows = (renderRows, rows, record, index, indent, fixed, parentKey, ancestorKeys) => {
        const {expandedRowClassName, expandedRowRender, childrenColumnName} = this.props;
        const childrenData = record[childrenColumnName];
        const nextAncestorKeys = [...ancestorKeys, parentKey];
        const nextIndent = indent + 1;
        const {expandedRowKeys} = this.store.getState();
        // eslint-disable-next-line no-bitwise
        const expanded = !!~expandedRowKeys.indexOf(parentKey);
        const rowRender = expandedRowRender && expandedRowRender(record, index, nextIndent, expanded);
        if (expandedRowRender && rowRender) {
            rows.push(
                this.renderExpandedRow(
                    record,
                    index,
                    expandedRowRender,
                    expandedRowClassName(record, index, indent),
                    nextAncestorKeys,
                    nextIndent,
                    fixed,
                ),
            );
        }

        if (childrenData) {
            rows.push(...renderRows(childrenData, nextIndent, nextAncestorKeys));
        }
    };

    render() {
        const {data, childrenColumnName, children} = this.props;
        const needIndentSpaced = data.some(record => record[childrenColumnName]);

        return children({
            props: this.props,
            needIndentSpaced,
            renderRows: this.renderRows,
            handleExpandChange: this.handleExpandChange,
            renderExpandIndentCell: this.renderExpandIndentCell
        });
    }
}

export default connect()(ExpandableTable);
