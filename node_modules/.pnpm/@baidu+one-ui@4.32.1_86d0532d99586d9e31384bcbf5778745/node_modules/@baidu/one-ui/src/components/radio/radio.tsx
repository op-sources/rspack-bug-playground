/**
 * @file 单选
 * @author shanqianmin
 * @date 2018/08/23
 */

import React, {PureComponent} from 'react';
import {classnames} from '../../core/commonTools';
import CommonCheckbox from '../checkbox/common/commonCheckbox';
import Context from './context';
import {RadioProps} from './interface';
import Group from './group';
import Button from './button';
import {withConfigConsumer} from '../providerConfig/context';

@withConfigConsumer('radio')
class Radio extends PureComponent<RadioProps> {

    static defaultProps = {
        direction: 'row',
        prefixCls: 'one-radio'
    };

    static Group: typeof Group;
    static Button: typeof Button;

    refCheckbox;

    saveCheckbox = node => {
        this.refCheckbox = node;
    };

    focus() {
        this.refCheckbox.focus();
    }

    blur() {
        this.refCheckbox.blur();
    }

    render() {
        return (
            <Context.Consumer>
                {context => this.renderRadio(context)}
            </Context.Consumer>
        );
    }

    renderRadio(context) {
        const props = this.props;
        const {
            prefixCls,
            className,
            children,
            style,
            direction,
            type,
            size,
            ...restProps
        } = props;
        const radioGroup = context;
        const radioProps = {...restProps};
        if (radioGroup) {
            const {value, disabled} = radioGroup;
            radioProps.name = radioGroup.name;
            radioProps.onChange = radioGroup.onChange;
            radioProps.checked = value != null ? props.value === value : props.checked;
            radioProps.disabled = props.disabled || disabled;
        }
        const {checked, disabled} = radioProps;
        const wrapperClassString = classnames(className, `${prefixCls}-wrapper-${size}`, {
            [`${prefixCls}-wrapper`]: true,
            [`${prefixCls}-wrapper-checked`]: checked,
            [`${prefixCls}-wrapper-disabled`]: disabled,
            [`${prefixCls}-wrapper-checked-disabled`]: checked && disabled,
            [`${prefixCls}-wrapper-${direction}`]: direction,
            [`${prefixCls}-wrapper-${type}`]: type
        });

        return (
            <label
                className={wrapperClassString}
                style={style}
                onMouseEnter={props.onMouseEnter}
                onMouseLeave={props.onMouseLeave}
            >
                <CommonCheckbox
                    {...radioProps}
                    prefixCls={prefixCls}
                    ref={this.saveCheckbox}
                    type="radio"
                />
                {children != null ? <span>{children}</span> : null}
            </label>
        );
    }
}
export default Radio;