/**
 * @file transfer candidate pane
 * @author huangshiming
 * @date 2020-05-16
 */
import React, {PureComponent, ReactNode} from 'react';
import Tree from '../../tree/tree';
import VirtualTreeNode from '../../tree/common/virtualTreeNode';
import TreeNode from '../../tree/common/treeNode';
import CandidateItemRender from './itemRender';
import Tooltip from '../../tooltip';
import Loading from '../../loading';
import {TreeNodeProps, TreeProps} from '../../tree';
import {TransferProps} from '../interface';
import Message from '../../message';
import Stack from '../../stack';

export interface CandidatePaneProps extends Pick<TreeProps, 'onExpand' | 'onSelect' | 'onCheck'> {
    candidateList?: string[],
    prefixCls?: string,
    allDataMap?: object,
    loading?: boolean,
    loadingText?: ReactNode,
    maxSelectedNum?,
    selectedList?,
    hasSearch?,
    searchValue?,
    candidateItemProps?,
    CandidateItem?,
    isShowLevel?,
    parentRelationMap?,
    virtualListHeight?,
    expandedCandidateKeys?,
    size?,
    candidateTreeRef?,
    onCandidateScroll?,
    loadData?: TransferProps['loadData'],
    candidateEmpty?: ReactNode
};

class CandidatePane extends PureComponent<CandidatePaneProps> {

    getLevelText = (text, id, parentRelationMap, allDataMap) => {
        if (parentRelationMap[id] == null) {
            return text;
        }
        text.unshift(allDataMap[parentRelationMap[id]].title);
        return this.getLevelText(text, parentRelationMap[id], parentRelationMap, allDataMap);
    };

    renderNode(key) {
        const {
            prefixCls,
            allDataMap,
            maxSelectedNum,
            selectedList,
            hasSearch,
            searchValue,
            candidateItemProps,
            CandidateItem,
            isShowLevel,
            parentRelationMap,
            virtualListHeight
        } = this.props;
        const CustomTreeNode = virtualListHeight ? VirtualTreeNode : TreeNode;
        const candidateItem = allDataMap[key] || {};
        const {
            key: treeNodeKey,
            isLeaf,
            disabled,
            loading,
            children
        } = candidateItem;
        let isOverMaxNum = false;
        if (maxSelectedNum && (selectedList.length >= maxSelectedNum)) {
            isOverMaxNum = true;
        }
        const candidateProps = {
            ...candidateItem,
            hasSearch,
            searchValue,
            prefixCls,
            itemKey: treeNodeKey,
            ...candidateItemProps,
            CandidateItem
        };
        let renderItem;
        let relationText = '';
        if (isShowLevel) {
            const textArray = this.getLevelText([], key, parentRelationMap, allDataMap);
            relationText = textArray.length > 0 ? `(${textArray.join('>')})` : '';
        }
        candidateProps.relationText = relationText;
        if (CandidateItem && typeof CandidateItem === 'function') {
            const CustomCandidateItemRender = CandidateItem;
            renderItem = <CustomCandidateItemRender {...candidateProps} />;
        }
        else if (CandidateItem && typeof CandidateItem === 'object') {
            renderItem = CandidateItem;
        }
        else {
            renderItem = <CandidateItemRender {...candidateProps} />;
        }

        const treeNodeProps: TreeNodeProps = {
            disabled: isOverMaxNum || disabled,
            disableCheckbox: isOverMaxNum || disabled,
            checkable: true,
            isLeaf,
            loading,
            title: isOverMaxNum ? (
                <Tooltip
                    title="数量已达上限，请删除后添加"
                    placement="rightBottom"
                    mouseEnterDelay={0}
                    mouseLeaveDelay={0}
                >
                    {renderItem}
                </Tooltip>
            ) : renderItem
        };
        if (children) {
            return (
                <CustomTreeNode
                    {...treeNodeProps}
                    key={treeNodeKey}
                >
                    {this.candidateNodeTrees(children)}
                </CustomTreeNode>
            );
        }
        return (
            <CustomTreeNode
                {...treeNodeProps}
                key={treeNodeKey}
            />
        );
    }

    candidateNodeTrees(candidateList) {
        return candidateList.map(key => this.renderNode(key));
    };

    loadData = (node, key: string, type: 'expand' | 'check' | 'select'): Promise<void> => {
        const {
            allDataMap,
            loadData
        } = this.props;
        const parent = allDataMap[key];
        const trigger = type === 'select' ? 'check' : type;
        return loadData({
            parent,
            scope: trigger === 'expand' ? 'children' : 'descendants',
            trigger
        });
    };

    render() {
        const {
            prefixCls,
            selectedList,
            candidateList,
            expandedCandidateKeys,
            size,
            onCheck,
            onSelect,
            onExpand,
            candidateTreeRef,
            virtualListHeight,
            loading,
            loadingText,
            onCandidateScroll,
            loadData,
            candidateEmpty
        } = this.props;
        const treeProps: TreeProps = {
            expandedKeys: expandedCandidateKeys,
            selectedKeys: [],
            checkedKeys: [...selectedList],
            checkable: true,
            selectable: true,
            size,
            className: `${prefixCls}-candidate-tree`,
            onCheck: onCheck,
            onSelect: onSelect,
            onExpand: onExpand,
            checkActionEqualSelet: true,
            parentContainerHeight: virtualListHeight || null,
            onScroll: onCandidateScroll
        };
        if (loadData) {
            treeProps.loadData = this.loadData;
        }
        const content = candidateList.length
            ? (
                <Tree {...treeProps} ref={candidateTreeRef} key="candidate-tree">
                    {this.candidateNodeTrees(candidateList)}
                </Tree>
            )
            : (
                <Stack justify="center" className={`${prefixCls}-empty`}>
                    <Message type="aux" display="simple" size={size}>{candidateEmpty}</Message>
                </Stack>
            );
        return (
            <Loading tip={loadingText} size={size} loading={loading}>
                {content}
            </Loading>
        );
    }
}

export default CandidatePane;

