import React, {isValidElement, PureComponent} from 'react';
import Trigger from 'rc-trigger';
import ReactDOM from 'react-dom';
import placements from './placements';
import Button from '../../button';
import classNames from 'classnames';
import omit from 'omit.js';
import {DropdownProps} from '../interface';

interface InnerDropdownProps extends DropdownProps {
    alignPoint: boolean;
}

class Dropdown extends PureComponent<InnerDropdownProps, {visible: boolean}> {

    static defaultProps = {
        trigger: 'hover',
        defaultVisible: false,
        onVisibleChange: () => {},
        placement: 'bottomLeft'
    }

    constructor(props) {
        super(props);
        const visible = this.props.visible || this.props.defaultVisible;
        this.state = {
            visible
        };
    }

    static getDerivedStateFromProps = nextProps => {
        if ('visible' in nextProps) {
            return {
                visible: nextProps.visible
            };
        }
        return null;
    }

    trigger;

    saveTrigger = node => {
        this.trigger = node;
    };

    getPopupDomNode = () => {
        return this.trigger.getPopupDomNode();
    }

    afterVisibleChange = visible => {
        if (visible && this.getMinOverlayWidthMatchTrigger()) {
            const overlayNode = this.getPopupDomNode();
            const rootNode = ReactDOM.findDOMNode(this) as HTMLElement;
            if (rootNode && overlayNode && rootNode.offsetWidth > overlayNode.offsetWidth) {
                overlayNode.style.minWidth = `${rootNode.offsetWidth}px`;
                if (this.trigger && this.trigger._component && this.trigger._component.alignInstance) {
                    this.trigger._component.alignInstance.forceAlign();
                }
            }
        }
    }

    onClick = e => {
        // do no call onVisibleChange, if you need click to hide, use onClick and control visible
        if (!('visible' in this.props)) {
            this.setState({
                visible: false
            });
        }
        const {
            overlay
        } = this.props;
        if (!isValidElement(overlay)) {
            return;
        }
        const overlayProps = overlay.props;
        if (overlayProps.onClick) {
            overlayProps.onClick(e);
        }
    };

    getMenuElement = () => {
        const {
            overlay,
            prefixCls
        } = this.props;

        if (!isValidElement(overlay)) {
            return overlay;
        }

        const extraOverlayProps = {
            prefixCls: `${prefixCls}-menu`,
            onClick: this.onClick
        };

        if (typeof overlay.type === 'string') {
            delete extraOverlayProps.prefixCls;
        }

        return React.cloneElement(overlay, extraOverlayProps);
    };

    getPopup() {
        return (
            <>
                {this.renderTitle()}
                {this.getMenuElement()}
                {this.renderFooter()}
            </>
        );
    }

    renderTitle() {
        const {
            title,
            header,
            prefixCls
        } = this.props;
        if (!title && !header) {
            return null;
        }
        return <div className={`${prefixCls}-header`}>{title || header}</div>;
    }

    renderFooter() {
        const {
            prefixCls,
            showConfirm,
            onOk,
            okText,
            okProps,
            onCancel,
            cancelText,
            cancelProps,
            size,
            footer
        } = this.props;
        let content = footer;
        if (showConfirm) {
            content = (
                <>
                    <Button size={size} type="text-strong" {...okProps} onClick={this.handleOnOk}>{okText}</Button>
                    <Button size={size} type="text" {...cancelProps} onClick={this.handleOnCancel}>{cancelText}</Button>
                </>
            );
        }

        if (!content) {
            return null;
        }
        return (<div className={`${prefixCls}-footer`}>{content}</div>);
    }

    handleOnOk = e => {
        this.onVisibleChange(false);
        const onOk = this.props.onOk;
        if (onOk) {
            onOk(e);
        }
    };

    handleOnCancel = e => {
        this.onVisibleChange(false);
        const onCancel = this.props.onCancel;
        if (onCancel) {
            onCancel(e);
        }
    }

    onVisibleChange = visible => {
        if (!('visible' in this.props)) {
            this.setState({
                visible
            });
        }
        this.props.onVisibleChange(visible);
    };

    getMinOverlayWidthMatchTrigger = () => {
        const {
            minOverlayWidthMatchTrigger,
            alignPoint
        } = this.props;
        if ('minOverlayWidthMatchTrigger' in this.props) {
            return minOverlayWidthMatchTrigger;
        }
        return !alignPoint;
    };

    render() {
        const {
            prefixCls,
            children,
            transitionName,
            placement,
            getPopupContainer,
            overlayClassName,
            overlayStyle,
            trigger,
            size,
            transparent,
            ...otherProps
        } = this.props;
        const triggerProps = omit(otherProps, [
            'dropdownMatchSelectWidth',
            'title',
            'showConfirm',
            'onOk',
            'okText',
            'okProps',
            'onCancel',
            'cancelText',
            'cancelProps'
        ]);
        let triggerHideAction;
        if (!triggerHideAction && trigger.indexOf('contextMenu') !== -1) {
            triggerHideAction = ['click'];
        }
        return (
            <Trigger
                {...triggerProps}
                prefixCls={prefixCls}
                ref={this.saveTrigger}
                popupClassName={
                    classNames(`${prefixCls}-${size}`, overlayClassName, {
                        [`${prefixCls}-transparent`]: transparent
                    })
                }
                popupAlign={{ignoreShake: true}}
                popupStyle={overlayStyle}
                builtinPlacements={placements}
                action={trigger}
                hideAction={triggerHideAction || []}
                popupPlacement={placement}
                popupTransitionName={transitionName}
                popupVisible={this.state.visible}
                afterPopupVisibleChange={this.afterVisibleChange}
                popup={this.getPopup()}
                onPopupVisibleChange={this.onVisibleChange}
                getPopupContainer={getPopupContainer}
            >
                {children}
            </Trigger>
        );
    }

}

export default Dropdown;
