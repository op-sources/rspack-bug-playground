import React, {PureComponent} from 'react';
import {classnames} from '../../core/commonTools';
import {
    IconChevronLeft,
    IconChevronRight,
    IconEllipsis
} from 'dls-icons-react';
import Select from '../select';
import Button, {ButtonProps} from '../button';
import Input from '../input';
import Tooltip from '../tooltip';
import {PaginationProps} from './interface';
import {withConfigConsumer} from '../providerConfig/context';
import {noop} from 'lodash';

interface PaginationState {
    pageSize?: number;
    pageNo?: number;
    total?: number;
    lastPage?: number;
    searchValue?: string;
};

const SelectOption = Select.Option;

const isInteger = value => {
    return typeof value === 'number' && isFinite(value) && Math.floor(value) === value;
};

const calculatePage = (pageSize, total) => {
    return Math.floor((total - 1) / pageSize) + 1;
};


@withConfigConsumer('pagination')
class Pagination extends PureComponent<PaginationProps, PaginationState> {
    static defaultProps = {
        prefixCls: 'one-pagination',
        selectPrefixCls: 'one-select',
        pageSizeOptions: [20, 50, 100],
        total: 0,
        defaultPageSize: 20,
        defaultPageNo: 1,
        size: 'medium',
        className: '',
        onPageNoChange: noop,
        onPageSizeChange: noop,
        hideOnSinglePage: false,
        showSizeChange: true,
        showPageJumper: true,
        showTotal: false
    };

    constructor(props) {
        super(props);
        const pageSize = props.pageSize || props.defaultPageSize;
        const total = props.total;
        this.state = {
            pageSize,
            pageNo: props.pageNo || props.defaultPageNo,
            total,
            lastPage: calculatePage(pageSize, total),
            searchValue: ''
        };
    }

    static getDerivedStateFromProps = (nextProps: PaginationProps, prevState: PaginationState) => {
        const newState: PaginationState = {};
        if ('pageNo' in nextProps && nextProps.pageNo !== prevState.pageNo) {
            newState.pageNo = nextProps.pageNo;
        }
        if ('pageSize' in nextProps && nextProps.pageSize !== prevState.pageSize) {
            const pageSize = nextProps.pageSize;
            const newPage = calculatePage(pageSize, prevState.total);
            if (!('pageNo' in nextProps)) {
                // 统一为页码更改，非受控情况下，页码跳转回第一页 (pageSize受控，pageNo不受控)
                newState.pageNo = 1;
            }
            newState.lastPage = newPage;
            newState.pageSize = pageSize;
        }
        if ('total' in nextProps && nextProps.total !== prevState.total) {
            const total = nextProps.total;
            const pageSize = newState.pageSize || prevState.pageSize;
            const newPage = calculatePage(pageSize, total);
            if (!('pageNo' in nextProps)) {
                newState.pageNo = 1;
            }
            newState.lastPage = newPage;
            newState.total = total;
        }
        return newState;
    }

    getOptionByList = () => {
        const pageSizeOptions = this.props.pageSizeOptions;
        const options = [];
        pageSizeOptions.forEach(option => {
            options.push({
                value: Number(option),
                label: option
            });
        });
        return options;
    }

    isValidPage = page => {
        return isInteger(page) && page >= 1 && page !== this.state.pageNo;
    }

    handlePageSizeChange = pageSize => {
        const size = +pageSize;
        const newPage = calculatePage(size, this.state.total);
        const newState:PaginationState = {};
        if (!('pageSize' in this.props)) {
            newState.pageSize = size;
        }
        if (!('pageNo' in this.props)) {
            // 统一为页码更改，非受控情况下，页码跳转回第一页
            newState.pageNo = 1;
        }
        newState.lastPage = newPage;
        this.setState(newState);
        this.props.onPageSizeChange({
            target: {
                value: size
            }
        });
    }

    handleChange = p => {
        let page = p;
        const {pageSize, total} = this.state;
        if (this.isValidPage(page)) {
            const lastPage = calculatePage(pageSize, total);
            if (page >= lastPage) {
                page = lastPage;
            }
            if (!('pageNo' in this.props)) {
                this.setState({
                    pageNo: page
                });
            }
            this.props.onPageNoChange({
                target: {
                    value: page
                }
            });
        }
    }

    handleItemPageChange = e => {
        const dataset = e && e.currentTarget && e.currentTarget.dataset;
        const key = dataset && dataset.key;
        if (key) {
            this.handleChange(+key);
        }
    }

    goToPrevPage = () => {
        const pageNo = this.state.pageNo;
        if (pageNo > 1) {
            if (!('pageNo' in this.props)) {
                this.setState({
                    pageNo: (pageNo - 1)
                });
            }
            this.handleChange(pageNo - 1);
        }
    }

    goToNextPage = () => {
        const {pageNo, lastPage} = this.state;
        if (lastPage > pageNo) {
            if (!('pageNo' in this.props)) {
                this.setState({
                    pageNo: (pageNo + 1)
                });
            }
            this.handleChange(pageNo + 1);
        }
    }

    jumpToPrevPage = () => {
        const pageNo = this.state.pageNo;
        const range = 5;
        const newPage = (pageNo - range) > 1 ? (pageNo - range) : 1;
        if (!('pageNo' in this.props)) {
            this.setState({
                pageNo: newPage
            });
        }
        this.handleChange(newPage);
    }

    jumpToNextPage = () => {
        const {pageNo, pageSize, total} = this.state;
        const range = 5;
        const lastPage = calculatePage(pageSize, total);
        const newPage = (pageNo + range) > lastPage ? lastPage : (pageNo + range);
        if (!('pageNo' in this.props)) {
            this.setState({
                pageNo: newPage
            });
        }
        this.handleChange(newPage);
    }

    generateItemRender = () => {
        const {props, state} = this;
        const {prefixCls, size} = props;
        const {lastPage, pageNo} = state;
        const pageBufferSize = 2;
        const itemList = [];
        let hasPrevDot = false;
        let hasNextDot = false;
        const buttonProps: ButtonProps = {
            onClick: this.handleItemPageChange,
            size,
            type: 'text'
        };
        if (lastPage === 0) {
            itemList.push(
                <Button key="none" size={size} type="text" disabled>1</Button>
            );
            return itemList;
        }
        if (lastPage < 7) {
            for (let i = 1; i <= lastPage; i++) {
                const itemProps: ButtonProps = {
                    className: classnames(`${prefixCls}-pager-item`, {
                        [`${prefixCls}-pager-item-active`]: i === +pageNo
                    }),
                    //@ts-ignore
                    'data-key': i,
                    key: i,
                    ...buttonProps
                };
                itemList.push(
                    <Button {...itemProps}>
                        {i}
                    </Button>
                );
            }
            return itemList;
        }

        let left = Math.max(1, pageNo - pageBufferSize);
        let right = Math.min(pageNo + pageBufferSize, lastPage);

        if (pageNo - 1 <= pageBufferSize) {
            right = 1 + (pageBufferSize * 2);
        }

        if (lastPage - pageNo <= pageBufferSize) {
            left = lastPage - (pageBufferSize * 2);
        }

        for (let i = left; i <= right; i++) {
            const itemProps: ButtonProps = {
                className: classnames(`${prefixCls}-pager-item`, {
                    [`${prefixCls}-pager-item-active`]: i === +pageNo
                }),
                //@ts-ignore
                'data-key': i,
                key: i,
                ...buttonProps
            };
            itemList.push(
                <Button {...itemProps}>
                    {i}
                </Button>
            );
        }
        if (pageNo - 1 >= pageBufferSize * 2 && pageNo !== 1 + pageBufferSize) {
            itemList.unshift(
                <Tooltip title="向前 5 页" key="jump-prev">
                    <Button
                        className={`${prefixCls}-pager-item ${prefixCls}-pager-item-dot ${prefixCls}-pager-item-dot-prev`}
                        onClick={this.jumpToPrevPage}
                        type="text"
                    >
                        <IconEllipsis className={`${prefixCls}-pager-item-ellipsis`} />
                    </Button>
                </Tooltip>
            );
            hasPrevDot = true;
        }

        if (lastPage - pageNo >= pageBufferSize * 2 && pageNo !== lastPage - 2) {
            itemList.push(
                <Tooltip title="向后 5 页" key="jump-next">
                    <Button
                        className={`${prefixCls}-pager-item ${prefixCls}-pager-item-dot ${prefixCls}-pager-item-dot-next`}
                        onClick={this.jumpToNextPage}
                        type="text"
                    >
                        <IconEllipsis className={`${prefixCls}-pager-item-ellipsis`} />
                    </Button>
                </Tooltip>
            );
            hasNextDot = true;
        }

        if (hasPrevDot && hasNextDot) {
            delete itemList[1];
            delete itemList[itemList.length - 2];
        }

        if (left !== 1) {
            itemList.unshift(
                <Button
                    className={`${prefixCls}-pager-item`}
                    data-key={1}
                    key={1}
                    {...buttonProps}
                >
                    1
                </Button>
            );
        }

        if (right !== lastPage) {
            itemList.push(
                <Button
                    className={`${prefixCls}-pager-item`}
                    data-key={lastPage}
                    key={lastPage}
                    {...buttonProps}
                >
                    {lastPage}
                </Button>
            );
        }
        return itemList;
    }

    onChangeInput = e => {
        const value = e.value;
        this.setState({
            searchValue: value
        });
    }

    onJumpToPager = value => {
        const {pageSize, total} = this.state;
        const lastPage = calculatePage(pageSize, total);
        let jumpToPage = value;
        if (jumpToPage > lastPage) {
            jumpToPage = lastPage;
        }
        if (jumpToPage <= 0) {
            jumpToPage = 1;
        }
        const newState: PaginationState = {
            searchValue: ''
        };
        if (!('pageNo' in this.props)) {
            newState.pageNo = jumpToPage;
        }
        this.setState(newState);
        this.props.onPageNoChange({
            target: {
                value: jumpToPage
            }
        });
    }

    onInputKeyDown = e => {
        const value = +e.value;
        this.onJumpToPager(value);
    }

    onInputKeyConfirm = () => {
        this.onJumpToPager(+this.state.searchValue);
    }

    render() {
        const {
            prefixCls,
            selectPrefixCls,
            hideOnSinglePage,
            showSizeChange,
            className,
            showPageJumper,
            selectProps,
            size,
            total,
            showTotal,
            style
        } = this.props;
        const {pageNo, pageSize, lastPage, searchValue} = this.state;
        const paginationProps = {
            className: classnames(`${prefixCls}`, className, {
                [`${prefixCls}-${size}`]: size
            }),
            style
        };

        const paginationSelectProps = {
            ...selectProps,
            width: 'auto',
            onChange: this.handlePageSizeChange,
            value: Number(pageSize),
            size
        };
        const itemList = this.generateItemRender();
        const itemLength = itemList.length;
        if (itemLength < 2 && hideOnSinglePage) {
            // 只有一页的时候隐藏分页器
            return null;
        }
        const options = this.getOptionByList();
        return (
            <div {...paginationProps}>
                {
                    showTotal && (
                        <div className={`${prefixCls}-total`}>共 {total || 0} 条</div>
                    )
                }
                {
                    (showSizeChange && total > 0) ? (
                        <div className={`${prefixCls}-select`}>
                            <Select {...paginationSelectProps}>
                                {
                                    options.map(option => {
                                        return (
                                            <SelectOption key={option.value} value={option.value}>
                                                {option.label}条/页
                                            </SelectOption>
                                        );
                                    })
                                }
                            </Select>
                        </div>
                    ) : null
                }
                <div className={`${prefixCls}-pager`}>
                    <span className={`${prefixCls}-pager-list`}>
                        {
                            <Button
                                className={classnames(`${prefixCls}-pager-item ${prefixCls}-pager-item-jumper`, {
                                    [`${prefixCls}-pager-item-disabled`]: pageNo <= 1
                                })}
                                size={size}
                                disabled={pageNo <= 1}
                                onClick={this.goToPrevPage}
                                type="text"
                                key="pre"
                            >
                                <IconChevronLeft />
                            </Button>
                        }
                        {
                            itemList.map(item => {
                                return item;
                            })
                        }
                        {
                            <Button
                                className={classnames(`${prefixCls}-pager-item ${prefixCls}-pager-item-jumper`, {
                                    [`${prefixCls}-pager-item-disabled`]: pageNo >= lastPage
                                })}
                                size={size}
                                disabled={pageNo >= lastPage}
                                onClick={this.goToNextPage}
                                type="text"
                                key="next"
                            >
                                <IconChevronRight />
                            </Button>
                        }
                    </span>
                    {
                        showPageJumper && (
                            <div className={`${prefixCls}-jumper`}>
                                <span className={`${prefixCls}-jumper-title`}>
                                    去第
                                </span>
                                <Input
                                    width={40}
                                    className={`${prefixCls}-input`}
                                    size={size}
                                    value={searchValue}
                                    onChange={this.onChangeInput}
                                    onPressEnter={this.onInputKeyDown}
                                />
                                <span className={`${prefixCls}-jumper-title`}>
                                    页
                                </span>
                                <Button
                                    className={`${prefixCls}-jumper-confirm`}
                                    onClick={this.onInputKeyConfirm}
                                    size={size}
                                >
                                    确定
                                </Button>
                            </div>
                        )
                    }
                </div>
            </div>
        );
    }
}

export default Pagination;
