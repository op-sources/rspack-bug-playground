import React, {PureComponent} from 'react';
import KeyCode from 'rc-util/lib/KeyCode';
import Input from '../input';
import Button from '../button';
import {classnames} from '../../core/commonTools';
import {
    IconTimes,
    IconTimesCircle,
    IconChevronDown,
    IconChevronRight
} from 'dls-icons-react';
import {BaseProps} from '../interface';
import {CascaderProps} from './interface';
import {COMPONENT_FOCUS, COMPONENT_MAIN} from '../config';

type CascaderTriggerProps = BaseProps
    & Pick<CascaderProps,
        'width'
        | 'disabled'
        | 'size'
        | 'options'
        | 'multiple'
        | 'placeholder'
        | 'before'
        | 'allowClear'
        | 'showSearch'
        | 'onInputChange'
        | 'inputPrefixCls'
        | 'displayRender'
        | 'displayParent'>
    & {
        expanded: boolean,
        onRemove(key: string): void,
        onRemoveAll(): void,
        onSearch(query: string): void,
        query: string
    };

export default class Trigger extends PureComponent<CascaderTriggerProps> {

    state = {
        query: '',
        rawInputValue: '',
        inputWidth: 0,
        options: []
    };

    static getDerivedStateFromProps(props, state) {
        if (props.query !== state.query) {
            const query = props.query;
            return {
                query,
                rawInputValue: query
            };
        }
        return null;
    }

    handleInputKeyDown = e => {
        const {
            options,
            multiple
        } = this.props;
        const opts = options.filter(option => !option.children && !option.disabled);
        const len = opts.length;
        if (
            multiple
                && !e.target.value
                && e.keyCode === KeyCode.BACKSPACE
                && opts.length
        ) {
            this.handleRemove(opts[len - 1].key);
        }
    };

    handleInputValue = e => {
        this.setState({
            rawInputValue: e.target.value
        });
    };

    handleOnSearch = e => {
        const query = e.value;
        const {
            onSearch,
            onInputChange
        } = this.props;
        onSearch && onSearch(query);
        onInputChange && onInputChange(query);
    };

    handleInputBlur = () => {
        this.inputRef.focus();
    };

    handleRemove = key => {
        this.props.onRemove(key);
    };

    handleRemoveAll = event => {
        event.stopPropagation();
        this.props.onRemoveAll();
    };

    inputRef;
    inputMeasureRef;

    saveInputRef = ref => {
        this.inputRef = ref;
    };

    saveInputMeasureRef = ref => {
        this.inputMeasureRef = ref;
    };

    prefix(name) {
        return `${this.props.prefixCls}-${name}`;
    }

    componentDidUpdate() {
        if (this.inputMeasureRef) {
            this.setState({
                inputWidth: this.inputMeasureRef.offsetWidth
            });
        }
    }

    render() {
        const {
            className,
            style,
            width,
            disabled,
            size,
            options,
            multiple,
            expanded,
            children,
            allowClear,
            showSearch,
            prefixCls,
            placeholder,
            onInputChange,
            inputPrefixCls,
            displayRender,
            displayParent,
            onRemove,
            onRemoveAll,
            onSearch,
            query,
            before,
            ...restProps
        } = this.props;
        const {
            rawInputValue
        } = this.state;
        const arrowCls = classnames({
            [this.prefix('picker-arrow')]: true,
            [this.prefix('picker-arrow-expand')]: expanded
        });

        const pickerCls = classnames(className, COMPONENT_MAIN, {
            [this.prefix('picker')]: true,
            [this.prefix('picker-disabled')]: disabled,
            [this.prefix('picker-show-search')]: !!showSearch,
            [this.prefix('picker-multiple')]: multiple,
            [this.prefix('picker-expanded')]: expanded,
            [this.prefix('picker-focus')]: expanded && !!showSearch,
            [COMPONENT_FOCUS]: expanded && !!showSearch,
            [this.prefix(size)]: size
        });

        const hasResult = options.length > 0;
        const hasQuery = rawInputValue.length > 0;
        const showPlaceholder = (!multiple && expanded && showSearch && !hasQuery) || (!hasResult && !hasQuery);
        const showResult = !showPlaceholder && !(!multiple && hasQuery);
        const clearable = !disabled && allowClear && (hasResult || hasQuery);
        const showQueryInput = showSearch && expanded;
        const result = showResult ? this.renderResults() : null;
        return children || (
            <div
                style={{
                    width,
                    ...style
                }}
                className={pickerCls}
                {...restProps}
            >
                {before
                    ? <div className={this.prefix('picker-before')}>{before}</div>
                    : null
                }
                <div className={this.prefix('picker-main')}>
                    {result}
                    {(showPlaceholder || (hasResult && showResult && !result && !hasQuery))
                        && this.renderPlaceholder()}
                    {showQueryInput && this.renderQueryInput()}
                </div>
                <span className={this.prefix('picker-icon')}>
                    {clearable
                        && <IconTimesCircle
                            className={this.prefix('picker-clear')}
                            onClick={this.handleRemoveAll}
                        />
                    }
                    <IconChevronDown type="angle-down" className={arrowCls} />
                </span>
            </div>
        );
    }

    renderQueryInput() {
        const {
            query,
            inputWidth,
            rawInputValue
        } = this.state;
        const {
            inputPrefixCls,
            size
        } = this.props;
        return (
            <>
                <Input
                    autoFocus
                    inputRef={this.saveInputRef}
                    prefixCls={inputPrefixCls}
                    className={classnames(this.prefix('input'), this.prefix('input-autosize'))}
                    value={query}
                    autoComplete="off"
                    onInput={this.handleInputValue}
                    onChange={this.handleOnSearch}
                    onKeyDown={this.handleInputKeyDown}
                    onBlur={this.handleInputBlur}
                    isRequired={false}
                    size={size}
                    style={{width: inputWidth || 10}}
                />
                <span
                    ref={this.saveInputMeasureRef}
                    className={this.prefix('input-measure')}
                >
                    {rawInputValue}&nbsp;&nbsp;
                </span>
            </>
        );
    }

    renderPlaceholder() {
        const {
            options,
            placeholder
        } = this.props;
        const result = options.length > 0 ? this.renderResult(options) : null;
        return (
            <span className={this.prefix('picker-placeholder')}>{result || placeholder}</span>
        );
    }

    renderResult(options) {
        const {
            displayRender,
            prefixCls
        } = this.props;
        const labels = options.map(o => o.label);
        const items = options.map(o => o.item);
        const content = displayRender
            ? displayRender(labels, items, prefixCls)
            : this.defaultRender(options);
        if (content) {
            return (
                <span className={this.prefix('picker-label')}>
                    {content}
                </span>
            );
        }
        return null;
    }

    defaultRender(options) {
        const opts = this.props.displayParent ? options : options.slice(options.length - 1);
        return (
            <span className={this.prefix('picker-label-container')}>
                {
                    opts.map((o, index) => {
                        const last = index === opts.length - 1;
                        return (
                            <span key={index}>
                                {o.label}
                                {!last && <IconChevronRight className={this.prefix('search-split-icon')} />}
                            </span>
                        );
                    })
                }
            </span>
        );
    }

    renderResults() {
        const {
            options,
            disabled,
            multiple,
            displayRender
        } = this.props;

        if (!multiple || displayRender) {
            return this.renderResult(options);
        }

        return options.filter(option => !option.children).map(option => {
            const {
                key,
                title,
                label,
                disabled: optionDisabled
            } = option;
            return (
                <span
                    className={
                        classnames(this.prefix('picker-result'), {
                            [this.prefix('picker-result-disabled')]: disabled || optionDisabled
                        })
                    }
                    key={key}
                    title={title}
                >
                    <span className={this.prefix('picker-result-label')}>{label}</span>
                    <Button
                        type="text-aux"
                        className={this.prefix('picker-delete')}
                        disabled={disabled || optionDisabled}
                        onClick={e => {
                            e.stopPropagation();
                            this.handleRemove(key);
                        }}
                    >
                        <IconTimes />
                    </Button>
                </span>
            );
        });
    }
}