import React, {PureComponent} from 'react';
import {IconChevronDown, IconChevronUp, IconPlus, IconMinus} from 'dls-icons-react';
import Popover from '../popover';
import Button from '../button';
import {classnames} from '../../core/commonTools';
import {changeNumber, numberFormater, rangeFormater} from '../../core/numberInputTools';
import {getPopoverProps, tipsAndErrorRender} from '../../core/tipsAndErrorTools';
import {NumberInputProps} from './interface';
import {withConfigConsumer} from '../providerConfig/context';
import {COMPONENT_FOCUS, COMPONENT_MAIN} from '../config';

interface NumberInputState {
    arrowUpDisable: boolean;
    arrowDownDisable: boolean;
    value: number | string;
    inputValue: number | string;
    hasFocus: boolean;
}

@withConfigConsumer('number-input')
class NumberInput extends PureComponent<NumberInputProps, NumberInputState> {
    static defaultProps = {
        type: 'float',
        placeholder: '',
        prefixCls: 'one-number-input',
        disabled: false,
        max: null,
        min: null,
        step: 1.0,
        fixed: Number.POSITIVE_INFINITY,
        onChange: () => {},
        onFocus: () => {},
        onBlur: () => {},
        showTip: true,
        errorMessage: '',
        location: 'right',
        tipLocation: null,
        errorLocation: null,
        tailLabel: null,
        width: null,
        mode: 'basic',
        size: 'medium',
        showErrorWithoutErrorMessage: false,
        showErrorMessage: true,
        autoFocus: false,
        showSpinButtons: true,
        valueAsNumber: false
    };

    numberBoxRef: HTMLInputElement;

    constructor(props) {
        super(props);
        const value = typeof props.value === 'undefined' ? props.defaultValue : props.value;
        this.state = {
            hasFocus: false,
            arrowUpDisable: false,
            arrowDownDisable: false,
            value,
            inputValue: value
        };
    }

    static getDerivedStateFromProps(nextProps, prevState) {
        const {value} = nextProps;
        if ('value' in nextProps && value !== prevState.value) {
            return {
                value,
                inputValue: value
            };
        }
        return null;
    }

    focus() {
        this.numberBoxRef.focus();
    }

    blur() {
        this.numberBoxRef.blur();
    }

    componentDidUpdate() {
        this.disableArrow(this.state.value);
    }

    componentDidMount() {
        this.disableArrow(this.state.value);
    }

    onInputBoxChange = e => {
        const {min, max, disabled} = this.props;
        if (disabled) {
            return;
        }
        const value = numberFormater(e.target.value, this.props);
        this.setState({
            inputValue: value
        });
        if (e.target.value.endsWith('.')) {
            return;
        }
        const normalizedValue = this.normalizeValue(value);
        if (normalizedValue !== ''
            && ((min != null && normalizedValue < min) || (max != null && normalizedValue > max))
        ) {
            return;
        }

        this.handleOnChange(normalizedValue);
    };

    onInputBoxBlur = e => {
        const {onBlur} = this.props;
        const value = e.target.value;
        if (value != null && value !== '') {
            const normalizedValue = this.normalizeValue(rangeFormater(value, this.props));
            this.setState({
                value: normalizedValue,
                inputValue: normalizedValue
            });
            this.handleOnChange(normalizedValue);
        }
        onBlur(e);
        this.setState({hasFocus: false});
    };

    onSpinButtonClick = e => {
        const props = this.props;
        const {disabled, readOnly, step, min} = props;
        if (disabled || readOnly) {
            return;
        }
        const dataset = e && e.currentTarget && e.currentTarget.dataset;
        const optValue = dataset.uiCmd === 'add' ? 1 : -1;
        if ((optValue === 1 && this.state.arrowUpDisable) || (optValue === -1 && this.state.arrowDownDisable)) {
            return;
        }
        const target = this.numberBoxRef;
        let value = target.value;
        if (isNaN(+value) || value.length === 0) {
            value = `${min}` || '0.0';
        }

        this.handleOnChange(this.normalizeValue(changeNumber(value, step, optValue)));

        this.numberBoxRef.focus();
    };

    onInputBoxFocus = e => {
        this.setState({hasFocus: true});
        this.props.onFocus(e);
    };

    disableArrow = currentValue => {
        const {min, max} = this.props;
        if (!this.state.arrowDownDisable && currentValue <= min && min != null) {
            this.setState({
                arrowDownDisable: true
            });
        }
        else if (currentValue > min) {
            this.setState({
                arrowDownDisable: false
            });
        }
        if (max != null && currentValue >= max && !this.state.arrowUpDisable) {
            this.setState({
                arrowUpDisable: true
            });
        }
        else if (currentValue < max) {
            this.setState({
                arrowUpDisable: false
            });
        }
    };

    addRef = node => {
        this.numberBoxRef = node;
    };

    onButtonFocusIn = () => {
        this.setState({hasFocus: true});
    };

    normalizeValue(value: any) {
        return value === '' ? value : +value;
    }

    handleOnChange(value: number | '') {
        const val = this.state.value;
        if (value === val
            || (
                value === Number(val) && String(value).trim() !== '0'
            )
        ) {
            return;
        }

        this.disableArrow(value);
        if (!('value' in this.props)) {
            this.setState({
                value,
                inputValue: value
            });
        }
        this.props.onChange({
            target: {
                value: this.props.valueAsNumber ? value : String(value)
            }
        });
    }

    renderPrefix() {
        const {prefix, prefixCls} = this.props;
        if (prefix == null) {
            return null;
        }
        return <span className={`${prefixCls}-affix ${prefixCls}-prefix`}>{prefix}</span>;
    }

    renderSuffix() {
        const {suffix, prefixCls} = this.props;
        if (suffix == null) {
            return null;
        }
        return <span className={`${prefixCls}-affix ${prefixCls}-suffix`}>{suffix}</span>;
    }

    render() {
        const props = this.props;
        const {
            className,
            placeholder,
            min,
            max,
            prefixCls,
            disabled,
            errorMessage,
            showTip,
            tipText,
            tipLocation,
            tailLabel,
            width,
            errorLocation,
            location,
            mode: modeProp,
            size,
            readOnly,
            showErrorWithoutErrorMessage,
            showErrorMessage,
            autoFocus,
            defaultValue,
            onBlur,
            onChange,
            onFocus,
            type,
            step,
            fixed,
            value,
            showSpinButtons,
            prefix,
            suffix,
            ...restProps
        } = props;
        const {hasFocus, arrowUpDisable, arrowDownDisable} = this.state;
        const inputProp = {
            type: 'text',
            placeholder: placeholder || '', // 当place是false时，不应该显示false
            value: numberFormater(this.state.inputValue, props),
            onFocus: this.onInputBoxFocus,
            onChange: this.onInputBoxChange,
            onBlur: this.onInputBoxBlur,
            autoFocus
        };
        const mode = showSpinButtons === false ? 'basic' : modeProp;
        const mainClass = `${prefixCls}-main`;
        const mainProps = {
            className: classnames(mainClass, {
                [COMPONENT_MAIN]: mode === 'strong',
                [COMPONENT_FOCUS]: mode === 'strong' && hasFocus
            })
        };
        const addonClass = `${mainClass}-addon`;
        const containerProps = {
            className: classnames(prefixCls, {
                [COMPONENT_MAIN]: mode !== 'strong',
                [`${prefixCls}-focus`]: hasFocus,
                [COMPONENT_FOCUS]: mode !== 'strong' && hasFocus,
                [`${prefixCls}-disabled`]: disabled,
                [`${prefixCls}-readonly`]: readOnly,
                [`${prefixCls}-with-spin`]: showSpinButtons
            }),
            style: {
                width
            }
        };
        const wrapperClass = `${prefixCls}-wrapper`;
        const wrapperProps = {
            className: classnames(className, wrapperClass, `${prefixCls}-${size}`, {
                [`${prefixCls}-error`]: errorMessage || showErrorWithoutErrorMessage,
                [`${wrapperClass}-${mode}`]: mode,
                [`${wrapperClass}-disabled`]: disabled,
                [`${wrapperClass}-readonly`]: readOnly,
                [`${wrapperClass}-focus`]: hasFocus
            }),
            ...restProps
        };
        const btnContainer = {
            className: classnames(`${prefixCls}-spin-buttons-container`, {
                [`${prefixCls}-spin-buttons-container-focus`]: hasFocus
            })
        };
        const inputDisabled = disabled;
        const tailLabelClass = `${prefixCls}-tail-label`;
        const popParams = {
            tipLocation,
            errorMessage,
            tipText: showTip && (tipText || (min == null || max == null ? '' : `范围：${min}~${max}`)),
            errorLocation,
            location,
            prefixCls,
            size
        };
        const beforeCommon = {
            className: classnames({
                [`${prefixCls}-icon-disabled`]: arrowDownDisable || inputDisabled || readOnly
            }),
            'data-ui-cmd': 'sub',
            onClick: this.onSpinButtonClick
        };
        const beforeAddonProps = {
            ...beforeCommon,
            className: classnames(addonClass, `${addonClass}-before`, beforeCommon.className)
        };
        const afterCommon = {
            className: classnames({
                [`${prefixCls}-icon-disabled`]: arrowUpDisable || inputDisabled || readOnly
            }),
            'data-ui-cmd': 'add',
            onClick: this.onSpinButtonClick
        };
        const afterAddonProps = {
            ...afterCommon,
            className: classnames(addonClass, `${addonClass}-after`, afterCommon.className)
        };
        return (
            <div {...wrapperProps}>
                <Popover {...getPopoverProps(popParams, {hasFocus})}>
                    <div {...mainProps}>
                        <Button type="text-aux" {...beforeAddonProps}>
                            <IconMinus />
                        </Button>
                        <div {...containerProps}>
                            {this.renderPrefix()}
                            <input {...inputProp} disabled={inputDisabled} readOnly={readOnly} ref={this.addRef} />
                            {showSpinButtons && (
                                <div {...btnContainer} onFocus={this.onButtonFocusIn}>
                                    <Button type="text-aux" {...afterCommon} tabIndex={1}>
                                        <IconChevronUp />
                                    </Button>
                                    <Button type="text-aux" {...beforeCommon} tabIndex={2}>
                                        <IconChevronDown />
                                    </Button>
                                </div>
                            )}
                            {this.renderSuffix()}
                        </div>
                        <Button type="text-aux" {...afterAddonProps}>
                            <IconPlus />
                        </Button>
                    </div>
                </Popover>
                {tailLabel ? <span className={tailLabelClass}>{tailLabel}</span> : null}
                {showErrorMessage ? tipsAndErrorRender(popParams) : null}
            </div>
        );
    }
}

export default NumberInput;
