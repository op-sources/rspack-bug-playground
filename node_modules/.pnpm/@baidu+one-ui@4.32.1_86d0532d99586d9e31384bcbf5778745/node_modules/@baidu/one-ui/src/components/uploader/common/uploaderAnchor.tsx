import React, {Component, FC, PureComponent} from 'react';
import ImageAnchor from './imageAnchor';
import FileAnchor from './fileAnchor';
import {classnames} from '../../../core/commonTools';
import {
    getAccept
} from '../../../core/uploaderTools';
import {UploaderAnchorProps} from '../interface';

export default class UploaderAnchor extends PureComponent<UploaderAnchorProps> {

    static defaultProps = {
        onPickerClick() {},
        helperTextPosition: 'right'
    };

    uploadInputRef: HTMLInputElement;

    inputRef = (ref: HTMLInputElement) => {
        this.uploadInputRef = ref;
    }

    onPickerClick = () => {
        const {
            onPickerClick
        } = this.props;
        const useDefaultPicker = onPickerClick && onPickerClick();
        if (useDefaultPicker === false) {
            return;
        }
        this.uploadInputRef.value = '';
        this.uploadInputRef.click();
    }

    renderEntries = () => {
        const {realType, entries, prefixCls} = this.props;
        if (realType === 'file' || !(entries && Array.isArray(entries) && entries.length)) {
            return null;
        }
        return entries.map(entry => {
            return (
                <div key={entry.key} className={`${prefixCls}-entry-item`}>
                    {entry.label}
                </div>
            );
        });
    }

    renderHelper() {
        const {
            prefixCls,
            listType,
            helperText
        } = this.props;

        if (listType === 'file' || !helperText) {
            return null;
        }
        let helperTextNode;
        if (typeof helperText === 'function') {
            helperTextNode = helperText();
        }
        else {
            helperTextNode = helperText;
        }
        return helperTextNode
            ? <div className={`${prefixCls}-helper-text`}>{helperTextNode}</div>
            : null;
    }

    render() {
        const {
            prefixCls,
            disabled: pickerDisabled,
            listType,
            CustomUploadAnchor,
            helperText,
            helperTextPosition,
            inputControlName,
            multiple,
            onChange,
            loading,
            maxSize,
            realType,
            entries,
            size,
            pickerPosition,
            fileList,
            maxFileLength,
            hideAnchor,
            hidePicker,
            pickerIcon,
            pickerText,
            theme,
            CustomUploadPicker
        } = this.props;
        const limited = (maxFileLength && fileList.length >= maxFileLength);
        const disabled = pickerDisabled || limited;
        let hide = pickerPosition === 'none' || hideAnchor || hidePicker
            || (listType !== 'file' && limited && pickerPosition === 'after'); // 媒体类超过限制末尾隐藏
        if (hideAnchor === false || hidePicker === false) {
            hide = false; // 强制展示
        }
        const uploadAnchorClassName = classnames(
            `${prefixCls}-anchor`, {
                [`${prefixCls}-anchor-disabled`]: disabled,
                [`${prefixCls}-anchor-standalone`]: pickerPosition === 'top',
                [`${prefixCls}-anchor-has-entries`]: entries && entries.length
            },
            `${prefixCls}-anchor-${listType}`,
            `${prefixCls}-anchor-${listType}-helper-${helperTextPosition}`
        );
        const inputClassName = classnames(`${prefixCls}-input`, {
            [`${prefixCls}-input-disabled`]: disabled
        });
        let UploadPicker: typeof Component | FC = listType === 'file' ? FileAnchor : ImageAnchor;
        if (CustomUploadAnchor) {
            // 自定义anchor
            UploadPicker = CustomUploadAnchor;
        }
        if (CustomUploadPicker) {
            // 自定义anchor
            UploadPicker = CustomUploadPicker;
        }
        const accept = getAccept(this.props.accept, realType);
        const inputProps = {
            ref: this.inputRef,
            type: 'file',
            name: inputControlName,
            className: inputClassName,
            multiple,
            onChange,
            disabled: pickerDisabled,
            accept: accept.join(',')
        };
        if (accept.length === 1 && accept[0] === '*') {
            delete inputProps.accept;
        }
        const anchorProps = {
            onClick: this.onPickerClick,
            loading,
            disabled,
            prefixCls,
            maxSize,
            helperText,
            helperTextPosition,
            listType,
            realType,
            entries,
            size,
            pickerIcon,
            pickerText,
            theme
        };
        if (CustomUploadAnchor || CustomUploadPicker) {
            // @ts-ignore
            anchorProps.OriginAnchor = listType === 'file' ? FileAnchor : ImageAnchor;
        }
        if (hide) {
            return (
                <input
                    {...inputProps}
                />
            );
        }
        return (
            <div className={uploadAnchorClassName}>
                <UploadPicker {...anchorProps} />
                <input
                    {...inputProps}
                />
                {this.renderHelper()}
            </div>
        );
    }
}
