/**
 * @file 导航组件-动效滑动条
 * @date 2021-12-29
 */
import React, {PureComponent} from 'react';
import PropTypes from 'prop-types';
import {classnames} from '../../core/commonTools';

interface InkProps {
    /** 样式类名前缀 */
    prefixCls: string,
    /** 鼠标hover的索引值 */
    hoverIndex: number,
    /** navItem的文字节点的ref对象 */
    itemTextRefMap
}

interface InkState {
    animateLeft: boolean;
    animateWidth: boolean;
    prevProps: InkProps;
};

class Ink extends PureComponent<InkProps, InkState> {

    constructor(props) {
        super(props);
        this.state = {
            prevProps: props,
            animateLeft: false,
            animateWidth: false
        };
    }

    static getDerivedStateFromProps(nextProps, prevState) {
        const isHover = nextProps.hoverIndex || nextProps.hoverIndex === 0;
        // 鼠标移入
        if (isHover) {
            // 原来没有hover，现在鼠标hover了
            if (prevState?.prevProps?.hoverIndex == null) {
                return {
                    animateLeft: false,
                    animateWidth: true,
                    prevProps: nextProps
                };
            }
            // 原来hover到item1，现在移动到item2
            else if ((prevState?.prevProps?.hoverIndex || prevState?.prevProps?.hoverIndex === 0)) {
                return {
                    animateLeft: true,
                    animateWidth: false,
                    prevProps: nextProps
                };
            }
        }
        // 鼠标移出
        return {
            animateWidth: false,
            animateLeft: false,
            prevProps: nextProps
        };
    }

    innerRef;

    setInkStyle = () => {
        const {
            hoverIndex,
            itemTextRefMap
        } = this.props;
        const textDom = itemTextRefMap?.[hoverIndex];
        // 计算新的位置
        const left = textDom?.offsetLeft + (textDom?.offsetWidth - this.innerRef?.offsetWidth) / 2;
        return {left: left || 0};
    }

    getInnerRef = ref => {
        this.innerRef = ref;
    }

    render() {
        const {prefixCls} = this.props;
        const {
            animateLeft,
            animateWidth
        } = this.state;
        const inkClass = classnames(`${prefixCls}-ink`, {
            [`${prefixCls}-ink-animate-left`]: animateLeft,
            [`${prefixCls}-ink-animate-width`]: animateWidth
        });
        const style = this.setInkStyle();
        return (
            <div className={inkClass} style={style}>
                <div className={`${prefixCls}-ink-inner`} ref={this.getInnerRef} />
            </div>
        );
    }
}

export default Ink;
