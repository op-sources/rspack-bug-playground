/**
 * @file 顶层context
 * @author huangshiming
 * @date 2020-04-28
 */
import React, {forwardRef} from 'react';
import classnames from 'classnames';
import {THEME_LIGHT_D22} from '../config';
import {TableProps} from '../table/interface';
import {ConfigProviderProps} from './interface';
import {BasePropsWithChildren} from '../interface';

type NormalizeConfig = Omit<ConfigProviderProps, 'table'> & {
    className?: string,
    // table
    loadingOption?: {
        type: TableProps['loadingOption']['type']
    }
};

const context = React.createContext<ConfigProviderProps>(undefined);

const lightThemeComponents = [
    // components
    'select',
    'dropdown',
    'cascader',
    'uploader',
    'pagination',
    'radio-group',
    'checkbox-group',
    'input',
    'number-input',
    'textarea',
    'search-box',
    'time-picker',
    'date-picker',
    'button',
    // containers
    'popover',
    'tooltip',
    'overlay',
    'drawer',
    'row',
    'tabs',
    'layout',
    'layout-header',
    'layout-footer',
    'layout-sidebar',
    'layout-content'
];

export const Consumer = context.Consumer;

export default context;

/**
 * 组件decorator，用于处理全局config
 *
 * @param suffixCls 组件className后缀
 */
export const withConfigConsumer = (suffixCls: string) => Component => {
    const ComponentWithConsumer = forwardRef((props: BasePropsWithChildren, ref) => (
        <Consumer>
            {
                config => {
                    if (!config) {
                        return <Component ref={ref} {...props} />;
                    }
                    const {
                        size,
                        prefixCls,
                        theme,
                        table
                    } = config;
                    const normalizedConfig: NormalizeConfig = suffixCls === 'table' && table && table.loadingOption
                        ? {
                            loadingOption: table.loadingOption
                        }
                        : {};
                    if (size) {
                        normalizedConfig.size = size;
                    }
                    if (prefixCls) {
                        normalizedConfig.prefixCls = `${prefixCls}-${suffixCls}`;
                    }
                    if (theme) {
                        normalizedConfig.theme = theme;
                    }
                    let {className, ...restProps} = props;
                    if (theme && (theme !== THEME_LIGHT_D22 || lightThemeComponents.includes(suffixCls))) {
                        const themeClassName = `${prefixCls}-theme-${theme}`;
                        if (!className || className.indexOf(themeClassName) === -1) {
                            className = classnames(className, themeClassName);
                        }
                    }
                    if (className) {
                        normalizedConfig.className = className;
                    }
                    const component = (
                        <Component ref={ref} {...normalizedConfig} {...restProps} />
                    );
                    if (theme === THEME_LIGHT_D22 && !lightThemeComponents.includes(suffixCls)) {
                        return (
                            <context.Provider
                                value={{
                                    ...config,
                                    theme: ''
                                }}
                            >
                                {component}
                            </context.Provider>
                        );
                    }
                    return component;
                }
            }
        </Consumer>
    ));
    ComponentWithConsumer.displayName = Component.displayName || Component.name;
    return ComponentWithConsumer as typeof Component;
};
