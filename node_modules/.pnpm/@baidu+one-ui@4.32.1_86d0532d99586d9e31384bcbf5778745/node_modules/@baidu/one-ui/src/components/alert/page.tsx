import React, {PureComponent, ReactNode, isValidElement, cloneElement, ReactComponentElement} from 'react';
import {partial, noop} from 'lodash';
import warning from 'warning';
import {IconChevronRight, IconChevronLeft} from 'dls-icons-react';
import {classnames} from '../../core/commonTools';
import {withConfigConsumer} from '../providerConfig/context';
import {AlertPageProps, AlertProps} from './interface';
import Alert from './alert';

interface AlertPageState {
    dataSource?: ReactComponentElement<typeof Alert, AlertProps>[];
    activeIndex?: number;
}

@withConfigConsumer('alert-page')
class AlertPage extends PureComponent<AlertPageProps, AlertPageState> {
    static defaultProps = {
        prefixCls: 'one-alert-page',
        defaultActiveIndex: 0,
        size: 'medium',
        onClose: noop,
        onPrevChange: noop,
        onNextChange: noop
    };

    constructor(props: AlertPageProps) {
        super(props);
        const {dataSource, defaultDataSource, slider, activeIndex, initialSlide, defaultActiveIndex} = props;
        if ('initialSlide' in props) {
            warning(false, 'The `initialSlide` prop of `Alert.Page` is deprecated, use `defaultActiveIndex` instead');
        }
        if ('slider' in props) {
            warning(false, 'The `slider` prop of `Alert.Page` is deprecated, use `activeIndex` instead');
        }
        this.state = {
            dataSource: dataSource || defaultDataSource || [],
            activeIndex: defaultActiveIndex || initialSlide || 0
        };
    }

    static getDerivedStateFromProps(nextProps: AlertPageProps, prevState: AlertPageState) {
        const newState: AlertPageState = {};
        if ('dataSource' in nextProps) {
            newState.dataSource = [...nextProps.dataSource];
        }
        if ('slider' in nextProps && nextProps.slider !== prevState.activeIndex) {
            newState.activeIndex = nextProps.slider;
        }
        if ('activeIndex' in nextProps && nextProps.activeIndex !== prevState.activeIndex) {
            newState.activeIndex = nextProps.activeIndex;
        }
        return newState;
    }

    alertPageRef?: ReactNode;

    onClose = (closeFunc, index: number, e: MouseEvent) => {
        // 全局的
        this.props.onClose(index);
        // 每一个alert自身的onClose
        if (typeof closeFunc === 'function') {
            closeFunc(e);
        }
        if (!('dataSource' in this.props)) {
            // 移除
            const {dataSource} = this.state;
            dataSource.splice(index, 1);
            this.setState({dataSource: [...dataSource]});
        }
        let activeIndex = this.state.activeIndex;
        if (activeIndex > 0) {
            activeIndex = activeIndex - 1;
        }
        if (!this.isActiveIndexControlled()) {
            this.setState({
                activeIndex
            });
        }
        this.props.onPrevChange(activeIndex);
    }

    isActiveIndexControlled() {
        return ('slider' in this.props || 'activeIndex' in this.props);
    }

    getItems = () => {
        const dataSource = [...this.state.dataSource];
        const children = dataSource.map((child, index) => {
            if (!isValidElement(child)) {
                return null;
            }
            const prefixCls = this.props.prefixCls;
            const key = child.key || String(index);
            const props = {
                key,
                ...child.props,
                onClose: partial(this.onClose, child.props.onClose, index),
                visible: true
            };
            return <span className={`${prefixCls}-slick-item`} key={key}>{cloneElement(child, props)}</span>;
        });
        return children;
    }

    saveRef = ref => {
        this.alertPageRef = ref;
    };

    prevChange = () => {
        const current = this.state.activeIndex;
        if (current === 0) {
            return;
        }
        const prevSlide = current - 1;
        if (!this.isActiveIndexControlled()) {
            this.setState({
                activeIndex: prevSlide
            });
        }

        this.props.onPrevChange(prevSlide);
    }

    nextChange = childrenLength => {
        const current = this.state.activeIndex;
        if (current === childrenLength - 1) {
            return;
        }
        const nextSlide = current + 1;
        if (!this.isActiveIndexControlled()) {
            this.setState({
                activeIndex: nextSlide
            });
        }

        this.props.onNextChange(nextSlide);
    }

    render() {
        const {prefixCls, className, style, size} = this.props;
        const {dataSource, activeIndex} = this.state;
        if (!dataSource.length) {
            return null;
        }
        const children = this.getItems();
        const single = dataSource.length === 1;
        const alertClassNames = classnames(prefixCls, className, `${prefixCls}-${size}`, {
            [`${prefixCls}-first-page`]: activeIndex === 0,
            [`${prefixCls}-last-page`]: activeIndex === children.length - 1,
            [`${prefixCls}-single`]: single
        });
        if (!children[activeIndex]) {
            return null;
        }
        return (
            <div ref={this.saveRef} className={alertClassNames} style={style}>
                {children[activeIndex]}
                {!single
                    && (
                        <div className={`${prefixCls}-count`}>
                            <IconChevronLeft className={`${prefixCls}-count-prev`} onClick={this.prevChange} />
                            <span>
                                {activeIndex + 1}
                                /
                                {children.length}
                            </span>
                            <IconChevronRight
                                className={`${prefixCls}-count-next`}
                                onClick={partial(this.nextChange, children.length)}
                            />
                        </div>
                    )
                }
            </div>
        );
    }
}

export default AlertPage;
