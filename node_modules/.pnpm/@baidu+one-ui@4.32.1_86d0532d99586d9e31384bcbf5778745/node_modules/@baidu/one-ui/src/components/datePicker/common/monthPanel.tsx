import React, {PureComponent} from 'react';
import {partial} from 'lodash';
import {connect} from 'mini-store';
import dayjs from 'dayjs';
import {
    getTimeTramp,
    monthDayRange
} from '../../../core/datePickerTools';
import {classnames} from '../../../core/commonTools';
import {DatePickerStore} from '../datePicker';

const monthItems = [
    1, 2, 3, 4, 5, 6,
    7, 8, 9, 10, 11, 12
];

interface MonthRenderProps {
    store: Object,
    prefixCls: string,
    showMonth: number,
    showYear: number,
    panelType: string,
    endDatePanelType: string,
    validateMinDate: string,
    validateMaxDate: string,
    endDateShowYear: number,
    endDateShowMonth: number,
    type: string,
    onClickMonth(value: string): void,
    isMonthRender: boolean,
    dateFormat: string
};

interface MonthRenderState {
    endDateShowMonth?: number;
    endDatePanelType?: 'date'
    showMonth?: number;
    panelType?: 'month' | 'date';
};

class MonthRender extends PureComponent<MonthRenderProps, MonthRenderState> {

    constructor(props: MonthRenderProps) {
        super(props);
        this.store = this.props.store;
    }

    store;

    onClickMonth = (month: number, disabled: boolean) => {
        if (disabled) {
            return;
        }
        const newState: MonthRenderState = {};
        const {type, isMonthRender, showYear, dateFormat} = this.props;
        if (type === 'nextMultiple') {
            newState.endDateShowMonth = month;
            newState.endDatePanelType = 'date';
        }
        else {
            newState.showMonth = month;
            newState.panelType = isMonthRender ? 'month' : 'date';
        }
        this.store.setState(newState);
        if (this.props.onClickMonth) {
            const value = dayjs(`${showYear}/${month}`).format(dateFormat);
            this.props.onClickMonth(value);
        }
    }

    formatItemClassName = (showYear: number, showMonth: number, month: number) => {
        const {prefixCls, type, endDateShowYear, endDateShowMonth} = this.props;
        let {validateMinDate, validateMaxDate} = this.props;
        const range = monthDayRange(showYear);
        if (type === 'prevMultiple') {
            let endDate = `${endDateShowYear}/${endDateShowMonth - 1}/01`;
            if (endDateShowMonth === 1) {
                endDate = `${endDateShowYear - 1}/12/01`;
            }
            if (getTimeTramp(endDate) < getTimeTramp(validateMaxDate)) {
                validateMaxDate = endDate;
            }
        }
        else if (type === 'nextMultiple') {
            let beginDate = `${this.props.showYear}/${this.props.showMonth + 1}/01`;
            if (this.props.showMonth === 12) {
                beginDate = `${this.props.showYear + 1}/01/01`;
            }
            if (getTimeTramp(beginDate) > getTimeTramp(validateMinDate)) {
                validateMinDate = beginDate;
            }
        }
        const monthClassName = `${prefixCls}-month-container-item`;
        const currentMonthLastDay = getTimeTramp(`${showYear}/${month}/${range[month - 1]}`);
        const currentMonthFirstDay = getTimeTramp(`${showYear}/${month}/01`);
        const disabled = currentMonthLastDay < getTimeTramp(validateMinDate)
                || currentMonthFirstDay > getTimeTramp(validateMaxDate);
        const monthClassNames = classnames(
            monthClassName,
            {
                [`${monthClassName}-selected`]: month === showMonth,
                [`${monthClassName}-disabled`]: disabled,
                [`${monthClassName}-last-row`]: month > 9
            }
        );
        return {
            disabled,
            monthClassNames
        };
    }

    renderMonth = () => {
        const monthContainers: JSX.Element[] = [];
        const {showMonth, showYear, endDateShowYear, endDateShowMonth, type} = this.props;
        const currentMonth = type === 'nextMultiple' ? endDateShowMonth : showMonth;
        const currentYear = type === 'nextMultiple' ? endDateShowYear : showYear;
        monthItems.forEach(month => {
            const {monthClassNames, disabled} = this.formatItemClassName(currentYear, currentMonth, month);
            monthContainers.push(
                <span
                    className={monthClassNames}
                    key={month}
                    onClick={partial(this.onClickMonth, month, disabled)}
                >
                    {`${month}æœˆ`}
                </span>
            );
        });
        return monthContainers;
    }

    render() {
        const {prefixCls, panelType, endDatePanelType, type} = this.props;
        const currentPanelType = type === 'nextMultiple' ? endDatePanelType : panelType;
        if (currentPanelType !== 'month') {
            return null;
        }
        return (
            <div className={`${prefixCls}-month-container`}>
                {this.renderMonth()}
            </div>
        );
    }
}

export default connect((state: DatePickerStore) => {
    return {
        showYear: state.showYear,
        showMonth: state.showMonth,
        endDateShowYear: state.endDateShowYear,
        endDateShowMonth: state.endDateShowMonth,
        validateMinDate: state.validateMinDate,
        validateMaxDate: state.validateMaxDate,
        endDatePanelType: state.endDatePanelType,
        panelType: state.panelType
    };
})(MonthRender);
