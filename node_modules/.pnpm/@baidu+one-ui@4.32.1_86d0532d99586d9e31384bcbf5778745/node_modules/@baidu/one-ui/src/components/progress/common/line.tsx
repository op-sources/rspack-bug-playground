import React, {PureComponent, ReactNode} from 'react';
import {IconTimes, IconAnticlockwise} from 'dls-icons-react';
import classNames from 'classnames';

interface LineProps {
    prefixCls: string;
    percent: number;
    strokeLinecap: string;
    strokeColor: string;
    trailColor: string;
    strokeWidth: number;
    width: number | string;
    showRetry: boolean;
    showCancel: boolean;
    onRetry();
    onCancel();
    children: ReactNode;
};

interface LineState {
    /**
     * 是否为增长状态，用于控制动效
     */
    increasing?: boolean;
    prevPercent?: number;
};


export default class Line extends PureComponent<LineProps, LineState> {

    static defaultProps = {
        prefixCls: 'one-progress',
        percent: 0,
        strokeLinecap: 'round',
        strokeColor: '',
        trailColor: '',
        showRetry: false,
        showCancel: false
    };

    static getDerivedStateFromProps(props, state) {
        const {
            percent
        } = props;
        return {
            prevPercent: percent,
            increasing: percent >= state.prevPercent
        };
    }

    state: LineState = {
        prevPercent: 0
    };

    renderOperation = () => {
        const {
            prefixCls,
            showRetry,
            showCancel,
            onRetry,
            onCancel
        } = this.props;
        if (!showRetry && !showCancel) {
            return null;
        }
        const cancelProps = {
            type: 'close',
            title: '取消',
            onClick: onCancel
        };
        const retryProps = {
            type: 'refresh',
            title: '刷新',
            onClick: onRetry
        };
        return (
            <span className={`${prefixCls}-operation`}>
                {showRetry ? <IconAnticlockwise {...retryProps} /> : null}
                {showCancel ? <IconTimes {...cancelProps} /> : null}
            </span>
        );
    }

    render() {
        const {
            prefixCls,
            percent,
            strokeWidth,
            strokeColor,
            trailColor,
            strokeLinecap,
            width,
            children
        } = this.props;
        const borderRadius = strokeLinecap === 'square' ? 0 : null;
        const outerStyle = {
            width
        };
        const percentStyle = {
            width: `${percent}%`,
            height: strokeWidth,
            borderRadius,
            background: strokeColor
        };
        const trailStyle = {
            borderRadius,
            height: strokeWidth,
            backgroundColor: trailColor
        };
        return (
            <div>
                <div className={`${prefixCls}-outer`} style={outerStyle}>
                    <div className={`${prefixCls}-inner`} style={trailStyle}>
                        <div
                            className={
                                classNames(`${prefixCls}-bg`, {
                                    [`${prefixCls}-bg-transition`]: this.state.increasing
                                })}
                            style={percentStyle}
                        />
                    </div>
                </div>
                {children}
                {this.renderOperation()}
            </div>
        );
    }
}
