import React, {PureComponent, ReactNode} from 'react';
import classes from 'component-classes';
import {
    IconInfoCircleSolid,
    IconExclamationCircleSolid,
    IconCheckCircleSolid,
    IconTimesCircleSolid,
    IconTimes
} from 'dls-icons-react';
import IconLoading from '../../loading';
import {classnames} from '../../../core/commonTools';
import {ToastProps} from '../interface';

const minHeightMap = {
    small: 37,
    medium: 42
};

const getIconInfo = (type, prefixCls) => {
    const map = {
        info: <IconInfoCircleSolid className={`${prefixCls}-info`} />,
        warning: <IconExclamationCircleSolid className={`${prefixCls}-warning`} />,
        success: <IconCheckCircleSolid className={`${prefixCls}-success`} />,
        error: <IconTimesCircleSolid className={`${prefixCls}-error`} />,
        loading: <span className={`${prefixCls}-loading`}><IconLoading /></span>
    };
    return map[type];
};

export interface MessageProps extends Omit<ToastProps, 'style' | 'duration'> {
    target,
    instance
}

export default class Message extends PureComponent<MessageProps> {

    static defaultProps = {
        size: 'medium',
        prefixCls: 'one-toast',
        type: 'info'
    };

    messageRef;

    componentDidMount = () => {
        const {size, prefixCls} = this.props;
        const height = this.messageRef.offsetHeight;
        const minHeight = minHeightMap[size];
        if (height > minHeight) {
            const dom = classes(this.messageRef);
            dom.add(`${prefixCls}-multiple-line`);
        }
    }

    saveRef = ref => {
        this.messageRef = ref;
    }

    render = () => {
        const {prefixCls, type, title, size, content, showCloseIcon, onClose, target, instance} = this.props;
        const wrapClass = classnames(
            {
                [`${prefixCls}-${type}`]: type,
                [`${prefixCls}-header`]: !!title,
                [`${prefixCls}-widthout-header`]: !title,
                [`${prefixCls}-has-close-icon`]: !!showCloseIcon
            },
            `${prefixCls}-custom-content`,
            `${prefixCls}-${size}`
        );

        function removeNotice() {
            if (instance) {
                instance.removeNotice(target);
            }
            onClose();
        };

        const iconNode = getIconInfo(type, prefixCls);
        return (
            <div className={wrapClass} ref={this.saveRef}>
                <span className={`${prefixCls}-icon`}>{iconNode}</span>
                <div className={`${prefixCls}-container`}>
                    {
                        title ? (<div className={`${prefixCls}-container-header`}>{title}</div>) : null
                    }
                    {
                        content ? (<div className={`${prefixCls}-container-content`}>{content}</div>) : null
                    }
                </div>
                {
                    showCloseIcon && (
                        <span className={`${prefixCls}-close-icon`}>
                            <IconTimes
                                className={`${prefixCls}-close-icon-svg`}
                                onClick={removeNotice}
                            />
                        </span>
                    )
                }
            </div>
        );
    }
}
