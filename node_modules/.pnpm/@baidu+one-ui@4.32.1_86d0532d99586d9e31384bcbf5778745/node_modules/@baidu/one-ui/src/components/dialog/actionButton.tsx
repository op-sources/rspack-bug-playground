import React, {Component} from 'react';
import Button, {ButtonProps} from '../button';

interface ActionButtonProps extends ButtonProps {
    actionFn?;
    closeModal({triggerCancel}: {triggerCancel: boolean});
    triggerCancel: boolean;
    order: number;
    otherProps: ButtonProps;
};

interface ActionButtonState {
    loading: boolean;
};

export default class ActionButton extends Component<ActionButtonProps, ActionButtonState> {

    static defaultProps = {
        otherProps: {},
        triggerCancel: true
    }

    constructor(props) {
        super(props);
        this.state = {
            loading: false
        };
    }

    onClick = () => {
        const {actionFn, closeModal, triggerCancel} = this.props;
        if (actionFn) {
            let ret;
            if (actionFn.length) {
                ret = actionFn(closeModal);
            }
            else {
                ret = actionFn();
                if (!ret) {
                    closeModal({triggerCancel});
                }
            }
            if (ret && ret.then) {
                this.setState({loading: true});
                ret.then(() => {
                    closeModal({triggerCancel});
                }, () => {
                    this.setState({loading: false});
                });
            }
        }
        else {
            closeModal({triggerCancel});
        }
    }

    render() {
        const {
            children,
            order,
            style,
            otherProps,
            actionFn,
            closeModal,
            triggerCancel,
            ...restProps
        } = this.props;
        const loading = this.state.loading;
        return (
            <Button
                {...restProps}
                {...otherProps}
                style={{
                    ...style,
                    ...otherProps.style,
                    order
                }}
                onClick={this.onClick}
                loading={loading}
            >
                {children}
            </Button>
        );
    }
}
