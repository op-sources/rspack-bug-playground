import React, {isValidElement, PureComponent} from 'react';
import {partial, findIndex} from 'lodash';
import TabNode from './common/tabNode';
import ScrollBar from './common/scrollBar';
import ScrollContainer from './common/scrollContainer';
import {classnames} from '../../core/commonTools';
import TabPane from './tabPane';
import {TabsProps} from './interface';
import {withConfigConsumer} from '../providerConfig/context';

interface TabsState {
    activeKey?: string;
};

@withConfigConsumer('tabs')
class Tabs extends PureComponent<TabsProps, TabsState> {

    static defaultProps = {
        prefixCls: 'one-tabs',
        className: '',
        size: 'medium',
        showAdd: false,
        type: 'line',
        bordered: true,
        sortable: false,
        onTabClick() {},
        onChange() {},
        onDelete() {},
        onAdd() {},
        showAddDisabled: false,
        addButtonText: '添加标签',
        hideSpace: false
    }

    constructor(props) {
        super(props);
        const activeKey = props.activeKey || props.defaultActiveKey || null;
        this.state = {
            activeKey
        };
    }

    static getDerivedStateFromProps = (nextProps, prevState) => {
        const newState: TabsState = {};
        if ('activeKey' in nextProps && nextProps.activeKey !== prevState.activeKey) {
            newState.activeKey = nextProps.activeKey;
        }
        return newState;
    }

    static TabPane: typeof TabPane;

    onClick = (key, props) => {
        if (props.disabled) {
            return;
        }
        if (!('activeKey' in this.props)) {
            // 非受控
            this.setState({
                activeKey: key
            });
        }
        this.props.onTabClick(key);
        this.onChange(key);
    }

    onBeforeDelete = async (key, props) => {
        if (props.disabled) {
            return false;
        }
        const onBeforeDelete = this.props.onBeforeDelete;
        if (onBeforeDelete) {
            try {
                return await onBeforeDelete(key);
            }
            catch {
                return false;
            }
        }
    }

    onDelete = (key, props) => {
        if (props.disabled) {
            return;
        }
        this.props.onDelete(key);
    }

    onAdd = () => {
        this.props.onAdd(this.state.activeKey);
    }

    onChange = currentKey => {
        if (this.state.activeKey !== currentKey) {
            this.props.onChange(currentKey);
        }
    }

    renderChildren = () => {
        const titles = [];
        const newPaneChildren = [];
        const {children, prefixCls, size, type} = this.props;
        const activeKey = this.state.activeKey;
        React.Children.forEach(children, child => {
            if (!isValidElement(child)) {
                return;
            }
            const {props = {}, key} = child;
            const nodeProps = {
                ...props,
                key,
                currentKey: key,
                activeKey,
                prefixCls,
                size,
                onClick: partial(this.onClick, key, props),
                onDelete: partial(this.onDelete, key, props),
                onBeforeDelete: partial(this.onBeforeDelete, key, props)
            };
            titles.push(nodeProps);
            const paneClassName = classnames(`${prefixCls}-tab-pane`, {
                [`${prefixCls}-tab-pane-is-active`]: activeKey === key,
                [`${prefixCls}-tab-pane-is-inactive`]: activeKey !== key
            });
            newPaneChildren.push(<div key={key} className={paneClassName}>{child}</div>);
        });
        const activeIndex = findIndex(titles, item => activeKey === item.key);
        const total = titles.length;
        return {
            newTitleChildren: titles.map((props, index) => (
                <TabNode {...props} index={index} total={total} activeIndex={activeIndex} />
            )),
            newPaneChildren
        };
    }

    scrollBarRef;

    getScrollBarRef = ref => {
        this.scrollBarRef = ref;
    }

    render() {
        const {
            prefixCls,
            size,
            className,
            hideSpace,
            type,
            bordered,
            showAdd,
            showAddDisabled,
            onNextClick,
            onPrevClick,
            addButtonText,
            extra,
            style,
            sortable,
            onSort
        } = this.props;
        const activeKey = this.state.activeKey;
        const tabsClassNames = classnames(prefixCls,
            `${prefixCls}-${size}`,
            `${prefixCls}-${type}`,
            {
                [`${prefixCls}-hide-space`]: hideSpace,
                [`${prefixCls}-border-less`]: !bordered
            },
            className
        );
        const {
            newTitleChildren,
            newPaneChildren
        } = this.renderChildren();
        return (
            <div className={tabsClassNames}>
                <ScrollBar
                    content={newTitleChildren}
                    prefixCls={prefixCls}
                    showAdd={showAdd}
                    type={type}
                    onAdd={this.onAdd}
                    activeKey={activeKey}
                    showAddDisabled={showAddDisabled}
                    ref={this.getScrollBarRef}
                    onNextClick={onNextClick}
                    onPrevClick={onPrevClick}
                    addButtonText={addButtonText}
                    extra={extra}
                    style={style}
                    size={size}
                    sortable={sortable}
                    onSort={onSort}
                />
                <ScrollContainer
                    content={newPaneChildren}
                    prefixCls={prefixCls}
                    title={newTitleChildren}
                    activeKey={activeKey}
                />
            </div>
        );
    }
}

export default Tabs;

