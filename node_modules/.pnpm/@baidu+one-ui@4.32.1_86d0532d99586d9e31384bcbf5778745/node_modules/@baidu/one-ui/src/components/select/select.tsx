import React, {PureComponent} from 'react';
import warning from 'warning';
import {classnames} from '../../core/commonTools';
import {IconChevronDown, IconTimesCircle, IconTimes} from 'dls-icons-react';
import OneSelect from './common/oneSelect';
import {SelectProps} from './interface';
import {withConfigConsumer} from '../providerConfig/context';

import SelectOption from './option';
import SelectOptionGroup from './optGroup';
import SearchText from './searchText';
import CheckboxText from './checkboxText';
import SingleSelect from './singleSelect';
import SelectPopOver from './selectPopOver';
import {COMPONENT_MAIN} from '../config';

const isMultipleMode = props => props.mode === 'multiple';

const isTagsMode = props => props.mode === 'tags';

interface SelectState {
    errorMessage: string;
};

@withConfigConsumer('select')
class Select extends PureComponent<SelectProps, SelectState> {

    static defaultProps = {
        prefixCls: 'one-select',
        className: '',
        size: 'medium',
        transitionName: 'one-transition-slide-down',
        choiceTransitionName: 'zoom',
        trigger: 'click',
        optionLabelProp: 'children',
        notFoundContent: '无匹配结果',
        multipleRenderTargetMode: 'list',
        suffixIcon: null,
        checkboxPrefixCls: 'one-checkbox',
        loading: false,
        loadingText: '加载中...',
        mode: 'default',
        placeholder: '请选择',
        showCheckAll: false,
        autoClearSearchValue: true
    };

    static Option: typeof SelectOption;
    static OptGroup: typeof SelectOptionGroup;
    /**
     * @deprecated
     */
    static SearchText: typeof SearchText;
    /**
     * @deprecated
     */
    static CheckboxText: typeof CheckboxText;
    /**
     * @deprecated
     */
    static SingleSelect: typeof SingleSelect;
    /**
     * @deprecated
     */
    static SelectPopOver: typeof SelectPopOver;

    constructor(props) {
        super(props);

        const {showSearch, mode} = this.props;
        warning(
            !(showSearch == null && mode === 'multiple'),
            'The `showSearch` prop of `Select` in `multiple mode` will default to `false` in future versions. '
            + 'Please set the value of `showSearch` prop as soon as possible.',
        );
    }

    state = {
        errorMessage: null
    };

    rcSelect;

    static getDerivedStateFromProps = (nextProps, prevState) => {
        if ('errorMessage' in nextProps
        && nextProps.errorMessage !== prevState.errorMessage
        && isMultipleMode(nextProps)) {
            return {
                errorMessage: nextProps.errorMessage
            };
        }
        return null;
    }

    onChange = (value, options) => {
        const props = this.props;
        const {mode, maxTagCount} = props;
        if (props.onChange) {
            props.onChange(value, options);
        }
        if (!('errorMessage' in this.props)) {
            const isMultiple = mode === 'multiple';
            const valueLength = value && value.length;
            if (isMultiple) {
                const errorMessage = valueLength > maxTagCount ? `已超过最大可选数量${valueLength - maxTagCount}个` : '';
                this.setState({
                    errorMessage
                });
            }
        }
    }

    focus() {
        this.rcSelect.focus();
    }

    blur() {
        this.rcSelect.blur();
    }

    saveSelect = node => {
        this.rcSelect = node;
    }

    getNormalizedShowSearch(mode, showSearch) {
        // tags 与 combobox 模式强制开启搜索能力
        if (mode === 'tags' || mode === 'combobox') {
            return true;
        }
        // 由于4.0.15之前版本对于多选搜索不依赖showSearch属性，一直开启，但原默认属性值为false
        // 所以为了多选支持showSearch属性，未配置情况下默认开启搜索
        return showSearch == null ? mode === 'multiple' : showSearch;
    }

    render() {
        const props = this.props;
        const {
            prefixCls,
            className,
            mode,
            onChange,
            width,
            style,
            multipleRenderTargetMode,
            dropdownClassName,
            customRenderTarget,
            defaultVisible,
            visible,
            // @ts-ignore 兼容
            open,
            suffixIcon,
            checkboxPrefixCls,
            showSearch,
            ...restProps
        } = props;

        const normalizedVisible = 'open' in props ? open : visible;

        // 由于4.0.15之前版本对于多选搜索不依赖showSearch属性，一直开启，但原默认属性值为false
        // 所以为了多选支持showSearch属性，未配置情况下默认开启搜索
        const normalizedShowSearch = this.getNormalizedShowSearch(mode, showSearch);

        let {notFoundContent, optionLabelProp} = props;
        const errorMessage = this.state.errorMessage;
        const size = this.props.size;
        let selectCls = classnames(`${prefixCls}-${size}`, COMPONENT_MAIN, {
            [`${prefixCls}-error-line`]: errorMessage
        });
        const isMultiple = isMultipleMode(props);
        const isTags = isTagsMode(props);
        const isCombobox = mode === 'combobox';
        if (isCombobox) {
            notFoundContent = null;
            // children 带 dom 结构时，无法填入输入框
            optionLabelProp = 'value';
        }
        const modeConfig = {
            multiple: isMultiple,
            combobox: isCombobox,
            tags: isTags
        };
        const selectStyle = {
            ...style
        };
        if (width) {
            selectStyle.width = width;
        }
        const dropdownCls = classnames(dropdownClassName, `${prefixCls}-dropdown-${size}`);
        if (!isMultiple && !isTags) {
            selectCls = classnames(
                selectCls,
                className
            );
            return (
                <OneSelect
                    {...restProps}
                    {...modeConfig}
                    ref={this.saveSelect}
                    prefixCls={prefixCls}
                    className={selectCls}
                    optionLabelProp={optionLabelProp}
                    notFoundContent={notFoundContent}
                    inputIcon={<IconChevronDown />}
                    clearIcon={<IconTimesCircle />}
                    removeIcon={<IconTimes />}
                    onChange={onChange}
                    style={selectStyle}
                    customRenderTarget={customRenderTarget}
                    dropdownClassName={dropdownCls}
                    defaultOpen={defaultVisible}
                    open={normalizedVisible}
                    suffixIcon={suffixIcon}
                    checkboxPrefixCls={checkboxPrefixCls}
                    showSearch={normalizedShowSearch}
                />
            );
        }
        const selectRootCls = classnames(`${prefixCls}-container`, className, {
            [`${prefixCls}-multiple`]: isMultiple
        });
        return (
            <div className={selectRootCls}>
                <OneSelect
                    {...restProps}
                    {...modeConfig}
                    prefixCls={prefixCls}
                    className={selectCls}
                    optionLabelProp={optionLabelProp}
                    notFoundContent={notFoundContent}
                    inputIcon={<IconChevronDown />}
                    clearIcon={<IconTimesCircle />}
                    removeIcon={<IconTimes />}
                    onChange={this.onChange}
                    style={selectStyle}
                    dropdownClassName={dropdownCls}
                    size={size}
                    defaultOpen={defaultVisible}
                    open={normalizedVisible}
                    suffixIcon={suffixIcon}
                    titleCallback={{
                        type: multipleRenderTargetMode,
                        selectorName: this.props.selectorName,
                        customRenderTarget:
                            multipleRenderTargetMode === 'custom'
                                ? customRenderTarget
                                : null
                    }}
                    checkboxPrefixCls={checkboxPrefixCls}
                    showSearch={normalizedShowSearch}
                />
                {
                    errorMessage ? (
                        <div className={`${prefixCls}-selection-text-error`}>
                            {errorMessage}
                        </div>
                    ) : null
                }
            </div>
        );
    }
}

export default Select;
