import React, {PureComponent} from 'react';
import KeyCode from 'rc-util/lib/KeyCode';
import {classnames} from '../../../core/commonTools';
import scrollIntoView from 'dom-scroll-into-view';
import {connect} from 'mini-store';
import {MenuItemProps} from '../interface';
import Context from '../context';
import {MenuStore} from './menu';
import ReactDOM from 'react-dom';

interface InnerMenuItemProps extends MenuItemProps {
    onMouseEnter,
    multiple,
    onClick,
    onSelect,
    selected,
    onMouseLeave,
    title: string,
    href: string,
    target: string,
    mode: 'inline' | 'vertical',
    role: string,
    itemIcon,
    store,
    inlineIndent,
    renderMenuItem,
    parentMenu,
    eventKey,
    onItemHover,
    subMenuOpenDelay,
    subMenuCloseDelay,
    forceSubMenuRender,
    onOpenChange,
    onDeselect,
    builtinPlacements,
    openKeys,
    selectedKeys,
    triggerSubMenuAction,
    subMenuKey,
    manualRef,
    active,
    prefixCls,
    onTitleMouseEnter,
    onTitleMouseLeave,
    onTitleClick
};


export class MenuItem extends PureComponent<InnerMenuItemProps> {
    static isMenuItem = true;

    static defaultProps = {
        onSelect: () => {},
        onMouseEnter: () => {},
        onMouseLeave: () => {},
        manualRef: () => {}
    };

    static contextType = Context;

    node;

    componentDidUpdate(prevProps) {
        const {
            active,
            parentMenu,
            eventKey
        } = this.props;
        if (
            !prevProps.active
                && active
                && (!parentMenu || !parentMenu[`scrolled-${eventKey}`])
        ) {
            if (this.node) {
                scrollIntoView(this.node, ReactDOM.findDOMNode(parentMenu), {
                    onlyScrollIfNeeded: true
                });
                parentMenu[`scrolled-${eventKey}`] = true;
            }
        }
        else if (parentMenu && parentMenu[`scrolled-${eventKey}`]) {
            delete parentMenu[`scrolled-${eventKey}`];
        }
    }

    onKeyDown = e => {
        const {keyCode} = e;
        if (keyCode === KeyCode.ENTER) {
            this.onClick(e);
            return true;
        }
        return undefined;
    };

    onMouseLeave = e => {
        const {eventKey, onItemHover, onMouseLeave} = this.props;
        onItemHover({
            key: eventKey,
            hover: false
        });
        onMouseLeave({
            key: eventKey,
            domEvent: e
        });
    };

    onMouseEnter = e => {
        const {eventKey, onItemHover, onMouseEnter} = this.props;
        onItemHover({
            key: eventKey,
            hover: true
        });
        onMouseEnter({
            key: eventKey,
            domEvent: e
        });
    };

    onClick = e => {
        const {
            eventKey,
            multiple,
            onClick,
            onSelect,
            onDeselect,
            selected
        } = this.props;
        const info = {
            key: eventKey,
            keyPath: [eventKey],
            item: this,
            domEvent: e
        };
        onClick(info);
        if (multiple) {
            if (selected) {
                onDeselect(info);
            }
            else {
                onSelect(info);
            }
        }
        else if (!selected) {
            onSelect(info);
        }
    };

    saveNode = node => {
        this.node = node;
    };

    render() {
        const {
            className,
            disabled,
            active,
            selected,
            title,
            href,
            target,
            children,
            mode,
            role,
            level,
            icon,
            style,
            prefixCls,
            inlineIndent,
            renderMenuItem,
            parentMenu,
            eventKey,
            onItemHover,
            subMenuOpenDelay,
            subMenuCloseDelay,
            forceSubMenuRender,
            onOpenChange,
            onDeselect,
            builtinPlacements,
            openKeys,
            selectedKeys,
            triggerSubMenuAction,
            subMenuKey,
            manualRef,
            onTitleMouseEnter,
            onTitleMouseLeave,
            onTitleClick,
            onMouseEnter,
            multiple,
            onClick,
            onSelect,
            onMouseLeave,
            itemIcon,
            store,
            ...restProps
        } = this.props;
        let attrs = {
            title,
            // set to menuitem by default
            role: role || 'menuitem',
            'aria-disabled': disabled
        };

        if (role === 'option') {
            attrs['aria-selected'] = selected;
        }
        else if (role === null || role === 'none') {
            // sometimes we want to specify role inside <li/> element
            // <li><a role='menuitem'>Link</a></li> would be a good example
            // in this case the role on <li/> should be "none" to
            // remove the implied listitem role.
            // https://www.w3.org/TR/wai-aria-practices-1.1/examples/menubar/menubar-1/menubar-1.html
            attrs.role = 'none';
        }
        // In case that onClick/onMouseLeave/onMouseEnter is passed down from owner
        const mouseEvent = {
            onClick: disabled ? null : this.onClick,
            onMouseLeave: disabled ? null : this.onMouseLeave,
            onMouseEnter: disabled ? null : this.onMouseEnter
        };
        const itemStyle = {
            ...style
        };
        if (mode === 'inline') {
            itemStyle.paddingLeft = this.context.inlineIndent * (level - 1) + this.context.inlinePaddingLeft;
        }

        let afterIcon = itemIcon;
        if (typeof itemIcon === 'function') {
            // TODO: This is a bug which should fixed after TS refactor
            afterIcon = React.createElement(itemIcon, this.props);
        }

        return (
            <li
                {...restProps}
                {...attrs}
                {...mouseEvent}
                style={itemStyle}
                className={
                    classnames(`${prefixCls}-item`, className, {
                        [`${prefixCls}-item-active`]: !disabled && active,
                        [`${prefixCls}-item-selected`]: selected,
                        [`${prefixCls}-item-disabled`]: disabled
                    })
                }
                ref={this.saveNode}
            >
                {
                    href ? (
                        <a href={href} target={target}>
                            {children}
                        </a>
                    ) : children
                }
                {afterIcon}
            </li>
        );
    }
}

const connected = connect(
    ({activeKey, selectedKeys}: MenuStore, {eventKey, subMenuKey}: InnerMenuItemProps) => ({
        active: activeKey[subMenuKey] === eventKey,
        selected: selectedKeys.indexOf(eventKey) !== -1
    }),
)(MenuItem);

export default connected;
