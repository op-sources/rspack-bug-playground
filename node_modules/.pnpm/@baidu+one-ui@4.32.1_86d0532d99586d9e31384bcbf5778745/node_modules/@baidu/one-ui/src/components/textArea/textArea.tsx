import React, {CSSProperties, PureComponent} from 'react';
import omit from 'omit.js';
import {
    handleErrorMessage,
    fixControlledValue,
    commonRemoveProps
} from '../../core/inputTools';
import {
    classnames,
    locationRemoveProps,
    handleCountTips,
    CHINA_COUNT_MODE,
    getRealLength
} from '../../core/commonTools';
import calculateNodeHeight from '../../core/textAreaTools';
import Popover from '../popover';
import {getPopoverProps, tipsAndErrorRender} from '../../core/tipsAndErrorTools';
import {TextAreaProps} from './interface';
import {withConfigConsumer} from '../providerConfig/context';
import {COMPONENT_MAIN} from '../config';

function onNextFrame(cb) {
    if (window.requestAnimationFrame) {
        return window.requestAnimationFrame(cb);
    }
    return window.setTimeout(cb, 1);
}

function clearNextFrameAction(nextFrameId) {
    if (window.cancelAnimationFrame) {
        window.cancelAnimationFrame(nextFrameId);
    }
    else {
        window.clearTimeout(nextFrameId);
    }
}

interface TextAreaState {
    value?: string;
    inputValue?: string;
    prevProps?: TextAreaProps;
    hasFocus?: boolean;
    textareaStyles?: CSSProperties;
    errorMessage?: string;
}

@withConfigConsumer('textarea')
class TextArea extends PureComponent<TextAreaProps, TextAreaState> {
    static defaultProps = {
        prefixCls: 'one-textarea',
        width: 300,
        maxRows: 8,
        minRows: 3,
        maxLen: null,
        errorMessage: null,
        location: 'right',
        tipLocation: null,
        errorLocation: null,
        tipText: null,
        onChange: () => {},
        onBlur: () => {},
        onFocus: () => {},
        size: 'medium',
        isRequired: false,
        filterArray: [],
        countMode: CHINA_COUNT_MODE,
        getLength: null,
        disabled: false,
        readOnly: false,
        showErrorMessage: true,
        showErrorWithoutErrorMessage: false,
        originTextAreaProps: {}
    };

    constructor(props) {
        super(props);
        const value = typeof props.value === 'undefined' ? props.defaultValue : props.value;
        this.state = {
            prevProps: props,
            hasFocus: false,
            textareaStyles: null,
            value,
            inputValue: value,
            errorMessage: ''
        };
    }

    componentDidMount() {
        this.resizeTextarea();
        this.setContainerRef();
    }

    setContainerRef() {
        const containerRef = this.props.containerRef;
        if (containerRef) {
            return containerRef(this);
        }
    }

    componentDidUpdate(prevProps) {
        const value = this.props.value;
        if (value !== prevProps.value) {
            if (this.nextFrameActionId) {
                clearNextFrameAction(this.nextFrameActionId);
            }
            this.nextFrameActionId = onNextFrame(this.resizeTextarea);
        }
        this.setContainerRef();
    }

    static getDerivedStateFromProps(nextProps, prevState) {
        const newState: TextAreaState = {
            prevProps: nextProps
        };
        const value = nextProps.value;
        if ('value' in nextProps && value !== (prevState.prevProps || {}).value) {
            newState.value = value;
            newState.inputValue = value;
        }
        return newState;
    }

    ___imeStart___;
    nextFrameActionId;
    textAreaRef;
    counterRef;

    onInputCompositionStart = () => {
        this.___imeStart___ = true;
    }

    onInputCompositionEnd = e => {
        this.___imeStart___ = false;
        this.onChange(e);
    }

    onChange = e => {
        this.resizeTextarea();
        if (this.___imeStart___) {
            this.setState({inputValue: e.target.value});
            return;
        }
        this.handleError(e, 'onChange', false);
    }

    resizeTextarea = () => {
        const {minRows, maxRows} = this.props;
        this.setState({textareaStyles: calculateNodeHeight(this.textAreaRef, this.counterRef, false, minRows, maxRows)});
    };

    handleError = (e, funcName, isHandleMin = true) => {
        const props = this.props;
        const value = e && e.target && e.target.value;
        const errorMessage = handleErrorMessage({
            ...props,
            value
        }, isHandleMin, true);
        const result = {
            value,
            errorMessage,
            event: e,
            target: e && e.target
        };
        const newState: TextAreaState = {
            errorMessage
        };
        if (!('value' in this.props)) {
            // this.setState(result);
            newState.value = value;
            newState.inputValue = value;
        }
        else {
            newState.inputValue = this.state.value;
        }
        this.setState(newState);
        const func = props[funcName];
        if (func) {
            func(result, e);
        }
    }

    blur = e => {
        this.setState({hasFocus: false});
        this.handleError(e, 'onBlur', true);
    }

    focus = e => {
        this.setState({hasFocus: true});
        this.handleError(e, 'onFocus', true);
    }

    saveTextAreaRef = textArea => {
        this.textAreaRef = textArea;
    };

    saveCounterRef = node => {
        this.counterRef = node;
    };

    render() {
        const props = this.props;
        const propsErrorMessage = props.errorMessage;
        const otherProps = omit(props, [
            'prefixCls',
            'maxRows',
            'minRows',
            'filterArray',
            'defaultValue',
            'showErrorWithoutErrorMessage',
            'showErrorMessage',
            'originTextAreaProps',
            'containerRef',
            'width',
            ...commonRemoveProps,
            ...locationRemoveProps
        ]);
        const {
            width,
            prefixCls,
            maxLen,
            className,
            disabled,
            readOnly,
            showErrorMessage,
            showErrorWithoutErrorMessage,
            tipText,
            location,
            tipLocation,
            errorLocation,
            style = {},
            size
        } = props;
        const {
            textareaStyles,
            hasFocus,
            value,
            inputValue,
            errorMessage: stateErrorMessage
        } = this.state;
        const errorMessage = propsErrorMessage == null ? stateErrorMessage : propsErrorMessage;
        const defaultProps = {
            value: fixControlledValue(inputValue),
            style: {
                width,
                ...style,
                ...textareaStyles
            },
            className: classnames(prefixCls, className, COMPONENT_MAIN, {
                [`${prefixCls}-disabled`]: disabled,
                [`${prefixCls}-readOnly`]: readOnly
            }),
            ref: this.saveTextAreaRef,
            onFocus: this.focus,
            onBlur: this.blur,
            onChange: this.onChange,
            onCompositionStart: this.onInputCompositionStart,
            onCompositionEnd: this.onInputCompositionEnd,
            ...props.originTextAreaProps
        };
        const containerProps = {
            className: classnames(`${prefixCls}-container`, {
                [`${prefixCls}-error`]: errorMessage || showErrorWithoutErrorMessage
            })
        };
        const popParams = {
            ...props,
            errorMessage
        };
        const wrapperClass = `${prefixCls}-wrapper`;
        const showSideMessage = showErrorMessage
            && (
                ((tipText || errorMessage) && location === 'right')
                || (tipText && tipLocation === 'right')
                || (errorMessage && errorLocation === 'right')
            );
        const wrapperProps = {
            className: classnames(wrapperClass, {
                [`${wrapperClass}-${size}`]: size
            }),
            style: {
                width: !showSideMessage ? style.width || width : undefined
            }
        };
        return (
            <div {...wrapperProps}>
                <div {...containerProps}>
                    <Popover {...getPopoverProps(popParams, {hasFocus})}>
                        <textarea {...{...otherProps, ...defaultProps}} data-type="textarea" />
                    </Popover>
                    {maxLen
                        ? (
                            <span className={`${prefixCls}-count-tips`} ref={this.saveCounterRef}>
                                {handleCountTips(getRealLength(props, value), maxLen)}
                            </span>
                        )
                        : null
                    }
                </div>
                {showErrorMessage ? tipsAndErrorRender(popParams) : null}
            </div>
        );
    }
}

export default TextArea;

