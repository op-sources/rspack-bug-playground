import React from 'react';

export function getKeyFromChildrenIndex(
    child,
    menuEventKey,
    index,
) {
    const prefix = menuEventKey || '';
    const props = child.props;
    if (props && props.value != null) {
        return props.value;
    }
    return child.key || `${prefix}item_${index}`;
}

export function getMenuIdFromSubMenuEventKey(eventKey) {
    return `${eventKey}-menu-`;
}

export function loopMenuItem(
    children,
    cb,
) {
    let index = -1;
    React.Children.forEach(children, c => {
        index += 1;
        if (c && c.type && (c.type).isMenuItemGroup) {
            React.Children.forEach(c.props.children, c2 => {
                index += 1;
                cb(c2, index);
            });
        } else {
            cb(c, index);
        }
    });
}

export function loopMenuItemRecursively(
    children,
    keys,
    ret
) {
    /* istanbul ignore if */
    if (!children || ret.find) {
        return;
    }
    React.Children.forEach(children, c => {
        if (c) {
            const construct = c.type;
            if (
                !construct || !(
                    construct.isSubMenu
                        || construct.isMenuItem
                        || construct.isMenuItemGroup
                )
            ) {
                return;
            }
            if (keys.indexOf((c).key) !== -1) {
                ret.find = true;
            } else if (c.props.children) {
                loopMenuItemRecursively(c.props.children, keys, ret);
            }
        }
    });
}

export const menuAllProps = [
    'defaultSelectedKeys',
    'selectedKeys',
    'defaultOpenKeys',
    'openKeys',
    'mode',
    'getPopupContainer',
    'onSelect',
    'onDeselect',
    'onDestroy',
    'subMenuOpenDelay',
    'subMenuCloseDelay',
    'forceSubMenuRender',
    'triggerSubMenuAction',
    'level',
    'selectable',
    'multiple',
    'onOpenChange',
    'visible',
    'focusable',
    'defaultActiveFirst',
    'prefixCls',
    'inlineIndent',
    'parentMenu',
    'title',
    'prefixCls',
    'eventKey',
    'active',
    'onItemHover',
    'onTitleMouseEnter',
    'onTitleMouseLeave',
    'onTitleClick',
    'popupAlign',
    'popupOffset',
    'isOpen',
    'renderMenuItem',
    'manualRef',
    'subMenuKey',
    'disabled',
    'index',
    'isSelected',
    'store',
    'activeKey',
    'builtinPlacements',
    'overflowedIndicator',
    'motion',
    'attribute',
    'value',
    'popupClassName',
    'inlineCollapsed',
    'inlineIndent',
    'inlinePaddingLeft',
    'menu',
    'theme',
    'itemIcon',
    'icon'
];
