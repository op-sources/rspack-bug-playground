import React, {PureComponent} from 'react';
import Trigger from 'rc-trigger';
import {throttle} from 'lodash';
import ResizeObserver from 'resize-observer-polyfill';
import Content from './content';
import {TooltipProps} from '../interface';
import {BuiltinPlacements} from 'rc-menu/lib/interface';

type InnerTooltipProps = TooltipProps & {
    builtinPlacements: BuiltinPlacements;
};
export default class Tooltip extends PureComponent<InnerTooltipProps> {

    resizeObserver;
    trigger;

    getPopupElement = () => {
        const {overlay, prefixCls} = this.props;
        return [
            <div className={`${prefixCls}-arrow`} key="arrow" />,
            <Content key="content" prefixCls={prefixCls} overlay={overlay} />
        ];
    };

    getPopupDOMNode() {
        return this.trigger.getPopupDomNode();
    }

    saveTrigger = node => {
        this.trigger = node;
    };

    handleAfterVisibleChange = visible => {
        if (this.props.afterPopupVisibleChange) {
            this.props.afterPopupVisibleChange(visible);
        }
        if (this.resizeObserver) {
            return;
        }
        const popup = this.getPopupDOMNode();
        if (popup) {
            this.resizeObserver = new ResizeObserver(throttle(() => {
                this.trigger && this.trigger.forcePopupAlign();
            }, 200));
            this.resizeObserver.observe(popup);
        }
    };

    componentWillUnmount() {
        if (this.resizeObserver) {
            this.resizeObserver.disconnect();
        }
    }

    render() {
        const {
            overlayClassName,
            trigger = 'hover',
            mouseEnterDelay = 0,
            mouseLeaveDelay = 0.1,
            overlayStyle,
            children,
            onVisibleChange = () => {},
            transitionName,
            placement = 'right',
            align = {
                ignoreShake: true
            },
            destroyTooltipOnHide = false,
            defaultVisible,
            getTooltipContainer,
            prefixCls,
            builtinPlacements,
            // ref,
            ...restProps
        } = this.props;
        const extraProps = {...restProps};
        if ('visible' in this.props) {
            // @ts-ignore
            extraProps.popupVisible = this.props.visible;
        }
        return (
            <Trigger
                popupClassName={overlayClassName}
                prefixCls={prefixCls}
                popup={this.getPopupElement()}
                action={trigger}
                builtinPlacements={builtinPlacements}
                popupPlacement={placement}
                ref={this.saveTrigger}
                popupAlign={align}
                getPopupContainer={getTooltipContainer}
                onPopupVisibleChange={onVisibleChange}
                popupMotion={null}
                defaultPopupVisible={defaultVisible}
                destroyPopupOnHide={destroyTooltipOnHide}
                mouseLeaveDelay={mouseLeaveDelay}
                popupStyle={overlayStyle}
                mouseEnterDelay={mouseEnterDelay}
                {...extraProps}
                afterPopupVisibleChange={this.handleAfterVisibleChange}
            >
                {children}
            </Trigger>
        );
    }
}
