/**
 * @file tree main
 * @author huangshiming
 * @date 2020-05-18
 */
import React, {isValidElement, PureComponent} from 'react';
import {classnames} from '../../core/commonTools';
import InnerVirtualTree from './common/virtualTree';
import InnerTree from './common/tree';
import {IconCaretRight} from 'dls-icons-react';
import IconLoading from '../loading';
import {TreeProps} from './interface';

class Tree extends PureComponent<TreeProps> {

    static defaultProps = {
        prefixCls: 'one-tree',
        checkable: false,
        showIcon: false,
        checkStrictly: false,
        size: 'medium'
    };

    static TreeNode;
    static VirtualTreeNode;

    treeRef;

    renderSwitcherIcon = ({isLeaf, loading}) => {
        const {prefixCls, switcherIcon} = this.props;
        if (loading) {
            return <IconLoading size="small" className={`${prefixCls}-switcher-loading-icon`} />;
        }
        if (isLeaf) {
            return null;
        }
        const switcherCls = `${prefixCls}-switcher-icon`;
        if (isValidElement(switcherIcon)) {
            const switcherOriginCls = (switcherIcon.props && switcherIcon.props.className) || '';
            return React.cloneElement(switcherIcon, {
                className: classnames(switcherOriginCls, switcherCls)
            });
        }
        return <IconCaretRight className={`${prefixCls}-node-switch-arrow`} />;
    }

    setTreeRef = node => {
        this.treeRef = node;
    };

    getTreeInterState = () => {
        return this.treeRef.state;
    }

    render() {
        const {
            prefixCls,
            className,
            showIcon,
            size,
            switcherIcon,
            parentContainerHeight,
            children
        } = this.props;

        const TreeComponent = !parentContainerHeight ? InnerTree : InnerVirtualTree;

        return (
            <TreeComponent
                {...this.props}
                ref={this.setTreeRef}
                className={classnames(className, {
                    [`${prefixCls}-icon-hide`]: !showIcon
                }, `${prefixCls}-${size}`)}
                switcherIcon={typeof switcherIcon === 'function'
                    ? switcherIcon
                    : this.renderSwitcherIcon}
            >
                {children}
            </TreeComponent>
        );
    }
}

export default Tree;
