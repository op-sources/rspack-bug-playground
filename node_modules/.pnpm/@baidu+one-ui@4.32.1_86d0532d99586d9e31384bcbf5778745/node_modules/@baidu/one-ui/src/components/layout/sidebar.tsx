import React, {PureComponent} from 'react';
import {LayoutSidebarProps} from './interface';
import {withConfigConsumer} from '../providerConfig/context';
import {classnames} from '../../core/commonTools';
import Button from '../button';
import {IconChevronLeft, IconChevronRight, IconIndent, IconOutdent} from 'dls-icons-react';
import Context from './context';

const AUTO_COLLAPSE_WIDTH = 1248;

interface LayoutSidebarState {
    collapsed: boolean,
    windowWidth: number
}

@withConfigConsumer('layout-sidebar')
class LayoutSidebar extends PureComponent<LayoutSidebarProps, LayoutSidebarState> {
    static defaultProps: LayoutSidebarProps = {
        prefixCls: 'one-layout-sidebar',
        defaultCollapsed: false,
        collapseMode: 'slim',
        sticky: false,
        autoCollapse: false,
        showToggle: false
    }

    static contextType = Context;

    constructor(props: LayoutSidebarProps) {
        super(props);
        const {
            defaultCollapsed,
            autoCollapse,
            onCollapsedChange
        } = this.props;

        const state = {
            collapsed: defaultCollapsed || false,
            windowWidth: null
        };

        const windowWidth = window?.innerWidth;
        if (autoCollapse && windowWidth && windowWidth < AUTO_COLLAPSE_WIDTH) {
            state.collapsed = true;
            state.windowWidth = windowWidth;
            if (onCollapsedChange) {
                onCollapsedChange(true, true);
            }
        }

        this.state = state;
    };

    static getDerivedStateFromProps(props, state) {
        if ('collapsed' in props && props.collapsed !== state.collapsed) {
            return {
                collapsed: props.collapsed
            };
        }
        return null;
    }

    renderCollapseTrigger() {
        const {
            prefixCls,
            showToggle,
            collapseMode
        } = this.props;
        if (!showToggle) {
            return null;
        }

        const collapsed = this.state.collapsed;
        const hiddenMode = collapseMode === 'hidden';
        const icon = hiddenMode
            ? (collapsed ? IconChevronRight : IconChevronLeft)
            : (collapsed ? IconIndent : IconOutdent);

        return (
            <div className={
                    classnames(
                        `${prefixCls}-toggle`,
                        {
                            [`${prefixCls}-toggle-bottom`]: !hiddenMode,
                            [`${prefixCls}-toggle-right`]: hiddenMode
                        }
                    )
                }
            >
                <Button
                    type={hiddenMode ? 'translucent' : 'text'}
                    icon={icon}
                    onClick={this.toggleCollapsed}
                    className={`${prefixCls}-toggle-icon`}
                />
            </div>
        );
    }

    toggleCollapsed = auto => {
        const {
            onCollapsedChange
        } = this.props;
        const collapsed = !this.state.collapsed;
        if (!('collapsed' in this.props)) {
            this.setState({
                collapsed
            });
        }
        if (onCollapsedChange) {
            onCollapsedChange(collapsed, auto === true);
        }
    }

    autoCollapse = () => {
        const {
            collapsed,
            windowWidth: prevWidth
        } = this.state;
        const width = window.innerWidth;
        if (!collapsed
            && (prevWidth == null || prevWidth >= AUTO_COLLAPSE_WIDTH)
            && width < AUTO_COLLAPSE_WIDTH
        ) {
            this.toggleCollapsed(true);
        }
        this.setState({
            windowWidth: width
        });
    }

    componentDidMount() {
        this.context?.registerSidebar();
        const autoCollapse = this.props.autoCollapse;
        if (autoCollapse && window) {
            window.addEventListener('resize', this.autoCollapse);
            if (this.state.windowWidth == null) {
                this.autoCollapse();
            }
        }
    }

    componentDidUpdate(preProps) {
        const autoCollapse = this.props.autoCollapse;
        if (preProps.autoCollapse !== autoCollapse && window) {
            autoCollapse
                ? window.addEventListener('resize', this.autoCollapse)
                : window.removeEventListener('resize', this.autoCollapse);
            if (autoCollapse) {
                this.autoCollapse();
            }
        }
    }

    componentWillUnmount() {
        this.context?.unregisterSidebar();
        const autoCollapse = this.props.autoCollapse;
        if (autoCollapse && window) {
            window.removeEventListener('resize', this.autoCollapse);
        }
    }

    render() {
        const {
            className,
            prefixCls,
            children,
            showToggle,
            collapseMode,
            defaultCollapsed,
            collapsed,
            onCollapsedChange,
            width,
            style,
            sticky,
            autoCollapse,
            ...restProps
        } = this.props;

        let styleProp;
        if (style != null || width != null) {
            styleProp = {
                width,
                ...style
            };
        }

        const hiddenMode = collapseMode === 'hidden';

        return (
            <aside
                className={classnames(prefixCls, className, {
                    [`${prefixCls}-collapsed`]: this.state.collapsed,
                    [`${prefixCls}-mode-hidden`]: hiddenMode,
                    [`${prefixCls}-sticky`]: sticky
                })}
                {...restProps}
                style={styleProp}
            >
                <div className={`${prefixCls}-main`}>
                    {children}
                </div>
                {this.renderCollapseTrigger()}
            </aside>
        );
    }
}

export default LayoutSidebar;