import React, {useContext} from 'react';
import TableHeaderRow from './tableHeaderRow';
import {InnerTableColumnProps} from './interface';
import Context from './context';

function getHeaderRows(columns: InnerTableColumnProps[], currentRow = 0, rows?) {
    rows = rows || [];
    rows[currentRow] = rows[currentRow] || [];

    columns.forEach(column => {
        if (column.rowSpan && rows.length < column.rowSpan) {
            while (rows.length < column.rowSpan) {
                rows.push([]);
            }
        }
        const cell = {
            key: column.key,
            className: column.className || '',
            render: column.renderTitle,
            column
        };
        if (column.children) {
            getHeaderRows(column.children, currentRow + 1, rows);
        }
        if (column.colSpan !== 0) {
            rows[currentRow].push(cell);
        }
    });
    return rows.filter(row => row.length > 0);
}

interface TableHeaderProps {
    fixed: 'left' | 'right' | boolean,
    fixedHeader: boolean,
    columns: InnerTableColumnProps[],
    expander,
    onMoving,
    onDragEnd,
    onDragStart,
    onHeaderCellMouseEnter
    onHeaderCellMouseLeave
}

export default function TableHeader(props: TableHeaderProps) {
    const {table} = useContext(Context);
    const {
        prefixCls,
        showHeader,
        onHeaderRow
    } = table.props;
    const {
        expander,
        columns,
        fixed,
        onMoving,
        onDragEnd,
        onDragStart,
        onHeaderCellMouseEnter,
        onHeaderCellMouseLeave
    } = props;

    if (!showHeader) {
        return null;
    }

    const rows = getHeaderRows(columns);

    // expander.renderExpandIndentCell(rows);

    return (
        <thead className={`${prefixCls}-thead`}>
            {rows.map((row, index) => (
                <TableHeaderRow
                    key={index}
                    index={index}
                    last={index === rows.length - 1}
                    fixed={fixed}
                    columns={columns}
                    row={row}
                    rows={rows}
                    onHeaderRow={onHeaderRow}
                    prefixCls={prefixCls}
                    onMoving={onMoving}
                    onDragEnd={onDragEnd}
                    onDragStart={onDragStart}
                    onHeaderCellMouseEnter={onHeaderCellMouseEnter}
                    onHeaderCellMouseLeave={onHeaderCellMouseLeave}
                />
            ))}
        </thead>
    );
}
