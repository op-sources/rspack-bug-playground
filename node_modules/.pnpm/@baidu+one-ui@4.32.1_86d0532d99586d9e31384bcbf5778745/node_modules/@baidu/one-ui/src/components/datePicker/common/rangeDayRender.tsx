import React, {PureComponent} from 'react';
import {connect} from 'mini-store';
import WeekRender from './weekRender';
import Calendar from './calendar';
import {DatePickerStore} from '../datePicker';


interface DayItemRenderProps {
    prefixCls: string,
    panelType: string,
    currentDate: string[],
    type: string,
    endDatePanelType: string,
    endDateShowMonth: number,
    endDateShowYear: number,
    showYear: number,
    showMonth: number,
    validateMinDate: string,
    validateMaxDate: string,
    dateFormat: string,
    hoverDate: string,
    validateDisabled(value: {
        selectedValue: string[],
        dayItem: string,
        timeStamp: number,
        getTimeStamp(value: string): number
    }): boolean,
    mode: 'week' | 'date',
    step: number
}

class DayItemRender extends PureComponent<DayItemRenderProps> {

    render() {
        const {
            panelType,
            prefixCls,
            type,
            endDatePanelType,
            endDateShowYear,
            endDateShowMonth,
            currentDate
        } = this.props;
        const currentPanelType = type === 'nextMultiple' ? endDatePanelType : panelType;
        if (currentPanelType === 'month') {
            return null;
        }
        const bodyContainerClassName = `${prefixCls}-day-container`;
        let otherProps: {beginDate: string, endDate: string, showYear?: number, showMonth?: number} = {
            beginDate: currentDate[0] || '',
            endDate: currentDate[1] || ''
        };
        if (type === 'nextMultiple') {
            otherProps = {
                ...otherProps,
                showYear: endDateShowYear,
                showMonth: endDateShowMonth
            };
        }
        return (
            <div className={bodyContainerClassName}>
                <WeekRender {...this.props} />
                <Calendar {...this.props} {...otherProps} multiple />
            </div>
        );
    }
}

export default connect((state: DatePickerStore) => {
    return {
        showYear: state.showYear,
        showMonth: state.showMonth,
        panelType: state.panelType,
        validateMinDate: state.validateMinDate,
        validateMaxDate: state.validateMaxDate,
        endDateShowYear: state.endDateShowYear,
        endDateShowMonth: state.endDateShowMonth,
        endDatePanelType: state.endDatePanelType
    };
})(DayItemRender);
