import React, {PureComponent} from 'react';
import {values} from 'lodash';
import Line from './common/line';
import Circle from './common/circle';
import {classnames} from '../../core/commonTools';
import {
    IconTimes, IconTimesCircle,
    IconCheck, IconCheckCircle
} from 'dls-icons-react';
import {ProgressProps} from './interface';
import {withConfigConsumer} from '../providerConfig/context';


export const PROGRESS_STATUS_MAP = {
    NORMAL: 'normal',
    EXCEPTION: 'exception',
    SUCCESS: 'success'
};

const ProgressStatuses = values(PROGRESS_STATUS_MAP);

const strokeWidthMap = {
    medium: 6,
    small: 4,
    xsmall: 2
};

const validProgress = progress => {
    if (!progress || progress < 0) {
        return 0;
    }
    if (progress > 100) {
        return 100;
    }
    return progress;
};

@withConfigConsumer('progress')
class Progress extends PureComponent<ProgressProps> {

    static defaultProps = {
        prefixCls: 'one-progress',
        type: 'line',
        size: 'medium',
        percent: 0,
        showInfo: true,
        strokeLinecap: 'round',
        trailColor: ''
    };

    getProgressStatus = () => {
        const {status, percent} = this.props;
        if (ProgressStatuses.indexOf(status) < 0 && percent >= 100) {
            return 'success';
        }
        return status || 'normal';
    }

    renderProcessInfo = (prefixCls, progressStatus) => {
        const {showInfo, format, type, percent} = this.props;
        if (!showInfo) {
            return null;
        }
        let text;
        const textFormatter = format || (percentNumber => `${percentNumber}%`);
        if (format || (progressStatus !== 'exception' && progressStatus !== 'success')) {
            text = textFormatter(validProgress(percent));
        }
        else if (progressStatus === 'exception') {
            if (type === 'line') {
                text = <span><IconTimesCircle className={`${prefixCls}-close-circle-icon`} /></span>;
            }
            else {
                text = <span><IconTimes className={`${prefixCls}-close-icon`} /></span>;
            }
        }
        else if (progressStatus === 'success') {
            if (type === 'line') {
                text = <span><IconCheckCircle className={`${prefixCls}-check-circle-icon`} /></span>;
            }
            else {
                text = <span><IconCheck className={`${prefixCls}-check-icon`} /></span>;
            }
        }
        return (
            <span className={`${prefixCls}-text`} title={typeof text === 'string' ? text : undefined}>
                {text}
            </span>
        );
    }

    render() {
        const {
            prefixCls,
            className,
            type,
            showInfo,
            percent,
            strokeLinecap,
            strokeColor,
            strokeWidth,
            width,
            trailColor,
            onRetry,
            onCancel,
            size,
            style
        } = this.props;
        const progressStatus = this.getProgressStatus();
        const classString = classnames(
            prefixCls,
            className,
            [`${prefixCls}-${type}`],
            [`${prefixCls}-status-${progressStatus}`],
            {
                [`${prefixCls}-show-info`]: showInfo,
                [`${prefixCls}-${size}`]: size,
                [`${prefixCls}-show-operation`]: onRetry || onCancel
            }
        );
        const validPercent = validProgress(percent);
        const lineProps = {
            prefixCls,
            percent: validPercent,
            strokeLinecap,
            strokeColor,
            trailColor,
            width,
            strokeWidth: strokeWidth || strokeWidthMap[size],
            showRetry: onRetry && progressStatus === PROGRESS_STATUS_MAP.EXCEPTION,
            showCancel: onCancel
                && progressStatus !== PROGRESS_STATUS_MAP.EXCEPTION
                && progressStatus !== PROGRESS_STATUS_MAP.SUCCESS,
            onRetry,
            onCancel
        };
        const circleProps = {
            prefixCls,
            percent: validPercent,
            strokeLinecap,
            strokeColor,
            strokeWidth: strokeWidth || strokeWidthMap[size],
            width,
            trailColor
        };
        const progressInfo = this.renderProcessInfo(prefixCls, progressStatus);
        return (
            <div className={classString} style={style}>
                {type === 'line' ? <Line {...lineProps}>{progressInfo}</Line> : null}
                {type === 'circle' ? <Circle {...circleProps} >{progressInfo}</Circle> : null}
            </div>
        );
    }
}

export default Progress;
