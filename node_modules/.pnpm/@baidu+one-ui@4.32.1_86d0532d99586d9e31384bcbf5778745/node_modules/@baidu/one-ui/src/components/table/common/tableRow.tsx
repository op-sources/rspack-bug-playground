import React, {Component, CSSProperties, ReactElement} from 'react';
import {connect} from 'mini-store';
import TableCell from './tableCell';
import {classnames} from '../../../core/commonTools';
import shallowequal from 'shallowequal';
import {isEqual} from 'lodash';
import {InnerTableColumnProps} from './interface';
import {TableStore} from './table';
import {TableColumnWidth} from '../interface';

interface TableRowProps {
    onRow(record, index),
    onRowClick(record, index, event),
    onRowDoubleClick(record, index, event),
    onRowContextMenu(record, index, event),
    onRowMouseEnter(record, index, event),
    onRowMouseLeave(record, index, event),
    record: object,
    prefixCls: string,
    onHover(hover: boolean, rowKey: string | number),
    columns: InnerTableColumnProps[],
    height: string | number,
    index: number,
    rowKey: string | number,
    className: string,
    indent: number,
    indentSize: number,
    hasExpandIcon(index: number): boolean,
    visible: boolean,
    store: object,
    fixed: 'left' | 'right' | boolean,
    renderExpandIcon(expanded: boolean),
    renderExpandIconCell(cells: ReactElement[]),
    expandedRow: boolean,
    isAnyColumnsFixed: boolean,
    ancestorKeys: string[],
    expanded: boolean,
    allColumnsWidth: TableColumnWidth[],
    dynamicWidth: number
};

interface TableRowState {
    shouldRender?: boolean;
    visible?: boolean;
}

class TableRow extends Component<TableRowProps, TableRowState> {

    static defaultProps = {
        onRow() { },
        onHover() { },
        hasExpandIcon: () => false,
        renderExpandIcon() { },
        renderExpandIconCell() { }
    };

    constructor(props) {
        super(props);

        this.state = {};
    }

    static getDerivedStateFromProps(nextProps, prevState) {
        if (prevState.visible || (!prevState.visible && nextProps.visible)) {
            return {
                shouldRender: true,
                visible: nextProps.visible
            };
        }
        return {
            visible: nextProps.visible
        };
    }

    shouldComponentUpdate(nextProps) {
        return !!(this.props.visible || nextProps.visible)
            && !shallowequal(this.props, nextProps, (a, b, key) => {
                if (key === 'columns' || key === 'allColumnsWidth' || key === 'ancestorKeys') {
                    return isEqual(a, b);
                }
            });
    }

    onRowClick = event => {
        const {record, index, onRowClick} = this.props;
        if (onRowClick) {
            onRowClick(record, index, event);
        }
    };

    onRowDoubleClick = event => {
        const {record, index, onRowDoubleClick} = this.props;
        if (onRowDoubleClick) {
            onRowDoubleClick(record, index, event);
        }
    };

    onContextMenu = event => {
        const {record, index, onRowContextMenu} = this.props;
        if (onRowContextMenu) {
            onRowContextMenu(record, index, event);
        }
    };

    onMouseEnter = event => {
        const {record, index, onRowMouseEnter, onHover, rowKey} = this.props;
        onHover(true, rowKey);
        if (onRowMouseEnter) {
            onRowMouseEnter(record, index, event);
        }
    };

    onMouseLeave = event => {
        const {record, index, onRowMouseLeave, onHover, rowKey} = this.props;
        onHover(false, rowKey);
        if (onRowMouseLeave) {
            onRowMouseLeave(record, index, event);
        }
    };

    render() {
        if (!this.state.shouldRender) {
            return null;
        }

        const {
            prefixCls,
            columns,
            record,
            index,
            onRow,
            indent,
            indentSize,
            height,
            visible,
            hasExpandIcon,
            renderExpandIcon,
            renderExpandIconCell,
            expanded,
            allColumnsWidth = [],
            dynamicWidth
        } = this.props;

        let {className} = this.props;

        const cells = [];

        let colWidth = 0;
        allColumnsWidth.forEach(col => {
            colWidth += col.width;
        });
        let existStickyRight = false;
        for (let i = 0; i < columns.length; i++) {
            const column = columns[i];
            const columnKey = column.key || column.dataIndex;
            const {left, width} = allColumnsWidth.find(col => col.key === columnKey) || {} as TableColumnWidth;
            const stickyLeft = column.fixed === 'left';
            const stickyRight = column.fixed === 'right';
            const nextColumn = columns[i + 1];
            const nextStickyLeft = nextColumn && nextColumn.fixed === 'left';
            const classNames = classnames(column.className, {
                [`${prefixCls}-body-cell-sticky-left`]: stickyLeft,
                [`${prefixCls}-body-cell-sticky-right`]: stickyRight,
                [`${prefixCls}-body-cell-sticky-left-last`]: stickyLeft && !nextStickyLeft,
                [`${prefixCls}-body-cell-sticky-right-first`]: stickyRight && !existStickyRight
            });
            if (stickyRight) {
                existStickyRight = true;
            }
            let leftPos;
            let rightPos;

            if (left) {
                if (stickyLeft) {
                    leftPos = left - width;
                }

                if (stickyRight) {
                    const right = (dynamicWidth || colWidth) - left;

                    if (right >= 0) {
                        rightPos = right;
                    }
                }
            }
            cells.push(
                <TableCell
                    prefixCls={prefixCls}
                    className={classNames}
                    record={record}
                    indentSize={indentSize}
                    indent={indent}
                    index={index}
                    cellIndex={i}
                    align={column.align}
                    render={column.render}
                    dataIndex={column.dataIndex}
                    onCell={column.onCell}
                    onCellClick={column.onCellClick}
                    key={column.key || column.dataIndex}
                    expandIcon={hasExpandIcon(i) && renderExpandIcon(expanded)}
                    left={leftPos}
                    right={rightPos}
                />
            );
        }

        renderExpandIconCell(cells);

        const rowClassName = `${prefixCls} ${className} ${prefixCls}-tree-level ${prefixCls}-level-${indent}`.trim();

        const rowProps = onRow(record, index);
        const customStyle = rowProps ? rowProps.style : {};
        let style: CSSProperties = {height};

        if (!visible) {
            style.display = 'none';
        }

        style = {...style, ...customStyle};

        return (
            <tr
                onClick={this.onRowClick}
                onDoubleClick={this.onRowDoubleClick}
                onMouseEnter={this.onMouseEnter}
                onMouseLeave={this.onMouseLeave}
                onContextMenu={this.onContextMenu}
                className={rowClassName}
                {...rowProps}
                style={style}
            >
                {cells}
            </tr>
        );
    }
}

export default connect((state: TableStore, props: TableRowProps) => {
    const {expandedRowKeys} = state;
    const {rowKey, ancestorKeys, columns} = props;
    // eslint-disable-next-line no-bitwise
    const visible = ancestorKeys.length === 0 || ancestorKeys.every(k => ~expandedRowKeys.indexOf(k));
    const hasFixed = columns.some(col => !!col.fixed);

    return {
        dynamicWidth: hasFixed ? state.dynamicWidth : null,
        allColumnsWidth: hasFixed ? state.allColumnsWidth : [],
        ancestorKeys: [],
        visible
    };
})(TableRow);
