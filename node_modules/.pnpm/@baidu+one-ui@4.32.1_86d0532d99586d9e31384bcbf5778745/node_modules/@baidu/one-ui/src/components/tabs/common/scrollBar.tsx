import React, {CSSProperties, PureComponent, ReactElement, ReactNode, WheelEvent, cloneElement} from 'react';
import {debounce} from 'lodash';
import {
    IconPlusCircle,
    IconChevronRight,
    IconChevronLeft
} from 'dls-icons-react';
import ResizeObserver from 'resize-observer-polyfill';
import Button from '../../button';
import {classnames} from '../../../core/commonTools';
import {TabPaneProps, TabsProps} from '../interface';
import Sortable from '../../sortable';

interface ScrollBarProps {
    content: ReactElement<TabPaneProps>[],
    prefixCls: string,
    showAdd: boolean,
    type: string,
    sortable: boolean,
    onSort: (fromIndex: number, toIndex: number) => void
    onAdd(e),
    activeKey: string,
    onNextClick(e),
    onPrevClick(e),
    showAddDisabled: boolean,
    addButtonText: ReactNode,
    extra: ReactNode,
    style: CSSProperties,
    size: TabsProps['size']
}

export default class ScrollBar extends PureComponent<ScrollBarProps> {

    static defaultProps = {
        onNextClick() {},
        onPrevClick() {}
    }

    state = {
        canScrollForward: false,
        canScrollBackward: false
    }

    offset = 0;

    debouncedResize;
    resizeObserver;
    navBar;
    navWrapper;
    activeTab;
    navContainer;
    navTabsContainer;
    navBarScroll;

    componentDidMount() {
        this.updateScrollState();
        this.scrollToActiveTab();
        this.debouncedResize = debounce(() => {
            this.updateScrollState();
            this.scrollToActiveTab();
        }, 200);
        this.resizeObserver = new ResizeObserver(this.debouncedResize);
        this.resizeObserver.observe(this.navContainer);
        this.navBarScroll.addEventListener('wheel', this.handleWheelScroll);
    }

    componentDidUpdate = prevProps => {
        if (!prevProps || this.props.activeKey !== prevProps.activeKey) {
            // can not use props.activeKey
            this.scrollToActiveTab();
        }
        this.updateScrollState();
    }

    componentWillUnmount = () => {
        if (this.resizeObserver) {
            this.resizeObserver.disconnect();
        }
        if (this.debouncedResize && this.debouncedResize.cancel) {
            this.debouncedResize.cancel();
        }
        this.navBarScroll.removeEventListener('wheel', this.handleWheelScroll);
    }

    isScrollable = () => {
        return this.state.canScrollForward || this.state.canScrollBackward;
    }

    updateScrollState = (offset?: number) => {
        const allWidth = this.navBar.offsetWidth;
        const containerWidth = this.navContainer.offsetWidth;
        offset = offset == null ? this.navBarScroll.scrollLeft : offset;
        const maxOffset = allWidth > containerWidth ? allWidth - containerWidth : 0;
        this.setState({
            canScrollBackward: offset < maxOffset && maxOffset > 0,
            canScrollForward: offset > 0 && maxOffset > 0
        });
    }

    setOffset = (offset, smooth = true) => {
        const allWidth = this.navBar.offsetWidth;
        const pageWidth = this.navBarScroll.offsetWidth;
        const maxOffset = allWidth > pageWidth ? allWidth - pageWidth : 0;
        if (offset > maxOffset) {
            offset = maxOffset;
        }
        if (offset < 0) {
            offset = 0;
        }
        if (smooth && this.navBarScroll.scrollTo) {
            this.navBarScroll.scrollTo({
                left: offset,
                behavior: smooth ? 'smooth' : 'auto'
            });
        }
        else {
            this.navBarScroll.scrollLeft = offset;
        }
    };

    handleOnScroll = () => {
        this.updateScrollState();
    };

    getRef = (name, ref) => {
        this[name] = ref;
    }

    renderPrevIcon = () => {
        const prefixCls = this.props.prefixCls;
        const canScrollForward = this.state.canScrollForward;
        const prevIconClassName = classnames(`${prefixCls}-nav-prev`, {
            [`${prefixCls}-nav-prev-disabled`]: !canScrollForward
        });
        const prevProps = {
            className: prevIconClassName,
            onClick: !canScrollForward ? null : this.prev
        };
        return (
            <span {...prevProps}>
                <IconChevronLeft />
            </span>
        );
    }

    renderNextIcon = () => {
        const prefixCls = this.props.prefixCls;
        const canScrollBackward = this.state.canScrollBackward;
        const nextIconClassName = classnames(`${prefixCls}-nav-next`, {
            [`${prefixCls}-nav-next-disabled`]: !canScrollBackward
        });
        const nextProps = {
            className: nextIconClassName,
            onClick: !canScrollBackward ? null : this.next
        };
        return (
            <span {...nextProps}>
                <IconChevronRight className={`${prefixCls}-angle-right`} />
            </span>
        );
    }

    scrollToActiveTab = (e?) => {
        const activeTab = this.activeTab;
        if ((e && e.target !== e.currentTarget) || !activeTab) {
            return;
        }
        const offset = this.navBarScroll.scrollLeft;
        const pageWidth = this.navBarScroll.offsetWidth;
        const activeOffset = this.activeTab.offsetLeft;
        const activeWidth = this.activeTab.offsetWidth;
        if (offset > activeOffset) {
            this.setOffset(activeOffset);
        }
        else if (activeOffset + activeWidth > offset + pageWidth) {
            this.setOffset(activeOffset - pageWidth + activeWidth);
        }
    }

    prev = e => {
        this.props.onPrevClick(e);
        const pageWidth = this.navBarScroll.offsetWidth;
        this.setOffset(this.navBarScroll.scrollLeft - pageWidth);
    }

    next = e => {
        this.props.onNextClick(e);
        const pageWidth = this.navBarScroll.offsetWidth;
        this.setOffset(this.navBarScroll.scrollLeft + pageWidth);
    }

    handleWheelScroll= (e: WheelEvent) => {
        if (!this.state.canScrollBackward && !this.state.canScrollForward) {
            return;
        }
        let {deltaX, deltaY} = e;
        let delta = Math.abs(deltaX) > Math.abs(deltaY) ? deltaX : deltaY;
        this.setOffset(this.navBarScroll.scrollLeft + delta, false);
        e.preventDefault();
    };

    handleMove = e => {
        const dragTab = e.related;
        const offset = this.navBarScroll.scrollLeft;
        const pageWidth = this.navBarScroll.offsetWidth;
        const dragTabOffset = dragTab.offsetLeft;
        const dragTabWidth = dragTab.offsetWidth;
        const style = getComputedStyle(dragTab);
        const marginLeft = parseInt(style.marginLeft, 10);
        const marginRight = parseInt(style.marginRight, 10);
        const margin = marginLeft + marginRight;
        if (offset > dragTabOffset - margin) {
            const prevTab = dragTab.previousSibling;
            if (prevTab) {
                this.setOffset(prevTab.offsetLeft + prevTab.offsetWidth / 2);
            }
            else {
                this.setOffset(0);
            }
        }
        else if (dragTabOffset + dragTabWidth > offset + pageWidth - margin) {
            const nextTab = dragTab.nextSibling;
            if (nextTab) {
                this.setOffset(nextTab.offsetLeft - pageWidth + nextTab.offsetWidth / 2);
            }
            else {
                this.setOffset(this.navBar.offsetWidth - pageWidth);
            }
        }
        return true;
    };

    handleOnSort = (options, fromIndex, toIndex) => {
        this.props.onSort(fromIndex, toIndex);
    };

    render() {
        const {
            prefixCls,
            content,
            showAdd,
            type,
            onAdd,
            activeKey,
            showAddDisabled,
            addButtonText,
            extra,
            style,
            size,
            sortable,
            onSort
        } = this.props;
        const addClassName = classnames(
            `${prefixCls}-bar-add`,
            `${prefixCls}-bar-add-${type}`
        );
        const scrollable = this.isScrollable();
        const containerClassName = classnames(`${prefixCls}-bar`, {
            [`${prefixCls}-bar-show-add`]: showAdd,
            [`${prefixCls}-bar-pagination-show`]: scrollable
        });
        return (
            <div className={containerClassName} style={style}>
                <div
                    className={`${prefixCls}-nav-container`}
                    ref={ref => this.getRef('navContainer', ref)}
                >
                    {
                        scrollable ? this.renderPrevIcon() : null
                    }
                    {
                        scrollable ? this.renderNextIcon() : null
                    }
                    <div className={`${prefixCls}-nav-wrap`} ref={ref => this.getRef('navWrapper', ref)}>
                        <div
                            className={`${prefixCls}-nav-scroll`}
                            onScroll={this.handleOnScroll}
                            ref={ref => this.getRef('navBarScroll', ref)}
                        >
                            <div className={`${prefixCls}-nav`} ref={ref => this.getRef('navBar', ref)}>
                                <div ref={ref => this.getRef('navTabsContainer', ref)}>
                                    {
                                        sortable
                                            ? (
                                                <Sortable
                                                    options={content}
                                                    onChange={this.handleOnSort}
                                                    renderOption={this.renderTab}
                                                    onMove={this.handleMove}
                                                />
                                            )
                                            : content.map(this.renderTab)
                                    }
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                {
                    showAdd ? (
                        <Button
                            className={addClassName}
                            type="text"
                            onClick={onAdd}
                            disabled={showAddDisabled}
                            size={size}
                            icon={IconPlusCircle}
                        >
                            {addButtonText}
                        </Button>
                    ) : null
                }
                {this.renderExtra(extra, prefixCls)}
            </div>
        );
    }

    renderTab = item => {
        if (item.key === item.props.activeKey) {
            return cloneElement(item, {tabRef: tab => this.getRef('activeTab', tab)});
        }
        return item;
    }

    renderExtra(extra, prefixCls) {
        if (typeof extra === 'function') {
            extra = extra();
        }
        if (extra == null) {
            return null;
        }
        return <div className={`${prefixCls}-bar-extra`}>{extra}</div>;
    }
}
