/**
 * @author huangshiming
 * @file selected pane
 * @date 2020-05-16
 */
import React, {PureComponent, ReactNode} from 'react';
import SelectedItemRender from './itemRender';
import Tree, {TreeProps} from '../../tree';
import Button from '../../button';
import {IconTimes} from 'dls-icons-react';
import {formatSelectedList} from '../../../core/transferTools';
import Stack from '../../stack';
import Message from '../../message';

const {TreeNode, VirtualTreeNode} =  Tree;

export interface SelectedPaneProps extends Pick<TreeProps, 'onExpand' | 'onSelect'> {
    selectedList?: string[],
    parentRelationMap?: object,
    expandedSelectedKeys?: string[],
    prefixCls?: string,
    SelectedItem?: ReactNode,

    onDelete?,

    getSelectedTreeRef?,
    virtualListHeight?,
    size?,

    allDataMap?,
    selectedItemProps?,
    selectedEmpty?: ReactNode
}

class SelectedPane extends PureComponent<SelectedPaneProps> {

    renderNode(key, entities) {
        const {
            prefixCls,
            allDataMap,
            selectedItemProps,
            SelectedItem,
            onDelete,
            virtualListHeight
        } = this.props;
        const CustomTreeNode = virtualListHeight ? VirtualTreeNode : TreeNode;
        const selectedItem = allDataMap[key] || {};
        const treeNodeKey = selectedItem.key;
        const disabled = selectedItem.disabled;
        const children = entities[key] && entities[key].children;
        let renderItem;
        if (SelectedItem && typeof SelectedItem === 'function') {
            const CustomSelectedItemRender = SelectedItem;
            const selectedProps = {
                ...selectedItem,
                itemKey: treeNodeKey,
                prefixCls,
                ...selectedItemProps
            };
            delete selectedProps.CandidateItem;
            renderItem = <CustomSelectedItemRender {...selectedProps} />;
        }
        else if (SelectedItem && typeof SelectedItem === 'object') {
            renderItem = SelectedItem;
        }
        else {
            renderItem = <SelectedItemRender prefixCls={prefixCls} title={selectedItem.title} />;
        }
        const treeNodeProps = {
            ...selectedItem,
            disabled,
            title: (
                <div className={`${prefixCls}-select-selected`}>
                    {renderItem}
                    <Button
                        disabled={disabled}
                        type="text-aux"
                        className={`${prefixCls}-delete-item`}
                        onClick={e => onDelete(key, e)}
                    >
                        <IconTimes />
                    </Button>
                </div>
            )
        };
        if (children) {
            return (
                <CustomTreeNode
                    {...treeNodeProps}
                    key={treeNodeKey}
                >
                    {this.selectedNodeTrees(children, entities)}
                </CustomTreeNode>
            );
        }
        return (
            <CustomTreeNode
                {...treeNodeProps}
                key={treeNodeKey}
            />
        );
    }

    selectedNodeTrees(topLevel, entities) {
        return topLevel.map(key => this.renderNode(key, entities));
    };

    render() {
        const {
            selectedList,
            parentRelationMap,
            expandedSelectedKeys,
            onExpand,
            onSelect,
            prefixCls,
            getSelectedTreeRef,
            virtualListHeight,
            size,
            allDataMap,
            selectedEmpty
        } = this.props;
        const {entities, topLevel} = formatSelectedList(
            selectedList,
            parentRelationMap,
            allDataMap
        );
        const selectedTreeProps = {
            expandedKeys: (expandedSelectedKeys || []).map(key => `${key}`),
            onExpand,
            onSelect,
            className: `${prefixCls}-selected-tree`,
            parentContainerHeight: virtualListHeight || null,
            selectedKeys: [],
            size
        };
        return selectedList.length
            ? (
                <Tree {...selectedTreeProps} ref={getSelectedTreeRef}>
                    {this.selectedNodeTrees(topLevel, entities)}
                </Tree>
            )
            : (
                <Stack justify="center" className={`${prefixCls}-empty`}>
                    <Message type="aux" display="simple" size={size}>{selectedEmpty}</Message>
                </Stack>
            );
    }
}

export default SelectedPane;

