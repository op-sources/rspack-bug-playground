import React, {PureComponent} from 'react';
import {partial, pull} from 'lodash';
import Tag from './tag';
import {classnames} from '../../core/commonTools';
import {TagDataItem, TagGroupProps} from './interface';
import {withConfigConsumer} from '../providerConfig/context';

interface TagGroupState {
    dataSource?: TagDataItem[];
    value?: string[];
    prevProps?: TagGroupProps;
};

@withConfigConsumer('tag')
class TagGroup extends PureComponent<TagGroupProps, TagGroupState> {

    static defaultProps = {
        prefixCls: 'one-tag',
        mode: 'unique',
        dataSource: [],
        className: '',
        onChange() {},
        size: 'medium'
    }

    constructor(props) {
        super(props);
        this.state = {
            value: props.defaultValue || props.value || [],
            prevProps: props
        };
    }

    static getDerivedStateFromProps = (nextProps, prevState) => {
        const newState: TagGroupState = {
            prevProps: nextProps
        };
        const prevProps = prevState.prevProps;
        if ('value' in nextProps
        && nextProps.value !== prevState.value) {
            newState.value = nextProps.value;
        }

        if ('dataSource' in nextProps
        && nextProps.dataSource !== prevProps.dataSource) {
            newState.dataSource = nextProps.dataSource;
        }
        return newState;
    }

    isUniqueMode = () => this.props.mode === 'unique';

    onChangeGroup = (value, checked) => {
        let selectedValue = [...this.state.value];
        if (checked) {
            // 选中
            if (this.isUniqueMode()) {
                // 单选模式
                selectedValue = [value];
            }
            else {
                selectedValue.push(value);
            }
        }
        else if (this.isUniqueMode()) {
            // 没选中，单选模式
            selectedValue = [];
        }
        else {
            pull(selectedValue, value);
        }
        if (!('value' in this.props)) {
            this.setState({
                value: selectedValue
            });
        }
        const onChange = this.props.onChange;
        onChange(selectedValue);
    }

    render() {
        const {prefixCls, className, dataSource, size} = this.props;
        const value = this.state.value;
        const selectedValue = this.isUniqueMode() ? ((value && value.length && [value[0]]) || []) : value;
        const groupTagClassName = classnames(className, `${prefixCls}-group-wrapper`);
        return (
            <div className={groupTagClassName}>
                {
                    dataSource.map((tag, index) => {
                        const {value, label, tagProps = {}}: TagDataItem = tag;
                        const checked = selectedValue.indexOf(value) > -1;
                        const onClose = tagProps.onClose;
                        if (onClose) {
                            tagProps.onClose = partial(onClose, value);
                        }
                        return (
                            <Tag
                                key={index}
                                size={size}
                                checkable
                                checked={checked}
                                onChange={partial(this.onChangeGroup, value)}
                                {...tagProps}
                            >
                                {label}
                            </Tag>
                        );
                    })
                }
            </div>
        );
    }
}

export default TagGroup;
