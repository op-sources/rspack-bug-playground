import React, {useContext} from 'react';
import BaseTable from './baseTable';
import {InnerTableColumnProps} from './interface';
import Context from './context';

interface BodyTableProps {
    columns: InnerTableColumnProps,
    tableClassName: string,
    handleWheel,
    handleBodyScroll,
    getRowKey,
    expander: object,
    isAnyColumnsFixed: boolean,
    onDragStart,
    onDraging,
    onDragEnd,
    onHeaderCellMouseEnter,
    onHeaderCellMouseLeave
}

export default function BodyTable(props: BodyTableProps) {
    const {table} = useContext(Context);
    const {prefixCls, scroll} = table.props;
    const {
        columns,
        tableClassName,
        getRowKey,
        handleBodyScroll,
        handleWheel,
        expander,
        isAnyColumnsFixed,
        onDragStart,
        onDraging,
        onDragEnd,
        onHeaderCellMouseEnter,
        onHeaderCellMouseLeave
    } = props;
    const {saveRef} = table;
    let {useFixedHeader} = table.props;
    const bodyStyle = {...table.props.bodyStyle};

    if (scroll.x) {
        bodyStyle.overflowX = bodyStyle.overflowX || 'auto';
        bodyStyle.WebkitTransform = 'translate3d (0, 0, 0)';
    }

    if (scroll.y) {
        useFixedHeader = true;
        bodyStyle.maxHeight = bodyStyle.maxHeight || scroll.y;
    }

    bodyStyle.overflowY = bodyStyle.overflowY || 'auto';
    const {loadingOption, headerFixTop, headerBottom} = table.props;
    const showLoadBar = !loadingOption || loadingOption.type !== 'spinner';
    if (headerFixTop !== null || headerBottom || showLoadBar) {
        useFixedHeader = true;
    }

    const baseTable = (
        <BaseTable
            tableClassName={tableClassName}
            hasHead={!useFixedHeader}
            hasBody
            columns={columns}
            expander={expander}
            getRowKey={getRowKey}
            isAnyColumnsFixed={isAnyColumnsFixed}
            onDragStart={onDragStart}
            onDraging={onDraging}
            onDragEnd={onDragEnd}
            onHeaderCellMouseEnter={onHeaderCellMouseEnter}
            onHeaderCellMouseLeave={onHeaderCellMouseLeave}
        />
    );

    return (
        <div
            key="bodyTable"
            className={`${prefixCls}-body`}
            style={bodyStyle}
            ref={saveRef('bodyTable')}
            onWheel={handleWheel}
            onScroll={handleBodyScroll}
        >
            {baseTable}
        </div>
    );
}

BodyTable.defaultProps = {
    onDragStart() {},
    onDraging() {},
    onDragEnd() {}
};
