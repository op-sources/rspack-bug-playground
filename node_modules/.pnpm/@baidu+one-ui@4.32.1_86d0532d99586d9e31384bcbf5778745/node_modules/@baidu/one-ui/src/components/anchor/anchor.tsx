import React, {PureComponent, cloneElement} from 'react';
import addEventListener from 'rc-util/lib/Dom/addEventListener';
import Affix from '../affix';
import {
    sharpMatcherRegx,
    scrollToDom,
    getOffsetTop
} from '../../core/anchorTools';
import {classnames} from '../../core/commonTools';
import {withConfigConsumer} from '../providerConfig/context';
import {AnchorProps} from './interface';
import AnchorLink from './link';
import {noop} from 'lodash';
import Context from './context';

@withConfigConsumer('anchor')
class Anchor extends PureComponent<AnchorProps> {
    static defaultProps = {
        prefixCls: 'one-anchor',
        affix: true,
        getContainer: () => window,
        onClick: noop,
        bounds: 5,
        offsetTop: 0,
        size: 'medium',
        type: 'normal'
    };

    static Link: typeof AnchorLink;

    state = {
        activeLink: null
    };

    links: Array<string> = [];
    scrollContainer?: HTMLElement | Window;
    scrollEvent: any;
    animating: boolean = false;

    getContext = () => {
        return {
            registerLink: (link: string) => {
                if (!this.links.includes(link)) {
                    this.links.push(link);
                }
            },
            unregisterLink: (link: string) => {
                const index = this.links.indexOf(link);
                if (index !== -1) {
                    this.links.splice(index, 1);
                }
            },
            activeLink: this.state.activeLink,
            scrollTo: this.handleScrollTo,
            onClick: this.props.onClick
        };
    };

    componentDidMount() {
        const getContainer = this.props.getContainer;
        this.scrollContainer = getContainer();
        this.scrollEvent = addEventListener(this.scrollContainer, 'scroll', this.handleScroll);
        this.handleScroll();
    }

    componentWillUnmount() {
        if (this.scrollEvent) {
            this.scrollEvent.remove();
        }
    }

    componentDidUpdate() {
        if (this.scrollEvent) {
            const getContainer = this.props.getContainer;
            const currentContainer = getContainer();
            if (this.scrollContainer !== currentContainer) {
                this.scrollContainer = currentContainer;
                this.scrollEvent.remove();
                this.scrollEvent = addEventListener(this.scrollContainer, 'scroll', this.handleScroll);
                this.handleScroll();
            }
        }
    }

    handleScroll = () => {
        if (this.animating) {
            return;
        }
        const activeLink = this.state.activeLink;
        const {offsetTop, bounds} = this.props;
        const currentActiveLink = this.getCurrentAnchor(offsetTop, bounds);
        if (activeLink !== currentActiveLink) {
            this.setState({
                activeLink: currentActiveLink
            });
        }
    }

    handleScrollTo = (link: string) => {
        const {offsetTop, getContainer} = this.props;
        this.animating = true;
        this.setState({activeLink: link});
        scrollToDom(link, offsetTop, getContainer, () => {
            this.animating = false;
        });
    };

    getCurrentAnchor = (offsetTop = 0, bounds = 5) => {
        const linkSections: Array<{
                link: string,
                top: number
            }> = [];
        const getContainer = this.props.getContainer;
        const container = getContainer();
        this.links.forEach(link => {
            const sharpLinkMatch = sharpMatcherRegx.exec(link.toString());
            if (!sharpLinkMatch) {
                return;
            }
            const target = document.getElementById(sharpLinkMatch[1]);
            if (target) {
                const top = getOffsetTop(target, container);
                if (top < offsetTop + bounds) {
                    linkSections.push({
                        link,
                        top
                    });
                }
            }
        });
        if (linkSections.length) {
            const maxSection = linkSections.reduce((prev, curr) => (curr.top > prev.top ? curr : prev));
            return maxSection.link;
        }
        return '';
    }

    render() {
        const {
            prefixCls,
            className,
            style,
            offsetTop,
            affix,
            children,
            getContainer,
            size,
            type
        } = this.props;
        const wrapperClass = classnames(className, `${prefixCls}-wrapper`, `${prefixCls}-wrapper-${type}`);
        const anchorClassName = classnames(prefixCls, `${prefixCls}-${size}`);
        const wrapperStyle = {
            maxHeight: offsetTop ? `calc(100vh - ${offsetTop}px)` : '100vh',
            ...style
        };
        const anchorContent = (
            <div className={wrapperClass} style={wrapperStyle}>
                <div className={anchorClassName}>
                    {
                        React.Children.map(children, child => {
                            if (React.isValidElement(child)) {
                                return cloneElement(child, {
                                    size,
                                    className: classnames(`${prefixCls}-first-level`, child.props.className)
                                });
                            }
                            return child;
                        })
                    }
                </div>
            </div>
        );
        return (
            <Context.Provider value={this.getContext()}>
                {
                    !affix
                        ? anchorContent
                        : <Affix offsetTop={offsetTop} target={getContainer}>{anchorContent}</Affix>
                }
            </Context.Provider>
        );
    }
}

export default Anchor;
