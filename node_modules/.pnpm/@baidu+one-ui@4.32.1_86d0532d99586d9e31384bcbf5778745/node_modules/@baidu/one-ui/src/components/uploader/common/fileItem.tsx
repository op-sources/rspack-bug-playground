import React, {PureComponent} from 'react';
import {
    IconFile,
    IconTrash
} from 'dls-icons-react';
import Progress from '../../progress';
import Button from '../../button';
import {
    originStatus
} from '../../../core/uploaderTools';
import {classnames} from '../../../core/commonTools';
import {UploadFileActionItem, UploaderFileItemProps} from '../interface';

export default class FileItem extends PureComponent<UploaderFileItemProps> {
    render() {
        const {
            prefixCls,
            status,
            name,
            progressStep,
            errorMessage,
            onRemove,
            index,
            className,
            controls,
            file
        } = this.props;
        const itemClassNames = classnames(`${prefixCls}-file-item`, `${prefixCls}-file-item-${status}`, className);
        let actions: UploadFileActionItem[] = [{
            key: 'delete',
            icon: <IconTrash />,
            onClick: (file, event) => onRemove(index, event)
        }];
        if (typeof controls === 'function') {
            actions = controls(file, actions) || [];
        }
        return (
            <div className={itemClassNames}>
                <div className={`${prefixCls}-file-item-container`}>
                    <IconFile className={`${prefixCls}-file-item-file-icon`} />
                    <span className={`${prefixCls}-file-item-label`}>{name}</span>
                    {actions.map(({visible, disabled, key, icon, onClick}) => {
                        if (visible === false) {
                            return null;
                        }
                        return (
                            <Button
                                key={key}
                                type="text-aux"
                                disabled={disabled}
                                className={`${prefixCls}-file-item-control`}
                                onClick={event => onClick(file, event)}
                            >
                                {icon}
                            </Button>
                        );
                    })}
                </div>
                {
                    status === originStatus.UPLOADING
                        ? <Progress
                            size="small"
                            percent={progressStep}
                            showInfo={false}
                            className={`${prefixCls}-file-item-progress`}
                        />
                        : null
                }
                {
                    status === originStatus.ERROR && errorMessage && errorMessage.length
                        ? <div className={`${prefixCls}-file-item-message`}>{errorMessage.join('ï¼Œ')}</div>
                        : null
                }
            </div>
        );
    }
}
