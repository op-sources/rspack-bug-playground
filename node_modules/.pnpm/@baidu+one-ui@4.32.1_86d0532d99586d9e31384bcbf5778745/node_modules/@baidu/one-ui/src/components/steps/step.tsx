/**
 * @file 步骤条-step
 * @author huangshiming
 */

import React, {PureComponent} from 'react';
import {classnames} from '../../core/commonTools';
import Tooltip from '../tooltip';
import Button from '../button';
import {StepProps} from './interface';
import {withConfigConsumer} from '../providerConfig/context';

@withConfigConsumer('steps')
class Step extends PureComponent<StepProps> {

    onClickStep = () => {
        const {
            onClickStep,
            onChange,
            stepNumber
        } = this.props;
        if (onClickStep) {
            onClickStep(stepNumber);
        }
        if (onChange) {
            onChange(Number(stepNumber) - 1);
        }
    }

    renderIconNode = () => {
        const {
            prefixCls,
            stepNumber,
            status,
            icons,
            icon,
            iconClassName = ''
        } = this.props;
        let iconNode;
        const iconClx = classnames(`${prefixCls}-icon`,
            iconClassName, {
                [`${prefixCls}-icon-check`]: status === 'finish' && (icons && !icons.finish),
                [`${prefixCls}-icon-close`]: status === 'error' && (icons && !icons.error)
            });
        if (icon && iconClassName) {
            iconNode = <span className={iconClassName}>{icon}</span>;
        }
        else if (icons && icons.finish && status === 'finish') {
            iconNode = <span className={`${prefixCls}-icon`}>{icons.finish}</span>;
        }
        else if (icons && icons.error && status === 'error') {
            iconNode = <span className={`${prefixCls}-icon`}>{icons.error}</span>;
        }
        else if (status === 'finish' || status === 'error') {
            iconNode = <span className={iconClx} />;
        }
        else {
            iconNode = <span className={`${prefixCls}-icon`}>{stepNumber}</span>;
        }
        return iconNode;
    }

    render() {
        const {
            className,
            prefixCls,
            style,
            itemWidth,
            status = 'wait',
            adjustMarginRight,
            description,
            title,
            tailContent,
            icon,
            showTipWhenHover,
            hoverTip,
            stepNumber,
            currentStep,
            type
        } = this.props;
        const classString = classnames(
            `${prefixCls}-item`,
            `${prefixCls}-item-type-${type}`,
            `${prefixCls}-item-${status}`,
            {
                [`${prefixCls}-item-custom`]: icon,
                [`${prefixCls}-item-is-current`]: currentStep
            },
            className
        );
        const stepItemStyle = {...style};
        if (itemWidth) {
            stepItemStyle.width = itemWidth;
        }
        if (adjustMarginRight) {
            stepItemStyle.marginRight = adjustMarginRight;
        }
        let stepText = '';
        if (status === 'finish') {
            stepText = '已完成';
        }
        else if (status === 'wait') {
            stepText = '未开始';
        }
        else if (status === 'process') {
            stepText = '进行中';
        }
        else if (status === 'error') {
            stepText = '错误';
        }
        const iconNode = this.renderIconNode();
        const iconHoverTip = hoverTip || `第${stepNumber}步${stepText}`;
        const iconRenderItem = showTipWhenHover ? (
            <Tooltip placement="top" title={iconHoverTip} style={{marginBottom: '5px'}}>
                <Button className={`${prefixCls}-item-icon`} icon={iconNode} />
            </Tooltip>
        ) : (
            <Button className={`${prefixCls}-item-icon`} icon={iconNode} />
        );
        const contentClassNames = classnames(`${prefixCls}-item-content`, {
            [`${prefixCls}-item-title-only`]: !description
        });
        const titleTextClassNames = classnames(`${prefixCls}-item-title-text`, {
            [`${prefixCls}-item-title-text-only`]: !description
        });
        return (
            <div
                className={classString}
                style={stepItemStyle}
                onClick={this.onClickStep}
            >
                <div className={`${prefixCls}-item-tail`}>
                    {tailContent}
                </div>
                {iconRenderItem}
                <div className={contentClassNames}>
                    <div className={`${prefixCls}-item-title`}>
                        <span className={titleTextClassNames}>{title}</span>
                    </div>
                    {description && <div className={`${prefixCls}-item-description`}>{description}</div>}
                </div>
            </div>
        );
    }
}

export default Step;