import React, {MouseEvent, FocusEvent, PureComponent, ChangeEvent} from 'react';
import {classnames} from '../../../core/commonTools';
import {IconCheck, IconMinus} from 'dls-icons-react';
import {BaseProps} from '../../interface';
import {noop} from 'lodash';

interface CheckboxProps extends BaseProps {
    type?: string;
    defaultChecked?: boolean;
    checked?: boolean;
    indeterminate?: boolean;
    disabled?: boolean;
    onFocus?(e: FocusEvent): void;
    onBlur?(e: FocusEvent): void;
    onChange?(e: {
        target: CheckboxProps,
        stopPropagation(): void,
        preventDefault(): void,
        nativeEvent: Event
    }): void;
    onClick?(e: MouseEvent): void;
    inputOriginProps?: {};
    name?: string;
    mode?: 'basic' | 'strong';
    autoFocus?: boolean;
}

interface CheckboxState {
    checked: boolean;
}

class Checkbox extends PureComponent<CheckboxProps, CheckboxState> {
    static defaultProps = {
        type: 'checkbox',
        defaultChecked: false,
        onFocus: noop,
        onBlur: noop,
        onChange: noop
    };

    constructor(props: CheckboxProps) {
        super(props);
        const checked = 'checked' in props ? props.checked : props.defaultChecked;
        this.state = {
            checked
        };
    }

    static getDerivedStateFromProps = (nextProps: CheckboxProps) => {
        if ('checked' in nextProps) {
            return {
                checked: nextProps.checked
            };
        }
        return null;
    }

    input: HTMLInputElement;

    focus() {
        this.input.focus();
    }

    blur() {
        this.input.blur();
    }

    saveInput = (node: HTMLInputElement) => {
        this.input = node;
    }

    onHandleChange = (e: ChangeEvent<HTMLInputElement>) => {
        const {disabled, onChange} = this.props;
        if (disabled) {
            return;
        }
        const checked = e.target.checked;
        if (!('checked' in this.props)) {
            this.setState({
                checked
            });
        }
        if (onChange) {
            onChange({
                target: {
                    ...this.props,
                    checked
                },
                stopPropagation() {
                    e.stopPropagation();
                },
                preventDefault() {
                    e.preventDefault();
                },
                nativeEvent: e.nativeEvent
            });
        }
    }

    render() {
        const {
            prefixCls,
            className,
            style,
            type,
            mode,
            disabled,
            onClick,
            onFocus,
            onBlur,
            autoFocus,
            indeterminate,
            inputOriginProps,
            name
        } = this.props;
        const checked = this.state.checked;
        const classString = classnames(prefixCls, className, {
            [`${prefixCls}-checked`]: checked,
            [`${prefixCls}-disabled`]: disabled
        });
        return (
            <span className={classString} style={style}>
                <input
                    type={type}
                    disabled={disabled}
                    className={`${prefixCls}-input`}
                    checked={!!checked}
                    onClick={onClick}
                    onFocus={onFocus}
                    onBlur={onBlur}
                    onChange={this.onHandleChange}
                    autoFocus={autoFocus}
                    ref={this.saveInput}
                    name={name}
                    {...inputOriginProps}
                />
                <span className={`${prefixCls}-inner`}>
                    {type === 'checkbox' && indeterminate && mode !== 'strong' ? <IconMinus /> : null}
                    {type === 'checkbox' && checked && mode !== 'strong' ? <IconCheck /> : null}
                </span>
            </span>
        );
    }
}

export default Checkbox;
