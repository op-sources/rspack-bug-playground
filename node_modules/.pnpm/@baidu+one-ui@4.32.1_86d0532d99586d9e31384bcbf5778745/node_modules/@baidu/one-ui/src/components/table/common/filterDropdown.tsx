import React, {Component, ReactNode} from 'react';
import {findDOMNode} from 'react-dom';
import shallowequal from 'shallowequal';
import {isEqual} from 'lodash';
import {IconFilterSolid} from 'dls-icons-react';
import {classnames} from '../../../core/commonTools';
import Dropdown from '../../dropdown';
import Checkbox from '../../checkbox';
import Button from '../../button';
import Menu from '../../menu';
import {TableColumnFilterProps} from '../interface';

const SubMenu = Menu.SubMenu;
const MenuItem = Menu.Item;

const FilterDropdownMenuWrapper = props => {
    return (
        <div className={props.className} onClick={props.onClick}>
            {props.children}
        </div>
    );
};

const isSelected = keys => {
    if (Array.isArray(keys)) {
        return keys.length > 0;
    }
    return keys != null;
};

interface FilterMenuProps extends TableColumnFilterProps{
    filterTitleText: string,
    filterConfirmText: ReactNode,
    filterClearText: ReactNode,
    selectedKeys: string[],
    handleFilter(),
    confirmFilter(columnKey, selectedKeys: string[]),
    prefixCls: string,
    dropdownPrefixCls: string,
    getPopupContainer(),
    getScrollContainer(),
    columnKey: string,
    size
}

interface FilterMenuState {
    selectedKeys?: string[];
    selectedKeysProp?: string[];
    keyPathOfSelectedItem?;
    visible?: boolean;
}

class FilterMenu extends Component<FilterMenuProps, FilterMenuState> {

    static defaultProps = {
        handleFilter() {},
        filterMultiple: true,
        filterWithoutConfirm: false
    };

    constructor(props) {
        super(props);
        const visible = ('filterDropdownVisible' in props)
            ? props.filterDropdownVisible : false;
        this.state = {
            selectedKeys: props.selectedKeys,
            keyPathOfSelectedItem: {}, // 记录所有有选中子菜单的祖先菜单
            visible
        };
    }

    static getDerivedStateFromProps = (nextProps, prevState) => {
        const newState: FilterMenuState = {
            selectedKeysProp: nextProps.selectedKeys
        };
        if ('selectedKeys' in nextProps && !shallowequal(prevState.selectedKeysProp, nextProps.selectedKeys)) {
            newState.selectedKeys = nextProps.selectedKeys;
        }
        if ('filterDropdownVisible' in nextProps && prevState.visible !== nextProps.filterDropdownVisible) {
            newState.visible = nextProps.filterDropdownVisible;
        }
        return newState;
    }

    watchScroll;

    onVisibleChange = visible => {
        const {
            filterWithoutConfirm,
            selectedKeys
        } = this.props;
        this.setVisible(visible);
        if (!visible) {
            if (filterWithoutConfirm) {
                // 不带确认按钮的话执行筛选
                this.confirmFilter();
            }
            else {
                // 带确认按钮
                this.setState({
                    selectedKeys
                });
            }
        }
    }

    setSelectedKeys = ({selectedKeys}) => {
        const {filterWithoutConfirm, columnKey} = this.props;
        this.setState({selectedKeys});
        if (filterWithoutConfirm) {
            this.props.confirmFilter(columnKey, selectedKeys);
        }
    }

    setVisible(visible) {
        const {onFilterDropdownVisibleChange} = this.props;
        if (!('filterDropdownVisible' in this.props)) {
            this.setState({visible});
        }
        if (onFilterDropdownVisibleChange) {
            onFilterDropdownVisibleChange(visible);
        }
    }

    handleConfirm = () => {
        this.setVisible(false);
        this.confirmFilter();
    }

    handleCancel = () => {
        this.setVisible(false);
        this.setState({
            selectedKeys: this.props.selectedKeys
        });
    }

    handleClear = () => {
        this.setState({
            selectedKeys: []
        });
        this.props.confirmFilter(this.props.columnKey, []);
    }

    confirmFilter() {
        if (this.state.selectedKeys !== this.props.selectedKeys) {
            this.props.confirmFilter(this.props.columnKey, this.state.selectedKeys);
        }
    }

    hasSubMenu() {
        const {filters = []} = this.props;
        return filters.some(item => !!(item.children && item.children.length > 0));
    }

    handleMenuItemClick = info => {
        if (info.keyPath.length <= 1) {
            return;
        }
        const updater = state => {
            const keyPathOfSelectedItem = {...state.keyPathOfSelectedItem};
            if (state.selectedKeys.indexOf(info.key) >= 0) {
                // deselect SubMenu child
                delete keyPathOfSelectedItem[info.key];
            }
            else {
                // select SubMenu child
                keyPathOfSelectedItem[info.key] = info.keyPath;
            }
            return {keyPathOfSelectedItem};
        };
        this.setState(updater);
    }

    renderMenus(items) {
        return items.map(item => {
            if (item.children && item.children.length > 0) {
                const {keyPathOfSelectedItem} = this.state;
                const containSelected = Object.keys(keyPathOfSelectedItem).some(
                    key => keyPathOfSelectedItem[key].indexOf(item.value) >= 0,
                );
                const subMenuCls = containSelected ? `${this.props.dropdownPrefixCls}-submenu-contain-selected` : '';
                return (
                    <SubMenu title={item.text} className={subMenuCls} key={item.value.toString()}>
                        {this.renderMenus(item.children)}
                    </SubMenu>
                );
            }
            return this.renderMenuItem(item);
        });
    }

    renderFilterIcon = () => {
        const {filterIcon, filterTitleText, prefixCls, size} = this.props;
        const dropdownSelectedClass = isSelected(this.props.selectedKeys)
            ? `${prefixCls}-selected`
            : `${prefixCls}-normal`;
        return filterIcon
            ? React.cloneElement(filterIcon, {
                title: filterTitleText,
                className: classnames(filterIcon.props.className, {
                    [`${prefixCls}-icon`]: true,
                    [`${prefixCls}-filter-icon-normal`]: true,
                    [`${prefixCls}-filter-icon-selected`]: isSelected(this.state.selectedKeys)
                })
            })
            : (
                <Button
                    type="text"
                    size={size}
                    className={
                        classnames({
                            [`${prefixCls}-icon`]: true,
                            [`${prefixCls}-icon-visible`]: this.state.visible
                        })
                    }
                >
                    <IconFilterSolid title={filterTitleText} className={dropdownSelectedClass} />
                </Button>
            );
    }

    renderMenuItem(item) {
        const {filterMultiple} = this.props;
        const multiple = filterMultiple;
        const input = multiple ? (
            <Checkbox checked={this.state.selectedKeys.indexOf(item.value.toString()) >= 0} />
        ) : null;
        return (
            <MenuItem key={item.value}>
                {input}
                <span>{item.text}</span>
            </MenuItem>
        );
    }

    shouldComponentUpdate(nextProps, nextState) {
        return !shallowequal(this.props, nextProps, (a, b, key) => {
            if (key === 'selectedKeys' || key === 'defaultFilteredValue' || key === 'filteredValue') {
                return shallowequal(a, b);
            }
            else if (key === 'filters') {
                return isEqual(a, b);
            }
        })
        || !shallowequal(this.state, nextState, (a, b, key) => {
            if (key === 'selectedKeys') {
                return shallowequal(a, b);
            }
        });
    }

    render() {
        const {
            filterDropdownProps,
            filterMultiple,
            filterWithoutConfirm,
            filterDropdownTitle,
            filterDropdown,
            filters,
            filterConfirmText,
            filterClearText,
            prefixCls,
            dropdownPrefixCls,
            getPopupContainer,
            size
        } = this.props;
        // default multiple selection in filter dropdown
        const multiple = filterMultiple;
        const dropdownMenuClass = classnames({
            [`${dropdownPrefixCls}-menu-without-submenu`]: !this.hasSubMenu()
        });
        const menus = (
            <FilterDropdownMenuWrapper
                className={classnames({
                    [`${prefixCls}-dropdown-with-confirm`]: !filterWithoutConfirm,
                    [`${prefixCls}-dropdown-with-title`]: !!filterDropdownTitle
                })}
            >
                {!!filterDropdownTitle
                    && (<div className={`${prefixCls}-dropdown-title`}>
                        {filterDropdownTitle}
                    </div>)
                }
                {filterDropdown
                    ? filterDropdown
                    : (
                        <>
                            <Menu
                                multiple={multiple}
                                onClick={this.handleMenuItemClick}
                                prefixCls={`${dropdownPrefixCls}-menu`}
                                className={dropdownMenuClass}
                                onSelect={this.setSelectedKeys}
                                onDeselect={this.setSelectedKeys}
                                selectedKeys={this.state.selectedKeys}
                            >
                                {this.renderMenus(filters)}
                            </Menu>
                            {!filterWithoutConfirm
                                ? (
                                    <div className={`${prefixCls}-dropdown-btns`}>
                                        <Button
                                            size={size}
                                            className={`${prefixCls}-dropdown-link ${prefixCls}-dropdown-link-confirm`}
                                            onClick={this.handleConfirm}
                                            type="text-strong"
                                        >
                                            {filterConfirmText}
                                        </Button>
                                        <Button
                                            size={size}
                                            className={`${prefixCls}-dropdown-link ${prefixCls}-dropdown-link-clear`}
                                            onClick={this.handleClear}
                                            type="text"
                                        >
                                            {filterClearText}
                                        </Button>
                                    </div>
                                )
                                : null
                            }
                        </>
                    )
                }
            </FilterDropdownMenuWrapper>
        );
        return (
            <Dropdown
                trigger={['click']}
                overlay={menus}
                visible={this.state.visible}
                onVisibleChange={this.onVisibleChange}
                getPopupContainer={getPopupContainer}
                overlayClassName={`${prefixCls}-dropdown`}
                transparent={false}
                {...filterDropdownProps}
            >
                {this.renderFilterIcon()}
            </Dropdown>
        );
    }

    handleScroll = () => {
        this.setVisible(false);
    }

    componentDidUpdate() {
        const container = this.props.getScrollContainer();
        const visible = this.state.visible;
        if (container && visible && !this.watchScroll) {
            container.addEventListener('scroll', this.handleScroll);
            this.watchScroll = true;
        }
        else if (container && !visible && this.watchScroll) {
            container.removeEventListener('scroll', this.handleScroll);
            this.watchScroll = false;
        }
        const node = findDOMNode(this);
        // TODO: FIXME，当前结构，暂时这样实现
        if (this.state.visible) {
            node.parentElement.parentElement.classList.add(`${this.props.prefixCls}-expanded`);
        }
        else {
            node.parentElement.parentElement.classList.remove(`${this.props.prefixCls}-expanded`);
        }
    }
}

export default FilterMenu;
