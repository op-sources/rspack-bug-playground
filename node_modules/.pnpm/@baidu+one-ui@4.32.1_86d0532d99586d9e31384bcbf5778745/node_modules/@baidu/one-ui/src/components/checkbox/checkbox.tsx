import React, {LabelHTMLAttributes, PureComponent} from 'react';
import {classnames} from '../../core/commonTools';
import {withConfigConsumer} from '../providerConfig/context';
import CommonCheckbox from './common/commonCheckbox';
import Context from './context';
import {CheckboxProps} from './interface';
import Group from './group';
import Button from './button';

@withConfigConsumer('checkbox')
class Checkbox extends PureComponent<CheckboxProps> {
    static defaultProps = {
        prefixCls: 'one-checkbox',
        indeterminate: false,
        direction: 'row',
        mode: 'basic'
    };

    static Button: typeof Button;
    static Group: typeof Group;

    static contextType = Context;

    refCheckbox: InstanceType<typeof CommonCheckbox>;

    saveCheckbox = (node: InstanceType<typeof CommonCheckbox>) => {
        this.refCheckbox = node;
    };

    focus() {
        this.refCheckbox.focus();
    }

    blur() {
        this.refCheckbox.blur();
    }

    componentDidMount(): void {
        this.context?.register(this.props);
    }

    componentWillUnmount(): void {
        this.context?.unregister(this.props);
    }

    render() {
        const {
            prefixCls,
            className,
            children,
            indeterminate,
            style,
            onMouseEnter,
            onMouseLeave,
            direction,
            size,
            mode,
            buttonType,
            exclusive,
            ...restProps
        } = this.props;
        const checkboxProps = {...restProps, indeterminate, mode};
        let realSize = size;
        if (this.context) {
            const {value, disabled, checked} = this.props;
            const {toggleOption, value: checkboxValue, disabled: checkboxDisabled, size: groupSize} = this.context;
            realSize = realSize || groupSize;
            checkboxProps.onChange = () => toggleOption({label: children, value, exclusive});
            checkboxProps.checked = checkboxValue != null ? checkboxValue.indexOf(value) !== -1 : checked;
            checkboxProps.disabled = disabled || checkboxDisabled;
        }
        const wrapperClass = `${prefixCls}-wrapper`;
        const {checked, disabled} = checkboxProps;
        const classString = classnames({
            [`${wrapperClass}`]: true,
            [`${wrapperClass}-checked`]: checked,
            [`${wrapperClass}-disabled`]: disabled,
            [`${wrapperClass}-checked-disabled`]: checked && disabled,
            [`${wrapperClass}-${direction}`]: direction,
            [`${wrapperClass}-${realSize}`]: realSize,
            [`${wrapperClass}-${buttonType}`]: buttonType
        }, className);
        const checkboxClass = classnames({
            [`${prefixCls}-indeterminate`]: indeterminate
        });
        const itemProps = {
            className: classnames(
                `${prefixCls}-item`,
            )
        };
        const otherProps: LabelHTMLAttributes<HTMLLabelElement> = {};
        if (mode === 'strong') {
            otherProps.tabIndex = disabled ? -1 : 0;
        }

        const radioType = mode === 'basic' && exclusive;

        return (
            <label
                // TODO: 仅这5个属性，看起来也不太合理
                className={classString}
                style={style}
                onMouseEnter={onMouseEnter}
                onMouseLeave={onMouseLeave}
                {...otherProps}
            >
                <CommonCheckbox
                    {...checkboxProps}
                    prefixCls={radioType ? 'one-radio' : prefixCls}
                    type={radioType ? 'radio' : 'checkbox'}
                    className={checkboxClass}
                    ref={this.saveCheckbox}
                />
                {children != null ? <span {...itemProps}>{children}</span> : null}
                {
                    mode === 'strong' && !exclusive ? <i className={`${wrapperClass}-strong-icon`} /> : null
                }
            </label>
        );
    }
}

export default Checkbox;
export type {CheckboxProps};
