import React, {PureComponent} from 'react';
import {noop} from 'lodash';
import ImageItem from './imageItem';
import Lightbox, {LightboxDataItem} from '../../lightbox';
import FileItem from './fileItem';
import Sortable from '../../sortable';
import {classnames} from '../../../core/commonTools';
import {UploadFile, UploaderListProps, UploaderFileItemProps} from '../interface';

interface UploaderListState {
    showPreview: boolean;
    index: number;
};

class UploaderList extends PureComponent<UploaderListProps, UploaderListState> {

    static defaultProps: UploaderListProps = {
        onPreview: noop,
        onInsertImage: noop,
        onReUpload: noop
    }

    state: UploaderListState = {
        showPreview: false,
        index: null
    }

    onRemove = (index: number) => {
        const fileList = [...this.props.fileList];
        fileList.splice(index, 1);
        this.props.onRemove({
            fileList,
            index,
            originFileList: this.props.fileList
        });
    }

    onPreview = (index: number) => {
        const {fileList, onPreview} = this.props;
        const currentItem = fileList[index];
        const preview = onPreview({
            file: currentItem,
            fileList,
            index
        });
        if (preview !== false) {
            this.setState({
                showPreview: true,
                index
            });
        }
    }

    onReUpload = (index: number) => {
        const {fileList, onInsertImage, onReUpload} = this.props;
        const currentItem = fileList[index];
        const reUpload = onReUpload({
            file: currentItem,
            fileList,
            index
        });
        if (reUpload !== false) {
            onInsertImage(true, index);
        }
    }

    onClose = () => {
        this.setState({
            showPreview: false,
            index: null
        });
    }

    formatPreviewList = (): LightboxDataItem[] => {
        const {previewList, fileList} = this.props;
        const index = this.state.index;
        if (previewList && previewList.length) {
            return previewList;
        }
        const file = fileList[index];
        if (file) {
            return [{
                src: file.thumbUrl,
                alt: file.name,
                type: 'image'
            }];
        }
        return [];
    }

    renderItem = (item: UploadFile, index: number) => {
        const {
            prefixCls,
            listType,
            fileList = [],
            realType,
            showUploadListIcon,
            renderCustomIcon,
            size,
            pickerIcon,
            errorDisplay,
            helperText,
            helperTextPosition,
            maxFileLength,
            pickerPosition,
            controls,
            theme
        } = this.props;
        if (listType === 'file') {
            return (
                <FileItem
                    {...item}
                    key={index}
                    index={index}
                    onRemove={this.onRemove}
                    prefixCls={prefixCls}
                    file={item}
                    controls={controls}
                />
            );
        }
        const showHelper = helperText && pickerPosition !== 'none'
            && (
                maxFileLength === 1 // 单文件
                // 多文件末尾右侧
                || (
                    maxFileLength === fileList.length
                    && pickerPosition === 'after'
                    && index === fileList.length - 1
                    && helperTextPosition === 'right'
                )
            );
        return (
            <ImageItem
                {...item}
                fileList={fileList}
                key={index}
                index={index}
                onRemove={this.onRemove}
                onPreview={this.onPreview}
                prefixCls={prefixCls}
                onReUpload={this.onReUpload}
                showUploadListIcon={showUploadListIcon}
                renderCustomIcon={renderCustomIcon}
                size={size}
                realType={realType}
                pickerIcon={pickerIcon}
                errorDisplay={errorDisplay}
                helperText={helperText}
                helperTextPosition={helperTextPosition}
                showHelper={showHelper}
                file={item}
                controls={controls}
                theme={theme}
            />
        );
    };

    render() {
        const {
            prefixCls,
            listType,
            fileList = [],
            pickerPosition,
            onSort,
            sortable,
            picker,
            lightboxProps
        } = this.props;

        const pickerAtFirst = pickerPosition === 'top' || pickerPosition === 'before';

        const uploadListClassNames = classnames(
            `${prefixCls}-list`,
            `${prefixCls}-list-${listType}`
        );

        const itemList = sortable
            ? (
                <Sortable
                    options={fileList}
                    onChange={onSort}
                    className={`${prefixCls}-sortable`}
                    renderOption={this.renderItem}
                    after={!pickerAtFirst ? picker : null}
                    before={pickerAtFirst ? picker : null}
                />
            )
            : fileList.map(this.renderItem);

        return (
            <div className={uploadListClassNames}>
                {!sortable && pickerAtFirst && picker}
                {itemList}
                {
                    fileList[this.state.index] ? (
                        <Lightbox
                            open={this.state.showPreview}
                            onClose={this.onClose}
                            indicator='number'
                            dataSource={this.formatPreviewList()}
                            {...lightboxProps}
                        />
                    ) : null
                }
                {!sortable && !pickerAtFirst && picker}
            </div>
        );
    }
}

export default UploaderList;
