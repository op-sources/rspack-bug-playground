import React from 'react';
import TreeNode from './treeNode';
import toArray from '../../../core/childrenTools';

const internalProcessProps = props => props;
export function convertDataToTree(treeData, processer?) {
    if (!treeData) {
        return [];
    }

    const {processProps = internalProcessProps} = processer || {};
    const list = Array.isArray(treeData) ? treeData : [treeData];
    return list.map(({children, ...props}, index) => {
        const childrenNodes = convertDataToTree(children, processer);
        return (
            <TreeNode key={index} {...processProps(props)}>
                {childrenNodes}
            </TreeNode>
        );
    });
}

export function getPosition(level, index) {
    return `${level}-${index}`;
}

export function getKey(key, pos) {
    if (key !== null && key !== undefined) {
        return key;
    }
    return pos;
}

export function flattenTreeData(
    treeNodeList,
    expandedKeys,
) {
    const expandedKeySet = new Set(expandedKeys === true ? [] : expandedKeys);
    const flattenList = [];

    function dig(list, parent?) {
        return list.map((treeNode, index) => {
            const pos = getPosition(parent ? parent.pos : '0', index);
            const mergedKey = getKey(treeNode.key, pos);
            // Add FlattenDataNode into list
            let flattenNode = {
                ...treeNode,
                parent,
                pos,
                children: null,
                data: treeNode,
                level: parent ? parent.level + 1 : 0
            };

            const disabledCheckbox = treeNode.props && treeNode.props.disableCheckbox;
            const disabled = treeNode.props && treeNode.props.disabled;
            if (parent && parent.props && parent.props.disableCheckbox) {
                flattenNode.props = {
                    ...flattenNode.props,
                    disableCheckbox: disabledCheckbox || parent.props.disableCheckbox
                };
            }

            if (parent && parent.props && parent.props.disabled) {
                flattenNode.props = {
                    ...flattenNode.props,
                    disabled: disabled || parent.props.disabled
                };
            }

            flattenList.push(flattenNode);
            // Loop treeNode children
            if (expandedKeys === true || expandedKeySet.has(mergedKey)) {
                const children = toArray(treeNode.props.children) || [];
                flattenNode.children = children.length > 0 ? dig(children, flattenNode) : children;
            }
            else {
                flattenNode.children = [];
            }
            return flattenNode;
        });
    }
    dig(treeNodeList);
    return flattenList;
}