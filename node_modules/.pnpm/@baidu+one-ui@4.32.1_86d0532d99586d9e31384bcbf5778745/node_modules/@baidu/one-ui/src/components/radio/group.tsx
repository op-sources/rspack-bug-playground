/**
 * @file 单选组
 * @author shanqianmin
 * @date 2018/08/23
 */
import React, {PureComponent} from 'react';
import {classnames} from '../../core/commonTools';
import Radio from './radio';
import Button from './button';
import {getCheckedValue, getRealValue} from '../../core/radioAndCheckboxTools';
import Context from './context';
import {RadioGroupProps} from './interface';
import {withConfigConsumer} from '../providerConfig/context';

interface RadioGroupState {
    value: string;
};

@withConfigConsumer('radio-group')
class RadioGroup extends PureComponent<RadioGroupProps, RadioGroupState> {

    static defaultProps = {
        disabled: false,
        prefixCls: 'one-radio-group',
        className: '',
        direction: 'row',
        size: 'medium'
    };

    constructor(props) {
        super(props);
        this.state = {
            value: getRealValue(props, true)
        };
    }

    getContext() {
        const {
            disabled,
            name,
            type
        } = this.props;
        return {
            onChange: this.onRadioChange,
            value: this.state.value,
            disabled,
            name,
            type
        };
    }

    static getDerivedStateFromProps = (nextProps, prevState) => {
        const {value, children} = nextProps;
        if ('value' in nextProps) {
            if (prevState.value !== value) {
                return {
                    value
                };
            }
        }
        else {
            const checkedValue = getCheckedValue(children)[0];
            if (checkedValue !== undefined && prevState.value !== checkedValue) {
                return {
                    value: checkedValue
                };
            }
        }
        return null;
    }

    onRadioChange = ev => {
        const lastValue = this.state.value;
        const newValue = ev.target.value;
        if (newValue !== lastValue) {
            const {onChange} = this.props;
            if (!('value' in this.props)) {
                this.setState({
                    value: newValue
                });
            }
            if (onChange) {
                onChange(ev);
            }
        }
    }

    render() {
        const {
            prefixCls,
            className,
            options,
            disabled,
            style,
            onMouseEnter,
            onMouseLeave,
            direction,
            size,
            type,
            name
        } = this.props;
        let children = this.props.children;
        const value = this.state.value;
        const classString = classnames(prefixCls, {
            [`${prefixCls}-${size}`]: size,
            [`${prefixCls}-${type}`]: type,
            [`${prefixCls}-${direction}`]: direction
        }, className);

        let Item: typeof Radio | typeof Button = Radio;
        if (type === 'strong' || type === 'simple') {
            Item = Button;
        }

        // 如果存在 options, 优先使用
        if (options && options.length > 0) {
            children = options.map((option, index) => {
                if (typeof option === 'string' || typeof option === 'number') { // 此处类型自动推导为 string
                    option = {label: option, value: option};
                }
                const {value: optionValue, disabled: optionDisabled, label} = option;
                // 此处类型自动推导为 { label: string, value: string }
                return (
                    <Item
                        key={index}
                        name={name}
                        disabled={optionDisabled || disabled}
                        value={optionValue}
                        onChange={this.onRadioChange}
                        checked={value === optionValue}
                        size={size}
                    >
                        {label}
                    </Item>
                );
            });
        }

        return (
            <Context.Provider value={this.getContext()}>
                <div
                    className={classString}
                    style={style}
                    onMouseEnter={onMouseEnter}
                    onMouseLeave={onMouseLeave}
                >
                    <div className={`${prefixCls}-items`}>
                        {children}
                    </div>
                </div>
            </Context.Provider>
        );
    }
}

export default RadioGroup;
