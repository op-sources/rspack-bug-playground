import React, {PureComponent, CSSProperties, MouseEvent} from 'react';
import SlickCarousel from 'react-slick';
import {debounce, isInteger} from 'lodash';
import {IconChevronRight, IconChevronLeft} from 'dls-icons-react';
import Button, {ButtonProps} from '../button';
import {classnames} from '../../core/commonTools';
import {CarsouselProps} from './interface';
import {withConfigConsumer} from '../providerConfig/context';

interface CarsouselState {
    current: number;
};

interface CarouselArrowProps {
    prefixCls: string;
    showButton: boolean;
    onClick?(event: MouseEvent): void;
    buttonProps: {
        className?: string;
        style?: CSSProperties;
    };
};

const NextArrow = (props: CarouselArrowProps) => {
    const {onClick, prefixCls, showButton, buttonProps = {}} = props;
    const buttonCls = `${prefixCls}-slick-change`;
    let style = {
        display: 'inline-flex',
        ...(buttonProps.style || {})
    };
    if (!showButton) {
        style = {
            display: 'none'
        };
    }
    const currentButtonProps: ButtonProps = {
        className: classnames(buttonCls, `${buttonCls}-next`, {
            [buttonProps.className]: !!buttonProps.className
        }),
        type: 'translucent',
        icon: <IconChevronRight className={`${prefixCls}-icon-right`} />,
        size: 'medium',
        style,
        onClick,
        disabled: !onClick
    };
    return <Button {...currentButtonProps} />;
};

const PrevArrow = (props: CarouselArrowProps) => {
    const {onClick, prefixCls, showButton, buttonProps = {}} = props;
    const buttonCls = `${prefixCls}-slick-change`;
    let style = {
        display: 'inline-flex',
        ...(buttonProps.style || {})
    };
    if (!showButton) {
        style = {
            display: 'none'
        };
    }
    const currentButtonProps: ButtonProps = {
        className: classnames(buttonCls, `${buttonCls}-prev`, {
            [buttonProps.className]: !!buttonProps.className
        }),
        type: 'translucent',
        icon: <IconChevronLeft className={`${prefixCls}-icon-left`} />,
        size: 'medium',
        style,
        onClick,
        disabled: !onClick
    };
    return <Button {...currentButtonProps} />;
};

@withConfigConsumer('carousel')
class Carousel extends PureComponent<CarsouselProps, CarsouselState> {
    static defaultProps = {
        prefixCls: 'one-carousel',
        autoplay: false,
        slidesToScroll: 1,
        slidesToShow: 1,
        width: '',
        infinite: false,
        mode: 'multiple',
        dotPosition: 'bottom',
        sliderMode: 'line',
        className: '',
        showButton: false,
        afterChange() {}
    };

    constructor(props) {
        super(props);
        this.onWindowResized = debounce(this.onWindowResized, 500, {
            leading: false
        });
        this.state = {
            current: props.initialSlide || 0
        };
    }

    innerSlider;
    slick;

    componentDidMount() {
        const autoplay = this.props.autoplay;
        if (autoplay) {
            window.addEventListener('resize', this.onWindowResized);
        }
        this.innerSlider = this.slick && this.slick.innerSlider;
    }

    componentWillUnmount() {
        const autoplay = this.props.autoplay;
        if (autoplay) {
            window.removeEventListener('resize', this.onWindowResized);
        }
    }

    onWindowResized = () => {
        const autoplay = this.props.autoplay;
        if (autoplay && this.slick && this.slick.innerSlider && this.slick.innerSlider.autoPlay) {
            this.slick.innerSlider.autoPlay();
        }
    }

    saveSlick = node => {
        this.slick = node;
    }

    next() {
        this.slick.slickNext();
    }

    prev() {
        this.slick.slickPrev();
    }

    goTo(slide, dontAnimate = false) {
        this.slick.slickGoTo(slide, dontAnimate);
    }

    getCarouselIsVertical = () => {
        const dotPosition = this.props.dotPosition;
        if (dotPosition === 'left' || dotPosition === 'right') {
            return true;
        }
        return false;
    }

    isSingleSlideMode = () => {
        return this.props.mode === 'single';
    }

    afterChange = current => {
        this.setState({
            current
        });
        this.props.afterChange(current);
    }

    render() {
        const {
            prefixCls,
            width,
            infinite,
            slidesToShow,
            mode,
            dotPosition,
            sliderMode,
            nextArrow,
            prevArrow,
            className,
            showButton,
            prevButtonProps,
            nextButtonProps,
            ...restProps
        } = this.props;
        const isSlidesToShowIsInteger = isInteger(slidesToShow);
        const vertical = this.getCarouselIsVertical();
        const dotsClass = 'slick-dots';
        const isSingleSlide = this.isSingleSlideMode();
        const wrapperPrefixCls = !isSingleSlide ? prefixCls : `${prefixCls}-${mode}`;
        let showDot = !(sliderMode === 'hide' || sliderMode === 'number');
        if ('customSuffix' in this.props) {
            showDot = false;
        }
        const nextArrowProps = {
            prefixCls,
            showButton: showButton || sliderMode === 'button',
            buttonProps: nextButtonProps
        };
        const prevArrowProps = {
            prefixCls,
            showButton: showButton || sliderMode === 'button',
            buttonProps: prevButtonProps
        };
        const slickCarouselProps = {
            dots: showDot,
            vertical,
            nextArrow: nextArrow || <NextArrow {...nextArrowProps} />,
            prevArrow: prevArrow || <PrevArrow {...prevArrowProps} />,
            cssEase: 'cubic-bezier(.25, .1, .25, 1)',
            infinite,
            slidesToShow: isSingleSlide ? 1 : slidesToShow,
            dotsClass: `${dotsClass} ${dotsClass}-${dotPosition}`,
            ...restProps,
            afterChange: this.afterChange
        };
        const classes = classnames(wrapperPrefixCls, className, {
            [`${wrapperPrefixCls}-vertical`]: vertical,
            [`${wrapperPrefixCls}-half-show`]: !isSlidesToShowIsInteger
        }, `${wrapperPrefixCls}-slider-${sliderMode}`);
        const containerProps = {
            className: classes,
            style: null
        };
        if (width) {
            containerProps.style = {
                width
            };
        }
        const current = this.state.current;
        let customNode = null;
        if (this.props.customSuffix) {
            customNode = this.props.customSuffix;
        }
        else if (sliderMode === 'number') {
            customNode = (
                <div className={`${prefixCls}-custom-suffix`}>
                    {current + 1}
                    /
                    {React.Children.count(this.props.children)}
                </div>
            );
        }
        return (
            <div {...containerProps}>
                <SlickCarousel ref={this.saveSlick} {...slickCarouselProps} />
                {
                    !isSlidesToShowIsInteger
                        ? (<div className={`${prefixCls}-half-mask`} />)
                        : null
                }
                {customNode}
            </div>
        );
    }
}

export default Carousel;
export type {CarsouselProps};
