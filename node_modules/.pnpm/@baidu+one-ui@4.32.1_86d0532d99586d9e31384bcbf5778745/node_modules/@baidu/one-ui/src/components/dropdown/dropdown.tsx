import React, {isValidElement, PureComponent} from 'react';
import warning from 'warning';
import {classnames} from '../../core/commonTools';
import CommonDropdown from './common/dropdown';
import {IconChevronRight} from 'dls-icons-react';
import DropdownButton from './dropdownButton';
import {DropdownProps} from './interface';
import {withConfigConsumer} from '../providerConfig/context';

@withConfigConsumer('dropdown')
class Dropdown extends PureComponent<DropdownProps> {

    static Button: typeof DropdownButton;

    static defaultProps = {
        prefixCls: 'one-dropdown',
        mouseEnterDelay: 0.15,
        mouseLeaveDelay: 0.1,
        placement: 'bottomLeft',
        className: '',
        overlayClassName: '',
        size: 'medium',
        overlayStyle: {},
        transparent: true, // 兼容早期默认透明背景实现
        showConfirm: false,
        okText: '应用',
        cancelText: '取消',
        transitionName: 'one-transition-slide-down'
    };

    constructor(props) {
        super(props);
        warning(
            !(props.transparent === true),
            'The `transparent` prop of `Dropdown` will default to `false` in future versions. '
            + 'Please migrate to use `transparent={false}` as soon as possible.',
        );
    }

    render() {
        const {
            children,
            prefixCls,
            overlay,
            trigger,
            disabled,
            className,
            size
        } = this.props;
        const child = React.Children.only(children);
        const overlayElement = React.Children.only(overlay);
        if (!isValidElement(child) || !isValidElement(overlayElement)) {
            return child;
        }
        const dropdownTrigger = React.cloneElement(child, {
            className: classnames(child.props.className, `${prefixCls}-trigger`),
            disabled
        });
        // menu cannot be selectable in dropdown defaultly
        // menu should be focusable in dropdown defaultly
        const {
            selectable = false,
            focusable = true
        } = overlayElement.props;
        const expandIcon = (
            <span className={`${prefixCls}-menu-submenu-arrow`}>
                <IconChevronRight className={`${prefixCls}-menu-submenu-arrow-icon`} />
            </span>
        );
        // TODO: 需要优化
        const fixedModeOverlay = typeof overlayElement.type === 'string'
            ? overlayElement
            : React.cloneElement(overlayElement, {
                // @ts-ignore
                mode: 'vertical',
                selectable,
                focusable,
                expandIcon,
                className: classnames(
                    (overlayElement
                        && overlayElement.props
                        && overlayElement.props.className || ''
                    ), `${prefixCls}-menu-${size}`)
            });
        const triggerActions = disabled ? [] : trigger;
        let alignPoint;
        if (triggerActions && triggerActions.indexOf('contextMenu') !== -1) {
            alignPoint = true;
        }
        const overlayClassName = classnames(className, this.props.overlayClassName);
        return (
            <CommonDropdown
                alignPoint={alignPoint}
                {...this.props}
                trigger={triggerActions}
                overlay={fixedModeOverlay}
                overlayClassName={overlayClassName}
            >
                {dropdownTrigger}
            </CommonDropdown>
        );
    }
}

export default Dropdown;
