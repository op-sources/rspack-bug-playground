
import React, {PureComponent, ReactNode} from 'react';
import {classnames} from '../../../core/commonTools';
import {IconChevronDown} from 'dls-icons-react';
import Checkbox from '../../checkbox';
import Dropdown from '../../dropdown';
import Menu from '../../menu';

interface SelectionCheckboxAllProps {
    store,
    selectAllText: ReactNode,
    selectInvertText: ReactNode,
    disabled: boolean,
    getCheckboxPropsByItem(record, index),
    getRecordKey(record, index): string,
    data: [],
    prefixCls: string,
    onSelect(key, index, onSelect),
    hideDefaultSelections: boolean,
    selections: boolean | {key: string, text: ReactNode, onSelect(): void}[],
    getPopupContainer(): HTMLElement
};

interface SelectionCheckboxAllState {
    checked: boolean;
    indeterminate: boolean;
}

export default class SelectionCheckboxAll extends PureComponent<SelectionCheckboxAllProps, SelectionCheckboxAllState> {

    constructor(props) {
        super(props);
        this.state = {
            checked: this.getCheckState(props),
            indeterminate: this.getIndeterminateState(props)
        };
    }

    getSelections() {
        const {
            hideDefaultSelections,
            selectAllText,
            selectInvertText,
            selections
        } = this.props;

        const defaultSelections = hideDefaultSelections
            ? []
            : [{
                key: 'all',
                text: selectAllText,
                onSelect: () => {}
            }, {
                key: 'invert',
                text: selectInvertText,
                onSelect: () => {}
            }];

        return Array.isArray(selections)
            ? defaultSelections.concat(selections)
            : defaultSelections;
    }

    unsubscribe;

    componentDidMount() {
        this.subscribe();
    }

    componentWillUnmount() {
        if (this.unsubscribe) {
            this.unsubscribe();
        }
    }

    getCheckState(props) {
        const {store, data} = props;
        let checked;
        if (!data.length) {
            checked = false;
        }
        else {
            checked = store.getState().selectionDirty
                ? this.checkSelection(data, 'every', false)
                : (
                    this.checkSelection(data, 'every', false)
          || this.checkSelection(data, 'every', true)
                );
        }
        return checked;
    }

    getIndeterminateState(props) {
        const {store, data} = props;
        let indeterminate;
        if (!data.length) {
            indeterminate = false;
        }
        else {
            indeterminate = store.getState().selectionDirty
                ? (
                    this.checkSelection(data, 'some', false)
            && !this.checkSelection(data, 'every', false)
                )
                : ((this.checkSelection(data, 'some', false)
            && !this.checkSelection(data, 'every', false))
            || (this.checkSelection(data, 'some', true)
            && !this.checkSelection(data, 'every', true))
                );
        }
        return indeterminate;
    }

    setCheckState(props) {
        const checked = this.getCheckState(props);
        const indeterminate = this.getIndeterminateState(props);
        if (checked !== this.state.checked) {
            this.setState({checked});
        }
        if (indeterminate !== this.state.indeterminate) {
            this.setState({indeterminate});
        }
    }

    checkSelection(data, type, byDefaultChecked) {
        const {store, getCheckboxPropsByItem, getRecordKey} = this.props;
        // type should be 'every' | 'some'
        if (type === 'every' || type === 'some') {
            return (
                byDefaultChecked
                    ? data[type]((item, i) => getCheckboxPropsByItem(item, i).defaultChecked)
                    : data[type]((item, i) => store.getState().selectedRowKeys.indexOf(getRecordKey(item, i)) >= 0)
            );
        }
        return false;
    }

    subscribe() {
        const {store} = this.props;
        this.unsubscribe = store.subscribe(() => {
            this.setCheckState(this.props);
        });
    }

    handleSelectAllChagne = e => {
        const checked = e.target.checked;
        this.props.onSelect(checked ? 'all' : 'removeAll', 0, null);
    }

    renderMenus(selections) {
        return selections.map((selection, index) => {
            return (
                <Menu.Item
                    key={selection.key || index}
                >
                    <div
                        onClick={() => {
                            this.props.onSelect(selection.key, index, selection.onSelect);
                        }}
                    >
                        {selection.text}
                    </div>
                </Menu.Item>
            );
        });
    }

    render() {
        const {disabled, prefixCls, selections, getPopupContainer} = this.props;
        const checked = this.getCheckState(this.props);
        const indeterminate = this.getIndeterminateState(this.props);
        const selectionPrefixCls = `${prefixCls}-selection`;
        let customSelections = null;
        if (selections) {
            const newSelections = this.getSelections();
            const menu = (
                <Menu
                    className={`${selectionPrefixCls}-menu`}
                    selectedKeys={[]}
                >
                    {this.renderMenus(newSelections)}
                </Menu>
            );
            customSelections = newSelections.length > 0 ? (
                <Dropdown
                    overlay={menu}
                    getPopupContainer={getPopupContainer}
                    transparent
                >
                    <div className={`${selectionPrefixCls}-down`}>
                        <IconChevronDown />
                    </div>
                </Dropdown>
            ) : null;
        }
        return (
            <div className={selectionPrefixCls}>
                <Checkbox
                    className={classnames({[`${selectionPrefixCls}-select-all-custom`]: customSelections})}
                    checked={checked}
                    indeterminate={indeterminate}
                    disabled={disabled}
                    onChange={this.handleSelectAllChagne}
                />
                {customSelections}
            </div>
        );
    }
}
