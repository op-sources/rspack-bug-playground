/**
 * @file inner overlay
 * @author huangshiming
 * @date 2020-05-04
 */
import React, {ReactNode, PureComponent} from 'react';
import ReactDOM from 'react-dom';
import Trigger from 'rc-trigger';
import Content from './content';
import {BUILT_IN_PLACEMENTS} from './buildInPlacements';

interface InnerOverlayProps {
    trigger?: any;
    children?: any;
    defaultVisible?: boolean;
    visible?: boolean;
    transitionName?: string;
    animation?: any;
    onVisibleChange?(visible: boolean);
    afterVisibleChange?(visible: boolean);
    overlay?: ReactNode;
    overlayStyle?: object;
    overlayClassName?: string;
    prefixCls?: string;
    mouseEnterDelay?: number;
    mouseLeaveDelay?: number;
    getPopUpContainer?(): HTMLElement;
    destroyPopUpOnHide?: boolean;
    align?: object;
    id?: string;
    dropdownMatchSelectWidth?: boolean;
    popupPlacement?: 'bottomLeft' | 'bottomRight' | 'topLeft' | 'topRight';
};

interface OverlayState {
    dropdownWidth: number;
}

class InnerOverlay extends PureComponent<InnerOverlayProps, OverlayState> {

    static defaultProps = {
        prefixCls: 'one-overlay',
        mouseEnterDelay: 0,
        destroyPopUpOnHide: false,
        mouseLeaveDelay: 0.1,
        align: {
            ignoreShake: true
        },
        trigger: ['hover'],
        dropdownMatchSelectWidth: true,
        popupPlacement: 'bottomLeft'
    };

    constructor(props) {
        super(props);
        this.state = {
            dropdownWidth: null
        };
    }

    trigger;
    root;

    componentDidMount() {
        this.setDropdownWidth();
    }

    componentDidUpdate() {
        this.setDropdownWidth();
    }

    setDropdownWidth = () => {
        const width = (ReactDOM.findDOMNode(this) as HTMLElement).offsetWidth;
        if (width !== this.state.dropdownWidth) {
            this.setState({dropdownWidth: width});
        }
    }

    getPopupElement = () => {
        const {
            overlay,
            prefixCls,
            id,
            overlayClassName,
            dropdownMatchSelectWidth,
            overlayStyle
        } = this.props;
        const widthProp = dropdownMatchSelectWidth ? 'width' : 'minWidth';
        const style = {...overlayStyle};
        if (this.state.dropdownWidth) {
            style[widthProp] = this.state.dropdownWidth;
        }
        return (
            <Content
                key="content"
                trigger={this.trigger}
                prefixCls={prefixCls}
                id={id}
                overlay={overlay}
                className={overlayClassName}
                style={style}
            />
        );
    }

    getPopupDomNode() {
        return this.trigger.getPopupDomNode();
    }

    saveTrigger = node => {
        this.trigger = node;
    }

    saveRoot = node => {
        this.root = node;
    }

    render() {
        const {
            overlayClassName,
            trigger,
            mouseEnterDelay,
            mouseLeaveDelay,
            overlayStyle,
            prefixCls,
            children,
            onVisibleChange,
            afterVisibleChange,
            transitionName,
            animation,
            align,
            destroyPopUpOnHide,
            defaultVisible,
            getPopUpContainer,
            dropdownMatchSelectWidth,
            popupPlacement,
            ...restProps
        } = this.props;
        const extraProps = {...restProps};
        if ('visible' in this.props) {
            // @ts-ignore
            extraProps.popupVisible = this.props.visible;
        }
        return (
            <Trigger
                ref={this.saveTrigger}
                prefixCls={prefixCls}
                popup={this.getPopupElement}
                action={trigger}
                builtinPlacements={BUILT_IN_PLACEMENTS}
                popupPlacement={popupPlacement}
                popupAlign={align}
                getPopupContainer={getPopUpContainer}
                onPopupVisibleChange={onVisibleChange}
                afterPopupVisibleChange={afterVisibleChange}
                popupTransitionName={transitionName}
                popupAnimation={animation}
                defaultPopupVisible={defaultVisible}
                destroyPopupOnHide={destroyPopUpOnHide}
                mouseLeaveDelay={mouseLeaveDelay}
                mouseEnterDelay={mouseEnterDelay}

                {...extraProps}
            >
                {children}
            </Trigger>
        );
    }
}

export default InnerOverlay;
