/**
 * @file 菜单的项
 */

import React, {PureComponent, ReactElement, ReactNode} from 'react';
import {IconCaretRight} from 'dls-icons-react';
import {classnames} from '../../core/commonTools';
import {CascaderOption} from '../cascader/interface';
import Checkbox from '../checkbox';
import classNames from 'classnames';

export type DataOption = {
    label: ReactNode,
    title?: string,
    icon?: ReactElement,
    checked?: boolean,
    indeterminate?: boolean,
    disabled?: boolean,
    selectable?: boolean,
    loading?: boolean,
    isLeaf?: boolean,
    key?: string,
    keyPath?: string,
    item?: CascaderOption,
    expandType?: 'inline' | 'toggle' | 'column',
    children?: DataOption[]
};

interface ColumnOptionProps {
    prefixCls?: string,
    option?: DataOption,
    active?: boolean,
    selected?: boolean,
    checked?: boolean,
    indeterminate?: boolean,
    loading?: boolean,
    expandIcon?: ReactNode,
    loadingIcon?: ReactNode,
    onSelect?: (key: string, keyPath: string) => void,
    onHover?: (key: string, keyPath: string) => void,
    onCheck?: (key: string) => void,
    showCheckbox?: boolean,
    group?: boolean,
    checkboxPrefixCls?: string,
    size?: 'large' | 'small' | 'medium';
    expandTrigger?: 'click' | 'hover',
    expanded?: boolean,
    renderOption?:
        (param: {
            node: ReactElement,
            option: CascaderOption
        }) => ReactElement;
};

export default class Option extends PureComponent<ColumnOptionProps> {

    prefix(name) {
        return `${this.props.prefixCls}-${name}`;
    }

    render() {
        const {
            showCheckbox,
            checkboxPrefixCls,
            option,
            size,
            active,
            selected,
            expandTrigger,
            group,
            renderOption
        } = this.props;

        if (!option) {
            return null;
        }

        const {
            label,
            title,
            icon,
            checked,
            indeterminate,
            disabled,
            loading,
            expandType,
            selectable
        } = option;
        const hasChildren = this.hasChildren();
        const className = classnames({
            [this.prefix('menu-item')]: true,
            [this.prefix('menu-item-group-title')]: group,
            [this.prefix('menu-item-expand')]: hasChildren,
            [this.prefix('menu-item-active')]: active,
            [this.prefix('menu-item-selected')]: selected,
            [this.prefix('menu-item-disabled')]: disabled,
            [this.prefix('menu-item-unselectable')]: selectable === false,
            [this.prefix('menu-item-loading')]: loading
        });
        const hover = hasChildren && !disabled && expandTrigger === 'hover';

        const node = (
            <li
                className={className}
                title={title}
                onClick={this.handleOnSelect}
                onMouseEnter={hover ? this.handleMouseEnter : null}
                onMouseLeave={hover ? this.handleMouseLeave : null}
            >
                {expandType === 'toggle' && this.renderExpandIcon()}
                {
                    showCheckbox && selectable !== false
                        && (
                            <Checkbox
                                checked={checked}
                                indeterminate={indeterminate}
                                size={size === 'large' ? 'medium' : size}
                                disabled={disabled}
                                prefixCls={checkboxPrefixCls}
                                className={this.prefix('menu-item-checkbox')}
                                // @ts-ignore checkbox 属性太乱
                                onClick={this.handleOnCheck}
                            />
                        )
                }
                {this.renderLabel(label)}
                {this.renderIcon(icon)}
                {hasChildren && !group && this.renderExpandIcon()}
            </li>
        );

        if (renderOption) {
            return renderOption({
                node,
                option: option.item
            });
        }
        return node;
    }

    hasChildren() {
        const {
            isLeaf,
            children
        } = this.props.option;
        return isLeaf === false || (children && children.length > 0);
    }

    handleOnSelect = () => {
        const {
            onSelect,
            option: {
                key,
                keyPath,
                disabled,
                selectable
            },
            showCheckbox
        } = this.props;
        if (!disabled && showCheckbox && selectable !== false && !this.hasChildren()) {
            this.handleOnCheck();
        }
        onSelect && onSelect(key, keyPath);
    }

    delayTimer;

    handleMouseEnter = () => {
        const {
            onHover,
            option
        } = this.props;
        this.delayTimer = setTimeout(() => {
            onHover && onHover(option.key, option.keyPath);
            this.delayTimer = null;
        }, 150);
    }

    handleMouseLeave = () => {
        if (this.delayTimer) {
            clearTimeout(this.delayTimer);
            this.delayTimer = null;
        }
    }

    componentWillUnmount(): void {
        if (this.delayTimer) {
            clearTimeout(this.delayTimer);
        }
    }

    handleOnCheck = (event?: any) => {
        const {
            onCheck,
            option,
            active
        } = this.props;
        if (event && (active || !this.hasChildren())) {
            event.stopPropagation();
        }
        onCheck && onCheck(option.key);
    }

    renderIcon(icon) {
        if (!icon) {
            return null;
        }
        return (
            <span className={this.prefix('menu-item-icon')}>{icon}</span>
        );
    }

    renderLabel(label) {
        return (
            <span className={this.prefix('menu-item-label')}>{label}</span>
        );
    }

    renderExpandIcon() {
        const {
            loading,
            loadingIcon,
            expandIcon,
            expanded,
            option: {
                expandType
            }
        } = this.props;
        if (loading) {
            return (
                <span className={this.prefix('menu-item-loading-icon')}>{loadingIcon}</span>
            );
        }
        return (
            <span
                className={
                    classNames(this.prefix('menu-item-expand-icon'), {
                        [this.prefix('menu-item-expand-icon-toggle')]: expandType === 'toggle',
                        [this.prefix('menu-item-expanded')]: expandType === 'toggle' && expanded
                    })
                }
            >
                {expandType === 'toggle'
                    ? <IconCaretRight className={this.prefix('menu-item-expand-arrow')} />
                    : expandIcon
                }
            </span>
        );
    }
}

export function EmptyOption({emptyNode, prefixCls}) {
    const option = {
        label: emptyNode,
        disabled: true
    };
    return <Option option={option} prefixCls={prefixCls} />;
}
