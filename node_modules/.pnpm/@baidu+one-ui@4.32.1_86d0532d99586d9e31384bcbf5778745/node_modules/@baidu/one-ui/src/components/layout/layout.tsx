import React, {PureComponent, isValidElement} from 'react';
import {LayoutProps} from './interface';
import {withConfigConsumer} from '../providerConfig/context';
import {classnames} from '../../core/commonTools';
import LayoutSidebar from './sidebar';
import LayoutHeader from './header';
import LayoutContent from './content';
import LayoutFooter from './footer';
import Context from './context';

interface LayoutState {
    sidebarCount: number,
    hasStickyFooter: boolean
};

@withConfigConsumer('layout')
class Layout extends PureComponent<LayoutProps, LayoutState> {
    static defaultProps: LayoutProps = {
        prefixCls: 'one-layout',
        direction: 'column'
    }

    static Sidebar: typeof LayoutSidebar;
    static Header: typeof LayoutHeader;
    static Content: typeof LayoutContent;
    static Footer: typeof LayoutFooter;

    state = {
        sidebarCount: 0,
        hasStickyFooter: false,
    };

    registerSidebar = () => {
        this.setState(({sidebarCount}) => ({
            sidebarCount: sidebarCount + 1
        }));
    };

    unregisterSidebar = () => {
        this.setState(({sidebarCount}) => ({
            sidebarCount: sidebarCount - 1
        }));
    };

    registerStickyFooter = () => {
        this.setState({
            hasStickyFooter: true
        });
    };

    unregisterStickyFooter = () => {
        this.setState({
            hasStickyFooter: false
        });
    };

    contextValue = {
        registerSidebar: this.registerSidebar,
        unregisterSidebar: this.unregisterSidebar,
        registerStickyFooter: this.registerStickyFooter,
        unregisterStickyFooter: this.unregisterStickyFooter
    };

    render() {
        const {
            className,
            prefixCls,
            children,
            direction,
            ...restProps
        } = this.props;

        const {
            sidebarCount,
            hasStickyFooter
        } = this.state;

        const hasSidebar = React
            .Children
            .toArray(children)
            .filter(isValidElement)
            .some(child => child.type === LayoutSidebar) || sidebarCount > 0;
        const rowDirection = direction === 'row' || hasSidebar;

        return (
            <Context.Provider value={this.contextValue}>
                <div
                    className={
                        classnames(
                            prefixCls,
                            className,
                            {
                                [`${prefixCls}-row-direction`]: rowDirection,
                                [`${prefixCls}-with-sidebar`]: hasSidebar,
                                [`${prefixCls}-with-sticky-footer`]: hasStickyFooter
                            }
                        )
                    }
                    {...restProps}
                >
                    {children}
                </div>
            </Context.Provider>
        )
    }
}

export default Layout;
