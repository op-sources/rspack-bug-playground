import {createContext, ReactElement} from 'react';
import {FormField, FormFieldOption, FormProps} from './interface';

export interface FormContextProps extends
    Pick<FormProps, 'wrapperCol' | 'labelAlign' | 'labelCol' | 'colon' | 'size' | 'labelPosition'> {
    vertical?: boolean;
    form?: {
        getFieldsValue: (names: string[]) => any,
        getFieldValue: (names: string) => any[],
        getFieldInstance: (name: string) => ReactElement,
        setFieldsValue: (values) => void,
        setFields: (fields: FormField) => void,
        setFieldsInitialValue: (values) => void,
        getFieldDecorator: (name: string, option: FormFieldOption) => (element: ReactElement) => ReactElement,
        getFieldProps: (name: string) => FormFieldOption,
        getFieldsError: (names: string[]) => string[],
        getFieldError: (name: string) => string[],
        getFieldsWarning: (names: string[]) => string[],
        getFieldWarning: (name: string) => string[],
        getFieldsSuccess: (names: string[]) => string[],
        getFieldSuccess: (name: string) => string[],
        isFieldValidating: (name: string) => boolean,
        isFieldsValidating: (names: string[]) => boolean,
        isFieldsTouched: (names: string[]) => boolean,
        isFieldTouched: (name: string) => boolean,
        isSubmitting: () => boolean,
        submit: () => void,
        validateForm: (scrollToError: boolean, callback?: (errors, values) => void) => Promise<Object>,
        isFormValidating: () => boolean,
        validateFields:
            | ((callback?: (errors, values) => void) => Promise<Object>)
            | ((names?: string[], callback?: (errors, values) => void) => Promise<Object>)
            | ((names?: string[], option?, callback?: (errors, values) => void) => Promise<Object>),
        resetFields: (names?: string[]) => void,
        validateFieldsAndScroll:
            | ((callback?: (errors, values) => void) => Promise<Object>)
            | ((names?: string[], callback?: (errors, values) => void) => Promise<Object>)
            | ((names?: string[], option?, callback?: (errors, values) => void) => Promise<Object>),
    }
}
export interface LegacyFormContextProps {
    legacy?: boolean
}

export interface FormFieldContextProps {
    register?: (name: string) => void,
    unregister?: (name: string) => void
}

export const FormContext = createContext<FormContextProps>({});

export const LegacyFormContext = createContext<LegacyFormContextProps>({});

export const FormFieldContext = createContext<FormFieldContextProps>({});
