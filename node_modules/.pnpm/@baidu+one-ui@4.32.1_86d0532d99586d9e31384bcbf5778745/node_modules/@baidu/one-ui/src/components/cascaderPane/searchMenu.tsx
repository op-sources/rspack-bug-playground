/**
 * @file 搜索结果菜单
 */

import React, {CSSProperties, PureComponent, ReactNode} from 'react';
import {classnames} from '../../core/commonTools';
import Option, {DataOption, EmptyOption} from './option';
import {IconChevronRight} from 'dls-icons-react';
import {last} from 'lodash';
import {CascaderOption} from '../cascader';

interface SearchMenuProps {
    prefixCls: string,
    style: CSSProperties,
    size: 'small' | 'medium' | 'large',
    width: number | string,
    options: DataOption[][],
    showCheckbox: boolean,
    emptyNode: ReactNode,
    onSelect: (key: string, keyPath: string) => void,
    onCheck: (key: string) => void,
    query: string,
    emptyType: 'card' | 'option',
    renderLabel: (query: string, path: CascaderOption[], prefix: string) => ReactNode
};

export default class SearchMenu extends PureComponent<SearchMenuProps> {

    prefix(name) {
        return `${this.props.prefixCls}-${name}`;
    }

    render() {
        const {
            style,
            width,
            emptyType,
            options
        } = this.props;
        const className = classnames(
            this.prefix('menus'),
            this.prefix('menus-search-box')
        );
        const menuStyle = {
            ...style
        };
        const empty = !options || options.length === 0;
        return (
            <div
                className={className}
                style={menuStyle}
            >
                {empty && emptyType === 'option'
                    ? this.renderEmptyOption()
                    : (
                        <div className={this.prefix('menus-search-box-container')}>
                            {
                                empty ? this.renderEmpty() : this.renderResults()
                            }
                        </div>
                    )}
            </div>
        );
    }

    highlight(query, label) {
        if (typeof label === 'string') {
            const labels = label.split(query);
            if (labels.length === 1) {
                return label;
            }
            const labelArray = [];
            for (let i = 0; i < labels.length; i++) {
                labelArray.push(<span key={i}>{labels[i]}</span>);
                if (i !== labels.length - 1) {
                    labelArray.push(
                        <span key={`${i}-highlight`} className={this.prefix('menu-item-highlight')}>{query}</span>
                    );
                }
            }
            return <span>{labelArray}</span>;
        }
        return label;
    }

    renderResults() {
        const {
            prefixCls,
            size,
            showCheckbox,
            options,
            onCheck,
            onSelect,
            query,
            renderLabel
        } = this.props;
        const opts = options.map(path => {
            const option = {...last(path)};
            option.label = renderLabel
                ? renderLabel(query, path.map(o => o.item), prefixCls)
                : path.map((o, index) => {
                    const label = o.label;
                    return (
                        <span key={index}>
                            {this.highlight(query, label)}
                            {path.length > index + 1
                                ? <IconChevronRight className={this.prefix('menu-item-separator')} />
                                : null
                            }
                        </span>
                    );
                });
            return option;
        });
        return (
            <ul>
                {
                    opts.map((option, index) => (
                        <Option
                            prefixCls={prefixCls}
                            size={size}
                            key={index}
                            option={option}
                            showCheckbox={showCheckbox}
                            checked={option.checked}
                            indeterminate={option.indeterminate}
                            onCheck={onCheck}
                            onSelect={onSelect}
                        />
                    ))
                }
            </ul>
        );
    }

    renderEmpty() {
        const {
            emptyNode
        } = this.props;
        return (
            <div className={this.prefix('empty')}>
                {emptyNode}
            </div>
        );
    }

    renderEmptyOption() {
        const {
            prefixCls,
            emptyNode
        } = this.props;
        return (
            <ul>
                <EmptyOption emptyNode={emptyNode} prefixCls={prefixCls} />
            </ul>
        );
    }
}