import React, {PureComponent} from 'react';
import {connect} from 'mini-store';
import {classnames} from '../../../core/commonTools';
import HeaderCell from './headerCell';
import {InnerTableColumnProps} from './interface';
import {TableStore} from './table';
import {TableColumnWidth} from '../interface';

interface TableHeaderCell {
    column: InnerTableColumnProps,
    render;
    className: string;
}

interface TableHeaderRowProps {
    row: TableHeaderCell[],
    rows: TableHeaderCell[][],
    index: number,
    onHeaderRow(columns: InnerTableColumnProps[], index: number),
    prefixCls: string,
    allColumnsWidth: TableColumnWidth[],
    onMoving(),
    dynamicWidth: number,
    onDragEnd(),
    onDragStart(),
    onHeaderCellMouseEnter,
    onHeaderCellMouseLeave
    last
}

class TableHeaderRow extends PureComponent<TableHeaderRowProps> {

    constructor(props) {
        super(props);
        this.state = {
            position: {},
            width: 0
        };
    }

    getLeftChildColumn(columns) {
        if (columns && columns.length) {
            const column = columns[0];
            const children = column.children;
            if (children && children.length) {
                return this.getLeftChildColumn(children);
            }
            return column.key;
        }
    }

    getRightChildColumn(columns) {
        if (columns && columns.length) {
            const column = columns[columns.length - 1];
            const children = column.children;
            if (children && children.length) {
                return this.getRightChildColumn(children);
            }
            return column.key;
        }
    }

    render() {
        const {
            row, index,
            onHeaderRow, prefixCls,
            allColumnsWidth = [], onMoving, dynamicWidth,
            onDragEnd, onDragStart,
            onHeaderCellMouseEnter, onHeaderCellMouseLeave, last,
            rows
        } = this.props;
        const rowProps = onHeaderRow(row.map(cell => cell.column), index);
        let existStickyRight = false;
        return (
            <tr
                {...rowProps}
                className={classnames(`${prefixCls}-head-row`
                    , last ? `${prefixCls}-head-row-last` : null
                    , rowProps ? rowProps.className : null
                )}
            >
                {row.map((cell, i) => {
                    const {column, className, render} = cell;
                    const stickyLeft = column.fixed === 'left';
                    const stickyRight = column.fixed === 'right';
                    const {column: nextColumn} = row[i + 1] || {};
                    const nextStickyLeft = nextColumn && nextColumn.fixed === 'left';
                    const columnKey = (stickyLeft
                            ? this.getLeftChildColumn(column.children)
                            : this.getRightChildColumn(column.children)
                        ) || column.key;
                    const curCol = allColumnsWidth.filter(col => col.key === columnKey)[0] || {} as TableColumnWidth;
                    let colWidth = 0;
                    allColumnsWidth.forEach(col => {
                        colWidth += col.width;
                    });
                    const classNames = classnames(
                        `${prefixCls}-head-cell`,
                        className, {
                            [`${prefixCls}-column-has-sort`]: column.sorter || column.customSortNode,
                            [`${prefixCls}-head-first-cell`]: i === 0
                                && (index === 0 || (index !== 0 && !rows[index - 1][0].column.rowSpan)),
                            [`${prefixCls}-head-cell-sticky-left`]: stickyLeft,
                            [`${prefixCls}-head-cell-sticky-right`]: stickyRight,
                            [`${prefixCls}-head-cell-sticky-left-last`]: stickyLeft && !nextStickyLeft,
                            [`${prefixCls}-head-cell-sticky-right-first`]: stickyRight && !existStickyRight
                        });

                    if (stickyRight) {
                        existStickyRight = true;
                    }
                    return (
                        <HeaderCell
                            className={classNames}
                            render={render}
                            key={column.key || column.dataIndex || i}
                            prefixCls={prefixCls}
                            column={column}
                            index={index}
                            {...curCol}
                            left={curCol.left || null}
                            onMoving={onMoving}
                            dynamicWidth={dynamicWidth || colWidth}
                            onDragEnd={onDragEnd}
                            onDragStart={onDragStart}
                            onHeaderCellMouseEnter={onHeaderCellMouseEnter}
                            onHeaderCellMouseLeave={onHeaderCellMouseLeave}
                        />
                    );
                })}
            </tr>
        );
    }
}

export default connect((state: TableStore) => {
    return {
        dynamicWidth: state.dynamicWidth,
        allColumnsWidth: state.allColumnsWidth
    };
})(TableHeaderRow);
