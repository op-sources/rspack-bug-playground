import React, {PureComponent, ReactElement} from 'react';
import {
    IconTrash,
    IconUpload,
    IconZoomIn,
    IconPlayCircle
} from 'dls-icons-react';
import {partial} from 'lodash';
import Progress from '../../progress';
import Popover from '../../popover';
import {
    originStatus
} from '../../../core/uploaderTools';
import {classnames} from '../../../core/commonTools';
import Overlay from '../../overlay';
import {UploaderImageItemProps, UploadImageActionItem} from '../interface';
import MediaIcon from './mediaIcon';

export default class ImageItem extends PureComponent<UploaderImageItemProps> {

    static defaultProps = {
        thumbUrl: '',
        type: 'image',
        showUploadListIcon: {
            showPreviewIcon: true,
            showReUploadIcon: true,
            showRemoveOnIcon: true
        }
    }

    state = {
        visible: false
    }

    renderItemOverlay = (item: UploadImageActionItem) => {
        const children = item.children;
        const {prefixCls, size} = this.props;
        return (
            <div className={classnames(
                `${prefixCls}-entries-item-menus`,
                `${prefixCls}-entries-item-menus-${size}`)}
            >
                {children.map((child, index) => {
                    return (
                        <span key={index} className={`${prefixCls}-entries-item-menus-label`}>
                            {child.label}
                        </span>
                    );
                })}
            </div>
        );
    }

    onVisibleChange = (visible: boolean) => {
        this.setState({
            visible
        });
    }

    renderOptionIcon = () => {
        const {
            showUploadListIcon,
            status,
            thumbUrl,
            prefixCls,
            onRemove,
            index,
            onPreview,
            onReUpload,
            fileList,
            controls,
            type
        } = this.props;
        const previewIcon = type.indexOf('video') > -1
            ? <IconPlayCircle onClick={partial(onPreview, index)} />
            : <IconZoomIn onClick={partial(onPreview, index)} />;
        const reUploadIcon = <IconUpload onClick={partial(onReUpload, index)} />;
        const trashIcon = <IconTrash onClick={partial(onRemove, index)} />;

        let actions: UploadImageActionItem[] = [
            {
                icon: previewIcon,
                key: 'preview'
            },
            {
                icon: reUploadIcon,
                key: 'reUpload'
            },
            {
                icon: trashIcon,
                key: 'delete'
            }
        ];

        if (typeof controls === 'function') {
            actions = controls(fileList[index], actions) || [];
        }
        else if (showUploadListIcon != null && typeof showUploadListIcon === 'object') {
            const {
                showPreviewIcon,
                showReUploadIcon,
                showRemoveOnIcon
            } = showUploadListIcon;
            actions[0].visible = !!(status === originStatus.SUCCESS && thumbUrl && showPreviewIcon);
            actions[1].visible = !!(
                (status === originStatus.SUCCESS || status === originStatus.ERROR)
                && showReUploadIcon
            );
            actions[2].visible = !!showRemoveOnIcon;
        }
        else if (typeof showUploadListIcon === 'function') {
            actions = showUploadListIcon(fileList[index], actions) || [];
        }

        actions = actions.filter(action => action.visible !== false);
        if (actions.length === 0) {
            return null;
        }

        return (
            <div className={`${prefixCls}-image-item-card-operation-icons`}>
                {
                    actions.map(item => {
                        return item.children && item.children.length
                            ? <Overlay
                                overlay={this.renderItemOverlay(item)}
                                onVisibleChange={this.onVisibleChange}
                            >{item.icon}</Overlay>
                            : item.icon;
                    })
                }
            </div>
        );
    }

    renderOpertaion = (iconsSet: ReactElement) => {
        const {
            customUploadListIcon, renderCustomIcon, prefixCls
        } = this.props;
        if (customUploadListIcon) {
            return customUploadListIcon;
        }
        if (typeof renderCustomIcon === 'function') {
            return renderCustomIcon(this.props);
        }
        return (
            <div className={classnames(`${prefixCls}-image-item-card-operation`,
                {
                    [`${prefixCls}-image-item-card-operation-hide`]: !iconsSet,
                    [`${prefixCls}-image-item-card-operation-overlay-open`]: this.state.visible
                })}
            >
                <div className={`${prefixCls}-image-item-card-operation-mask`} />
                {iconsSet}
            </div>
        );
    };

    renderHelper() {
        const {
            prefixCls,
            showHelper,
            helperText
        } = this.props;

        if (!helperText || !showHelper) {
            return null;
        }
        let helperTextNode;
        if (typeof helperText === 'function') {
            helperTextNode = helperText();
        }
        else {
            helperTextNode = helperText;
        }
        return helperTextNode
            ? <div className={`${prefixCls}-helper-text`}>{helperTextNode}</div>
            : null;
    }

    render() {
        const {
            prefixCls,
            status,
            name,
            size,
            progressStep,
            thumbUrl,
            errorMessage,
            realType,
            className,
            pickerIcon,
            errorDisplay,
            footer,
            showHelper,
            helperText,
            helperTextPosition,
            theme
        } = this.props;
        const itemClassNames = classnames(`${prefixCls}-image-item`, `${prefixCls}-image-item-${status}`, className, {
            [`${prefixCls}-image-item-helper-${helperTextPosition}`]: showHelper && helperText
        });
        const iconsSet = this.renderOptionIcon();
        const iconContainer = this.renderOpertaion(iconsSet);

        let mediaIcon = (
            <MediaIcon
                theme={theme}
                type={realType}
                className={`${prefixCls}-${realType}-add-icon`}
            />
        );
        const hasError = errorMessage && errorMessage.length;
        if (hasError && size === 'small') {
            mediaIcon = null;
        }
        const imageItem = (
            <div className={classnames(`${prefixCls}-image-item-card`, {
                [`${prefixCls}-image-item-card-hide`]: !iconsSet
            })}
            >
                {
                    status === originStatus.WAITING || (status === originStatus.ERROR && !thumbUrl) ? (
                        <div className={`${prefixCls}-add-icon`}>
                            {pickerIcon || mediaIcon}
                        </div>
                    ) : null
                }
                {
                    status === originStatus.UPLOADING ? (
                        <div className={`${prefixCls}-image-item-uploading-container`}>
                            <div className={`${prefixCls}-image-item-uploading-text`}>上传中</div>
                            <Progress
                                size="small"
                                percent={progressStep}
                                showInfo={false}
                                className={`${prefixCls}-image-item-progress`}
                            />
                        </div>
                    ) : null
                }
                {
                    (status === originStatus.SUCCESS || thumbUrl) ? (
                        <span className={`${prefixCls}-image-item-thumbUrl`}>
                            {
                                thumbUrl ? (
                                    <img
                                        src={thumbUrl}
                                        alt={name}
                                        className={`${prefixCls}-image-item-thumbUrl-image`}
                                    />
                                ) : mediaIcon
                            }
                        </span>
                    ) : null
                }
                {
                    hasError && !thumbUrl ? (
                        <div className={`${prefixCls}-image-item-error-message`}>
                            <span className={`${prefixCls}-image-item-error-message-tip`}>
                                {name}
                            </span>
                        </div>
                    ) : null
                }
                {iconContainer}
            </div>
        );
        const error = hasError ? errorMessage.join('，') : null;
        return (
            <div className={itemClassNames}>
                <div>
                    {
                        hasError && errorDisplay === 'popup'
                            ? (
                                <Popover
                                    content={error}
                                    overlayClassName={`${prefixCls}-file-item-popover`}
                                    placement="top"
                                >
                                    {imageItem}
                                </Popover>
                            )
                            : imageItem
                    }
                    {footer
                        ? <div className={`${prefixCls}-image-item-card-footer`}>{footer}</div>
                        : null
                    }
                    {
                        hasError && errorDisplay === 'normal'
                            ? <div className={`${prefixCls}-image-item-card-error`}>{error}</div>
                            : null
                    }
                </div>
                {this.renderHelper()}
            </div>
        );
    }
}