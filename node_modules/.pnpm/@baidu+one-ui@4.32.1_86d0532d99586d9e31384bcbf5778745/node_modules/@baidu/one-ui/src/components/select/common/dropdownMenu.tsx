import React, {Component, cloneElement, CSSProperties, ReactNode, FocusEventHandler, UIEventHandler} from 'react';
import {findDOMNode} from 'react-dom';
import toArray from 'rc-util/lib/Children/toArray';
import Menu from 'rc-menu';
import scrollIntoView from 'dom-scroll-into-view';
import raf from 'raf';
import {
    getSelectKeys, preventDefaultEvent, saveRef
} from '../../../core/selectTools';

interface DropdownMenuProps {
    defaultActiveFirstOption: boolean,
    value: any,
    dropdownMenuStyle: CSSProperties,
    multiple: boolean,
    onPopupFocus: FocusEventHandler<HTMLDivElement>,
    onPopupScroll: UIEventHandler<HTMLDivElement>,
    onMenuDeselect(selectInfo),
    onMenuSelect(selectInfo),
    prefixCls: string,
    menuItems: any,
    inputValue: string,
    visible: boolean,
    firstActiveValue: string,
    menuItemSelectedIcon: ReactNode | (() => ReactNode);
    backfillValue: string;
    showCheckAll: boolean;
    footer: ReactNode | (() => ReactNode);
};
export default class DropdownMenu extends Component<DropdownMenuProps> {

    constructor(props) {
        super(props);
        this.lastInputValue = props.inputValue;
        this.saveMenuRef = saveRef(this, 'menuRef');
        this.saveManualRef = saveRef(this, 'manualRef');
    }


    lastInputValue;
    saveMenuRef;
    menuRef;
    saveManualRef;
    manualRef;
    firstActiveItem;
    rafInstance;
    lastVisible: boolean;

    componentDidMount() {
        this.scrollActiveItemToView();
        this.lastVisible = this.props.visible;
    }

    shouldComponentUpdate(nextProps) {
        if (!nextProps.visible) {
            this.lastVisible = false;
        }
        // freeze when hide
        return nextProps.visible || nextProps.inputValue !== this.props.inputValue;
    }

    componentDidUpdate(prevProps) {
        const props = this.props;
        if (!prevProps.visible && props.visible) {
            this.scrollActiveItemToView();
        }
        this.lastVisible = props.visible;
        this.lastInputValue = props.inputValue;
    }

    componentWillUnmount() {
        if (this.rafInstance && this.rafInstance.cancel) {
            this.rafInstance.cancel();
        }
    }

    scrollActiveItemToView = () => {
        // scroll into view
        const itemComponent = findDOMNode(this.firstActiveItem);
        const {value, visible, firstActiveValue} = this.props;

        if (!itemComponent || !visible) {
            return;
        }
        const scrollIntoViewOpts = {
            onlyScrollIfNeeded: true,
            alignWithTop: false
        };
        if (
            (!value || value.length === 0) && firstActiveValue
        ) {
            scrollIntoViewOpts.alignWithTop = true;
        }

        // Delay to scroll since current frame item position is not ready when pre view is by filter
        this.rafInstance = raf(() => {
            scrollIntoView(
                itemComponent,
                findDOMNode(this.menuRef),
                scrollIntoViewOpts
            );
        });
    };

    renderMenu() {
        const props = this.props;
        const {
            menuItems,
            menuItemSelectedIcon,
            defaultActiveFirstOption,
            value,
            prefixCls,
            multiple,
            onMenuSelect,
            onMenuDeselect,
            inputValue,
            firstActiveValue,
            backfillValue
        } = props;
        if (menuItems && menuItems.length) {
            let menuProps;
            if (multiple) {
                menuProps = {
                    onDeselect: onMenuDeselect,
                    onSelect: onMenuSelect
                };
            }
            else {
                menuProps = {
                    onClick: onMenuSelect
                };
            }

            const selectedKeys = getSelectKeys(menuItems, value);

            let clonedMenuItems = menuItems;
            if (selectedKeys.length || firstActiveValue) {
                if (props.visible && !this.lastVisible) {
                    menuProps.activeKey = selectedKeys[0] || firstActiveValue;
                }
                let foundFirst = false;
                // set firstActiveItem via cloning menus
                // for scroll into view
                const clone = item => {
                    if (
                        (!foundFirst && selectedKeys.indexOf(item.key) !== -1)
                        || (!foundFirst
                        && !selectedKeys.length
                        && firstActiveValue.indexOf(item.key) !== -1)
                    ) {
                        foundFirst = true;
                        return cloneElement(item, {
                            ref: ref => {
                                this.firstActiveItem = ref;
                            }
                        });
                    }
                    return item;
                };

                clonedMenuItems = menuItems.map(item => {
                    if (item.type.isMenuItemGroup) {
                        const children = toArray(item.props.children).map(clone);
                        return cloneElement(item, {}, children);
                    }
                    return clone(item);
                });
            }
            else {
                // Clear firstActiveItem when dropdown menu items was empty
                // Avoid `Unable to find node on an unmounted component`
                this.firstActiveItem = null;
            }

            // clear activeKey when inputValue change
            const lastValue = value && value[value.length - 1];
            if (inputValue !== this.lastInputValue && (!lastValue || lastValue !== backfillValue)) {
                menuProps.activeKey = '';
            }
            return (
                <Menu
                    ref={this.saveMenuRef}
                    manualRef={this.saveManualRef}
                    style={this.props.dropdownMenuStyle}
                    defaultActiveFirst={defaultActiveFirstOption}
                    // @ts-ignore
                    role="listbox"
                    itemIcon={multiple ? menuItemSelectedIcon : null}
                    multiple={multiple}
                    {...menuProps}
                    selectedKeys={selectedKeys}
                    prefixCls={`${prefixCls}-menu`}
                >
                    {clonedMenuItems}
                </Menu>
            );
        }
        return null;
    }

    render() {
        const renderMenu = this.renderMenu();
        const {
            prefixCls,
            footer
        } = this.props;
        return renderMenu ? (
            <div
                className={`${prefixCls}-menu-container`}
                onFocus={this.props.onPopupFocus}
                onMouseDown={preventDefaultEvent}
                onScroll={this.props.onPopupScroll}
            >
                {renderMenu}
                {footer
                    ? (
                        <div className={`${prefixCls}-menu-footer`}>
                            {
                                footer
                            }
                        </div>
                    )
                    : null
                }
            </div>
        ) : null;
    }
}
