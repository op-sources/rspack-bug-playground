import React, {PureComponent} from 'react';
import {classnames} from '../../core/commonTools';
import warning from 'warning';
import Item from './menuItem';
import Divider from './divider';
import ItemGroup from './menuItemGroup';
import SubMenu from './subMenu';
import InnerMenu from './common/menu';
import {MenuProps} from './interface';
import {withConfigConsumer} from '../providerConfig/context';
import Context from './context';

const horizontalMap = {
    1: 'large',
    2: 'medium',
    3: 'small'
};

interface MenuState {
    openKeys?: string[],
    inlineOpenKeys?: string[],
    inlineCollapsed?: boolean,
    switchModeFromInline?: boolean,
    mode?: 'inline' | 'vertical',
}

@withConfigConsumer('menu')
class Menu extends PureComponent<MenuProps, MenuState> {
    static Divider = Divider;

    static Item = Item;

    static SubMenu = SubMenu;

    static ItemGroup = ItemGroup;

    static defaultProps = {
        mode: 'vertical',
        type: 'strong',
        menuLevel: 2, // 默认是二级导航
        needBorder: false,
        popupClassName: '',
        arrowPosition: 'right',
        inlineIndent: 16,
        inlinePaddingLeft: 20,
        prefixCls: 'one-menu'
    };

    constructor(props) {
        super(props);
        warning(
            !('inlineCollapsed' in props && props.mode !== 'inline'),
            '`inlineCollapsed` should only be used when Menu\'s `mode` is inline.',
        );
        let openKeys;
        if ('defaultOpenKeys' in props) {
            openKeys = props.defaultOpenKeys;
        }
        else if ('openKeys' in props) {
            openKeys = props.openKeys;
        }

        this.state = {
            openKeys: openKeys || []
        };
    }

    getContext = () => {
        const {
            inlineCollapsed,
            inlineIndent,
            inlinePaddingLeft
        } = this.props;

        return {
            inlineCollapsed,
            inlineIndent,
            inlinePaddingLeft
        };
    }

    static getDerivedStateFromProps(props, state) {
        const {
            mode,
            openKeys,
            inlineCollapsed
        } = props;
        const newState: MenuState = {
            mode,
            inlineCollapsed
        };
        if (state.mode === 'inline'
            && mode !== 'inline') {
            newState.switchModeFromInline = true;
        }
        if ('openKeys' in props) {
            newState.openKeys = openKeys;
            return newState;
        }
        if (inlineCollapsed && !state.inlineCollapsed) {
            newState.switchModeFromInline = !inlineCollapsed;
            newState.inlineOpenKeys = state.openKeys;
            newState.openKeys = [];
        }
        if (!inlineCollapsed && state.inlineCollapsed) {
            newState.openKeys = state.inlineOpenKeys || [];
            newState.inlineOpenKeys = [];
        }
        return newState;
    }

    setOpenKeys = openKeys => {
        if (!('openKeys' in this.props)) {
            this.setState({openKeys});
        }
    }

    getRealMenuMode = () => {
        const {
            inlineCollapsed,
            mode
        } = this.props;
        if (this.state.switchModeFromInline && inlineCollapsed) {
            return 'inline';
        }
        return inlineCollapsed ? 'vertical' : mode;
    }

    getInlineCollapsed = () => {
        const inlineCollapsed = this.props.inlineCollapsed;
        return inlineCollapsed;
    }

    handleOpenChange = openKeys => {
        this.setOpenKeys(openKeys);
        const onOpenChange = this.props.onOpenChange;
        if (onOpenChange) {
            onOpenChange(openKeys);
        }
    };

    handleClick = e => {
        this.handleOpenChange([]);

        const onClick = this.props.onClick;
        if (onClick) {
            onClick(e);
        }
    };

    render() {
        const {
            prefixCls,
            className,
            mode,
            style,
            needBorder,
            arrowPosition,
            size,
            type,
            menuLevel,
            inlinePaddingLeft,
            inlineCollapsed,
            ...restProps
        } = this.props;

        const menuMode = this.getRealMenuMode();
        const menuClassName = classnames(`${prefixCls}-light`, {
            [`${prefixCls}-inline-collapsed`]: inlineCollapsed,
            [`${prefixCls}-container-border`]: (mode === 'inline') && needBorder,
            [`${prefixCls}-container-arrow-left`]: arrowPosition === 'left',
            [`${prefixCls}-type-basic`]: type === 'basic'
        });
        const currentSize = size || horizontalMap[menuLevel > 3 ? 3 : menuLevel] || 'medium';
        const menuBoxCls = classnames(
            `${prefixCls}-${mode}-box`,
            `${prefixCls}-${mode}-${currentSize}`,
            {
                [`${prefixCls}-${mode}-container-collapsed`]: inlineCollapsed
            },
            className
        );
        const menuProps: MenuProps = {
            openKeys: this.state.openKeys,
            onOpenChange: this.handleOpenChange,
            className: menuClassName,
            mode: menuMode,
            prefixCls
        };
        if (menuMode !== 'inline') {
            menuProps.onClick = this.handleClick;
        }
        return (
            <Context.Provider value={this.getContext()}>
                <div className={menuBoxCls} style={style}>
                    <InnerMenu {...restProps} {...menuProps} />
                </div>
            </Context.Provider>
        );
    }
}

export default Menu;