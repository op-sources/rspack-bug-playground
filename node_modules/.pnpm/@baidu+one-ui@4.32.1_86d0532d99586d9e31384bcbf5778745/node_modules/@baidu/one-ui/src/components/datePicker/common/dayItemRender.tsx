import React, {PureComponent} from 'react';
import {connect} from 'mini-store';
import WeekRender from './weekRender';
import Calendar from './calendar';
import {DatePickerStore} from '../datePicker';
import classNames from 'classnames';

interface DayItemRenderProps {
    prefixCls: string,
    panelType: string,
    showYear: number,
    showMonth: number,
    currentDate: string,
    hoverDate: string,
    beginDate: string,
    endDate: string,
    validateMinDate: string,
    validateMaxDate: string,
    mode: 'week' | 'date',
    dateFormat: string,
    validateDisabled(value: {
        dayItem: string,
        timeStamp: number,
        getTimeStamp(value: string): number
    }): boolean
}
class DayItemRender extends PureComponent<DayItemRenderProps> {

    render() {
        const {
            panelType,
            prefixCls,
            mode
        } = this.props;
        if (panelType === 'month') {
            return null;
        }
        const bodyContainerClassName = classNames(`${prefixCls}-day-container`, {
            [`${prefixCls}-week-mode`]: mode === 'week'
        });
        return (
            <div className={bodyContainerClassName}>
                <WeekRender {...this.props} />
                <Calendar {...this.props} />
            </div>
        );
    }
}

export default connect((state: DatePickerStore) => {
    const [beginDate, endDate] = state._value as string[];

    return {
        showYear: state.showYear,
        showMonth: state.showMonth,
        panelType: state.panelType,
        beginDate,
        endDate,
        validateMinDate: state.validateMinDate,
        validateMaxDate: state.validateMaxDate
    };
})(DayItemRender);
