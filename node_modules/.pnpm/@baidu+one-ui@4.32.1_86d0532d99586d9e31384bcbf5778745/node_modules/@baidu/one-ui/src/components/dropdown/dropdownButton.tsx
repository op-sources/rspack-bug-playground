import React, {CSSProperties, PureComponent} from 'react';
import {classnames} from '../../core/commonTools';
import {IconChevronDown} from 'dls-icons-react';
import Dropdown from './dropdown';
import Menu from '../menu';
import SearchBox, {SearchBoxProps} from '../searchBox';
import SearchText from '../select/searchText';
import Button, {ButtonProps} from '../button';
import {DropdownButtonProps} from './interface';
import {MenuItemProps, SubMenuProps} from '../menu/interface';
import {withConfigConsumer} from '../providerConfig/context';
import Loading from '../loading';


const noop = () => {};

const MenuItem = Menu.Item;
const SubMenu = Menu.SubMenu;
const ItemGroup = Menu.ItemGroup;
const Divider = Menu.Divider;

const itemHeightBySize = {
    xsmall: 24,
    small: 28,
    medium: 32,
    large: 36
};

interface DropdownButtonState {
    isExpand?: boolean;
    searchValue?: string;
    dropdownWidth?;
    options?
}

@withConfigConsumer('dropdown')
class DropdownButton extends PureComponent<DropdownButtonProps, DropdownButtonState> {

    static defaultProps = {
        prefixCls: 'one-dropdown',
        disabled: false,
        dropdownHeight: 'auto',
        showSearch: false,
        style: {},
        trigger: ['hover'],
        notFound: '暂无内容',
        loadingText: '加载中...',
        loading: false,
        className: '',
        searchPlaceholder: '请输入需要搜索的内容',
        size: 'medium',
        type: 'normal',
        onClickButton() {},
        buttonProps: {},
        primaryType: 'normal',
        textLink: false,
        searchControlled: false,
        dropdownMatchSelectWidth: false,
        showArrow: true,
        overlayStyle: {},
        searchPrefixCls: 'one-search-box',
        onVisibleChange() {},
        onHandleMenuClick() {},
        handleMenuClick() {},
        BottomCustomPanel: null
    };

    constructor(props) {
        super(props);
        this.state = {
            isExpand: false,
            options: props.options || [],
            searchValue: '',
            dropdownWidth: null
        };
    }

    dropdown;
    buttonRef;
    menuItemRef;

    componentDidMount() {
        this.setDropdownWidth();
    }

    componentDidUpdate() {
        this.setDropdownWidth();
    }

    static getDerivedStateFromProps = (nextProps, prevState) => {
        const newState: DropdownButtonState = {};
        if ('options' in nextProps) {
            newState.options = nextProps.options;
        }
        return newState;
    }

    onSearch = () => {
        const onClickSearch = this.props.onClickSearch;
        const searchValue = this.state.searchValue;
        if (onClickSearch) {
            onClickSearch(searchValue);
        }
    }

    onChangeSearch = e => {
        const value = e.target.value;
        const {onSearchChange, searchControlled, options} = this.props;
        this.setState({
            searchValue: value
        });
        if (onSearchChange) {
            onSearchChange(value);
        }
        if (!searchControlled) {
            // 不受控的话 内部进行搜索
            const newOptions = options.filter(option => 'label' in option && option.label.indexOf(value) > -1);
            this.setState({
                options: newOptions
            });
        }
    }

    onClearClick = () => {
        const onClearSearch = this.props.onClearSearch;
        const value = '';
        if (onClearSearch) {
            onClearSearch(value);
        }
        this.setState({
            searchValue: value
        });
    }

    getButtonRef = ref => {
        this.buttonRef = ref;
    };

    getMenuItemRef = ref => {
        this.menuItemRef = ref;
    }

    getSubMenuItem = (option, optionLength, index) => {
        const {onMenuItemHeight, showSearch, size, prefixCls} = this.props;
        const label  = option.label;
        const isStringLabel = typeof label === 'string';
        const {
            searchValue
        } = this.state;
        if (option.children && option.children.length) {
            const childrenLength = option.children.length;
            const subMenu = option.children.map((item, index) => {
                const key = item.value;
                const menuItemProps: MenuItemProps = {
                    key
                };
                if (item.disabled) {
                    menuItemProps.disabled = true;
                }
                if (item.divider) {
                    return <Divider key={`${index}-divider`} />;
                }
                const onClick = item.onClick || noop;
                if (showSearch && isStringLabel) {
                    return (
                        <MenuItem {...menuItemProps}>
                            <span onClick={onClick}>
                                <SearchText
                                    text={item.label}
                                    showSearch
                                    searchValue={searchValue}
                                />
                            </span>
                        </MenuItem>
                    );
                }
                return (
                    <MenuItem {...menuItemProps} key={key}>
                        <span onClick={onClick}>{item.label}</span>
                    </MenuItem>
                );
            });
            const subMenuProps: SubMenuProps = {
                key: option.value,
                title: option.label,
                popupClassName: `${prefixCls}-menu-submenu-${size}`
            };
            if (option.disabled) {
                subMenuProps.disabled = true;
            }
            // 判断子菜单是否长，如果子菜单比母菜单长则判定为超长
            if (childrenLength >= optionLength && index) {
                const itemHeight = onMenuItemHeight || itemHeightBySize[size];
                subMenuProps.placements = {
                    rightTop: {
                        points: ['tl', 'tr'],
                        overflow: {
                            adjustX: 1,
                            adjustY: 1
                        },
                        offset: [4, -((itemHeight * index))]
                    }
                };
            }
            if (showSearch) {
                return (
                    <SubMenu {...subMenuProps}>
                        {subMenu}
                    </SubMenu>
                );
            }
            return (
                <SubMenu {...subMenuProps}>
                    {subMenu}
                </SubMenu>
            );
        }
        if (option.groupChildren && option.groupChildren.length) {
            // 分组
            const children = option.groupChildren.map(child => {
                const menuItemProps: MenuItemProps = {
                    key: child.value
                };
                if (child.disabled) {
                    menuItemProps.disabled = true;
                }
                if (child.divider) {
                    return <Divider key={`${index}-divider`} />;
                }
                const onClick = child.onClick || noop;
                if (showSearch && isStringLabel) {
                    return (
                        <MenuItem {...menuItemProps}>
                            <span onClick={onClick}>
                                <SearchText
                                    text={child.label}
                                    showSearch
                                    searchValue={searchValue}
                                />
                            </span>
                        </MenuItem>
                    );
                }
                return (
                    <MenuItem {...menuItemProps} key={child.value}>
                        <span onClick={onClick}>{child.label}</span>
                    </MenuItem>
                );
            });
            return (
                <ItemGroup key={option.value} title={option.label}>
                    {children}
                </ItemGroup>
            );
        }
        const menuItemProps: MenuItemProps = {
            key: option.value
        };
        if (option.disabled) {
            menuItemProps.disabled = true;
        }
        if (option.divider) {
            return <Divider key={`${index}-divider`} />;
        }
        const onClick = option.onClick || noop;
        if (showSearch && isStringLabel) {
            return (
                <MenuItem ref={this.getMenuItemRef} {...menuItemProps}>
                    <span onClick={onClick}>
                        <SearchText
                            text={option.label}
                            showSearch
                            searchValue={searchValue}
                        />
                    </span>
                </MenuItem>
            );
        }
        return (
            <MenuItem {...menuItemProps}>
                <span onClick={onClick}>{option.label}</span>
            </MenuItem>
        );
    }

    getDropdownOverlay = () => {
        const {
            dropdownHeight,
            showSearch,
            searchPlaceholder,
            searchWidth,
            prefixCls,
            size,
            searchPrefixCls,
            BottomCustomPanel,
            notFound,
            loading,
            loadingText
        } = this.props;
        const {options, searchValue} = this.state;
        const optionsLength = options.length;
        const searchMenuProps = {
            disabled: true,
            style: {
                padding: 0,
                cursor: 'auto'
            }
        };
        const searchProps: SearchBoxProps = {
            placeholder: searchPlaceholder,
            value: searchValue,
            isShowDropDown: false,
            onSearch: this.onSearch,
            onChange: this.onChangeSearch,
            onClearClick: this.onClearClick,
            size,
            prefixCls: searchPrefixCls
        };
        if (searchWidth) {
            searchProps.width = searchWidth;
        }
        else {
            searchProps.width = '100%';
        }

        const normalizedSize = size === 'xsmall' ? 'small' : size;

        const empty = (options.length === 0 || loading)
            ? (
                <MenuItem disabled className={`${prefixCls}-menu-item-empty`}>
                    {loading ? <Loading size={normalizedSize} tip={loadingText} /> : notFound}
                </MenuItem>
            ) : null;
        const bottomCustomPanel = typeof BottomCustomPanel === 'function'
            ? <BottomCustomPanel {...this.props} />
            : BottomCustomPanel;
        const menu = (
            <Menu
                style={{height: dropdownHeight}}
                onClick={this.handleMenuClick}
                className={`${prefixCls}-menu-${size}`}
            >
                {
                    showSearch ? (
                        <MenuItem {...searchMenuProps} className={`${prefixCls}-search-item`}>
                            <SearchBox {...searchProps} />
                        </MenuItem>
                    ) : null
                }
                {
                    empty || options.map((option, index) => {
                            return this.getSubMenuItem(option, optionsLength, index);
                        })
                }
                {bottomCustomPanel}
            </Menu>
        );
        return menu;
    };

    getDropdownContainer = ref => {
        this.dropdown = ref;
    };

    handleMenuClick = e => {
        const {handleMenuClick, onHandleMenuClick} = this.props;
        onHandleMenuClick(e);
        handleMenuClick(e);
        this.dropdownVisibleChange(false);
    }

    dropdownVisibleChange = visible => {
        const {onVisibleChange, options} = this.props;
        onVisibleChange(visible);
        this.setState({
            isExpand: visible,
            searchValue: '',
            options
        });
    }

    setDropdownWidth = () => {
        const width = this.buttonRef.offsetWidth;
        if (width !== this.state.dropdownWidth) {
            this.setState({dropdownWidth: width});
        }
    }

    render() {
        const {
            trigger,
            placement,
            disabled,
            visible,
            title,
            style,
            getPopupContainer,
            className,
            overlayStyle,
            overlayClassName,
            width,
            onMouseEnter,
            onMouseLeave,
            size,
            type,
            onClickButton,
            buttonProps,
            primaryType,
            textLink,
            dropdownMatchSelectWidth,
            showArrow,
            header,
            footer
        } = this.props;
        const overlay = this.props.overlay || this.getDropdownOverlay();
        const dropdownProps: DropdownButtonProps = {
            overlay,
            trigger: disabled ? [] : trigger,
            onVisibleChange: this.dropdownVisibleChange,
            onMouseEnter,
            onMouseLeave,
            getPopupContainer,
            overlayStyle,
            overlayClassName,
            transparent: false,
            size,
            header,
            footer
        };
        const visibleControlled =  'visible' in this.props;
        if (visibleControlled) {
            dropdownProps.visible = visible;
        }
        if ('placement' in this.props) {
            dropdownProps.placement = placement;
        }
        const prefixCls = `${this.props.prefixCls}-button`;
        const isExpand = this.state.isExpand;
        const dropdownButtonClassName = classnames(
            prefixCls,
            `${prefixCls}-${size}`,
            `${prefixCls}-${type}`,
            {
                [`${prefixCls}-open`]: visibleControlled ? visible : isExpand,
                [`${prefixCls}-textLink`]: textLink
            }
        );
        const buttonStyle: CSSProperties = {...style};
        if (width) {
            buttonStyle.width = width;
        }
        const dropdownButtonContainerClassName = classnames(
            `${prefixCls}-containers`,
            className
        );
        const otherProps: ButtonProps = {};
        if (textLink) {
            otherProps.type = 'link';
        }
        const widthProp = dropdownMatchSelectWidth ? 'width' : 'minWidth';
        if (this.state.dropdownWidth) {
            overlayStyle[widthProp] = `${this.state.dropdownWidth}px`;
        }
        return (
            <span
                className={dropdownButtonContainerClassName}
                ref={this.getDropdownContainer}
            >
                {
                    type === 'normal' ? (
                        <Dropdown {...dropdownProps}>
                            <span ref={this.getButtonRef}>
                                <Button
                                    className={dropdownButtonClassName}
                                    style={buttonStyle}
                                    disabled={disabled}
                                    size={size}
                                    type="basic"
                                    {...buttonProps}
                                    {...otherProps}
                                >
                                    {title}
                                    {showArrow
                                        ? <IconChevronDown className={`${prefixCls}-arrow-down-icon`} />
                                        : null
                                    }
                                </Button>
                            </span>
                        </Dropdown>
                    ) : (
                        <span ref={this.getButtonRef} className={`${prefixCls}-primary-container`}>
                            <Button
                                disabled={disabled}
                                onClick={onClickButton}
                                type={primaryType}
                                size={size}
                            >
                                {title}
                            </Button>
                            <Dropdown placement="bottomRight" {...dropdownProps}>
                                <span className={`${prefixCls}-primary-container-item`}>
                                    <Button
                                        className={dropdownButtonClassName}
                                        style={buttonStyle}
                                        size={size}
                                        disabled={disabled}
                                        type={primaryType}
                                        icon={<IconChevronDown className={`${prefixCls}-arrow-down-icon`} />}
                                        {...buttonProps}
                                    />
                                </span>
                            </Dropdown>
                        </span>
                    )
                }
            </span>
        );
    }
}

export default DropdownButton;

