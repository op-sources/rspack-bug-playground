/**
 * @file lightBox组件
 * @author huangshiming@baidu.com
 * @date 2020-11-04
 */
import React, {PureComponent} from 'react';
import warning from 'warning';
import {classnames} from '../../core/commonTools';
import {IconChevronRight, IconChevronLeft} from 'dls-icons-react';
import Dialog from '../dialog';
import Button, {ButtonProps} from '../button';
import {LightboxProps} from './interface';
import {withConfigConsumer} from '../providerConfig/context';

interface LightboxState {
    slide: number;
    open: boolean;
};

@withConfigConsumer('lightbox')
class Lightbox extends PureComponent<LightboxProps, LightboxState> {
    static defaultProps = {
        prefixCls: 'one-lightbox',
        className: '',
        indicator: 'number',
        dataSource: [],
        onClose() {},
        onChange() {},
        mode: 'normal',
        defaultCurrent: 0,
        maskClosable: false
    }

    constructor(props) {
        super(props);
        this.state = {
            open: props.open || false,
            slide: (props.defaultSlideIndex || props.defaultActiveIndex || 0) + 1
        };
        if ('datasource' in props) {
            warning(false, '`datasource` is deprecated use `dataSource` instead');
        }
    }

    static getDerivedStateFromProps = (nextProps, prevState) => {
        const state = {
            open: prevState.open,
            slide: prevState.slide
        };
        if ('open' in nextProps && nextProps.open !== prevState.open) {
            state.open = nextProps.open;
        }
        // 后续废弃
        if ('slide' in nextProps && nextProps.slide !== prevState.slide) {
            warning(false, '`slide` is deprecated use `activeIndex` or `defaultActiveIndex` instead');
            state.slide = nextProps.slide;
        }
        if ('slideIndex' in nextProps && nextProps.slideIndex + 1 !== prevState.slide) {
            warning(false, '`slideIndex` is deprecated use `activeIndex` or `defaultActiveIndex` instead');
            state.slide = nextProps.slideIndex + 1;
        }
        if ('activeIndex' in nextProps && nextProps.activeIndex + 1 !== prevState.slide) {
            state.slide = nextProps.activeIndex + 1;
        }
        return state;
    }

    root: HTMLDivElement;
    saveRoot = (node) => {
        this.root = node;
    }

    componentDidUpdate(): void {
        if (!this.root) {
            return;
        }
        const {prefixCls} = this.props;
        const videos: NodeListOf<HTMLVideoElement> = this.root.querySelectorAll(`.${prefixCls}-item-hide video`);
        videos.forEach(video => {
            video.pause();
        });
    }

    onCancel = () => {
        this.props.onClose();
    }

    getDataSource() {
        const {
            datasource,
            dataSource
        } = this.props;
        return datasource || dataSource;
    }

    renderCarousel = () => {
        const {prefixCls} = this.props;
        const slide = this.state.slide;
        return (
            <div className={`${prefixCls}-items`} ref={this.saveRoot}>
                {
                    this.getDataSource().map((item, index) => {
                        return (
                            <div
                                className={classnames(
                                    `${prefixCls}-item`,
                                    {
                                        [`${prefixCls}-item-hide`]: index + 1 !== slide
                                    }
                                )}
                                key={index}
                            >
                                <div className={`${prefixCls}-container-item-content`}>
                                    <div className={`${prefixCls}-container-item-media`}>
                                        {
                                            item.type === 'image'
                                                ? <img src={`${item.src}`} alt={`${item.alt}`} />
                                                : null
                                        }
                                        {
                                            item.type === 'video'
                                                ? <video src={`${item.src}`} controls />
                                                : null
                                        }
                                        {
                                            item.type === 'custom'
                                                ? item.src
                                                : null
                                        }
                                    </div>
                                    {
                                        item.desc
                                            ? (
                                                <div
                                                    className={`${prefixCls}-carousel-desc`}
                                                >
                                                    <span>{item.desc}</span>
                                                </div>
                                            )
                                            : null
                                    }
                                </div>
                            </div>
                        );
                    })
                }
            </div>
        );
    }

    onChangePrevPage = () => {
        const {mode, onChange} = this.props;
        const slide = this.state.slide;
        let current;
        if (mode === 'auto') {
            // 翻到第一页的时候，跳转到最后一页
            current = slide === 1 ? this.getDataSource().length : slide - 1;
        }
        else {
            current = slide - 1;
        }
        this.setState({
            slide: current
        });
        onChange && onChange(current - 1);
    }

    renderPrevPage = () => {
        const {mode, prefixCls} = this.props;
        const currentButtonProps: ButtonProps = {
            className: classnames(`${prefixCls}-page-change`, `${prefixCls}-page-prev`, {
                [`${prefixCls}-page-change-hide`]:
                    mode === 'normal'
                    && this.state.slide === 1
            }),
            type: 'translucent',
            icon: <IconChevronLeft className={`${prefixCls}-icon-left`} />,
            size: 'medium',
            onClick: this.onChangePrevPage
        };
        return <Button {...currentButtonProps} />;
    }

    onChangeNextPage = () => {
        const {mode, onChange} = this.props;
        const slide = this.state.slide;
        let current;
        if (mode === 'auto') {
            // 翻到第一页的时候，跳转到最后一页
            current = slide === this.getDataSource().length ? 1 : slide + 1;
        }
        else {
            current = slide + 1;
        }
        this.setState({
            slide: current
        });
        onChange && onChange(current - 1);
    }

    renderNextPage = () => {
        const {prefixCls, mode} = this.props;
        const currentButtonProps: ButtonProps = {
            className: classnames(`${prefixCls}-page-change`, `${prefixCls}-page-next`, {
                [`${prefixCls}-page-change-hide`]:
                    mode === 'normal'
                    && this.state.slide === this.getDataSource().length
            }),
            type: 'translucent',
            icon: <IconChevronRight className={`${prefixCls}-icon-right`} />,
            size: 'medium',
            onClick: this.onChangeNextPage
        };
        return <Button {...currentButtonProps} />;
    }

    handleMaskClick = e => {
        if (this.props.maskClosable && e.target === e.currentTarget) {
            this.setState({
                open: false
            });
            this.onCancel();
        }
    }

    render() {
        const {open, slide} = this.state;
        const {
            prefixCls,
            className,
            indicator,
            zIndex,
            style
        } = this.props;

        const dataSource = this.getDataSource();

        if (!dataSource.length) {
            return null;
        }
        const wrapperClassName = classnames(
            prefixCls,
            `${prefixCls}-wrapper`,
            className
        );
        return (
            <Dialog
                wrapClassName={wrapperClassName}
                wrapStyle={style}
                visible={open}
                footer={null}
                destroyOnClose
                maskClosable={false}
                onCancel={this.onCancel}
                maskClassName={`${prefixCls}-mask`}
                zIndex={zIndex}
                wrapProps={{onClick: this.handleMaskClick}}
            >
                <div
                    className={
                        classnames(`${prefixCls}-head`, {
                            [`${prefixCls}-head-hide`]: indicator === 'none' || dataSource.length === 1
                        })
                    }
                >
                    <span className={`${prefixCls}-indicator-numbers`}>
                        {slide}
                        <span className={`${prefixCls}-indicator-numbers-separator`} />
                        {dataSource.length}
                    </span>
                </div>
                <div className={classnames(
                    `${prefixCls}-container`, {
                        [`${prefixCls}-indicator-hide`]: indicator === 'none' || dataSource.length === 1
                    })}
                >
                    <div className={`${prefixCls}-content`}>
                        {this.renderPrevPage()}
                        <div className={`${prefixCls}-items-container`}>
                            {this.renderCarousel()}
                        </div>
                        {this.renderNextPage()}
                    </div>
                </div>
            </Dialog>
        );
    }
}

export default Lightbox;
