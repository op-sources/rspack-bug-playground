import React, {MouseEvent, PureComponent} from 'react';
import {Provider, create, Store} from 'mini-store';
import {IconCalendar, IconTimesCircle} from 'dls-icons-react';
import {isArray, isEmpty, isEqual, noop} from 'lodash';
import {
    getDetailDate,
    getTodayDetail,
    transDateFormat,
    validateData,
    formatButtonText
} from '../../core/datePickerTools';
import TitleHeader from './common/titleHeader';
import DayItemRender from './common/dayItemRender';
import MonthAndYearPanel from './common/monthAndYearPanel';
import {classnames} from '../../core/commonTools';
import Input from './common/input';
import Layer, {OverlayProps} from '../overlay';
import Button from '../button';
import {align} from './util';
import {DatePickerProps} from './interface';
import {withConfigConsumer} from '../providerConfig/context';
import RangePicker from './rangePicker';
import MonthPicker from './monthPicker';
import {getValidWeekDates} from './util';

interface DatePickerState {
    currentValue?: string[],
    visible?: boolean,
    errorMessage?: string,
    hoverDate?: string
}

export interface DatePickerStore {
    _value: string | string[],
    showYear: number,
    showMonth: number,
    panelType: 'date' | 'month',
    validateMinDate: string,
    validateMaxDate: string,
    endDatePanelType?: 'date' | 'month',
    endDateShowYear?: number,
    endDateShowMonth?: number
}

const normalizeValue = value => {
    if (isEmpty(value)) {
        return [];
    }
    if (isArray(value)) {
        return value;
    }
    return [value];
};

const updateValue = value => {
    const date = value[0] ? getDetailDate(value[0]) : getTodayDetail();
    return {
        _value: value,
        showYear: date.fullYear,
        showMonth: date.fullMonth
    };
};

@withConfigConsumer('date-picker')
class DatePicker extends PureComponent<DatePickerProps, DatePickerState> {
    static defaultProps = {
        dateFormat: 'YYYY/MM/DD',
        prefixCls: 'one-date-picker',
        disabled: false,
        size: 'medium',
        onVisibleChange: noop,
        onChange: noop,
        onClickButton: noop,
        getPopupContainer: () => document.body,
        onDelete: noop,
        showDeleteIcon: false,
        placeholder: '请选择日期'
    }

    static RangePicker: typeof RangePicker;
    static MonthPicker: typeof MonthPicker;

    constructor(props: DatePickerProps) {
        super(props);
        const {
            defaultValue,
            value,
            visible,
            defaultVisible
        } = props;
        const _value = normalizeValue(defaultValue || value);
        this.state = {
            currentValue: _value,
            visible: defaultVisible || visible || false,
            errorMessage: '',
            hoverDate: ''
        };
        this.store = create<DatePickerStore>({
            ...updateValue(_value),
            // 面板展示 date or month - 选择日期 or 月份
            panelType: 'date',
            validateMinDate: transDateFormat(props.validateMinDate) || validateData().validateMinDate,
            validateMaxDate: transDateFormat(props.validateMaxDate) || validateData().validateMaxDate
        });
    }

    store: Store<DatePickerStore>;

    static getDerivedStateFromProps = (nextProps: DatePickerProps) => {
        const newState: DatePickerState = {};
        if ('value' in nextProps) {
            newState.currentValue = normalizeValue(nextProps.value);
        }
        if ('visible' in nextProps) {
            newState.visible = nextProps.visible;
        }
        return newState;
    };

    onMouseEnter = (value: string) => {
        this.setState({
            hoverDate: value
        });
    };

    onMouseLeave = () => {
        this.setState({
            hoverDate: ''
        });
    };

    componentDidUpdate = (prevProps: DatePickerProps) => {
        let newState = {};
        if ('value' in this.props && !isEqual(this.props.value, prevProps.value)) {
            const _value = normalizeValue(this.props.value);
            // 控制一些组件内部属性
            newState = {
                ...newState,
                ...updateValue(_value),
            };
        }
        if ('validateMinDate' in this.props
            && this.props.validateMinDate !== prevProps.validateMinDate) {
            newState = {
                ...newState,
                validateMinDate:  transDateFormat(this.props.validateMinDate) || validateData().validateMinDate
            };
        }
        if ('validateMaxDate' in this.props
            && this.props.validateMaxDate !== prevProps.validateMaxDate) {
            newState = {
                ...newState,
                validateMaxDate: transDateFormat(this.props.validateMaxDate) || validateData().validateMaxDate
            };
        }
        this.store.setState(newState);
    }

    onSelectDay = (value: string | string[], colsePanel = true) => {
        const {
            onChange,
            validator,
            dateFormat,
            validateMaxDate,
            validateMinDate,
            mode
        } = this.props;
        const newState: DatePickerState = {
            hoverDate: ''
        };
        const date = Array.isArray(value) ? value.filter(Boolean)[0] : value;
        const currentValue = mode === 'week'
            ? getValidWeekDates(date, dateFormat, validateMinDate, validateMaxDate)
            : normalizeValue(date);
        if (!('value' in this.props)) {
            // 非受控
            newState.currentValue = currentValue;
        }
        this.store.setState(updateValue(currentValue));
        if (!('visible' in this.props) && colsePanel) {
            // 非受控
            newState.visible = false;
        }
        let validatorError = '';
        validatorError = (validator && typeof validator === 'function')
            ? validator(mode === 'week' ? currentValue : date)
            : '';
        if (!validatorError) {
            onChange(mode === 'week' ? currentValue : date);
            newState.errorMessage = '';
        }
        else {
            newState.errorMessage = validatorError;
        }
        this.setState(newState);
    }

    renderDatePickerBody = () => {
        const {
            prefixCls,
            size
        } = this.props;
        const visible = this.state.visible;
        const datePickerPanelClassName = classnames(`${prefixCls}-panel`, `${prefixCls}-panel-${size}`);
        return (
            <Provider store={this.store}>
                <div className={datePickerPanelClassName}>
                    <Input
                        {...this.props}
                        visible={visible}
                        onChange={this.onSelectDay}
                    />
                    <TitleHeader {...this.props} />
                    <DayItemRender
                        {...this.props}
                        onMouseEnter={this.onMouseEnter}
                        onMouseLeave={this.onMouseLeave}
                        hoverDate={this.state.hoverDate}
                        onChange={this.onSelectDay}
                    />
                    <MonthAndYearPanel {...this.props} />
                </div>
            </Provider>
        );
    }

    onLayerVisibleChange = (visible: boolean) => {
        this.props.onVisibleChange(visible);
        if (!('visible' in this.props)) {
            this.setState({
                visible
            });
        }
    }

    onOpenDatePicker = (e: MouseEvent) => {
        const {
            onClickButton,
            value
        } = this.props;
        let formatValue;
        if ('value' in this.props) {
            formatValue = normalizeValue(value);
        }
        else {
            formatValue = this.state.currentValue;
        }
        // 每次打开的时候，重置一下面板的type，并且保证当前value与state的value保持一致
        this.store.setState({
            panelType: 'date',
            ...updateValue(formatValue),
        });
        this.onLayerVisibleChange(true);
        onClickButton(e);
    };

    onDetete = (e: MouseEvent) => {
        e.stopPropagation();
        e.preventDefault();
        this.props.onDelete();
        if (!('value' in this.props)) {
            this.setState({
                currentValue: []
            });
            this.store.setState({
                _value: []
            });
        }
    }

    render() {
        const {
            prefixCls,
            className,
            disabled,
            getPopupContainer,
            dateFormat,
            popupPlacement,
            size,
            customButtonTitle,
            showDeleteIcon,
            placeholder,
            style,
            value
        } = this.props;

        const {
            currentValue,
            visible,
            errorMessage
        } = this.state;

        let formatValue;
        if ('value' in this.props) {
            formatValue = normalizeValue(value);
        }
        else {
            formatValue = currentValue;
        }
        const buttonText = formatButtonText({
            value: formatValue,
            dateFormat
        });
        const text = customButtonTitle || buttonText || placeholder;
        const datePickerClassNames = classnames(prefixCls, className, {
            [`${prefixCls}-empty`]: !buttonText,
            [`${prefixCls}-disabled`]: disabled,
            [`${prefixCls}-showDeleteIcon`]: showDeleteIcon
        });
        const layerProps: OverlayProps = {
            trigger: disabled ? '' : 'click',
            visible,
            onVisibleChange: this.onLayerVisibleChange,
            overlay: this.renderDatePickerBody(),
            dropdownMatchSelectWidth: false,
            getPopupContainer,
            popupPlacement,
            popupClassName: classnames(`${prefixCls}-overlay`, `${prefixCls}-overlay-${size}`),
            align
        };
        const textClassName = classnames(`${prefixCls}-title-text`, {
            [`${prefixCls}-title-text-empty`]: isEmpty(formatValue)
        });

        return (
            <div className={datePickerClassNames} style={style}>
                <Layer {...layerProps}>
                    <Button
                        className={`${prefixCls}-title`}
                        disabled={disabled}
                        size={size}
                        type="basic"
                        onClick={this.onOpenDatePicker}
                    >
                        <span className={textClassName}>{text}</span>
                        <IconCalendar
                            className={`${prefixCls}-button-icon ${prefixCls}-button-icon-calendar`}
                        />
                        <IconTimesCircle
                            className={`${prefixCls}-button-icon ${prefixCls}-button-icon-close`}
                            onClick={this.onDetete}
                        />
                    </Button>
                </Layer>
                {
                    errorMessage ? (
                        <span className={`${prefixCls}-error-message`}>
                            {errorMessage}
                        </span>
                    ) : null
                }
            </div>
        );
    }
}

export default DatePicker;
