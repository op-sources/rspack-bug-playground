import React, {PureComponent} from 'react';
import {connect} from 'mini-store';
import dayjs from 'dayjs';
import {partial} from 'lodash';
import MonthAndYearPanel from './monthAndYearPanel';
import RangeDayRender from './rangeDayRender';
import {
    getTimeTramp,
    getDetailDate
} from '../../../core/datePickerTools';
import {DatePickerStore} from '../datePicker';
import en from 'dayjs/locale/en';
import {getValidDate} from '../util';
dayjs.locale({
    ...en,
    weekStart: 1,
});

interface RangeRenderProps {
    store: Object,
    prefixCls: string,
    currentDate: string[],
    onChange(value: string[]): void,
    dateFormat: string,
    visible: boolean,
    endDateShowYear: number,
    endDateShowMonth: number,
    showYear: number,
    showMonth: number,
    validateMinDate: string,
    validateMaxDate: string,
    mode: 'week' | 'date'
};

interface RangeRenderState {
    step: number;
    beginDate: string;
    endDate: string;
    hoverDate: string;
    prevProps: RangeRenderProps
};

class RangeRender extends PureComponent<RangeRenderProps, RangeRenderState> {

    static defaultProps = {
        onChange() {}
    }

    constructor(props: RangeRenderProps) {
        super(props);
        const currentDate = props.currentDate;
        this.store = this.props.store;
        this.state = {
            beginDate: currentDate[0] || '',
            endDate: currentDate[1] || '',
            prevProps: props,
            step: 0,
            hoverDate: ''
        };
    }

    store;

    static getDerivedStateFromProps(nextProps: RangeRenderProps, prevState: RangeRenderState) {
        const prevProps = prevState.prevProps;
        let newState = {};
        if (('currentDate' in nextProps && nextProps.currentDate !== prevProps.currentDate)
        || (prevProps.visible !== nextProps.visible)) {
            newState = {
                ...newState,
                beginDate: nextProps.currentDate[0] || '',
                endDate: nextProps.currentDate[1] || '',
                prevProps: nextProps,
                step: 0
            };
        }
        return newState;
    }

    getDate(date, endOfWeek?: boolean) {
        const {
            mode,
            dateFormat,
            validateMinDate,
            validateMaxDate
        } = this.props;
        const maxDateTime = validateMaxDate ? getTimeTramp(validateMaxDate) : validateMaxDate;
        const minDateTime = validateMinDate ? getTimeTramp(validateMinDate) : validateMinDate;
        let validTime;
        if (mode === 'week') {
            if (endOfWeek) {
                const dateTime = getTimeTramp(dayjs(date).endOf('week').startOf('day'));
                validTime = maxDateTime && dateTime > maxDateTime ? maxDateTime : dateTime;
            }
            else {
                const dateTime = getTimeTramp(dayjs(date).startOf('week'));
                validTime = minDateTime && dateTime > minDateTime ? dateTime : minDateTime;
            }
        }
        else {
            validTime = getTimeTramp(date);
        }
        return dayjs(validTime).format(dateFormat);
    }

    onPickerDay = (type: 'prevMultiple' | 'nextMultiple', value: string, readOnly = false) => {
        const {step, beginDate} = this.state;
        const {
            onChange,
            dateFormat,
            showYear,
            showMonth,
            endDateShowYear,
            endDateShowMonth,
            validateMinDate,
            validateMaxDate,
            mode
        } = this.props;
        if (step === 0) {
            // 表示开始选择
            this.setState({
                step: 1,
                endDate: '',
                beginDate: getValidDate(value, dateFormat, validateMinDate, validateMaxDate, mode, false)
            });
            // 如果点击了readOnly部分的话，修改当前面板展示的年月
            if (readOnly) {
                const {fullYear, fullMonth} = getDetailDate(value);
                let newState = {};
                const currentFirstDate = getTimeTramp(`${fullYear}/${fullMonth}/01`);
                if (type === 'prevMultiple' && (
                    currentFirstDate !== getTimeTramp(`${endDateShowYear}/${endDateShowMonth}/01`)
                )) {
                    newState = {
                        showYear: fullYear,
                        showMonth: fullMonth
                    };
                }
                else if (type === 'nextMultiple' && (
                    currentFirstDate !== getTimeTramp(`${showYear}/${showMonth}/01`)
                )) {
                    newState = {
                        endDateShowYear: fullYear,
                        endDateShowMonth: fullMonth
                    };
                }
                this.store.setState(newState);
            }

        }
        else if (step === 1) {
            let currentBeginDate = beginDate;
            let currentEndDate = getValidDate(value, dateFormat, validateMinDate, validateMaxDate, mode, true);
            if (getTimeTramp(currentBeginDate) > getTimeTramp(currentEndDate)) {
                currentBeginDate = getValidDate(value, dateFormat, validateMinDate, validateMaxDate, mode, false);
                currentEndDate = getValidDate(beginDate, dateFormat, validateMinDate, validateMaxDate, mode, true);
            }
            this.setState({
                step: 0,
                endDate: currentEndDate,
                beginDate: currentBeginDate,
                hoverDate: ''
            });
            onChange(
                [
                    dayjs(new Date(currentBeginDate)).format(dateFormat),
                    dayjs(new Date(currentEndDate)).format(dateFormat)
                ]
            );
        }
    }

    onMouseEnter = (value: string) => {
        this.setState({
            hoverDate: value
        });
    }

    onMouseLeave = () => {
        this.setState({
            hoverDate: ''
        });
    }

    render() {
        const containerClassName = `${this.props.prefixCls}-range`;
        const {beginDate, endDate, hoverDate} = this.state;
        const currentDate = [beginDate, endDate];
        return (
            <div className={containerClassName}>
                <div className={`${containerClassName}-item`}>
                    <MonthAndYearPanel {...this.props} type="prevMultiple" />
                    <RangeDayRender
                        {...this.props}
                        type="prevMultiple"
                        currentDate={currentDate}
                        onChange={partial(this.onPickerDay, 'prevMultiple')}
                        onMouseEnter={this.onMouseEnter}
                        onMouseLeave={this.onMouseLeave}
                        hoverDate={hoverDate}
                    />
                </div>
                <div className={`${containerClassName}-item`}>
                    <MonthAndYearPanel {...this.props} type="nextMultiple" />
                    <RangeDayRender
                        {...this.props}
                        type="nextMultiple"
                        currentDate={currentDate}
                        onChange={partial(this.onPickerDay, 'nextMultiple')}
                        onMouseEnter={this.onMouseEnter}
                        onMouseLeave={this.onMouseLeave}
                        hoverDate={hoverDate}
                    />
                </div>
            </div>
        );
    }
}

export default connect((state: DatePickerStore) => {
    return {
        currentDate: state._value,
        endDateShowYear: state.endDateShowYear,
        endDateShowMonth: state.endDateShowMonth,
        showYear: state.showYear,
        showMonth: state.showMonth
    };
})(RangeRender);
