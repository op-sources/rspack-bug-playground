import React, {MouseEvent, PureComponent} from 'react';
import {IconCalendar, IconTimesCircle} from 'dls-icons-react';
import {noop} from 'lodash';
import {Provider, create, Store} from 'mini-store';
import {
    transDateFormat,
    validateData,
    formatButtonText,
    formatInitialRangeDateInfo
} from '../../core/datePickerTools';
import TitleHeader from './common/titleHeader';
import RangeRender from './common/rangeRender';
import Input from './common/input';
import Layer, {OverlayProps} from '../overlay';
import Button from '../button';
import {classnames} from '../../core/commonTools';
import ShortCut from './common/shortCut';
import {align} from './util';
import {RangePickerProps} from './interface';
import {withConfigConsumer} from '../providerConfig/context';
import {DatePickerStore} from './datePicker';

interface RangePickerState {
    currentValue?: string[],
    visible?: boolean,
    errorMessage?: string
}

@withConfigConsumer('date-picker')
class RangePicker extends PureComponent<RangePickerProps, RangePickerState> {

    static defaultProps: RangePickerProps = {
        dateFormat: 'YYYY/MM/DD',
        prefixCls: 'one-date-picker',
        className: '',
        disabled: false,
        size: 'medium',
        onVisibleChange: noop,
        onChange: noop,
        onClickButton: noop,
        shortcuts: null,
        getPopupContainer: () => document.body,
        showDeleteIcon: false,
        onDelete: noop,
        placeholder: ['开始日期', '结束日期'],
        mode: 'date'
    }

    store: Store<DatePickerStore>;

    constructor(props: RangePickerProps) {
        super(props);
        const {defaultValue, value, visible, defaultVisible, validateMaxDate} = props;
        const _value = defaultValue || value || [];
        const {
            beginDateYear,
            beginDateMonth,
            endDateYear,
            endDateMonth
        } = formatInitialRangeDateInfo(_value, validateMaxDate);
        this.state = {
            currentValue: _value,
            visible: defaultVisible || visible || false
        };
        this.store = create<DatePickerStore>({
            _value,
            showYear: beginDateYear,
            showMonth: beginDateMonth,
            endDateShowYear: endDateYear,
            endDateShowMonth: endDateMonth,
            // 面板展示 date or month - 选择日期 or 月份
            panelType: 'date',
            endDatePanelType: 'date',
            validateMinDate: transDateFormat(props.validateMinDate) || validateData().validateMinDate,
            validateMaxDate: transDateFormat(props.validateMaxDate) || validateData().validateMaxDate
        });
    }

    static getDerivedStateFromProps = (nextProps: RangePickerProps) => {
        const newState: RangePickerState = {};
        if ('value' in nextProps) {
            newState.currentValue = nextProps.value;
        }
        if ('visible' in nextProps) {
            newState.visible = nextProps.visible;
        }
        return newState;
    }

    componentDidUpdate = (prevProps: RangePickerProps) => {
        let newState = {};
        if ('value' in this.props) {
            const {value, validateMaxDate} = this.props;
            const {
                beginDateYear,
                beginDateMonth,
                endDateYear,
                endDateMonth
            } = formatInitialRangeDateInfo(value, validateMaxDate);
            // 控制一些组件内部属性
            newState = {
                ...newState,
                _value: value || [],
                showYear: beginDateYear,
                showMonth: beginDateMonth,
                endDateShowYear: endDateYear,
                endDateShowMonth: endDateMonth
            };
        }
        if ('validateMinDate' in this.props
            && this.props.validateMinDate !== prevProps.validateMinDate) {
            newState = {
                ...newState,
                validateMinDate: transDateFormat(this.props.validateMinDate) || validateData().validateMinDate
            };
        }
        if ('validateMaxDate' in this.props
            && this.props.validateMaxDate !== prevProps.validateMaxDate) {
            newState = {
                ...newState,
                validateMaxDate: transDateFormat(this.props.validateMaxDate) || validateData().validateMaxDate
            };
        }
        this.store.setState(newState);
    }

    onSelectDay = (value: string[], colsePanel = true) => {
        const {onChange, validateMaxDate, validator} = this.props;
        const newState: RangePickerState = {};
        if (!('value' in this.props)) {
            // 非受控
            newState.currentValue = value;
        }
        const {
            beginDateYear,
            beginDateMonth,
            endDateYear,
            endDateMonth
        } = formatInitialRangeDateInfo(value, validateMaxDate);
        this.store.setState({
            _value: value,
            showYear: beginDateYear,
            showMonth: beginDateMonth,
            endDateShowYear: endDateYear,
            endDateShowMonth: endDateMonth
        });
        if (!('visible' in this.props) && colsePanel) {
            // 非受控
            newState.visible = false;
        }
        let validatorError = '';
        validatorError = (validator && typeof validator === 'function')
            ? validator(value)
            : '';
        if (!validatorError) {
            onChange(value);
            newState.errorMessage = '';
        }
        else {
            newState.errorMessage = validatorError;
        }
        this.setState(newState);
    }

    renderMultipleDatePickerBody = () => {
        const {prefixCls, shortcuts, size} = this.props;
        const visible = this.state.visible;
        const datePickerContainerClassName = classnames(
            `${prefixCls}-panel`,
            `${prefixCls}-multiple`,
            `${prefixCls}-panel-${size}`
        );
        return (
            <Provider store={this.store}>
                <div className={datePickerContainerClassName}>
                    {
                        shortcuts && shortcuts.length ? (
                            <ShortCut {...this.props} onChange={this.onSelectDay} />
                        ) : null
                    }
                    <div>
                        <Input
                            {...this.props}
                            visible={visible}
                            onChange={this.onSelectDay}
                            multiple
                        />
                        <TitleHeader {...this.props} multiple />
                        <RangeRender {...this.props} multiple onChange={this.onSelectDay} visible={visible} />
                    </div>
                </div>
            </Provider>
        );
    }

    onLayerVisibleChange = (visible: boolean) => {
        this.props.onVisibleChange(visible);
        if (!('visible' in this.props)) {
            this.setState({
                visible
            });
        }
    }

    onOpenDatePicker = (e: MouseEvent) => {
        const {onClickButton, validateMaxDate} = this.props;
        let formatValue;
        if ('value' in this.props) {
            formatValue = this.props.value || [];
        }
        else {
            formatValue = this.state.currentValue;
        }
        const {
            beginDateYear,
            beginDateMonth,
            endDateYear,
            endDateMonth
        } = formatInitialRangeDateInfo(formatValue, validateMaxDate);
        // 每次打开的时候，重置一下面板的type，并且保证当前value与state的value保持一致
        this.store.setState({
            panelType: 'date',
            endDatePanelType: 'date',
            _value: formatValue,
            showYear: beginDateYear,
            showMonth: beginDateMonth,
            endDateShowYear: endDateYear,
            endDateShowMonth: endDateMonth
        });
        this.onLayerVisibleChange(true);
        onClickButton(e);
    };

    onDetete = (e: MouseEvent) => {
        e.stopPropagation();
        e.preventDefault();
        this.props.onDelete();
        if (!('value' in this.props)) {
            this.setState({
                currentValue: []
            });
            this.store.setState({
                _value: []
            });
        }
    }

    render() {
        const {
            prefixCls,
            className,
            disabled,
            getPopupContainer,
            dateFormat,
            shortcuts,
            popupPlacement,
            size,
            customButtonTitle,
            showDeleteIcon,
            placeholder,
            style
        } = this.props;
        const {currentValue, visible, errorMessage} = this.state;
        let formatValue;
        if ('value' in this.props) {
            formatValue = this.props.value;
        }
        else {
            formatValue = currentValue;
        }
        const buttonText = formatButtonText({
            value: formatValue,
            dateFormat
        });
        const text = customButtonTitle || buttonText || (
            <span className={`${prefixCls}-range-default-text`}>
                <span>{placeholder[0]}</span>
                <span className={`${prefixCls}-range-default-text-connector`}>~</span>
                <span>{placeholder[1]}</span>
            </span>
        );
        const datePickerClassNames = classnames(prefixCls, className, {
            [`${prefixCls}-empty`]: !buttonText,
            [`${prefixCls}-disabled`]: disabled,
            [`${prefixCls}-showDeleteIcon`]: showDeleteIcon
        });
        const layerProps: OverlayProps = {
            trigger: disabled ? '' : 'click',
            visible,
            onVisibleChange: this.onLayerVisibleChange,
            overlay: this.renderMultipleDatePickerBody(),
            dropdownMatchSelectWidth: false,
            getPopupContainer,
            popupClassName: classnames(
                `${prefixCls}-overlay`,
                `${prefixCls}-overlay-${size}`,
                {
                    [`${prefixCls}-overlay-has-shortcuts`]: shortcuts && shortcuts.length
                }
            ),
            popupPlacement,
            align
        };
        const textClassName = classnames(`${prefixCls}-title-text`, {
            [`${prefixCls}-title-text-empty`]: !buttonText
        });
        return (
            <div className={datePickerClassNames} style={style}>
                <Layer {...layerProps}>
                    <Button
                        className={`${prefixCls}-title`}
                        disabled={disabled}
                        size={size}
                        onClick={this.onOpenDatePicker}
                        type="basic"
                    >
                        <span className={textClassName}>{text}</span>
                        <IconCalendar
                            className={`${prefixCls}-button-icon ${prefixCls}-button-icon-calendar`}
                        />
                        <IconTimesCircle
                            className={`${prefixCls}-button-icon ${prefixCls}-button-icon-close`}
                            onClick={this.onDetete}
                        />
                    </Button>
                </Layer>
                {
                    errorMessage ? (
                        <span className={`${prefixCls}-error-message`}>
                            {errorMessage}
                        </span>
                    ) : null
                }
            </div>
        );
    }
}

export default RangePicker;
