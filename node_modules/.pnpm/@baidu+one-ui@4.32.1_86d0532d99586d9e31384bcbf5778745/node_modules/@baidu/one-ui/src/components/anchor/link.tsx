import React, {PureComponent, MouseEvent} from 'react';
import {classnames} from '../../core/commonTools';
import {AnchorLinkProps} from './interface';
import {withConfigConsumer} from '../providerConfig/context';
import Context, {AnchorContext} from './context';

@withConfigConsumer('anchor')
class AnchorLink extends PureComponent<AnchorLinkProps> {

    static defaultProps = {
        prefixCls: 'one-anchor',
        href: '#',
        isALabel: false
    };

    anchorContext: AnchorContext;

    componentDidMount() {
        this.anchorContext.registerLink(this.props.href);
    }

    componentDidUpdate({href: prevHref}: AnchorLinkProps) {
        const href = this.props.href;
        if (prevHref !== href) {
            this.anchorContext.unregisterLink(prevHref);
            this.anchorContext.registerLink(href);
        }
    }

    componentWillUnmount() {
        this.anchorContext.unregisterLink(this.props.href);
    }

    handleClick = (e: MouseEvent) => {
        const {scrollTo, onClick} = this.anchorContext;
        const {href, title} = this.props;
        if (onClick) {
            onClick(e, {title, href});
        }
        scrollTo(href);
    };

    renderLink() {
        const {prefixCls, href, title, children, className, isALabel} = this.props;
        const active = this.anchorContext.activeLink === href;
        const wrapperClassName = classnames(className, `${prefixCls}-link`, {
            [`${prefixCls}-link-active`]: active,
            [`${prefixCls}-link-not-active`]: !active,
            [`${prefixCls}-link-has-children`]: !!children,
            [`${prefixCls}-link-without-children`]: !children
        });
        const titleClassName = classnames(`${prefixCls}-link-title`, {
            [`${prefixCls}-link-title-active`]: active,
            [`${prefixCls}-link-title-not-active`]: !active
        });
        const label = isALabel ? (
            <a
                className={titleClassName}
                href={href}
                title={typeof title === 'string' ? title : ''}
                onClick={this.handleClick}
            >
                <span>
                    {title}
                </span>
            </a>
        ) : (
            <span
                className={titleClassName}
                title={typeof title === 'string' ? title : ''}
                onClick={this.handleClick}
            >
                <span>
                    {title}
                </span>
            </span>
        );
        return (
            <div className={wrapperClassName}>
                {label}
                {children}
            </div>
        );
    }

    render() {
        return (
            <Context.Consumer>
                {
                    context => {
                        this.anchorContext = context;
                        return this.renderLink()
                    }
                }
            </Context.Consumer>
        );
    }
}

export default AnchorLink;
