import React, {PureComponent, KeyboardEvent} from 'react';
import {
    IconChevronDown,
    IconChevronRight
} from 'dls-icons-react';
import Content from './common/content';
import {classnames} from '../../core/commonTools';
import {CollapsePanelProps} from './interface';
import {withConfigConsumer} from '../providerConfig/context';
import {noop} from 'lodash';

interface CollapsePanelInnerProps extends CollapsePanelProps {
    isActive: boolean;
    disabled: boolean;
    destroyNotActivePanel: boolean;
    accordion: boolean;
    renderDomWhenHide: boolean;
    gutter: number;
    showExpandIcon: boolean;
    onItemClick(panelKey: string): void;
    panelKey: string;
};

@withConfigConsumer('collapse')
class CollapsePanel extends PureComponent<CollapsePanelProps> {
    static defaultProps = {
        isActive: false,
        onItemClick: noop,
        headerClass: '',
        prefixCls: 'one-collapse',
        disabled: false,
        destroyNotActivePanel: false,
        accordion: false,
        renderDomWhenHide: false,
        contentClassName: '',
        bordered: true,
        expandIconPosition: 'left'
    }

    // 点击事件
    onItemClick = () => {
        const {onItemClick, panelKey, disabled} = this.props as CollapsePanelInnerProps;
        if (disabled) {
            return;
        }
        onItemClick(panelKey);
    }

    // 键盘事件
    onKeyPress = (e: KeyboardEvent) => {
        if (e.key === 'Enter' || e.keyCode === 13 || e.which === 13
        || e.key === ' ' || e.which === 32 || e.keyCode === 32) {
            // tab和确认
            this.onItemClick();
        }
    }

    render() {
        const {
            className,
            style,
            prefixCls,
            header,
            headerClass,
            children,
            isActive,
            disabled,
            destroyNotActivePanel,
            accordion,
            renderDomWhenHide,
            contentClassName,
            gutter,
            showExpandIcon
        } = this.props as CollapsePanelInnerProps;
        const headerCls = classnames(`${prefixCls}-item-header`, {
            [headerClass]: headerClass
        });
        const itemCls = classnames(`${prefixCls}-item`, {
            [`${prefixCls}-item-active`]: isActive,
            [`${prefixCls}-item-not-active`]: !isActive,
            [`${prefixCls}-item-disabled`]: disabled
        }, className);

        const iconNode = isActive
            ? <IconChevronDown className={`${prefixCls}-angle-icon`} />
            : <IconChevronRight className={`${prefixCls}-angle-icon`} />;

        let itemStyle = style;
        if (gutter > 0) {
            itemStyle = {
                ...style,
                marginBottom: gutter
            };
        }

        return (
            <div className={itemCls} style={itemStyle}>
                <div
                    className={headerCls}
                    onClick={this.onItemClick}
                    onKeyPress={this.onKeyPress}
                    data-type={accordion ? 'accordion' : 'normal'}
                    tabIndex={disabled ? null : 0}
                >
                    {showExpandIcon && iconNode}
                    <div className={`${prefixCls}-item-title`}>{header || null}</div>
                </div>
                <Content
                    prefixCls={prefixCls}
                    isActive={isActive}
                    destroyNotActivePanel={destroyNotActivePanel}
                    renderDomWhenHide={renderDomWhenHide}
                    contentClassName={contentClassName}
                >
                    {children}
                </Content>
            </div>
        );
    }
}

export default CollapsePanel;
