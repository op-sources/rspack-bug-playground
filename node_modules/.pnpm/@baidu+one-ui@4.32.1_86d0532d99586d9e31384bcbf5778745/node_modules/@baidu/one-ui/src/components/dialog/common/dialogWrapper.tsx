import React, {Component} from 'react';
import Portal from 'rc-util/lib/Portal';
import Dialog, {InnerDialogProps} from './dialog';

class DialogWrap extends Component<InnerDialogProps> {
    static defaultProps = {
        visible: false,
        forceRender: false
    };

    _component = null;

    renderComponent = () => {};

    removeContainer = () => {};

    shouldComponentUpdate({visible, forceRender}: InnerDialogProps) {
        return !!(this.props.visible || visible) || (this.props.forceRender || forceRender);
    }

    saveDialog = node => {
        this._component = node;
    }

    getComponent = (extra = {}) => {
        return (
            <Dialog
                ref={this.saveDialog}
                {...this.props}
                {...extra}
                key="dialog"
            />
        );
    }

    /*
    * Custom container should not be return, because in the Portal component, it will remove the
    * return container element here, if the custom container is the only child of it's component,
    * like issue #10656, It will has a conflict with removeChild method in react-dom.
    * So here should add a child (div element) to custom container.
    * */
    getContainer = () => {
        const container = document.createElement('div');
        if (this.props.getContainer) {
            this.props.getContainer().appendChild(container);
        }
        else {
            document.body.appendChild(container);
        }
        return container;
    }

    render() {
        const {visible, forceRender} = this.props;
        let portal = null;

        if (visible || forceRender || this._component) {
            portal = (
                <Portal getContainer={this.getContainer}>
                    {this.getComponent()}
                </Portal>
            );
        }
        return portal;
    }
}

export default DialogWrap;
