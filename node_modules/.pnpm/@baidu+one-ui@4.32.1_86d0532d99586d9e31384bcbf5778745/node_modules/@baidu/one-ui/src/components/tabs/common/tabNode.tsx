import React, {PureComponent} from 'react';
import {IconTimes} from 'dls-icons-react';
import {classnames} from '../../../core/commonTools';
import Button from '../../button';
import StatusIcon from './statusIcon';
import {TabPaneProps} from '../interface';
import Transition from '../../transition';

type TabNodeProps = {
    index: number,
    total: number,
    activeIndex: number,
    tabRef: (ref) => void
};

export default class TabNode extends PureComponent<TabPaneProps & TabNodeProps> {

    static defaultProps = {
        Icon: null,
        closable: false,
        disabled: false
    };

    state = {
        deleted: false
    };

    handleOnDelete = async e => {
        e.stopPropagation();
        if (this.state.deleted) {
            return;
        }
        const deletable = await this.props.onBeforeDelete();
        if (deletable !== false) {
            this.setState({
                deleted: true
            });
        }
    };

    tab;

    saveRef = tab => {
        this.tab = tab;
        const tabRef = this.props.tabRef;
        if (tabRef) {
            tabRef(tab);
        }
    };

    render() {
        const {
            prefixCls,
            size,
            tab,
            Icon,
            closable,
            disabled,
            onClick,
            onDelete,
            status,
            index,
            total,
            activeIndex,
            className,
        } = this.props;

        const isActive = index === activeIndex;
        const tabClassName = classnames(`${prefixCls}-tab-item`, className, {
            [`${prefixCls}-tab-item-is-active`]: isActive,
            [`${prefixCls}-tab-item-is-inactive`]: !isActive,
            [`${prefixCls}-tab-item-is-active-prev`]: index === activeIndex - 1,
            [`${prefixCls}-tab-item-is-active-next`]: index === activeIndex + 1,
            [`${prefixCls}-tab-item-is-active-first`]: isActive && index === 0,
            [`${prefixCls}-tab-item-is-active-last`]: isActive && index === total - 1
        });

        const tabTitleClassName = classnames(`${prefixCls}-title`, {
            [`${prefixCls}-title-is-active`]: isActive,
            [`${prefixCls}-title-disabled`]: disabled,
            [`${prefixCls}-title-has-icon`]: Icon,
            [`${prefixCls}-title-closable`]: closable
        }, [`${prefixCls}-title-${size}`]);

        const deleted = this.state.deleted;

        return (
            <Transition
                className={tabClassName}
                name="tab-remove"
                onExited={onDelete}
                in={!deleted}
                appear={false}
                timeout={200}
                unmountOnExit
            >
                <span ref={ref => this.saveRef(ref)} style={{width: deleted && this.tab ? this.tab.offsetWidth : 'auto'}}>
                    <span onClick={onClick} className={tabTitleClassName}>
                        {Icon && <span className={`${prefixCls}-title-icon-container`}>{Icon}</span>}
                        <span className={`${prefixCls}-title-inline-text`}>
                            {tab}
                        </span>
                        <StatusIcon status={status} prefixCls={prefixCls} />
                        {closable ? (
                            <Button
                                type="text-aux"
                                size={size}
                                className={`${prefixCls}-close-icon`}
                                onClick={this.handleOnDelete}
                            >
                                <IconTimes />
                            </Button>
                        ) : null}
                    </span>
                </span>
            </Transition>
        );
    }
}
