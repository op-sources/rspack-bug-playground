import React, {PureComponent} from 'react';
import Button from '../button';
import DialogWrapper from './common/dialogWrapper';
import {classnames} from '../../core/commonTools';
import {DialogAlertProps, DialogConfirmProps, DialogDestroyable, DialogProps} from './interface';
import {ToastProps} from '../toast/interface';

const widthSizeMap = {
    small: 400,
    medium: 600,
    large: 800
};

interface DialogState {
    visible: boolean;
};

class Dialog extends PureComponent<DialogProps, DialogState> {

    static defaultProps = {
        prefixCls: 'one-dialog',
        size: 'medium',
        confirmLoading: false,
        visible: false,
        okType: 'primary',
        centered: true,
        destroyOnClose: false,
        mask: true,
        maskClosable: false,
        buttonPosition: 'left',
        footer: undefined,
        needCloseIcon: true,
        okProps: {},
        cancelProps: {},
        width: 'medium',
        fullScreen: false,
        visibleControlledWhenClose: false,
        contentClassName: '',
        maskClassName: ''
    }

    static confirm: (props: DialogConfirmProps) => DialogDestroyable;
    static alert: (props: DialogAlertProps) => DialogDestroyable;
    /**
     * @deprecated
     */
    static toast;

    constructor(props) {
        super(props);
        this.state = {
            visible: props.visible
        };
    }

    static getDerivedStateFromProps = (nextProps, prevState) => {
        if ('visible' in nextProps
        && nextProps.visible !== prevState.visible) {
            return {
                visible: nextProps.visible
            };
        }
        return null;
    }

    getWidthBySize = () => {
        const width = this.props.width;
        if (widthSizeMap[width]) {
            return widthSizeMap[width];
        }
        return width;
    }

    handleCancel = e => {
        const {onCancel, visibleControlledWhenClose} = this.props;
        if (!visibleControlledWhenClose) {
            this.setState({
                visible: false
            });
        }
        if (onCancel) {
            onCancel(e);
        }
    }

    handleOk = e => {
        const onOk = this.props.onOk;
        if (onOk) {
            onOk(e);
        }
    }

    renderFooter = () => {
        const {
            okText,
            okType,
            cancelText,
            confirmLoading,
            okProps,
            cancelProps,
            okOrder,
            cancelOrder,
            size,
            buttonPosition
        } = this.props;
        const buttonSize = this.props.buttonSize || size;
        const okStyle = okOrder ? {...(okProps.style || {}), order: okOrder} : {...(okProps.style || {})};
        const cancelStyle = cancelOrder
            ? {...(cancelProps.style || {}), order: cancelOrder}
            : {...(cancelProps.style || {})};
        const confirmButton = (
            <Button
                key="confirm"
                type={okType}
                size={buttonSize}
                loading={confirmLoading}
                onClick={this.handleOk}
                {...okProps}
                style={okStyle}
            >
                {okText || '确定'}
            </Button>
        );
        const cancelButton = (
            <Button
                key="cancel"
                size={buttonSize}
                type="normal"
                onClick={this.handleCancel}
                {...cancelProps}
                style={cancelStyle}
            >
                {cancelText || '取消'}
            </Button>
        );
        const defaultFooter = buttonPosition === 'right' ? [
            cancelButton, confirmButton
        ] : [
            confirmButton, cancelButton
        ];
        return defaultFooter;
    }

    render() {
        const {
            footer,
            wrapClassName,
            centered,
            className,
            prefixCls,
            buttonPosition,
            destroyOnClose,
            size,
            fullScreen,
            okOrder,
            cancelOrder,
            ...restProps
        } = this.props;
        const visible = this.state.visible;
        const defaultFooter = this.renderFooter();
        if (!visible && destroyOnClose) {
            // 关闭的时候销毁节点
            return null;
        }
        const wrapClass = classnames(
            `${prefixCls}-${buttonPosition}`,
            `${prefixCls}-${size}`,
            {
                [`${prefixCls}-centered`]: !!centered,
                [`${prefixCls}-full-screen`]: fullScreen,
                [`${prefixCls}-order-reverse`]: okOrder && cancelOrder && cancelOrder < okOrder,
                [`${prefixCls}-order-normal`]: okOrder && cancelOrder && cancelOrder > okOrder
            },
            wrapClassName,
            className
        );
        return (
            <DialogWrapper
                {...restProps}
                prefixCls={prefixCls}
                wrapClassName={wrapClass}
                width={this.getWidthBySize()}
                footer={footer === undefined ? defaultFooter : footer}
                visible={visible}
                onClose={this.handleCancel}
            />
        );
    }
}

export default Dialog;
