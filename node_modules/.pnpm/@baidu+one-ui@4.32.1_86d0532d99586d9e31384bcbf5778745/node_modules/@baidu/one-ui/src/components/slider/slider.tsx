import React, {PureComponent} from 'react';
import PropTypes from 'prop-types';
import RcSlider from 'rc-slider/lib/Slider';
import RcRange from 'rc-slider/lib/Range';
import RcHandle from 'rc-slider/lib/Handle';
import Tooltip from '../tooltip';
import {classnames} from '../../core/commonTools';
import {withConfigConsumer} from '../providerConfig/context';
import {SliderProps} from './interface';

interface SliderState {
    visibles: {
        [key: string]: boolean
    }
}

@withConfigConsumer('slider')
class Slider extends PureComponent<SliderProps, SliderState> {
    static defaultProps = {
        prefixCls: 'one-slider',
        defaultValue: 0,
        disabled: false,
        readOnly: false,
        dots: false,
        included: true,
        max: 100,
        min: 0,
        range: false,
        step: 1,
        onChange: () => {},
        onAfterChange: () => {},
        tipFormatter: value => value.toString(),
        tooltipPlacement: 'top',
        getTooltipPopupContainer: () => document.body,
        size: 'medium'
    }

    constructor(props) {
        super(props);
        this.state = {
            visibles: {}
        };
    }

    tooltipRef;
    rcSlider;

    toggleTooltipVisible = (index, visible) => {
        if (this.props.disabled) {
            return;
        }
        this.setState(({visibles}) => ({
            visibles: {
                ...visibles,
                [index]: visible
            }
        }));
    };

    getTooltipRef = ref => {
        this.tooltipRef = ref;
    }
    onChange = props => {
        this.props.onChange(props);
        if (this.tooltipRef
            && this.tooltipRef.trigger
            && this.tooltipRef.trigger.forcePopupAlign
            && typeof this.tooltipRef.trigger.forcePopupAlign === 'function'
        ) {
            this.tooltipRef.trigger.forcePopupAlign();
        }
    }

    handleWithTooltip(
        {value, dragging, index, ...restProps}
    ) {
        const {tipFormatter, tooltipVisible, tooltipPlacement, getTooltipPopupContainer} = this.props;
        const {visibles} = this.state;
        const isTipFormatter = tipFormatter ? visibles[index] || dragging : false;
        const visible = tooltipVisible || (tooltipVisible === undefined && isTipFormatter);
        return (
            <Tooltip
                title={tipFormatter ? tipFormatter(value) : ''}
                visible={visible}
                placement={tooltipPlacement}
                transitionName="zoom-down"
                key={index}
                getPopupContainer={getTooltipPopupContainer}
                type="dark"
                toolTipRef={this.getTooltipRef}
            >
                <RcHandle
                    {...restProps}
                    value={value}
                    onMouseEnter={() => this.toggleTooltipVisible(index, true)}
                    onMouseLeave={() => this.toggleTooltipVisible(index, false)}
                    onChange={this.onChange}
                />
            </Tooltip>
        );
    }

    focus() {
        this.rcSlider.focus();
    }

    blur() {
        this.rcSlider.blur();
    }

    saveSlider = node => {
        this.rcSlider = node;
    };

    render() {
        const {
            prefixCls: customizePrefixCls,
            size,
            tooltipPrefixCls: customizeTooltipPrefixCls,
            range,
            readOnly,
            disabled,
            className,
            ...restProps
        } = this.props;
        const classNames = classnames(
            className,
            `${customizePrefixCls}-${size}`,
            {
                [`${customizePrefixCls}-readOnly`]: readOnly
            }
        );
        if (range) {
            return (
                <RcRange
                    {...restProps}
                    ref={this.saveSlider}
                    handle={info => this.handleWithTooltip(info)}
                    prefixCls={customizePrefixCls}
                    className={classNames}
                    tooltipPrefixCls={customizeTooltipPrefixCls}
                    disabled={disabled || readOnly}
                    onChange={this.onChange}
                />
            );
        }
        return (
            <RcSlider
                {...restProps}
                ref={this.saveSlider}
                handle={info => this.handleWithTooltip(info)}
                prefixCls={customizePrefixCls}
                className={classNames}
                tooltipPrefixCls={customizeTooltipPrefixCls}
                disabled={disabled || readOnly}
                onChange={this.onChange}
            />
        );
    }
}

export default Slider;
