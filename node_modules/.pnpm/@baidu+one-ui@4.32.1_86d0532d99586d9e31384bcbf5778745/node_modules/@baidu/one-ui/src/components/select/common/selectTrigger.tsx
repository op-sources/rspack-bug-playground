import Trigger from 'rc-trigger';
import React, {CSSProperties, FocusEventHandler, PureComponent, ReactNode, UIEventHandler} from 'react';
import {MouseEventHandler} from 'react';
import {classnames} from '../../../core/commonTools';
import {isSingleMode, saveRef} from '../../../core/selectTools';
import DropdownMenu from './dropdownMenu';

Trigger.displayName = 'Trigger';

const BUILT_IN_PLACEMENTS = {
    bottomLeft: {
        points: ['tl', 'bl'],
        offset: [0, 4],
        overflow: {
            adjustX: 0,
            adjustY: 1
        }
    },
    topLeft: {
        points: ['bl', 'tl'],
        offset: [0, -4],
        overflow: {
            adjustX: 0,
            adjustY: 1
        }
    }
};

interface SelectTriggerState {
    dropdownWidth: number;
};

interface SelectTriggerProps {
    onPopupFocus: FocusEventHandler<HTMLDivElement>;
    onPopupScroll: UIEventHandler<HTMLDivElement>;
    onMouseEnter: MouseEventHandler<HTMLDivElement>;
    onMouseLeave: MouseEventHandler<HTMLDivElement>;
    combobox: boolean;
    action: Array<string>;
    dropdownMatchSelectWidth: boolean;
    dropdownAlign: object;
    visible: boolean;
    disabled: boolean;
    showSearch: boolean;
    dropdownClassName: string;
    multiple: boolean;
    inputValue: string;
    options: any;
    prefixCls: string;
    popupClassName?: string;
    children: any;
    showAction: Array<string>;
    menuItemSelectedIcon: ReactNode | (() => ReactNode);
    dropdownStyle: CSSProperties;
    getPopupContainer(triggerNode: HTMLElement): HTMLElement;
    onDropdownVisibleChange(visible: boolean);
    transitionName: string;
    animation: string;
    onMenuSelect(selectedInfo);
    onMenuDeselect(selectedInfo);
    value: Array<string | number>;
    backfillValue: string;
    firstActiveValue: string;
    defaultActiveFirstOption: boolean;
    dropdownMenuStyle: CSSProperties;
    footer: ReactNode | (() => ReactNode);
};

export default class SelectTrigger extends PureComponent<SelectTriggerProps, SelectTriggerState> {

    static defaultProps = {
        dropdownAlign: {
            ignoreShake: true
        }
    };

    constructor(props) {
        super(props);

        this.saveDropdownMenuRef = saveRef(this, 'dropdownMenuRef');
        this.saveTriggerRef = saveRef(this, 'triggerRef');

        this.state = {
            dropdownWidth: null
        };
    }

    saveDropdownMenuRef;
    dropdownMenuRef;
    saveTriggerRef;
    triggerRef;
    root;

    componentDidMount() {
        this.setDropdownWidth();
    }

    componentDidUpdate() {
        this.setDropdownWidth();
    }

    setDropdownWidth = () => {
        const width = this.root.offsetWidth;
        if (width !== this.state.dropdownWidth) {
            this.setState({dropdownWidth: width});
        }
    }

    getInnerMenu = () => {
        return this.dropdownMenuRef && this.dropdownMenuRef.menuRef;
    };

    getInnerManualRef = () => {
        return this.dropdownMenuRef && this.dropdownMenuRef.manualRef;
    };

    getPopupDOMNode = () => {
        return this.triggerRef.getPopupDomNode();
    };

    getDropdownElement = newProps => {
        const props = this.props;
        return (
            <DropdownMenu
                ref={this.saveDropdownMenuRef}
                {...newProps}
                prefixCls={this.getDropdownPrefixCls()}
                onMenuSelect={props.onMenuSelect}
                onMenuDeselect={props.onMenuDeselect}
                onPopupScroll={props.onPopupScroll}
                value={props.value}
                backfillValue={props.backfillValue}
                firstActiveValue={props.firstActiveValue}
                defaultActiveFirstOption={props.defaultActiveFirstOption}
                dropdownMenuStyle={props.dropdownMenuStyle}
                menuItemSelectedIcon={props.menuItemSelectedIcon}
            />
        );
    };

    getDropdownTransitionName = () => {
        const props = this.props;
        let transitionName = props.transitionName;
        if (!transitionName && props.animation) {
            transitionName = `${this.getDropdownPrefixCls()}-${props.animation}`;
        }
        return transitionName;
    };

    getDropdownPrefixCls = () => {
        return `${this.props.prefixCls}-dropdown`;
    };

    saveRoot = (node) => {
        this.root = node;
        if (this.props.children && this.props.children.ref) {
            this.props.children.ref(node);
        }
    };

    render() {
        const {onPopupFocus, ...props} = this.props;
        const {
            multiple,
            visible,
            inputValue,
            dropdownAlign,
            disabled,
            showSearch,
            dropdownClassName,
            dropdownStyle,
            dropdownMatchSelectWidth,
            transitionName,
            footer
        } = props;
        const dropdownPrefixCls = this.getDropdownPrefixCls();
        const popupClassName = {
            [dropdownClassName]: !!dropdownClassName,
            [`${dropdownPrefixCls}--${multiple ? 'multiple' : 'single'}`]: 1
        };
        const popupElement = this.getDropdownElement({
            menuItems: props.options,
            onPopupFocus,
            multiple,
            inputValue,
            visible,
            footer
        });
        let hideAction;
        if (disabled) {
            hideAction = [];
        }
        else if (isSingleMode(props) && !showSearch) {
            hideAction = ['click'];
        }
        else {
            hideAction = ['blur'];
        }
        const popupStyle = {...dropdownStyle};
        const widthProp = dropdownMatchSelectWidth ? 'width' : 'minWidth';
        if (this.state.dropdownWidth) {
            popupStyle[widthProp] = `${this.state.dropdownWidth}px`;
        }
        return (
            <Trigger
                {...props}
                showAction={disabled ? [] : this.props.showAction}
                hideAction={hideAction}
                ref={this.saveTriggerRef}
                popupPlacement="bottomLeft"
                builtinPlacements={BUILT_IN_PLACEMENTS}
                prefixCls={dropdownPrefixCls}
                popupTransitionName={transitionName}
                onPopupVisibleChange={props.onDropdownVisibleChange}
                popup={popupElement}
                popupAlign={dropdownAlign}
                popupVisible={visible}
                getPopupContainer={props.getPopupContainer}
                popupClassName={classnames(popupClassName)}
                popupStyle={popupStyle}
            >
                {React.cloneElement(props.children, {ref: this.saveRoot})}
            </Trigger>
        );
    }
}
