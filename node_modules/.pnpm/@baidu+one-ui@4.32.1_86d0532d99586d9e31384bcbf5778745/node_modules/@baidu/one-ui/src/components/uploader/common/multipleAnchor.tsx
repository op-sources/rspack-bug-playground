/**
 * @file 多路径的anchor
 * @author huangshiming@baidu.com
 * @date 2020-10-31
 */
import React, {PureComponent} from 'react';
import {partial} from 'lodash';
import {classnames} from '../../../core/commonTools';
import Dropdown from '../../dropdown';
import Menu from '../../menu';
import {UploadEntryActionItem, UploaderMultipleAnchorProps} from '../interface';
import MediaIcon from './mediaIcon';

interface MultipleAnchorState {
    visible: boolean;
    expand: boolean;
};

export default class MultipleAnchor extends PureComponent<UploaderMultipleAnchorProps, MultipleAnchorState> {
    state = {
        visible: false,
        expand: false
    }

    onPickerClick = (item: UploadEntryActionItem) => {
        if (item.disabled) {
            return;
        }
        const isDefaultUpload = item.isDefaultUpload;
        if (isDefaultUpload) {
            this.props.onClick();
        }
        else if (typeof item.onClick === 'function') {
            item.onClick();
        }
    }

    onVisibleChange = (visible: boolean) => {
        this.setState({
            visible
        });
    }

    handleMenuClick = (e: UploadEntryActionItem) => {
        const onClick = e.onClick;
        if (onClick) {
            onClick();
        }
        setTimeout(() => {
            this.setState({
                visible: false
            });
        }, 1000);
    }

    renderItem = (item: UploadEntryActionItem) => {
        const {children, icon, label, key, disabled} = item;
        const {prefixCls, size} = this.props;
        const target = (
            <span
                key={key}
                className={classnames(`${prefixCls}-entries-item`, {
                    [`${prefixCls}-entries-item-disabled`]: disabled
                })}
                onClick={partial(this.onPickerClick, item)}
            >
                <span className={`${prefixCls}-entries-item-icon`}>
                    {icon}
                </span>
                <span className={`${prefixCls}-entries-item-label`}>
                    {label}
                </span>
            </span>
        );
        return children && children.length ? (
            <Dropdown
                key={key}
                transparent={false}
                overlay={(
                    <Menu size={size}>
                        {children.map((child, index) =>
                            (
                                <Menu.Item key={String(index)} onClick={partial(this.handleMenuClick, child)}>
                                    {child.label}
                                </Menu.Item>
                            )
                        )}
                    </Menu>
                )}
                onVisibleChange={this.onVisibleChange}
            >
                {target}
            </Dropdown>
        ) : target;
    }

    render() {
        const {
            loading,
            prefixCls,
            disabled,
            realType,
            entries,
            theme
        } = this.props;
        const buttonClassName = classnames(
            `${prefixCls}-anchor-image-button`,
            {
                [`${prefixCls}-anchor-image-button-loading`]: loading,
                [`${prefixCls}-anchor-image-button-disabled`]: disabled,
                [`${prefixCls}-anchor-image-button-overlay-open`]: this.state.visible
            }
        );
        const buttonProps = {
            className: buttonClassName
        };
        return (
            <div {...buttonProps}>
                <span className={`${prefixCls}-entries-icon`}>
                    <MediaIcon
                        theme={theme}
                        type={realType}
                        className={`${prefixCls}-${realType}-add-icon`}
                    />
                </span>
                <span className={`${prefixCls}-entries-path`}>
                    {
                        entries.map(item => {
                            return this.renderItem(item);
                        })
                    }
                </span>
            </div>
        );
    }
}