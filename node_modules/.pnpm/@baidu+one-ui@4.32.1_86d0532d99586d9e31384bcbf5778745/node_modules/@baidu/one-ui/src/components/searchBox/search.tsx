import React, {CSSProperties, InputHTMLAttributes, PureComponent} from 'react';
import {classnames, getLengthInBytes} from '../../core/commonTools';
import omit from 'omit.js';
import {partial, isEmpty} from 'lodash';
import {IconTimesCircle} from 'dls-icons-react';
import Overlay, {OverlayProps} from '../overlay';
import Menu from '../menu';
import SearchText from '../select/searchText';
import Button, {ButtonProps} from '../button';
import {SearchBoxProps} from './interface';
import {withConfigConsumer} from '../providerConfig/context';
import warning from 'warning';
import {COMPONENT_FOCUS, COMPONENT_MAIN} from '../config';

const MenuItem = Menu.Item;

function fixControlledValue(value) {
    if (value == null) {
        return '';
    }
    return value;
}

function isFunc(value) {
    return typeof value === 'function';
}

interface SearchBoxState {
    searchIconWidth?: number;
    visible?: boolean;
    inputValue?: string;
    value?: string;
    hasFocus?: boolean;
    prevProps?: SearchBoxProps;
}

@withConfigConsumer('search-box')
class SearchBox extends PureComponent<SearchBoxProps, SearchBoxState> {

    static defaultProps = {
        prefixCls: 'one-search-box',
        type: 'text',
        disabled: false,
        defaultQuery: {},
        isShowSearchIcon: true,
        dropdownHeight: 'auto',
        options: [],
        searchIconType: 'icon',
        size: 'medium',
        showSearchIcon: true,
        showCloseIcon: true,
        autoFocus: false,
        customRender: null
    };

    constructor(props) {
        super(props);
        warning(
            !('width' in props),
            'The `width` prop of `SearchBox` is deprecated, use `className` or `style` instead'
        );
        warning(
            !('height' in props),
            'The `height` prop of `SearchBox` is deprecated, use `className` or `style` instead'
        );
        const {
            value,
            isShowDropDown,
            defaultValue
        } = props;
        const initValue = value || defaultValue || ''
        this.state = {
            searchIconWidth: 0,
            hasFocus: false,
            value: initValue,
            inputValue: initValue,
            visible: isShowDropDown || false,
            prevProps: props
        };
    }

    searchIconAnchor;
    composition;
    search;
    ___stopBlur___;
    container;

    componentDidMount() {
        this.setSearchIconWidth();
    }

    componentDidUpdate() {
        this.setSearchIconWidth();
    }

    setSearchIconWidth() {
        const searchIconAnchor = this.searchIconAnchor;
        if (!searchIconAnchor) {
            this.setState({searchIconWidth: 0});
            return;
        }
        const searchIconWidth = searchIconAnchor.offsetWidth;
        if (searchIconWidth === this.state.searchIconWidth) {
            return;
        }
        this.setState({searchIconWidth});
    }

    static getDerivedStateFromProps = (nextProps, prevState) => {
        const {value, isShowDropDown} = nextProps;
        const newState: SearchBoxState = {
            prevProps: nextProps
        };
        if ('value' in nextProps && value !== prevState.prevProps.value) {
            newState.value = value;
            newState.inputValue = value;
        }
        if ('isShowDropDown' in nextProps) {
            newState.visible = isShowDropDown;
        }
        return newState;
    }

    onCompositionStart = () => {
        this.composition = true;
    }

    onCompositionEnd = e => {
        this.composition = false;
        this.onChange(e);
    }

    onChange = e => {
        const value = e.target.value;
        if (this.composition) {
            this.setState({
                inputValue: value
            });
            return;
        }
        if (!('value' in this.props)) {
            this.setState({
                value,
                inputValue: value
            });
        }
        else {
            this.setState({
                inputValue: this.state.value
            });
        }
        const onChange = this.props.onChange;
        if (onChange) {
            onChange(e);
        }
    }

    onVisibleChange = visible => {
        if (!('isShowDropDown' in this.props)) {
            this.setState({visible});
        }
        const onVisibleChange = this.props.onVisibleChange;
        if (onVisibleChange) {
            onVisibleChange(visible);
        }
    }

    focus() {
        this.search.focus();
    }

    blur() {
        this.search.blur();
    }

    onFocus = e => {
        if (this.search) {
            this.search.focus();
        }
        this.onVisibleChange(true);
        this.setState({hasFocus: true});
        const onFocus = this.props.onFocus;
        if (isFunc(onFocus)) {
            onFocus(e);
        }
    }

    onBlur = e => {
        const me = this;
        setTimeout(() => {
            if (me.___stopBlur___) {
                me.___stopBlur___ = false;
                return;
            }
            me.setState({
                hasFocus: false
            });
            me.onVisibleChange(false);
            if (me.search) {
                me.search.blur();
            }
        }, 250);
        const onBlur = this.props.onBlur;
        if (isFunc(onBlur)) {
            onBlur(e);
        }
    }

    getInputClassName = () => {
        const {prefixCls, size, disabled, readOnly} = this.props;
        return classnames(prefixCls, `${prefixCls}-${size}`, {
            [`${prefixCls}-disabled`]: disabled,
            [`${prefixCls}-readOnly`]: readOnly
        });
    }

    getSubMenuItem = option => {
        const menuItemProps = {
            key: option.value,
            ref: partial(this.addAnchor, 'getMenuItemRef'),
            disabled: false
        };
        if (option.disabled) {
            menuItemProps.disabled = true;
        }
        return (
            <MenuItem {...menuItemProps}>
                <SearchText
                    text={option.label}
                    showSearch
                    searchValue={this.state.value}
                />
            </MenuItem>
        );
    }

    handleMenuClick = e => {
        this.___stopBlur___ = false;
        this.onVisibleChange(false);
        const {handleMenuClick, options} = this.props;
        if (handleMenuClick) {
            handleMenuClick(e);
        }
        if (!('value' in this.props)) {
            const selectOption = options.filter(option => option.value === e.key) || [];
            const value = selectOption[0].label || e.key;
            this.setState({
                value,
                inputValue: value
            });
        }
    }

    handleKeyDown = e => {
        const {onPressEnter, onKeyDown, onSearch} = this.props;
        if (e.keyCode === 13) {
            const search = this.search;
            const e = {target: search};
            e.target.value = this.state.value;
            if (onPressEnter) {
                onPressEnter(e);
            }
            else {
                onSearch(e);
            }
            this.onVisibleChange(false);
            if (search) {
                search.blur();
            }
            this.setState({
                hasFocus: false
            });
        }
        if (onKeyDown) {
            onKeyDown(e);
        }
    }

    addAnchor = (key, el) => {
        this[key] = el;
    }

    handleClose = () => {
        const options = this.props.options;
        const search = this.search;
        this.___stopBlur___ = true;
        if (search) {
            search.focus();
        }
        this.setState({
            value: '',
            inputValue: '',
            hasFocus: true
        });
        if (!isEmpty(options)) {
            this.onVisibleChange(true);
        }
        const e = {target: search};
        e.target.value = '';
        const onClearClick = this.props.onClearClick;
        if (isFunc(onClearClick)) {
            onClearClick(e);
        }
    }

    handleSearch = () => {
        const {disabled, defaultQuery, onSearch} = this.props;
        const {container, search} = this;
        if (disabled) {
            return;
        }
        let value = search.value;
        if (!value && defaultQuery && defaultQuery.value) {
            value = defaultQuery.value;
            this.___stopBlur___ = true;
            this.setState({
                value
            });
        }
        this.onVisibleChange(false);
        const e = {target: container};
        e.target.value = value;
        if (isFunc(onSearch)) {
            onSearch(e);
        }
    }

    renderIcon = () => {
        const {
            prefixCls, isShowSearchIcon, searchIconType,
            buttonWidth, height, disabled, size,
            readOnly, showCloseIcon, showSearchIcon, customRender
        } = this.props;
        const shouldShowSearchIcon = isShowSearchIcon && showSearchIcon;
        if (!shouldShowSearchIcon && !showCloseIcon) {
            return null;
        }
        const {value, hasFocus} = this.state;
        const len = getLengthInBytes(value);
        const closeProps = {
            // type: 'IconTimesCircle',
            className: classnames({
                [`${prefixCls}-icon`]: true,
                [`${prefixCls}-icon-close`]: true,
                [`${prefixCls}-icon-close-show`]: len && hasFocus,
                [`${prefixCls}-icon-close-spacing`]: !shouldShowSearchIcon || searchIconType === 'button'
                    || searchIconType === 'custom'
            }),
            onClick: this.handleClose
        };
        const searchProps: ButtonProps = {
            type: 'link',
            onClick: this.handleSearch,
            size,
            disabled,
            readOnly
        };
        const style: CSSProperties = {};
        if (buttonWidth != null) {
            style.width = buttonWidth;
        }
        if (height != null) {
            style.height = height;
        }
        const buttonProps: ButtonProps = {
            type: 'primary',
            className: `${prefixCls}-icon-search-btn`,
            disabled,
            onClick: this.handleSearch,
            style,
            size,
            readOnly
        };
        return (
            <div ref={partial(this.addAnchor, 'searchIconAnchor')} className={`${prefixCls}-icon-wrap`}>
                {
                    showCloseIcon ? <IconTimesCircle {...closeProps} /> : null
                }
                {
                    shouldShowSearchIcon && (
                        <span>
                            {searchIconType === 'icon'
                                && <Button className={`${prefixCls}-search-icon`} {...searchProps} icon="search" />}
                            {searchIconType === 'button'
                                && <Button {...buttonProps} icon="search" />}
                            {searchIconType === 'custom'
                                && <Button {...buttonProps}>{customRender}</Button>}
                        </span>
                    )
                }
            </div>
        );
    }

    renderInput = () => {
        const {defaultQuery, height} = this.props;
        const {inputValue, searchIconWidth} = this.state;
        const otherProps: InputHTMLAttributes<HTMLInputElement> = omit(this.props, [
            'prefixCls',
            'defaultQuery',
            'onPressEnter',
            'onSearch',
            'onClearClick',
            'handleMenuClick',
            'options',
            'isShowDropDown',
            'isShowSearchIcon',
            'dropdownHeight',
            'dropdownMatchSelectWidth',
            'overlay',
            'searchIconType',
            'buttonWidth',
            'onVisibleChange',
            'showSearchIcon',
            'showCloseIcon',
            'customRender',
            'size',
            'defaultValue'
        ]);

        otherProps.value = fixControlledValue(inputValue);
        const {prefix: prefixQuery, value: valueQuery} = defaultQuery;
        if (prefixQuery && valueQuery) {
            otherProps.placeholder = `${prefixQuery}: ${valueQuery}`;
        }
        otherProps.style = {
            // width: width || defaultInputWidth,
            paddingRight: searchIconWidth + 4
        };
        if (height != null) {
            otherProps.style.height = height;
        }
        otherProps.onFocus = this.onFocus;
        otherProps.onBlur = this.onBlur;
        otherProps.onChange = this.onChange;
        otherProps.onCompositionStart = this.onCompositionStart;
        otherProps.onCompositionEnd = this.onCompositionEnd;
        return (
            <input
                {...otherProps}
                className={classnames(this.getInputClassName())}
                onKeyDown={this.handleKeyDown}
                ref={partial(this.addAnchor, 'search')}
            />
        );
    }

    renderLayer = () => {
        const {
            options,
            dropdownHeight,
            prefixCls,
            size
        } = this.props;

        const menu = (
            <Menu
                style={{height: dropdownHeight}}
                onClick={this.handleMenuClick}
                selectable={false}
                className={`${prefixCls}-layer-menu`}
                size={size === 'xsmall' ? 'small' : size}
            >
                {
                    options.map(option => {
                        return this.getSubMenuItem(option);
                    })
                }
            </Menu>
        );
        return menu;
    }

    render() {
        const {
            prefixCls, width, height, disabled, overlay, searchIconType, size,
            dropdownMatchSelectWidth, className, options, style
        } = this.props;
        const {visible, hasFocus} = this.state;
        const sizeStyle: CSSProperties = {};
        if (width != null) {
            sizeStyle.width = width;
        }
        if (height != null) {
            sizeStyle.height = height;
        }
        const containerProps = {
            ref: partial(this.addAnchor, 'container'),
            style: {
                ...sizeStyle,
                ...style
            },
            className: classnames(
                className,
                {
                    [`${prefixCls}-container`]: true,
                    [`${prefixCls}-container-disabled`]: disabled,
                    [`${prefixCls}-container-focused`]: hasFocus,
                    [COMPONENT_FOCUS]: hasFocus
                },
                `${prefixCls}-container-${searchIconType}`,
                `${prefixCls}-container-${size}`
            )
        };
        const detailProps = {
            className: classnames(`${prefixCls}-detail`, COMPONENT_MAIN, {
                [`${prefixCls}-detail-focus`]: hasFocus,
                [`${prefixCls}-detail-disabled`]: disabled,
            })
        };
        const overlayClassName = classnames(
            {
                [`${prefixCls}-layer`]: true,
                [`${className}-layer`]: className
            }
        );
        const layerProps: OverlayProps = {
            visible: visible && (overlay ? true : !!options.length),
            overlayClassName,
            overlay: overlay != null ? overlay : this.renderLayer()
        };
        if ('dropdownMatchSelectWidth' in this.props) {
            layerProps.dropdownMatchSelectWidth = dropdownMatchSelectWidth;
        }
        return (
            <div {...containerProps}>
                <Overlay {...layerProps}>
                    <div {...detailProps}>
                        {this.renderInput()}
                        {this.renderIcon()}
                    </div>
                </Overlay>
            </div>
        );
    }
}

export default SearchBox;

