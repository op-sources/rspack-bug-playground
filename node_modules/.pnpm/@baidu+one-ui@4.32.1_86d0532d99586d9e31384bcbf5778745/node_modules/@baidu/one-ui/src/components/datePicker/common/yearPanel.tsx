import React, {PureComponent} from 'react';
import {partial} from 'lodash';
import {connect} from 'mini-store';
import PropTypes from 'prop-types';
import {
    getDetailDate
} from '../../../core/datePickerTools';
import {classnames} from '../../../core/commonTools';
import {DatePickerStore} from '../datePicker';

const yearCellPadding = 4;
const yearCellHeight = 28;
const mediumYearCellHeight = 32;

interface YearRenderProps {
    store: Object,
    prefixCls: string,
    showYear: number,
    validateMinDate: string,
    validateMaxDate: string,
    endDateShowYear: number,
    type: string,
    isMonthRender: boolean,
    panelType: string,
    size: string
}

interface YearRenderState {
    endDateShowYear?: number;
    showYear?: number;
}

class YearRender extends PureComponent<YearRenderProps> {

    constructor(props: YearRenderProps) {
        super(props);
        this.store = this.props.store;
    }

    store;
    yearRenderElement: HTMLDivElement;

    componentDidMount = () => {
        this.scrollToCurrentYear();
    }

    componentDidUpdate = () => {
        this.scrollToCurrentYear();
    }

    scrollToCurrentYear = () => {
        const yearRenderElement = this.yearRenderElement;
        if (!yearRenderElement) {
            return;
        }
        const {showYear, endDateShowYear, type, isMonthRender, panelType, size} = this.props;
        const currentYear = type === 'nextMultiple' ? endDateShowYear : showYear;
        const minYear = this.getMaxAndMinYear().minYear;
        let gapYear = currentYear - minYear;
        const yearCellCurrentHeigt = size === 'medium' ? mediumYearCellHeight : yearCellHeight;
        let scrollTop = (yearCellCurrentHeigt + yearCellPadding) * gapYear;
        if (isMonthRender && panelType === 'year') {
            gapYear = Math.ceil(gapYear / 3) - 3;
            scrollTop = (yearCellCurrentHeigt + yearCellPadding * 5) * gapYear;
        }
        yearRenderElement.scrollTop = scrollTop;
    }

    getMaxAndMinYear = () => {
        const {validateMinDate, validateMaxDate, type, endDateShowYear, showYear} = this.props;
        let maxYear = +getDetailDate(validateMaxDate).fullYear;
        let minYear = +getDetailDate(validateMinDate).fullYear;
        if (type === 'prevMultiple') {
            maxYear = endDateShowYear;
        }
        else if (type === 'nextMultiple') {
            minYear = showYear;
        }
        return {
            maxYear,
            minYear
        };
    }

    onClickYear = (currentYear: number) => {
        const type = this.props.type;
        const newState: YearRenderState = {};
        if (type === 'nextMultiple') {
            newState.endDateShowYear = currentYear;
        }
        else {
            newState.showYear = currentYear;
        }
        this.store.setState(newState);
    }

    getBodyElement = (ref: HTMLDivElement) => {
        this.yearRenderElement = ref;
    }

    renderYear = () => {
        const {showYear, prefixCls, endDateShowYear, type, isMonthRender, panelType} = this.props;
        if (isMonthRender && panelType !== 'year') {
            return null;
        }
        const {
            minYear,
            maxYear
        } = this.getMaxAndMinYear();
        const yearContainer = [];
        const currentYear = type === 'nextMultiple' ? endDateShowYear : showYear;
        for (let i = minYear; i <= maxYear; i++) {
            const className = classnames(
                `${prefixCls}-year-container-item`,
                {
                    [`${prefixCls}-year-container-item-selected`]: currentYear === i
                }
            );
            yearContainer.push(
                <div
                    className={className}
                    key={i}
                    onClick={partial(this.onClickYear, i)}
                >
                    <span>
                        {i}
                        {isMonthRender ? 'å¹´' : null}
                    </span>
                </div>
            );
        }
        const yearClassNames = classnames(
            `${prefixCls}-year-container`,
            {
                [`${prefixCls}-year-container-is-month-render`]:
                    isMonthRender && panelType === 'year'
            }
        );
        return (
            <div className={yearClassNames} ref={this.getBodyElement}>
                {yearContainer}
            </div>
        );
    }

    render() {
        return this.renderYear();
    }
}

export default connect((state: DatePickerStore) => {
    return {
        endDateShowYear: state.endDateShowYear,
        showYear: state.showYear,
        validateMinDate: state.validateMinDate,
        validateMaxDate: state.validateMaxDate,
        panelType: state.panelType
    };
})(YearRender);
