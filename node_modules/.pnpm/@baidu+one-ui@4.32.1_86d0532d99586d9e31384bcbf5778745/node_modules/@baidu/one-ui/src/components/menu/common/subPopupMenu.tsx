import React, {createRef, isValidElement} from 'react';
import {connect} from 'mini-store';
import shallowEqual from 'shallowequal';
import {classnames} from '../../../core/commonTools';
import {
    getKeyFromChildrenIndex,
    loopMenuItem
} from './util';
import {MenuItemProps, SubMenuProps} from '../interface';

export interface SubPopupMenuProps extends SubMenuProps {
    level?: number,
    inlineIndent?: number,
    visible?: boolean,
    focusable?: boolean,
    mode?;
    manualRef?(ref): void,
    parentMenu?;
    store?;
    activeKey?;
    onDeselect?;
    onSelect?;
    onClick?(e);
    onOpenChange?;
    onDestroy?;
    defaultActiveFirst?;
    eventKey?;
    multiple?;
    motion?;
    subMenuOpenDelay?;
    subMenuCloseDelay?;
    builtinPlacements?;
    forceSubMenuRender?;
    triggerSubMenuAction?;
    theme?;
    id?;
    role?;
};


function updateActiveKey(
    store,
    menuId,
    activeKey,
) {
    const state = store.getState();
    store.setState({
        activeKey: {
            ...state.activeKey,
            [menuId]: activeKey
        }
    });
}

function getEventKey(eventKey) {
    return eventKey || '0-menu-';
}

export function getActiveKey(
    props,
    originalActiveKey,
) {
    let activeKey = originalActiveKey;
    const {
        children,
        eventKey,
        defaultActiveFirst
    } = props;
    if (activeKey) {
        let found;
        loopMenuItem(children, (child, i) => {
            if (
                child
                    && child.props
                    && !child.props.disabled
                    && activeKey === getKeyFromChildrenIndex(child, eventKey, i)
            ) {
                found = true;
            }
        });
        if (found) {
            return activeKey;
        }
    }
    activeKey = null;
    if (defaultActiveFirst) {
        loopMenuItem(children, (child, i) => {
            if (!activeKey && child && !child.props.disabled) {
                activeKey = getKeyFromChildrenIndex(child, eventKey, i);
            }
        });
        return activeKey;
    }
    return activeKey;
}

export class SubPopupMenu extends React.Component<SubPopupMenuProps> {

    static defaultProps = {
        prefixCls: 'one-menu',
        className: '',
        mode: 'vertical',
        level: 1,
        inlineIndent: 24,
        visible: true,
        focusable: true,
        manualRef: () => {}
    };

    constructor(props) {
        super(props);

        props.store.setState({
            activeKey: {
                ...props.store.getState().activeKey,
                [props.eventKey]: getActiveKey(props, props.activeKey)
            }
        });
    }

    componentDidMount() {
        // invoke customized ref to expose component to mixin
        if (this.props.manualRef) {
            this.props.manualRef(this);
        }
    }

    shouldComponentUpdate(nextProps) {
        return (
            this.props.visible
                || nextProps.visible
                || this.props.className !== nextProps.className
                || !shallowEqual(this.props.style, nextProps.style)
        );
    }

    componentDidUpdate(prevProps) {
        const {store, activeKey: activeKeyProp, eventKey} = this.props;
        const originalActiveKey = 'activeKey' in this.props
            ? activeKeyProp
            : store.getState().activeKey[getEventKey(eventKey)];
        const activeKey = getActiveKey(this.props, originalActiveKey);
        if (activeKey !== originalActiveKey) {
            updateActiveKey(store, getEventKey(eventKey), activeKey);
        }
        else if ('activeKey' in prevProps) {
            // If prev activeKey is not same as current activeKey,
            // we should set it.
            const prevActiveKey = getActiveKey(prevProps, prevProps.activeKey);
            if (activeKey !== prevActiveKey) {
                updateActiveKey(store, getEventKey(eventKey), activeKey);
            }
        }
    }

    onItemHover = e => {
        const {key, hover} = e;
        updateActiveKey(
            this.props.store,
            getEventKey(this.props.eventKey),
            hover ? key : null,
        );
    };

    renderMenuItem = (child, index, subMenuKey) => {
        if (!isValidElement(child)) {
            return child;
        }
        const {
            prefixCls,
            store,
            eventKey,
            mode,
            level,
            inlineIndent,
            parentMenu,
            multiple,
            onClick,
            motion,
            subMenuOpenDelay,
            subMenuCloseDelay,
            forceSubMenuRender,
            onOpenChange,
            onDeselect,
            onSelect,
            builtinPlacements,
            triggerSubMenuAction
        } = this.props;
        const state = store.getState();
        const key = getKeyFromChildrenIndex(child, eventKey, index);
        const childProps: SubMenuProps | MenuItemProps = child.props;
        const active = key === state.activeKey;
        const newChildProps = {
            mode: childProps.mode || mode,
            level,
            inlineIndent: inlineIndent,
            renderMenuItem: this.renderMenuItem,
            prefixCls,
            index,
            parentMenu,
            eventKey: key,
            active: !childProps.disabled && active,
            multiple,
            onClick: e => {
                if (typeof childProps.onClick === 'function') {
                    childProps.onClick(e);
                }
                onClick(e);
            },
            onItemHover: this.onItemHover,
            motion,
            subMenuOpenDelay,
            subMenuCloseDelay,
            forceSubMenuRender,
            onOpenChange,
            onDeselect,
            onSelect,
            builtinPlacements,
            openKeys: state.openKeys,
            selectedKeys: state.selectedKeys,
            triggerSubMenuAction,
            subMenuKey
        };
        return React.cloneElement(child, newChildProps);
    };

    render() {
        const {
            role,
            prefixCls,
            className,
            mode,
            children,
            eventKey
        } = this.props;

        return (
            <ul
                role={role || 'menu'}
                className={
                    classnames(
                        prefixCls,
                        className,
                        `${prefixCls}-${mode}`,
                    )
                }
            >
                {React.Children.map(children, (child, index) =>
                    this.renderMenuItem(child, index, getEventKey(eventKey)),
                )}
            </ul>
        );
    }
}
const connected = connect()(SubPopupMenu);

export default connected;
