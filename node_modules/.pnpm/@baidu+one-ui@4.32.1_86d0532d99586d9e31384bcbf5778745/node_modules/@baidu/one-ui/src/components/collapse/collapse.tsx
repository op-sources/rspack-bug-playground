import React, {PureComponent, Children} from 'react';
import {isFragment} from 'react-is';
import {noop} from 'lodash';
import {classnames} from '../../core/commonTools';
import {CollapseProps} from './interface';
import {withConfigConsumer} from '../providerConfig/context';
import Panel from './panel';

const formatActiveKeyArray = (activeKey: string | string[]) => {
    let currentKey = activeKey;
    if (!Array.isArray(currentKey)) {
        currentKey = currentKey ? [currentKey] : [];
    }
    return currentKey;
};

interface CollapseState {
    activeKey: string[]
}

@withConfigConsumer('collapse')
class Collapse extends PureComponent<CollapseProps, CollapseState> {
    static defaultProps = {
        prefixCls: 'one-collapse',
        size: 'medium',
        onChange: noop,
        type: 'normal',
        showExpandIcon: true,
        expandIconPosition: 'left'
    }

    static Panel: typeof Panel;

    constructor(props: CollapseProps) {
        super(props);
        const {activeKey, defaultActiveKey} = props;
        let currentKey = defaultActiveKey;
        // 处理受控非受控情况
        if ('activeKey' in props) {
            currentKey = activeKey;
        }

        this.state = {
            activeKey: formatActiveKeyArray(currentKey)
        };
    }

    static getDerivedStateFromProps(nextProps: CollapseProps) {
        // 判断受控情况
        if ('activeKey' in nextProps) {
            return {
                activeKey: formatActiveKeyArray(nextProps.activeKey)
            };
        }
        return null;
    }

    onClickItem = (key: string) => {
        // 判断是否是手风琴折叠面板
        let activeKey = this.state.activeKey;
        const isAccordion = this.props.accordion;
        if (isAccordion) {
            // 选择已打开的面板 => 关闭，选择其他 => 打开面板，关闭已选择的，是全局永远只有一个打开面板
            activeKey = activeKey[0] === key ? [] : [key];
        }
        else {
            activeKey = [...activeKey];
            const index = activeKey.indexOf(key);
            const isActive = index > -1;
            if (isActive) {
                activeKey.splice(index, 1);
            }
            else {
                activeKey.push(key);
            }
        }
        if (!('activeKey' in this.props)) {
            this.setState({activeKey});
        }
        this.props.onChange(isAccordion ? activeKey[0] : activeKey);
    }

    renderPanel = () => {
        const activeKey = this.state.activeKey;
        const {children, prefixCls, accordion, destroyNotActivePanel, gutter, showExpandIcon} = this.props;
        const childList = React.isValidElement(children) && isFragment(children) ? children.props.children : children;
        const newChildren = Children.map(childList, (child, index) => {
            if (!child) {
                return null;
            }
            // 如果没有key，就用index索引做key
            const key = child.key || String(index);
            const {disabled} = child.props;
            let isActive = false;
            if (accordion) {
                isActive = activeKey[0] === key;
            }
            else {
                isActive = activeKey.indexOf(key) > -1;
            }
            const props = {
                key,
                panelKey: key,
                prefixCls,
                children: child.props.children,
                onItemClick: this.onClickItem,
                isActive,
                destroyNotActivePanel,
                accordion,
                disabled: this.props.disabled || disabled,
                id: key,
                gutter: childList.length > index + 1 ? gutter : undefined, // 最后一个不传
                showExpandIcon
            };
            return React.cloneElement(child, props);
        });
        if (isFragment(children)) {
            return (
                <React.Fragment>
                    {newChildren}
                </React.Fragment>
            );
        }
        return newChildren;
    }

    /**
      * 归一化边框
      *
      * 不同`type`默认情况如下：
      * normal: Y(不可配)
      * simple: Y(可配)
      * basic: N(可配)
      * strong: N(可配)
      *
      * @param {string} type 类型
      * @param {bool} bordered 边框
      * @return {bool} 是否有边框
     */
    normalizedBordered(type: string, bordered: boolean) {
        if (type === 'normal') {
            return true;
        }
        if (bordered == null) {
            if (type === 'simple') {
                return true;
            }
            return false;
        }
        return bordered;
    }

    /**
      * 归一化是否响应交互
      *
      * 不同`type`默认情况如下：
      * normal: N(不可配)
      * simple: Y(不可配)
      * basic: N(可配)
      * strong: N(可配)
      *
      * @param {string} type 类型
      * @param {bool} dull 边框
      * @return {bool} 是否响应交互
     */
    normalizedDull(type: string, dull: boolean) {
        if (type === 'normal') {
            return false;
        }
        if (type === 'simple') {
            return true;
        }
        if (dull == null) {
            return false;
        }
        return dull;
    }

    render() {
        const {
            prefixCls,
            className,
            style,
            size,
            type,
            bordered,
            dull,
            gutter,
            showExpandIcon,
            expandIconPosition
        } = this.props;
        const collapseClassName = classnames(
            prefixCls,
            className,
            `${prefixCls}-${size}`,
            `${prefixCls}-type-${type}`,
            {
                [`${prefixCls}-border-less`]: !this.normalizedBordered(type, bordered),
                [`${prefixCls}-dull`]: this.normalizedDull(type, dull),
                [`${prefixCls}-with-gutter`]: gutter > 0,
                [`${prefixCls}-expand-icon-${expandIconPosition}`]: showExpandIcon
            }
        );

        return (
            <div className={collapseClassName} style={style}>
                {this.renderPanel()}
            </div>
        );
    }
}

export default Collapse;
