import React, {CSSProperties, useContext} from 'react';
import PropTypes from 'prop-types';
import {connect} from 'mini-store';
import {TableStore} from './table';
import Context from './context';

function ColGroup(props) {
    const {table} = useContext(Context);
    const {allColumnsWidth = []} = props;

    let cols = [];
    let leafColumns;

    leafColumns = table.columnManager.leafColumns();
    cols = cols.concat(
        leafColumns.map(c => {
            const curColumn = allColumnsWidth.filter(column => (c.key || c.dataIndex) === column.key)[0];
            const style: CSSProperties = {};
            if (curColumn && curColumn.width) {
                style.width = curColumn.width;
            }
            if (curColumn && curColumn.minWidth) {
                style.minWidth = curColumn.minWidth;
            }

            if (curColumn && curColumn.maxWidth) {
                style.maxWidth = curColumn.maxWidth;
            }
            return <col key={c.key || c.dataIndex} style={style} />;
        }),
    );

    return <colgroup>{cols}</colgroup>;
}

ColGroup.propTypes = {
    fixed: PropTypes.string
};

export default connect((state: TableStore) => {
    return {
        allColumnsWidth: state.allColumnsWidth
    };
})(ColGroup);