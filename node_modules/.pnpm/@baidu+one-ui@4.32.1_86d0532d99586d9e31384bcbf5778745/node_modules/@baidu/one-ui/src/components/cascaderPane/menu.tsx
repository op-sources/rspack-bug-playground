/**
 * @file 菜单
 */

import React, {PureComponent} from 'react';
import Column from './column';
import {last} from 'lodash';
import {CascaderPaneProps} from './interface';

type MenuProps = {
    activeValue: CascaderPaneProps['value'],
    onHover,
    onCheck,
    width,
    columnWidth,
    columns,
    forwardRef,
    onSelect: (key: string, keyPath: string, index: number) => void,
    loadingMap: Record<string, boolean>,
} & Omit<CascaderPaneProps, 'onSelect'>;

export default class Menu extends PureComponent<MenuProps> {

    prefix(name) {
        return `${this.props.prefixCls}-${name}`;
    }

    render() {
        const {
            prefixCls,
            size,
            showCheckbox,
            style,
            CustomItemRender,
            firstColumnGroup,
            expandIcon,
            loadingIcon,
            value,
            onSelect,
            expandTrigger,
            columnHeader,
            columnFooter,
            activeValue,
            onHover,
            onCheck,
            width,
            columnWidth,
            columns,
            forwardRef,
            renderOption,
            loadingMap
        } = this.props;
        const menuStyle = {
            ...style
        };
        if (width) {
            menuStyle.width = width;
        }
        return (
            <div className={this.prefix('menus')} style={menuStyle} ref={forwardRef}>
                {this.renderHeader()}
                <div className={this.prefix('menus-container')}>
                    {
                        columns.map((options, index) => {
                            const lastOne = columns.length - 1 === index;
                            return (
                                <Column
                                    prefixCls={prefixCls}
                                    key={index}
                                    size={size}
                                    index={index}
                                    width={lastOne ? undefined : columnWidth}
                                    options={options}
                                    value={last(value)}
                                    valuePath={value}
                                    activeValuePath={activeValue}
                                    expandIcon={expandIcon}
                                    loadingIcon={loadingIcon}
                                    loadingMap={loadingMap}
                                    onSelect={onSelect}
                                    onHover={onHover}
                                    onCheck={onCheck}
                                    showCheckbox={showCheckbox}
                                    expandTrigger={expandTrigger}
                                    firstColumnGroup={index === 0 && firstColumnGroup}
                                    CustomItemRender={index === 0 && CustomItemRender}
                                    header={columnHeader}
                                    footer={columnFooter}
                                    renderOption={renderOption}
                                />
                            );
                        })
                    }
                </div>
                {this.renderFooter()}
            </div>
        );
    }

    renderHeader() {
        let header = this.props.header;
        if (typeof header === 'function') {
            header = header();
        }
        if (header) {
            return <div className={this.prefix('header')}>{header}</div>;
        }
        return null;
    }

    renderFooter() {
        let footer = this.props.footer;
        if (typeof footer === 'function') {
            footer = footer();
        }
        if (footer) {
            return <div className={this.prefix('footer')}>{footer}</div>;
        }
        return null;
    }
}