import React, {PureComponent} from 'react';
import {connect} from 'mini-store';
import ExpandIcon from './expandIcon';
import {TableStore} from './table';

interface ExpandableRowProps {
    prefixCls: string,
    rowKey: string | number,
    fixed: 'left' | 'right' | boolean,
    record: object,
    indentSize: number,
    needIndentSpaced: boolean,
    expandRowByClick: boolean,
    expanded: boolean,
    expandIconAsCell: boolean,
    expandIconColumnIndex: number,
    childrenColumnName: string,
    expandedRowRender(record, index, indent, expanded),
    onExpandedChange(expanded: boolean, record: object, event, rowKey: string | number, destory?: boolean),
    onRowClick(record, index, event),
    children(props),
    indent: number,
    index: number
};

class ExpandableRow extends PureComponent<ExpandableRowProps> {

    componentWillUnmount() {
        this.handleDestroy();
    }

    expandIconAsCell;
    expandIconColumnIndex;
    expandable;

    hasExpandIcon = columnIndex => {
        const expandRowByClick = this.props.expandRowByClick;
        return (
            !this.expandIconAsCell && !expandRowByClick && columnIndex === this.expandIconColumnIndex
        );
    };

    handleExpandChange = (record, event) => {
        const {onExpandedChange, expanded, rowKey} = this.props;
        if (this.expandable) {
            onExpandedChange(!expanded, record, event, rowKey);
        }
    };

    handleDestroy() {
        const {onExpandedChange, rowKey, record} = this.props;
        if (this.expandable) {
            onExpandedChange(false, record, null, rowKey, true);
        }
    }

    handleRowClick = (record, index, event) => {
        const {expandRowByClick, onRowClick} = this.props;
        if (expandRowByClick) {
            this.handleExpandChange(record, event);
        }
        if (onRowClick) {
            onRowClick(record, index, event);
        }
    };

    renderExpandIcon = (newExpanded?: boolean) => {
        const {prefixCls, record, expanded, needIndentSpaced} = this.props;
        const currentExpanded = newExpanded || expanded;

        if (!this.expandable && !needIndentSpaced) {
            return null;
        }

        return (
            <ExpandIcon
                expandable={this.expandable}
                prefixCls={prefixCls}
                onExpand={this.handleExpandChange}
                needIndentSpaced={needIndentSpaced}
                expanded={currentExpanded}
                record={record}
            />
        );
    };

    renderExpandIconCell = cells => {
        if (!this.expandIconAsCell) {
            return;
        }
        const prefixCls = this.props.prefixCls;
        const {className, left} = cells[0].props;
        cells[0] = (
            <td
                className={
                    `${prefixCls}-expand-icon-cell ${prefixCls}-body-cell ${prefixCls}-first-cell ${className}`
                }
                key="one-table-expand-icon-cell"
                style={{left}}
            >
                {this.renderExpandIcon()}
            </td>
        );
    };

    render() {
        const {
            childrenColumnName, expandedRowRender, indentSize,
            record, fixed, expanded, index, indent
        } = this.props;

        this.expandIconAsCell = fixed !== 'right' ? this.props.expandIconAsCell : false;
        this.expandIconColumnIndex = fixed !== 'right' ? this.props.expandIconColumnIndex : -1;
        const childrenData = record[childrenColumnName];
        // eslint-disable-next-line no-bitwise
        this.expandable = !!(childrenData || (expandedRowRender && expandedRowRender(record, index, indent, expanded)));

        const expandableRowProps = {
            indentSize,
            onRowClick: this.handleRowClick,
            hasExpandIcon: this.hasExpandIcon,
            renderExpandIcon: this.renderExpandIcon,
            renderExpandIconCell: this.renderExpandIconCell,
            expanded
        };

        return this.props.children(expandableRowProps);
    }
}

export default connect(({expandedRowKeys}: TableStore, {rowKey}: ExpandableRowProps) => ({
    // eslint-disable-next-line no-bitwise
    expanded: !!~expandedRowKeys.indexOf(rowKey)
}))(ExpandableRow);
