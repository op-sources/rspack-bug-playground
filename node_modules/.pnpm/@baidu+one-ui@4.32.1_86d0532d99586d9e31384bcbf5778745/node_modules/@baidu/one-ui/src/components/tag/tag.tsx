import React, {HTMLAttributes, PureComponent} from 'react';
import omit from 'omit.js';
import {IconTimes} from 'dls-icons-react';
import {classnames} from '../../core/commonTools';
import {TagProps} from './interface';
import {withConfigConsumer} from '../providerConfig/context';
import Group from './group';
import EditableGroup from './editableGroup';

interface TagState {
    checked?: boolean;
    closed?: boolean;
};

@withConfigConsumer('tag')
class Tag extends PureComponent<TagProps, TagState> {

    static defaultProps = {
        prefixCls: 'one-tag',
        closable: false,
        size: 'medium',
        disabled: false,
        checkable: false,
        onChange() {},
        bordered: true,
        noClosed: false
    };

    static Group: typeof Group;
    static EditableGroup: typeof EditableGroup;

    constructor(props) {
        super(props);
        this.state = {
            closed: false,
            checked: props.checked
        };
    }

    static getDerivedStateFromProps = (nextProps, prevState) => {
        if ('checked' in nextProps
        && nextProps.checked !== prevState.checked) {
            return {
                checked: nextProps.checked
            };
        }
        return null;
    }

    close = e => {
        const {onClose, disabled, noClosed} = this.props;
        if (disabled) {
            return;
        }
        if (onClose) {
            onClose(e);
        }
        if (e.defaultPrevented) {
            return;
        }

        if (!noClosed) {
            this.setState({
                closed: true
            });
        }
    }

    isPresetColor = color => {
        if (!color) {
            return false;
        }
        return /^(pink|red|yellow|orange|cyan|green|blue|purple)(-inverse)?$/.test(color);
    }

    onClickTag = () => {
        const checked = !this.state.checked;
        const {onChange, disabled} = this.props;
        if (disabled) {
            return;
        }
        if (!('checked' in this.props)) {
            this.setState({
                checked
            });
        }
        onChange(checked);
    }

    render() {
        const {
            prefixCls,
            closable,
            className,
            children,
            style,
            color,
            size,
            disabled,
            checkable,
            tipTag,
            bordered,
            ...otherProps
        } = this.props;
        const checked = checkable && this.state.checked;
        const closeIcon = closable ? <IconTimes className={`${prefixCls}-close-icon`} onClick={this.close} /> : '';
        const isPresetColor = this.isPresetColor(color);
        const classString = classnames(prefixCls, className, `${prefixCls}-${size}`, {
            [`${prefixCls}-${color}`]: isPresetColor,
            [`${prefixCls}-has-color`]: (color && !isPresetColor),
            [`${prefixCls}-can-closable`]: closable,
            [`${prefixCls}-inverse`]: checked,
            [`${prefixCls}-${color}-inverse`]: checked && isPresetColor,
            [`${prefixCls}-checkable`]: checkable,
            [`${prefixCls}-disabled`]: disabled,
            [`${prefixCls}-${tipTag}`]: !!tipTag,
            [`${prefixCls}-no-bordered`]: !bordered
        });
        const divProps: HTMLAttributes<HTMLDivElement> = omit(otherProps, [
            'checked',
            'onChange',
            'onClose',
            'noClosed'
        ]);
        if (checkable) {
            divProps.onClick = this.onClickTag;
        }
        const tagStyle = {
            backgroundColor: (color && !isPresetColor) ? color : null,
            ...style
        };
        const tag = this.state.closed ? null : (
            <div
                data-show={!this.state.closed}
                {...divProps}
                className={classString}
                style={tagStyle}
            >
                <span className={`${prefixCls}-text`}>{children}</span>
                {closeIcon}
            </div>
        );
        return tag;
    }
}

export default Tag;
