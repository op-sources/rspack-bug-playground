import React, {PureComponent, Children, cloneElement, isValidElement} from 'react';
import {classnames} from '../../core/commonTools';
import {withConfigConsumer} from '../providerConfig/context';
import {RowProps} from './interface';
import Col from './col';

@withConfigConsumer('row')
class GridRow extends PureComponent<RowProps> {

    static defaultProps = {
        gutter: 0
    };

    render() {
        const {type, justify, align, className, gutter, style, children,
            prefixCls = 'one-row', ...others} = this.props;
        const classes = classnames({
            [prefixCls]: !type,
            [`${prefixCls}-${type}`]: type,
            [`${prefixCls}-${type}-${justify}`]: type && justify,
            [`${prefixCls}-${type}-${align}`]: type && align
        }, className);
        const rowStyle = gutter > 0
            ? {
                marginLeft: gutter / -2,
                marginRight: gutter / -2,
                ...style
            }
            : style;
        const cols = Children.map(children, col => {
            if (isValidElement(col) && col.type === Col && gutter > 0) {
                return cloneElement(col, {
                    style: {
                        paddingLeft: gutter / 2,
                        paddingRight: gutter / 2,
                        ...col.props.style
                    }
                });
            }
            return col;
        });
        return <div {...others} className={classes} style={rowStyle}>{cols}</div>;
    }
}

export default GridRow;
