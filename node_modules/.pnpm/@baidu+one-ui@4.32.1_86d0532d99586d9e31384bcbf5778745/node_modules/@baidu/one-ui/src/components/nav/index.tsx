/**
 * @file 导航组件
 * @author huangshiming
 * @date 2020-04-29
 */
import React, {PureComponent} from 'react';
import {omit, partial} from 'lodash';
import ResizeObserver from 'resize-observer-polyfill';
import {IconEllipsis, IconChevronDown, IconChevronRight} from 'dls-icons-react';
import {withConfigConsumer} from '../providerConfig/context';
import {classnames} from '../../core/commonTools';
import InnerOverlay from '../overlay';
import Ink from './ink';
import {NavProps} from './interface';
import warning from 'warning';

interface NavState {
    value?: string,
    hoverIndex?: number;
    lastShowIndex?: number;
};

@withConfigConsumer('nav')
class Nav extends PureComponent<NavProps, NavState> {
    static defaultProps = {
        className: '',
        dataSource: [],
        onChange() {},
        prefixCls: 'one-nav'
    }

    resizeObserver = null;

    mutationObserver = null;

    itemTextRefMap = {};

    constructor(props) {
        super(props);
        warning(
            !('datasource' in props),
            'The `datasource` prop of `Nav` is deprecated, use `dataSource` instead'
        );
        const {defaultValue, value} = props;
        const dataSource = this.normalizeDataSource();
        const initialValue = value || defaultValue || (dataSource[0] && dataSource[0].key) || '';
        if (!initialValue) {
            // eslint-disable-next-line no-console
            console.error('no value or no defaultValue or no dataSource is invalid');
        }
        this.state = {
            value: initialValue,
            lastShowIndex: undefined
        };
    }

    normalizeDataSource() {
        const {
            dataSource,
            datasource
        } = this.props;
        return datasource || dataSource || [];
    }

    static getDerivedStateFromProps(nextProps, prevState) {
        if (nextProps.value && nextProps.value !== prevState.value) {
            return {value: nextProps.value};
        }
        return null;
    }

    navContainerRef;

    componentDidMount() {
        // resize的时候计算children的width
        this.setWidthWithResize();
        const navContainer = this.navContainerRef;
        if (!navContainer) {
            return;
        }

        this.resizeObserver = new ResizeObserver(entries => {
            entries.forEach(this.setWidthWithResize);
        });

        [].slice
            .call(navContainer.children)
            .concat(navContainer)
            .forEach(el => {
                this.resizeObserver.observe(el);
            });
        if (typeof MutationObserver !== 'undefined') {
            this.mutationObserver = new MutationObserver(() => {
                this.resizeObserver.disconnect();
                [].slice
                    .call(navContainer.children)
                    .concat(navContainer)
                    .forEach(el => {
                        this.resizeObserver.observe(el);
                    });
                this.setWidthWithResize();
            });
            this.mutationObserver.observe(navContainer, {
                attributes: false,
                childList: true,
                subTree: false
            });
        }
    }

    componentWillUnmount() {
        if (this.resizeObserver) {
            this.resizeObserver.disconnect();
        }
        if (this.mutationObserver) {
            this.mutationObserver.disconnect();
        }
    }

    getMenuItemsByDataSet = dateset => {
        const navContainer = this.navContainerRef;
        if (!navContainer) {
            return [];
        }

        return [].slice
            .call(navContainer.children)
            .filter(
                node => {
                    return node.dataset && +node.dataset[dateset] > 0;
                });
    };

    setWidthWithResize = () => {
        const navContainer = this.navContainerRef;
        if (!navContainer) {
            return;
        }

        const childrenNodes = navContainer.children;
        if (!childrenNodes || childrenNodes.length === 0) {
            return;
        }

        const lastOverflowedIndicatorPlaceholder = childrenNodes[
            childrenNodes.length - 1
        ];

        lastOverflowedIndicatorPlaceholder.style.display = 'inline-flex';

        const normalMenus = this.getMenuItemsByDataSet('isItem');
        normalMenus.forEach(node => {
            node.style.display = 'inline-flex';
        });

        let lastShowIndex;
        let totalItemWidth = 0;
        for (let i = 0; i < normalMenus.length; i++) {
            totalItemWidth += normalMenus[i].offsetWidth;
            if (this.navContainerRef.offsetWidth > totalItemWidth + lastOverflowedIndicatorPlaceholder.offsetWidth) {
                lastShowIndex = i;
            }
        }

        if (this.navContainerRef.offsetWidth
            < normalMenus[0].offsetWidth + lastOverflowedIndicatorPlaceholder.offsetWidth
        ) {
            lastShowIndex = -1;
        }

        normalMenus.forEach((node, index) => {
            if (index > lastShowIndex) {
                node.style.display = 'none';
            }
        });
        if (lastShowIndex === normalMenus.length - 1 || lastShowIndex === undefined) {
            lastOverflowedIndicatorPlaceholder.style.display = 'none';
        }
        this.setState({
            lastShowIndex
        });
    }

    // 存储hover的item的ref
    getHoverItemTextRef = (index, itemRef) => {
        this.itemTextRefMap[index] = itemRef;
    }

    // 处理鼠标enter事件
    onMouseEnterItem = (currentHoverIndex, disabled, e) => {
        // disabled为true时，hover没有任何效果
        this.setState({hoverIndex: disabled ? null : currentHoverIndex});
    }

    // 处理鼠标leave事件
    onMouseLeaveItem = () => {
        this.setState({hoverIndex: null});
    }

    // render 每一个menu 子菜单
    renderItem = item => {
        const {
            prefixCls,
            label,
            key,
            disabled,
            index,
            overlay,
            href,
            target
        } = item;
        const {value, lastShowIndex} = this.state;
        const itemIHideen = index > lastShowIndex;
        const itemClassNames = classnames(
            `${prefixCls}-item`,
            {
                [`${prefixCls}-item-disabled`]: disabled,
                [`${prefixCls}-item-selected`]: value === key,
                [`${prefixCls}-item-hidden`]: itemIHideen
            }
        );

        const renderItemNode = (
            <a
                className={itemClassNames}
                data-is-item={1}
                key={key}
                tabIndex={1}
                onClick={() => this.onChange(item)}
                href={href}
                target={target}
                onMouseEnter={partial(this.onMouseEnterItem, index, disabled)}
                onMouseLeave={this.onMouseLeaveItem}
            >
                <div className={`${prefixCls}-item-text`} ref={partial(this.getHoverItemTextRef, index)}>{label}</div>
                {
                    overlay && typeof overlay === 'object' ? (
                        <IconChevronDown className={`${prefixCls}-item-arrow-down`} />
                    ) : null
                }
            </a>
        );
        if (overlay && typeof overlay === 'object' && !itemIHideen) {
            const {
                overlayElement,
                placement = 'bottom',
                overlayProps = {},
                className = ''
            } = overlay;
            const overlayClassName = classnames(`${prefixCls}-overlay`, className);
            return (
                <InnerOverlay
                    popupPlacement={placement}
                    dropdownMatchSelectWidth={false}
                    overlayClassName={overlayClassName}
                    {...overlayProps}
                    overlay={overlayElement}
                    key={key}
                    onVisibleChange={
                        visible => {
                            this.onOverlayVisibleChange(visible, overlayProps, key);
                        }
                    }
                >
                    {renderItemNode}
                </InnerOverlay>
            );
        }
        return renderItemNode;
    }

    onChange = item => {
        const {disabled, key} = item;
        if (disabled) {
            return;
        }

        if (!('value' in this.props)) {
            this.setState({
                value: key
            });
        }

        this.props.onChange({
            item,
            target: {
                value: key
            }
        });
    }

    navRef = ref => {
        this.navContainerRef = ref;
    }

    onOverlayVisibleChange = (visible, overlayProps, key) => {
        const onVisibleChange = overlayProps && overlayProps.onVisibleChange;
        if (typeof onVisibleChange === 'function') {
            onVisibleChange({
                visible,
                key
            });
        }
    }

    renderOverFlowedItem = prefixCls => {
        const lastShowIndex = this.state.lastShowIndex;
        const dataSource = this.normalizeDataSource();
        const overflowedMenus = [];
        const value = this.state.value;
        dataSource.forEach((node, index) => {
            if (index > lastShowIndex) {
                overflowedMenus.push(node);
            }
        });
        const overlay = (
            <div className={`${prefixCls}-overflow-menus`}>
                {
                    overflowedMenus.map(menuItem => {
                        const {disabled, key, label, overlay: overlayItem, href, target} = menuItem;
                        const itemClassNames = classnames(
                            `${prefixCls}-item`,
                            {
                                [`${prefixCls}-overflow-item-disabled`]: disabled,
                                [`${prefixCls}-overflow-item-selected`]: value === key
                            }
                        );

                        const renderItemNode = (
                            <a
                                key={key}
                                className={itemClassNames}
                                onClick={() => this.onChange(menuItem)}
                                href={href}
                                target={target}
                            >
                                {label}
                                {
                                    overlayItem && typeof overlayItem === 'object' ? (
                                        <IconChevronRight className={`${prefixCls}-item-arrow-right`} />
                                    ) : null
                                }
                            </a>
                        );
                        if (overlayItem && typeof overlayItem === 'object') {
                            const {
                                overlayElement,
                                hiddenPlacement = 'left',
                                overlayProps = {},
                                className = ''
                            } = overlayItem;
                            const overlayClassName = classnames(`${prefixCls}-overlay`, className);
                            return (
                                <InnerOverlay
                                    popupPlacement={hiddenPlacement}
                                    dropdownMatchSelectWidth={false}
                                    overlayClassName={overlayClassName}
                                    {...overlayProps}
                                    overlay={overlayElement}
                                    key={key}
                                    onVisibleChange={
                                        visible => this.onOverlayVisibleChange(visible, overlayProps, key)
                                    }
                                >
                                    {renderItemNode}
                                </InnerOverlay>
                            );
                        }
                        return renderItemNode;
                    })
                }
            </div>
        );
        return (
            <InnerOverlay
                overlay={overlay}
                overlayClassName={`${prefixCls}-overlay-overflow-menus`}
                dropdownMatchSelectWidth={false}
            >
                <div className={`${prefixCls}-item ${prefixCls}-overflow-indicator`}>
                    <IconEllipsis />
                </div>
            </InnerOverlay>
        );
    }

    render() {
        const {className, prefixCls, ...restProps} = this.props;
        const dataSource = this.normalizeDataSource();

        if (!(dataSource && dataSource.length)) {
            return null;
        }
        const navClassNames = classnames(
            prefixCls,
            className
        );
        const inkProps = {
            prefixCls,
            hoverIndex: this.state.hoverIndex,
            itemTextRefMap: this.itemTextRefMap
        };
        const props = omit(restProps, ['value', 'defaultValue', 'dataSource', 'datasource', 'onChange']);
        return (
            <div className={navClassNames} {...props} ref={this.navRef}>
                {
                    dataSource.map((item, index) => {
                        return this.renderItem({
                            ...item,
                            prefixCls,
                            index
                        });
                    })
                }
                <Ink {...inkProps} />
                {
                    this.renderOverFlowedItem(prefixCls)
                }
            </div>
        );
    }
}

export default Nav;
export * from './interface';
