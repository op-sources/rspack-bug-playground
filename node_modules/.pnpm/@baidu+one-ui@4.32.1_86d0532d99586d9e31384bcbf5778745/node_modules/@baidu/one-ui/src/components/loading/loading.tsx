import React, {PureComponent} from 'react';
import {loading as LoadingSvg} from 'dls-graphics';
import {classnames} from '../../core/commonTools';
import {LoadingProps} from './interface';
import {withConfigConsumer} from '../providerConfig/context';
import LoadingBar from './bar';
import Transition from '../transition';

@withConfigConsumer('loading')
class Loading extends PureComponent<LoadingProps> {

    static defaultProps = {
        loading: true,
        prefixCls: 'one-loading',
        className: '',
        size: 'medium',
        style: {},
        tip: '',
        type: 'normal',
        textDirection: 'horizontal',
        CustomIconNode: null
    }

    static Bar: typeof LoadingBar;

    isNestedPattern() {
        return !!(this.props && this.props.children);
    }

    render() {
        const {
            prefixCls, className, size, loading, style,
            tip, type, children, textDirection, CustomIconNode
        } = this.props;
        const classes = classnames(prefixCls, {
            [`${prefixCls}-${size}`]: size,
            [`${prefixCls}-visible`]: loading,
            [`${prefixCls}-show-text`]: !!tip,
            [`${prefixCls}-type-${type}`]: type
        }, `${prefixCls}-${textDirection}`, className);
        const {attrs, contents} = LoadingSvg;
        const loadingSvgProps = {...attrs};
        delete loadingSvgProps.class;
        const loadingSvgClassName = classnames(attrs.class, `${prefixCls}-loading-icon`);
        const loadingElement = (
            <div className={classes} style={style}>
                <div className={`${prefixCls}-icon-element`}>
                    {CustomIconNode || <svg
                        {...loadingSvgProps}
                        dangerouslySetInnerHTML={{__html: contents}}
                        className={loadingSvgClassName}
                    />}
                    {tip ? <span className={`${prefixCls}-text`}>{tip}</span> : null}
                </div>
            </div>
        );
        if (this.isNestedPattern()) {
            const containerClassName = classnames(`${prefixCls}-container`, {
                [`${prefixCls}-blur`]: loading
            });
            return (
                <div className={classnames(`${prefixCls}-nested-loading`, `${prefixCls}-nested-loading-${type}`)}>
                    <div className={containerClassName}>
                        {children}
                    </div>
                    {loading
                        ? (
                            <Transition
                                name="fade"
                                in
                                appear
                                timeout={500}
                            >
                                {loadingElement}
                            </Transition>
                        )
                        : null
                    }
                </div>
            );
        }
        return loadingElement;
    }
}

export default Loading;
