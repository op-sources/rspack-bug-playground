import React, {forwardRef, useCallback, useContext, useRef} from 'react';
import createFormField from './common/createFormField';
import FormItem from './formItem';
import FormField from './formField';
import FormFieldGroup from './formFieldGroup';
import createBaseForm, {BaseForm} from './common/createBaseForm';
import {LegacyFormContext, FormContext} from './context';
import {classnames} from '../../core/commonTools';
import {FormProps} from './interface';

/**
 * @visibleName Form
 */
export const InnerForm = forwardRef((props: FormProps, ref) => {
    const context = useContext(LegacyFormContext)
    const {
        prefixCls,
        className,
        wrapperCol,
        labelAlign,
        labelPosition,
        labelCol,
        layout,
        colon,
        hideRequiredMark,
        size,
        onFinish,
        onFinishFailed,
        scrollToFirstError,

        // baseForm
        fieldNameProp,
        validateMessages,
        onFieldsChange,
        onValuesChange,
        mapProps,
        mapPropsToFields,
        formPropName,
        density,
        ...restProps
    } = props;
    const formClassName = classnames(
        prefixCls,
        className,
        `${prefixCls}-${layout}`,
        {
            [`${prefixCls}-hide-required-mark`]: hideRequiredMark,
            [`${prefixCls}-label-position-${labelPosition}`]: labelPosition,
            [`${prefixCls}-legacy`]: context.legacy
        },
        `${prefixCls}-${size}`,
        `${prefixCls}-type-${density}`
    );
    const formRef = useRef<BaseForm>();
    const formProps = restProps;
    if (!context.legacy) {
        React.useImperativeHandle(ref, () => formRef.current.getForm());

        formProps.onSubmit = useCallback((event) => {
            event.preventDefault();
            event.stopPropagation();
            formRef.current.validateForm(scrollToFirstError)
                .then(values => onFinish && onFinish(values))
                .catch(({errors, values}) => onFinishFailed && onFinishFailed(errors, values));
            props.onSubmit && props.onSubmit(event);
        }, [onFinish, onFinishFailed, props.onSubmit]);

        formProps.onReset = useCallback((event) => {
            event.preventDefault();
            event.stopPropagation();
            formRef.current.resetFields();
            props.onReset && props.onReset(event);
        }, [props.onReset]);
    }
    const formNode = <form {...formProps} className={formClassName} autoComplete="off" />;

    return (
        <FormContext.Provider
            value={{
                wrapperCol,
                labelAlign,
                labelCol,
                labelPosition,
                // @ts-ignore
                vertical: layout === 'vertical',
                colon,
                size
            }}
        >
            {context.legacy
                ? formNode
                : (
                    <BaseForm
                        ref={formRef}
                        {...{
                            fieldNameProp,
                            validateMessages,
                            onFieldsChange,
                            onValuesChange,
                            mapProps,
                            mapPropsToFields,
                            formPropName
                        }}>{formNode}</BaseForm>
                    )
            }
        </FormContext.Provider>
    );
});

InnerForm.defaultProps = {
    prefixCls: 'one-form',
    layout: 'default',
    className: '',
    size: 'medium',
    labelAlign: 'right',
    labelPosition: 'side',
    density: 'default',
    colon: false
}

type InnerFormType = typeof InnerForm;

interface FormInterface extends InnerFormType {
    Item: typeof FormItem;
    Field: typeof FormField;
    FieldGroup: typeof FormFieldGroup;
    createFormField: typeof createFormField;
    create: typeof createBaseForm;
}

const Form = InnerForm as FormInterface;

Form.Item = FormItem;

Form.Field = FormField;

Form.FieldGroup = FormFieldGroup;

Form.createFormField = createFormField;

Form.create = createBaseForm;

export default Form;
export * from './interface';
