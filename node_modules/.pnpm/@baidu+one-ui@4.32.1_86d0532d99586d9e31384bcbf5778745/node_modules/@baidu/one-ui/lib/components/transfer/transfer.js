"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

exports.__esModule = true;
exports["default"] = void 0;

var _inheritsLoose2 = _interopRequireDefault(require("@babel/runtime/helpers/inheritsLoose"));

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _uniq2 = _interopRequireDefault(require("lodash/uniq"));

var _react = _interopRequireWildcard(require("react"));

var _resizeObserverPolyfill = _interopRequireDefault(require("resize-observer-polyfill"));

var _candidatePane = _interopRequireDefault(require("./common/candidatePane"));

var _selectedPane = _interopRequireDefault(require("./common/selectedPane"));

var _commonTools = require("../../core/commonTools");

var _candidateTitle = _interopRequireDefault(require("./common/candidateTitle"));

var _searchBoxRender = _interopRequireDefault(require("./common/searchBoxRender"));

var _selectedTitle = _interopRequireDefault(require("./common/selectedTitle"));

var _candidateFooterRender = _interopRequireDefault(require("./common/candidateFooterRender"));

var _transferTools = require("../../core/transferTools");

var _treeTools = require("../../core/treeTools");

var _tree = require("../../data/tree");

var _warning = require("../../util/warning");

var _context = require("../providerConfig/context");

var _dec, _class, _class2, _temp;

function normalizeDataSource(dataSource, candidateList) {
  var allDataMap = {};
  (0, _tree.walk)(dataSource, {
    enter: function enter(item) {
      var key = item.key,
          children = item.children;
      var data = (0, _extends2["default"])({}, item);

      if (children) {
        data.children = children.map(function (o) {
          return o.key;
        });
      }

      allDataMap[key] = data;
    }
  });
  return {
    allDataMap: allDataMap,
    candidateList: candidateList || dataSource.map(function (o) {
      return o.key;
    })
  };
}

;
var Transfer = (_dec = (0, _context.withConfigConsumer)('transfer'), _dec(_class = (_temp = _class2 = /*#__PURE__*/function (_PureComponent) {
  (0, _inheritsLoose2["default"])(Transfer, _PureComponent);

  function Transfer(props) {
    var _this;

    _this = _PureComponent.call(this, props) || this;
    _this.resizeObserver = null;
    _this.candidatePaneRef = void 0;
    _this.selectedPaneRef = void 0;
    _this.candidateTreeRef = void 0;
    _this.selectedTreeRef = void 0;

    _this.onCheck = function (checkedKeys, info) {
      var _newCheckedKeys;

      var handleSelect = _this.props.handleSelect;
      var allDataMap = _this.state.allDataMap;
      var expandedSelectedKeys = [].concat(_this.state.expandedSelectedKeys);
      var newCheckedKeys = [];

      var candiateTreeState = _this.candidateTreeRef.getTreeInterState();

      var oriCheckedKeys = candiateTreeState.checkedKeys;
      checkedKeys.forEach(function (key) {
        var disabled = (0, _transferTools.getCheckedKeyIsDisabledByParentRelationMap)(key, _this.state.parentRelationMap, allDataMap) && oriCheckedKeys.indexOf("" + key) === -1;
        var item = allDataMap[key];

        if (item && _this.mergeChecked(item, checkedKeys) && !disabled) {
          newCheckedKeys.push(typeof item.key === 'number' ? +key : key);
        }
      }); // 保留已选的disabled选项。TODO: 由Tree来实现

      (_newCheckedKeys = newCheckedKeys).push.apply(_newCheckedKeys, oriCheckedKeys.reduce(function (keys, key) {
        var _ref = allDataMap[key] || {},
            _ref$key = _ref.key,
            rawKey = _ref$key === void 0 ? key : _ref$key,
            children = _ref.children; // 非叶子节点或者已选


        if (children && children.length > 0 || newCheckedKeys.includes(rawKey)) {
          return keys;
        }

        var disabled = (0, _transferTools.getCheckedKeyIsDisabledByParentRelationMap)(key, _this.state.parentRelationMap, allDataMap);

        if (disabled) {
          keys.push(rawKey);
        }

        return keys;
      }, []));

      var eventKey = info.eventKey,
          keyEntities = info.keyEntities;
      var newExpandSelectKeys = (0, _transferTools.getParentExpandedKeys)([eventKey], keyEntities);
      var remainSelectedList = _this.state.selectedList.filter(function (key) {
        return !keyEntities[key];
      }) || [];
      var event = {
        target: {
          key: eventKey
        }
      };
      newCheckedKeys = [].concat(remainSelectedList, newCheckedKeys);

      var expandedKeys = _this.getExpandedSelectedKeys([].concat(newExpandSelectKeys, expandedSelectedKeys));

      var newState = {};

      if (!('selectedList' in _this.props)) {
        newState.selectedList = newCheckedKeys;
      }

      if (!('expandedSelectedKeys' in _this.props)) {
        newState.expandedSelectedKeys = expandedKeys;
      }

      _this.setState(newState);

      var keys = _this.normalizeCheckedKeys(newCheckedKeys);

      handleSelect(keys, allDataMap, expandedKeys, event);

      _this.handleChange(keys);
    };

    _this.onSelect = function (selectedKeys, info) {
      // 逻辑：
      // 1、如果点击的节点下，存在子节点没选中（去除disabled的），则该节点为选中
      // 2、如果点击的节点下，所有的子节点都选中（去除disabled的），则该节点为取消选中
      var allDataMap = _this.state.allDataMap;
      var allChildrenKeys = (0, _transferTools.getCandidateNumber)(allDataMap, selectedKeys);
      var selectedList = _this.state.selectedList;
      var unSelectedKeys = allChildrenKeys.map(function (key) {
        return "" + key;
      }).filter(function (key) {
        return selectedList.map(function (key) {
          return "" + key;
        }).indexOf(key) === -1;
      });
      var realUnSelectedKeys = (unSelectedKeys || []).filter(function (key) {
        return !(0, _transferTools.getCheckedKeyIsDisabledByParentRelationMap)(key, _this.state.parentRelationMap, allDataMap);
      });

      if (realUnSelectedKeys.length) {
        // 存在没选中的，本次点击为选中节点
        _this.onCheck(info.checkedKeys, info);
      } else {
        // 取消选中
        var realNeedCancelKeys = allChildrenKeys.filter(function (key) {
          return !(0, _transferTools.getCheckedKeyIsDisabledByParentRelationMap)(key, _this.state.parentRelationMap, allDataMap);
        });

        _this.onCheck(info.checkedKeys.filter(function (key) {
          return realNeedCancelKeys.indexOf(key) === -1;
        }), info);
      }
    };

    _this.onCandidateExpand = function (expandedKeys, info) {
      if (!('expandedCandidateKeys' in _this.props)) {
        _this.setState({
          expandedCandidateKeys: expandedKeys
        });
      }

      _this.props.handleCandidateExpand(expandedKeys, info);
    };

    _this.onSelectedExpand = function () {
      var expandedKeys = _this.getExpandedSelectedKeys(arguments.length <= 0 ? undefined : arguments[0]);

      if (!('expandedSelectedKeys' in _this.props)) {
        _this.setState({
          expandedSelectedKeys: expandedKeys
        });
      }

      _this.props.handleSelectedExpand(expandedKeys);
    };

    _this.onSelectedDelete = function (deleteKey) {
      var handleDelete = _this.props.handleDelete;
      var allDataMap = _this.state.allDataMap;
      var selectedList = [].concat(_this.state.selectedList);
      var deleteItem = allDataMap[deleteKey];

      var selectedTreeState = _this.selectedTreeRef.getTreeInterState();

      var keyEntities = selectedTreeState.keyEntities; // disable状态不能删除

      if ((0, _transferTools.getCheckedKeyIsDisabled)(deleteKey, keyEntities, allDataMap)) {
        return;
      }

      var deleteKeys = [deleteKey];

      var mergeChildren = function mergeChildren(key) {
        var _this$state$allDataMa;

        var children = (_this$state$allDataMa = _this.state.allDataMap[key]) == null ? void 0 : _this$state$allDataMa.children;

        if (children && children.length > 0) {
          children.forEach(function (key) {
            if (!selectedList.includes("" + key)) {
              selectedList.push("" + key);
            }

            mergeChildren(key);
          });
        }
      };

      var mergeParent = function mergeParent(key) {
        var parentKey = _this.state.parentRelationMap[key];

        if (parentKey != null) {
          deleteKeys.push(parentKey);
          mergeParent(parentKey);

          if (selectedList.includes(parentKey)) {
            mergeChildren(parentKey);
          }
        }
      };

      mergeParent(deleteKey);

      var conductDown = function conductDown(key) {
        var childItem = allDataMap[key];

        if (childItem && childItem.disabled) {
          return;
        }

        if (deleteKeys.indexOf(key) === -1) {
          deleteKeys.push(key);
        }

        if (childItem && childItem.children) {
          childItem.children.forEach(function (childKey) {
            conductDown(childKey);
          });
        }
      };

      if (deleteItem && deleteItem.children) {
        deleteItem.children.forEach(function (child) {
          conductDown(child);
        });
      }

      var newSelectedList = (selectedList || []).map(function (key) {
        return "" + key;
      }).filter(function (key) {
        return (deleteKeys || []).map(function (key) {
          return "" + key;
        }).indexOf(key) === -1;
      });

      if (!('selectedList' in _this.props)) {
        _this.setState({
          selectedList: newSelectedList
        });
      }

      var keys = _this.normalizeCheckedKeys(newSelectedList);

      handleDelete(keys, allDataMap, deleteKey);

      _this.handleChange(keys);
    };

    _this.handleSearch = function (e) {
      _this.setState({
        hasSearch: true
      });

      _this.props.handleSearch(e);
    };

    _this.onSearchChange = function (e) {
      var newState = {
        hasEdit: true
      };

      if (!('searchValue' in _this.props)) {
        newState.searchValue = e.target.value;
      }

      _this.setState(newState);

      _this.props.onSearchChange(e);
    };

    _this.searchBoxFocus = function (e) {
      _this.setState({
        isShowLevelSelect: true
      });

      _this.props.onSearchBoxFocus(e);
    };

    _this.searchBoxBlur = function (e) {
      var value = e.target.value;

      if (value.length <= 0 && _this.state.hasEdit) {
        setTimeout(function () {
          _this.setState({
            isShowLevelSelect: false,
            hasEdit: false
          });

          _this.props.onSearchBoxBlur(e, _this.state.isShowLevelSelect);
        }, 20);
      }
    };

    _this.onSelectAll = function () {
      var handleSelectAll = _this.props.handleSelectAll;
      var _this$state = _this.state,
          candidateList = _this$state.candidateList,
          allDataMap = _this$state.allDataMap;

      var candiateTreeState = _this.candidateTreeRef.getTreeInterState();

      var keyEntities = candiateTreeState.keyEntities,
          oriCheckedKeys = candiateTreeState.checkedKeys,
          oriHalfCheckedKeys = candiateTreeState.halfCheckedKeys; // candidateList为disabled且未被选中则需要过滤

      var newCandidateList = [];
      candidateList.forEach(function (candidateKey) {
        if (!((0, _transferTools.getCheckedKeyIsDisabledByParentRelationMap)(candidateKey, _this.state.parentRelationMap, allDataMap) && oriCheckedKeys.indexOf("" + candidateKey) === -1)) {
          newCandidateList.push(candidateKey);
        }
      });
      var newCheckedKeysMap = (0, _treeTools.conductCheck)(newCandidateList, true, keyEntities, {
        checkedKeys: oriCheckedKeys,
        halfCheckedKeys: oriHalfCheckedKeys
      });
      var newCheckedKeys = (newCheckedKeysMap && newCheckedKeysMap.checkedKeys || []).map(function (key) {
        return allDataMap[key] && allDataMap[key].key;
      }).filter(function (key) {
        var disabled = (0, _transferTools.getCheckedKeyIsDisabledByParentRelationMap)(key, _this.state.parentRelationMap, allDataMap) && oriCheckedKeys.indexOf("" + key) === -1;
        return !disabled && _this.mergeChecked(allDataMap[key], newCheckedKeysMap.checkedKeys);
      });

      var newExpandSelectKeys = _this.getExpandedSelectedKeys((0, _transferTools.getParentExpandedKeys)(newCheckedKeys, keyEntities));

      var remainSelectedList = _this.state.selectedList.filter(function (key) {
        return !keyEntities[key];
      }) || [];
      newCheckedKeys = [].concat(remainSelectedList, newCheckedKeys);

      if (!('selectedList' in _this.props)) {
        _this.setState({
          selectedList: newCheckedKeys
        });
      }

      if (!('expandedSelectedKeys' in _this.props)) {
        _this.setState({
          expandedSelectedKeys: newExpandSelectKeys
        });
      }

      var keys = _this.normalizeCheckedKeys(newCheckedKeys);

      handleSelectAll(keys, allDataMap, newExpandSelectKeys);

      _this.handleChange(keys);
    };

    _this.getCandidatePaneRef = function (ref) {
      _this.candidatePaneRef = ref;
    };

    _this.getSelectedPaneRef = function (ref) {
      _this.selectedPaneRef = ref;
    };

    _this.getCandidateTreeRef = function (ref) {
      _this.candidateTreeRef = ref;
    };

    _this.getSelectedTreeRef = function (ref) {
      _this.selectedTreeRef = ref;
    };

    _this.onDeleteAll = function () {
      var selectedTreeState = _this.selectedTreeRef.getTreeInterState();

      var handleDeleteAll = _this.props.handleDeleteAll;
      var allDataMap = _this.state.allDataMap;
      var selectedList = [].concat(_this.state.selectedList);
      var newSelected = [];
      var keyEntities = selectedTreeState.keyEntities;
      selectedList.forEach(function (key) {
        var entity = keyEntities[key];

        if (!entity) {
          return;
        }

        var disabled = (0, _transferTools.getCheckedKeyIsDisabled)(key, keyEntities, allDataMap);

        if (disabled) {
          newSelected.push(key);
          return;
        }

        return;
      });

      var newExpandSelectKeys = _this.getExpandedSelectedKeys((0, _transferTools.getParentExpandedKeys)(newSelected, keyEntities));

      if (!('selectedList' in _this.props)) {
        _this.setState({
          selectedList: newSelected
        });
      }

      if (!('expandedSelectedKeys' in _this.props)) {
        _this.setState({
          expandedSelectedKeys: newExpandSelectKeys
        });
      }

      var keys = _this.normalizeCheckedKeys(newSelected);

      handleDeleteAll(keys, allDataMap, newExpandSelectKeys);

      _this.handleChange(keys);
    };

    (0, _warning.propChangeWarning)('Transfer', props, {
      defaultSelectedList: 'defaultValue',
      selectedList: 'value'
    });

    var _selectedList = props.defaultValue || props.defaultSelectedList || [];

    var expandedCandidateKeys = props.defaultExpandedCandidateKeys || [];

    var _expandedSelectedKeys = props.defaultExpandedSelectedKeys || [];

    var searchValue = props.defaultSearchValue || '';
    var candidateHeight = null;
    var selectedHeight = null;
    _this.state = {
      selectedList: _selectedList.map(function (selectedKey) {
        return "" + selectedKey;
      }),
      expandedCandidateKeys: expandedCandidateKeys,
      expandedSelectedKeys: _expandedSelectedKeys,
      prevProps: {},
      searchValue: searchValue,
      candidateHeight: candidateHeight,
      selectedHeight: selectedHeight,
      candidateList: []
    };
    return _this;
  }

  var _proto = Transfer.prototype;

  _proto.componentDidMount = function componentDidMount() {
    var _this2 = this;

    var useVirtualScroll = this.props.useVirtualScroll;

    if (!useVirtualScroll) {
      return;
    }

    var candidatePaneRef = this.candidatePaneRef,
        selectedPaneRef = this.selectedPaneRef;
    this.resizeObserver = new _resizeObserverPolyfill["default"](function (entries) {
      var newState = {};
      entries.forEach(function (_ref2) {
        var target = _ref2.target,
            contentRect = _ref2.contentRect;

        if (target === candidatePaneRef) {
          newState.candidateHeight = contentRect.height;
        } else if (target === selectedPaneRef) {
          newState.selectedHeight = contentRect.height;
        }
      });

      _this2.setState(newState);
    });

    if (candidatePaneRef) {
      this.resizeObserver.observe(candidatePaneRef);
    }

    if (selectedPaneRef) {
      this.resizeObserver.observe(selectedPaneRef);
    }

    this.setState({
      candidateHeight: candidatePaneRef.offsetHeight,
      selectedHeight: selectedPaneRef.offsetHeight
    });
  };

  _proto.componentWillUnmount = function componentWillUnmount() {
    if (this.resizeObserver) {
      this.resizeObserver.disconnect();
      this.resizeObserver = null;
    }
  };

  _proto.getExpandedSelectedKeys = function getExpandedSelectedKeys(keys) {
    var allDataMap = this.state.allDataMap;
    return (0, _uniq2["default"])(keys.map(function (key) {
      return allDataMap[key] ? allDataMap[key].key : key;
    }));
  };

  _proto.mergeChecked = function mergeChecked(item, checkedKeys) {
    var type = this.props.mergeChecked;

    if (type === 'downwards') {
      return !item.children || item.children.length === 0;
    } else if (type === 'upwards') {
      var map = this.state.parentRelationMap;
      var parentKey = map[item.key];

      if (parentKey == null) {
        return true;
      }

      return !checkedKeys.includes(parentKey);
    }

    return true;
  };

  // 先针对输出统一处理类型不一致问题, 后续再全面优化(TODO)
  _proto.normalizeCheckedKeys = function normalizeCheckedKeys(checkedKeys) {
    var data = this.state.allDataMap;
    return checkedKeys.map(function (key) {
      return data[key] ? data[key].key : key;
    });
  };

  _proto.handleChange = function handleChange(keys) {
    var onChange = this.props.onChange;

    if (onChange) {
      onChange(keys);
    }
  };

  _proto.render = function render() {
    var _classnames;

    var _this$props = this.props,
        prefixCls = _this$props.prefixCls,
        className = _this$props.className,
        size = _this$props.size,
        candidateTreeStyle = _this$props.candidateTreeStyle,
        selectedTreeStyle = _this$props.selectedTreeStyle,
        showSearchBox = _this$props.showSearchBox,
        showCandidateFooter = _this$props.showCandidateFooter,
        placeholder = _this$props.placeholder,
        treeName = _this$props.treeName,
        candidateFooterProps = _this$props.candidateFooterProps,
        CustomCandidatePane = _this$props.CustomCandidatePane,
        CustomSelectedPane = _this$props.CustomSelectedPane,
        BeforeCandidatePane = _this$props.BeforeCandidatePane,
        BeforeSelectedPane = _this$props.BeforeSelectedPane,
        levelOptions = _this$props.levelOptions,
        handleLevelChange = _this$props.handleLevelChange,
        isShowLevelSelect = _this$props.isShowLevelSelect,
        levelKey = _this$props.levelKey,
        useVirtualScroll = _this$props.useVirtualScroll,
        style = _this$props.style,
        display = _this$props.display;
    var transferClassName = (0, _commonTools.classnames)("" + prefixCls, prefixCls + "-" + size, "" + className);
    var _this$state2 = this.state,
        selectedList = _this$state2.selectedList,
        expandedCandidateKeys = _this$state2.expandedCandidateKeys,
        candidateHeight = _this$state2.candidateHeight,
        selectedHeight = _this$state2.selectedHeight,
        searchValue = _this$state2.searchValue,
        candidateList = _this$state2.candidateList,
        allDataMap = _this$state2.allDataMap,
        parentRelationMap = _this$state2.parentRelationMap,
        expandedSelectedKeys = _this$state2.expandedSelectedKeys;
    var candidatePaneProps = (0, _extends2["default"])({}, this.props, {
      prefixCls: prefixCls,
      selectedList: useVirtualScroll && !selectedHeight ? [] : selectedList,
      candidateList: useVirtualScroll && !candidateHeight ? [] : candidateList,
      allDataMap: allDataMap,
      expandedCandidateKeys: expandedCandidateKeys,
      size: size,
      onCheck: this.onCheck,
      onSelect: this.onSelect,
      onExpand: this.onCandidateExpand,
      candidateTreeRef: this.getCandidateTreeRef,
      parentRelationMap: parentRelationMap,
      virtualListHeight: candidateHeight,
      searchValue: searchValue
    });
    var selectedPaneProps = (0, _extends2["default"])({}, this.props, {
      allDataMap: allDataMap,
      expandedSelectedKeys: expandedSelectedKeys,
      selectedList: useVirtualScroll && !selectedHeight ? [] : selectedList,
      parentRelationMap: parentRelationMap,
      onExpand: this.onSelectedExpand,
      onDelete: this.onSelectedDelete,
      getSelectedTreeRef: this.getSelectedTreeRef,
      virtualListHeight: selectedHeight
    });
    var searchBoxProps = {
      value: searchValue,
      placeholder: placeholder,
      onSearch: this.handleSearch,
      onChange: this.onSearchChange,
      onFocus: this.searchBoxFocus,
      onBlur: this.searchBoxBlur,
      onClearClick: this.onSearchChange,
      size: size
    };
    var searchRenderProps = (0, _extends2["default"])({
      levelOptions: levelOptions,
      handleLevelChange: handleLevelChange,
      searchBoxProps: searchBoxProps,
      isShowLevelSelect: isShowLevelSelect,
      levelKey: levelKey
    }, this.props.searchRenderProps, {
      SearchBoxRender: this.props.SearchBoxRender
    });
    return /*#__PURE__*/_react["default"].createElement("div", {
      className: transferClassName,
      style: style
    }, display === 'selected' ? null : /*#__PURE__*/_react["default"].createElement("div", {
      className: prefixCls + "-select",
      style: candidateTreeStyle
    }, /*#__PURE__*/_react["default"].createElement(_candidateTitle["default"], (0, _extends2["default"])({}, this.props, {
      allDataMap: allDataMap,
      candidateList: candidateList,
      selectedList: selectedList,
      onSelectAll: this.onSelectAll
    })), /*#__PURE__*/_react["default"].createElement("div", {
      className: prefixCls + "-select-main"
    }, showSearchBox ? /*#__PURE__*/_react["default"].createElement(_searchBoxRender["default"], searchRenderProps) : null, typeof BeforeCandidatePane === 'function' ? /*#__PURE__*/_react["default"].createElement(BeforeCandidatePane, null) : BeforeCandidatePane, /*#__PURE__*/_react["default"].createElement("div", {
      className: (0, _commonTools.classnames)(prefixCls + "-select-pane", prefixCls + "-candidate-pane", (_classnames = {}, _classnames[prefixCls + "-candidate-pane-loading"] = this.props.loading, _classnames)),
      ref: this.getCandidatePaneRef
    }, typeof CustomCandidatePane === 'function' ? /*#__PURE__*/_react["default"].createElement(CustomCandidatePane, candidatePaneProps) : CustomCandidatePane), showCandidateFooter ? /*#__PURE__*/_react["default"].createElement(_candidateFooterRender["default"], (0, _extends2["default"])({
      treeName: treeName,
      candidateFooterProps: candidateFooterProps
    }, {
      size: size,
      prefixCls: prefixCls,
      candidateFooterRender: this.props.CandidateFooterRender
    })) : null)), display === 'candidate' ? null : /*#__PURE__*/_react["default"].createElement("div", {
      className: prefixCls + "-select",
      style: selectedTreeStyle
    }, /*#__PURE__*/_react["default"].createElement(_selectedTitle["default"], (0, _extends2["default"])({}, this.props, {
      selectedList: selectedList,
      allDataMap: allDataMap,
      onDeleteAll: this.onDeleteAll,
      parentRelationMap: parentRelationMap
    })), /*#__PURE__*/_react["default"].createElement("div", {
      className: prefixCls + "-select-main"
    }, BeforeSelectedPane ? typeof BeforeSelectedPane === 'function' ? /*#__PURE__*/_react["default"].createElement(BeforeSelectedPane, null) : BeforeSelectedPane : null, /*#__PURE__*/_react["default"].createElement("div", {
      className: prefixCls + "-select-pane",
      ref: this.getSelectedPaneRef
    }, typeof CustomSelectedPane === 'function' ? /*#__PURE__*/_react["default"].createElement(CustomSelectedPane, selectedPaneProps) : CustomSelectedPane), this.renderSeletedPaneFooter())));
  };

  _proto.renderSeletedPaneFooter = function renderSeletedPaneFooter() {
    var _this$props2 = this.props,
        selectedPaneFooter = _this$props2.selectedPaneFooter,
        prefixCls = _this$props2.prefixCls;

    if (!selectedPaneFooter) {
      return null;
    }

    var footer = typeof selectedPaneFooter === 'function' ? selectedPaneFooter() : selectedPaneFooter;
    return /*#__PURE__*/_react["default"].createElement("div", {
      className: prefixCls + "-select-footer"
    }, footer);
  };

  return Transfer;
}(_react.PureComponent), _class2.defaultProps = {
  allDataMap: {},
  treeName: '',
  placeholder: '请搜索',
  className: '',
  candidateTreeStyle: {},
  selectedTreeStyle: {},
  maxSelectedNum: null,
  showCandidateFooter: false,
  candidateItemProps: {},
  selectedItemProps: {},
  showSelectedNum: true,
  showSearchBox: true,
  candidateFooterProps: {},
  isShowLevel: false,
  showCandidateNum: true,
  handleSelect: function handleSelect() {},
  handleSelectAll: function handleSelectAll() {},
  handleDelete: function handleDelete() {},
  handleDeleteAll: function handleDeleteAll() {},
  handleSearch: function handleSearch() {},
  onSearchChange: function onSearchChange() {},
  handleSelectedExpand: function handleSelectedExpand() {},
  handleCandidateExpand: function handleCandidateExpand() {},
  levelOptions: null,
  handleLevelChange: function handleLevelChange() {},
  isShowLevelSelect: false,
  searchRenderProps: {},
  onSearchBoxFocus: function onSearchBoxFocus() {},
  onSearchBoxBlur: function onSearchBoxBlur() {},
  levelKey: null,
  showSelectAll: true,
  prefixCls: 'one-transfer',
  size: 'medium',
  useVirtualScroll: false,
  CustomCandidatePane: _candidatePane["default"],
  CustomSelectedPane: _selectedPane["default"],
  loading: false,
  loadingText: '加载中...',
  mergeChecked: 'downwards',
  candidateEmpty: '没有待选项',
  selectedEmpty: '请选择'
}, _class2.CommonTitleRender = void 0, _class2.CommonItemRender = void 0, _class2.CommonSearchRender = void 0, _class2.CommonFooterRender = void 0, _class2.getDerivedStateFromProps = function (nextProps, prevState) {
  var prevProps = prevState.prevProps;

  if (nextProps === prevProps) {
    return null;
  }

  var newState = {
    prevProps: nextProps
  };

  if ('selectedList' in nextProps && prevProps.selectedList !== nextProps.selectedList) {
    newState.selectedList = (nextProps.selectedList || []).map(function (key) {
      return String(key);
    });
  } else if ('value' in nextProps && prevProps.value !== nextProps.value) {
    newState.selectedList = (nextProps.value || []).map(function (key) {
      return String(key);
    });
  }

  if ('candidateList' in nextProps && prevProps.candidateList !== nextProps.candidateList) {
    newState.candidateList = nextProps.candidateList || [];
  }

  if ('expandedCandidateKeys' in nextProps && prevProps.expandedCandidateKeys !== nextProps.expandedCandidateKeys) {
    newState.expandedCandidateKeys = nextProps.expandedCandidateKeys;
  }

  if ('expandedSelectedKeys' in nextProps && prevProps.expandedSelectedKeys !== nextProps.expandedSelectedKeys) {
    newState.expandedSelectedKeys = nextProps.expandedSelectedKeys;
  }

  if ('dataSource' in nextProps && prevProps.dataSource !== nextProps.dataSource) {
    var _normalizeDataSource = normalizeDataSource(nextProps.dataSource || [], nextProps.candidateList),
        allDataMap = _normalizeDataSource.allDataMap,
        candidateList = _normalizeDataSource.candidateList;

    newState.allDataMap = allDataMap;
    newState.candidateList = candidateList;
    newState.parentRelationMap = (0, _transferTools.formatParentRelationMap)(allDataMap);
  } else if (JSON.stringify(nextProps.allDataMap) !== JSON.stringify(prevProps.allDataMap)) {
    newState.parentRelationMap = (0, _transferTools.formatParentRelationMap)(nextProps.allDataMap);
    newState.allDataMap = nextProps.allDataMap;
  }

  if ('searchValue' in nextProps && prevProps.searchValue !== nextProps.searchValue) {
    newState.searchValue = nextProps.searchValue;
  }

  return newState;
}, _temp)) || _class);
;
var _default = Transfer;
exports["default"] = _default;
module.exports = exports.default;