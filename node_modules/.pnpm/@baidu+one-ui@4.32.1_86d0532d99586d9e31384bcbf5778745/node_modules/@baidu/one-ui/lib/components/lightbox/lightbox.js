"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

exports.__esModule = true;
exports["default"] = void 0;

var _inheritsLoose2 = _interopRequireDefault(require("@babel/runtime/helpers/inheritsLoose"));

var _react = _interopRequireWildcard(require("react"));

var _warning = _interopRequireDefault(require("warning"));

var _commonTools = require("../../core/commonTools");

var _dlsIconsReact = require("dls-icons-react");

var _dialog = _interopRequireDefault(require("../dialog"));

var _button = _interopRequireDefault(require("../button"));

var _context = require("../providerConfig/context");

var _dec, _class, _class2, _temp;

;
var Lightbox = (_dec = (0, _context.withConfigConsumer)('lightbox'), _dec(_class = (_temp = _class2 = /*#__PURE__*/function (_PureComponent) {
  (0, _inheritsLoose2["default"])(Lightbox, _PureComponent);

  function Lightbox(props) {
    var _this;

    _this = _PureComponent.call(this, props) || this;
    _this.root = void 0;

    _this.saveRoot = function (node) {
      _this.root = node;
    };

    _this.onCancel = function () {
      _this.props.onClose();
    };

    _this.renderCarousel = function () {
      var prefixCls = _this.props.prefixCls;
      var slide = _this.state.slide;
      return /*#__PURE__*/_react["default"].createElement("div", {
        className: prefixCls + "-items",
        ref: _this.saveRoot
      }, _this.getDataSource().map(function (item, index) {
        var _classnames;

        return /*#__PURE__*/_react["default"].createElement("div", {
          className: (0, _commonTools.classnames)(prefixCls + "-item", (_classnames = {}, _classnames[prefixCls + "-item-hide"] = index + 1 !== slide, _classnames)),
          key: index
        }, /*#__PURE__*/_react["default"].createElement("div", {
          className: prefixCls + "-container-item-content"
        }, /*#__PURE__*/_react["default"].createElement("div", {
          className: prefixCls + "-container-item-media"
        }, item.type === 'image' ? /*#__PURE__*/_react["default"].createElement("img", {
          src: "" + item.src,
          alt: "" + item.alt
        }) : null, item.type === 'video' ? /*#__PURE__*/_react["default"].createElement("video", {
          src: "" + item.src,
          controls: true
        }) : null, item.type === 'custom' ? item.src : null), item.desc ? /*#__PURE__*/_react["default"].createElement("div", {
          className: prefixCls + "-carousel-desc"
        }, /*#__PURE__*/_react["default"].createElement("span", null, item.desc)) : null));
      }));
    };

    _this.onChangePrevPage = function () {
      var _this$props = _this.props,
          mode = _this$props.mode,
          onChange = _this$props.onChange;
      var slide = _this.state.slide;
      var current;

      if (mode === 'auto') {
        // 翻到第一页的时候，跳转到最后一页
        current = slide === 1 ? _this.getDataSource().length : slide - 1;
      } else {
        current = slide - 1;
      }

      _this.setState({
        slide: current
      });

      onChange && onChange(current - 1);
    };

    _this.renderPrevPage = function () {
      var _classnames2;

      var _this$props2 = _this.props,
          mode = _this$props2.mode,
          prefixCls = _this$props2.prefixCls;
      var currentButtonProps = {
        className: (0, _commonTools.classnames)(prefixCls + "-page-change", prefixCls + "-page-prev", (_classnames2 = {}, _classnames2[prefixCls + "-page-change-hide"] = mode === 'normal' && _this.state.slide === 1, _classnames2)),
        type: 'translucent',
        icon: /*#__PURE__*/_react["default"].createElement(_dlsIconsReact.IconChevronLeft, {
          className: prefixCls + "-icon-left"
        }),
        size: 'medium',
        onClick: _this.onChangePrevPage
      };
      return /*#__PURE__*/_react["default"].createElement(_button["default"], currentButtonProps);
    };

    _this.onChangeNextPage = function () {
      var _this$props3 = _this.props,
          mode = _this$props3.mode,
          onChange = _this$props3.onChange;
      var slide = _this.state.slide;
      var current;

      if (mode === 'auto') {
        // 翻到第一页的时候，跳转到最后一页
        current = slide === _this.getDataSource().length ? 1 : slide + 1;
      } else {
        current = slide + 1;
      }

      _this.setState({
        slide: current
      });

      onChange && onChange(current - 1);
    };

    _this.renderNextPage = function () {
      var _classnames3;

      var _this$props4 = _this.props,
          prefixCls = _this$props4.prefixCls,
          mode = _this$props4.mode;
      var currentButtonProps = {
        className: (0, _commonTools.classnames)(prefixCls + "-page-change", prefixCls + "-page-next", (_classnames3 = {}, _classnames3[prefixCls + "-page-change-hide"] = mode === 'normal' && _this.state.slide === _this.getDataSource().length, _classnames3)),
        type: 'translucent',
        icon: /*#__PURE__*/_react["default"].createElement(_dlsIconsReact.IconChevronRight, {
          className: prefixCls + "-icon-right"
        }),
        size: 'medium',
        onClick: _this.onChangeNextPage
      };
      return /*#__PURE__*/_react["default"].createElement(_button["default"], currentButtonProps);
    };

    _this.handleMaskClick = function (e) {
      if (_this.props.maskClosable && e.target === e.currentTarget) {
        _this.setState({
          open: false
        });

        _this.onCancel();
      }
    };

    _this.state = {
      open: props.open || false,
      slide: (props.defaultSlideIndex || props.defaultActiveIndex || 0) + 1
    };

    if ('datasource' in props) {
      (0, _warning["default"])(false, '`datasource` is deprecated use `dataSource` instead');
    }

    return _this;
  }

  var _proto = Lightbox.prototype;

  _proto.componentDidUpdate = function componentDidUpdate() {
    if (!this.root) {
      return;
    }

    var prefixCls = this.props.prefixCls;
    var videos = this.root.querySelectorAll("." + prefixCls + "-item-hide video");
    videos.forEach(function (video) {
      video.pause();
    });
  };

  _proto.getDataSource = function getDataSource() {
    var _this$props5 = this.props,
        datasource = _this$props5.datasource,
        dataSource = _this$props5.dataSource;
    return datasource || dataSource;
  };

  _proto.render = function render() {
    var _classnames4, _classnames5;

    var _this$state = this.state,
        open = _this$state.open,
        slide = _this$state.slide;
    var _this$props6 = this.props,
        prefixCls = _this$props6.prefixCls,
        className = _this$props6.className,
        indicator = _this$props6.indicator,
        zIndex = _this$props6.zIndex,
        style = _this$props6.style;
    var dataSource = this.getDataSource();

    if (!dataSource.length) {
      return null;
    }

    var wrapperClassName = (0, _commonTools.classnames)(prefixCls, prefixCls + "-wrapper", className);
    return /*#__PURE__*/_react["default"].createElement(_dialog["default"], {
      wrapClassName: wrapperClassName,
      wrapStyle: style,
      visible: open,
      footer: null,
      destroyOnClose: true,
      maskClosable: false,
      onCancel: this.onCancel,
      maskClassName: prefixCls + "-mask",
      zIndex: zIndex,
      wrapProps: {
        onClick: this.handleMaskClick
      }
    }, /*#__PURE__*/_react["default"].createElement("div", {
      className: (0, _commonTools.classnames)(prefixCls + "-head", (_classnames4 = {}, _classnames4[prefixCls + "-head-hide"] = indicator === 'none' || dataSource.length === 1, _classnames4))
    }, /*#__PURE__*/_react["default"].createElement("span", {
      className: prefixCls + "-indicator-numbers"
    }, slide, /*#__PURE__*/_react["default"].createElement("span", {
      className: prefixCls + "-indicator-numbers-separator"
    }), dataSource.length)), /*#__PURE__*/_react["default"].createElement("div", {
      className: (0, _commonTools.classnames)(prefixCls + "-container", (_classnames5 = {}, _classnames5[prefixCls + "-indicator-hide"] = indicator === 'none' || dataSource.length === 1, _classnames5))
    }, /*#__PURE__*/_react["default"].createElement("div", {
      className: prefixCls + "-content"
    }, this.renderPrevPage(), /*#__PURE__*/_react["default"].createElement("div", {
      className: prefixCls + "-items-container"
    }, this.renderCarousel()), this.renderNextPage())));
  };

  return Lightbox;
}(_react.PureComponent), _class2.defaultProps = {
  prefixCls: 'one-lightbox',
  className: '',
  indicator: 'number',
  dataSource: [],
  onClose: function onClose() {},
  onChange: function onChange() {},
  mode: 'normal',
  defaultCurrent: 0,
  maskClosable: false
}, _class2.getDerivedStateFromProps = function (nextProps, prevState) {
  var state = {
    open: prevState.open,
    slide: prevState.slide
  };

  if ('open' in nextProps && nextProps.open !== prevState.open) {
    state.open = nextProps.open;
  } // 后续废弃


  if ('slide' in nextProps && nextProps.slide !== prevState.slide) {
    (0, _warning["default"])(false, '`slide` is deprecated use `activeIndex` or `defaultActiveIndex` instead');
    state.slide = nextProps.slide;
  }

  if ('slideIndex' in nextProps && nextProps.slideIndex + 1 !== prevState.slide) {
    (0, _warning["default"])(false, '`slideIndex` is deprecated use `activeIndex` or `defaultActiveIndex` instead');
    state.slide = nextProps.slideIndex + 1;
  }

  if ('activeIndex' in nextProps && nextProps.activeIndex + 1 !== prevState.slide) {
    state.slide = nextProps.activeIndex + 1;
  }

  return state;
}, _temp)) || _class);
var _default = Lightbox;
exports["default"] = _default;
module.exports = exports.default;