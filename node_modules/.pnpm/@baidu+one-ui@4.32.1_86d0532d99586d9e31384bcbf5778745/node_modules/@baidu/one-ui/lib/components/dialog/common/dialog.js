"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

exports.__esModule = true;
exports["default"] = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _inheritsLoose2 = _interopRequireDefault(require("@babel/runtime/helpers/inheritsLoose"));

var _identity2 = _interopRequireDefault(require("lodash/identity"));

var _some2 = _interopRequireDefault(require("lodash/some"));

var _react = _interopRequireWildcard(require("react"));

var _KeyCode = _interopRequireDefault(require("rc-util/lib/KeyCode"));

var _contains = _interopRequireDefault(require("rc-util/lib/Dom/contains"));

var _dlsIconsReact = require("dls-icons-react");

var _lazyRenderBox = _interopRequireDefault(require("./lazyRenderBox"));

var _commonTools = require("../../../core/commonTools");

var _button = _interopRequireDefault(require("../../button"));

var _scrollbar = require("../../../util/scrollbar");

var uuid = 0;
var modalMap = {};
;

var Dialog = /*#__PURE__*/function (_Component) {
  (0, _inheritsLoose2["default"])(Dialog, _Component);

  function Dialog() {
    var _this;

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _Component.call.apply(_Component, [this].concat(args)) || this;
    _this.titleId = null;
    _this.wrap = null;
    _this.timeoutId = null;
    _this.dialogMouseDown = null;
    _this.openTime = null;
    _this.lastOutSideFocusNode = null;
    _this.inTransition = void 0;
    _this.sentinelStart = void 0;

    _this.componentDidUpdate = function (prevProps) {
      var _this$props = _this.props,
          visible = _this$props.visible,
          mask = _this$props.mask;

      if (visible) {
        if (!prevProps.visible) {
          _this.openTime = Date.now();

          _this.tryFocus();
        }
      } else if (prevProps.visible) {
        _this.inTransition = true;

        if (mask && _this.lastOutSideFocusNode) {
          try {
            _this.lastOutSideFocusNode.focus();
          } catch (e) {
            _this.lastOutSideFocusNode = null;
          }

          _this.lastOutSideFocusNode = null;
        }
      }

      _this.toggleScrollLock();
    };

    _this.onDialogMouseDown = function () {
      _this.dialogMouseDown = true;
    };

    _this.onMaskMouseUp = function () {
      if (_this.dialogMouseDown) {
        _this.timeoutId = setTimeout(function () {
          _this.dialogMouseDown = false;
        }, 0);
      }
    };

    _this.onMaskClick = function (e) {
      if (Date.now() - _this.openTime < 300) {
        return;
      }

      if (e.target === e.currentTarget && !_this.dialogMouseDown) {
        _this.close(e);
      }
    };

    _this.onKeyDown = function (e) {
      var props = _this.props;

      if (props.keyboard && e.keyCode === _KeyCode["default"].ESC) {
        e.stopPropagation();

        _this.close(e);
      }
    };

    _this.getZIndexStyle = function () {
      var style = {};
      var props = _this.props;

      if (props.zIndex !== undefined) {
        style.zIndex = props.zIndex;
      }

      return style;
    };

    _this.getWrapStyle = function () {
      return (0, _extends2["default"])({}, _this.getZIndexStyle(), _this.props.wrapStyle);
    };

    _this.saveRef = function (name) {
      return function (node) {
        _this[name] = node;
      };
    };

    _this.getMaskElement = function () {
      var props = _this.props;
      var maskElement = null;

      if (props.mask) {
        maskElement = /*#__PURE__*/_react["default"].createElement(_lazyRenderBox["default"], (0, _extends2["default"])({
          style: props.maskStyle,
          key: "mask",
          className: (0, _commonTools.classnames)(props.prefixCls + "-mask", props.maskClassName),
          hiddenClassName: props.prefixCls + "-mask-hidden",
          visible: props.visible
        }, props.maskProps));
      }

      return maskElement;
    };

    _this.getDialogElement = function () {
      var _this$props2 = _this.props,
          closable = _this$props2.closable,
          needCloseIcon = _this$props2.needCloseIcon,
          prefixCls = _this$props2.prefixCls,
          width = _this$props2.width,
          height = _this$props2.height,
          title = _this$props2.title,
          visible = _this$props2.visible,
          children = _this$props2.children,
          bodyStyle = _this$props2.bodyStyle,
          bodyProps = _this$props2.bodyProps,
          contentClassName = _this$props2.contentClassName;
      var dest = {};

      if (width !== undefined) {
        dest.width = width;
      }

      if (height !== undefined) {
        dest.height = height;
      }

      var footer;
      var hasFooter = !!_this.props.footer;

      if (Array.isArray(_this.props.footer) && !_this.props.footer.length) {
        hasFooter = false;
      }

      if (hasFooter) {
        footer = /*#__PURE__*/_react["default"].createElement("div", {
          className: prefixCls + "-footer",
          ref: _this.saveRef('footer')
        }, _this.props.footer);
      }

      var closer;

      if (closable && needCloseIcon) {
        closer = /*#__PURE__*/_react["default"].createElement(_button["default"], {
          type: "text-aux",
          onClick: _this.close,
          className: prefixCls + "-close"
        }, /*#__PURE__*/_react["default"].createElement(_dlsIconsReact.IconTimes, null));
      }

      var header;

      if (title || closer) {
        header = /*#__PURE__*/_react["default"].createElement("div", {
          className: prefixCls + "-header",
          ref: _this.saveRef('header')
        }, /*#__PURE__*/_react["default"].createElement("div", {
          className: prefixCls + "-title",
          id: _this.titleId
        }, title), closer);
      }

      var style = (0, _extends2["default"])({}, _this.props.style, dest);
      var sentinelStyle = {
        width: 0,
        height: 0,
        overflow: 'hidden'
      };
      var contentClsName = (0, _commonTools.classnames)(prefixCls + "-content", contentClassName);
      return /*#__PURE__*/_react["default"].createElement(_lazyRenderBox["default"], {
        key: "dialog-element",
        role: "document",
        ref: _this.saveRef('dialog'),
        style: style,
        className: prefixCls,
        visible: visible,
        onMouseDown: _this.onDialogMouseDown
      }, /*#__PURE__*/_react["default"].createElement("div", {
        tabIndex: 0,
        ref: _this.saveRef('sentinelStart'),
        style: sentinelStyle,
        "aria-hidden": "true"
      }), /*#__PURE__*/_react["default"].createElement("div", {
        className: contentClsName
      }, header, /*#__PURE__*/_react["default"].createElement("div", (0, _extends2["default"])({
        className: prefixCls + "-body",
        style: bodyStyle,
        ref: _this.saveRef('body')
      }, bodyProps), children), footer), /*#__PURE__*/_react["default"].createElement("div", {
        tabIndex: 0,
        ref: _this.saveRef('sentinelEnd'),
        style: sentinelStyle,
        "aria-hidden": "true"
      }));
    };

    _this.close = function (e) {
      var _this$props3 = _this.props,
          onClose = _this$props3.onClose,
          afterClose = _this$props3.afterClose,
          visibleControlledWhenClose = _this$props3.visibleControlledWhenClose,
          mask = _this$props3.mask;

      if (onClose) {
        onClose(e);
      }

      if (_this.wrap && !visibleControlledWhenClose) {
        _this.wrap.style.display = 'none';

        _this.toggleScrollLock();
      }

      if (afterClose) {
        setTimeout(function () {
          afterClose();
        }, 300);
      }
    };

    return _this;
  }

  var _proto = Dialog.prototype;

  _proto.componentDidMount = function componentDidMount() {
    var forceRender = this.props.forceRender;
    this.titleId = "dialogTitle" + uuid++;
    this.componentDidUpdate({});

    if (forceRender && this.wrap) {
      this.wrap.style.display = 'none';
    }

    this.toggleScrollLock();
  };

  _proto.toggleScrollLock = function toggleScrollLock(unmount) {
    var _this$props4 = this.props,
        mask = _this$props4.mask,
        visible = _this$props4.visible;

    if (unmount) {
      delete modalMap[this.titleId];
    } else {
      modalMap[this.titleId] = mask && visible && this.wrap.style.display !== 'none';
    }

    if ((0, _some2["default"])(modalMap, _identity2["default"])) {
      _scrollbar.lockManager.lock();
    } else {
      _scrollbar.lockManager.unlock();
    }
  };

  _proto.componentWillUnmount = function componentWillUnmount() {
    clearTimeout(this.timeoutId);
    this.toggleScrollLock(true);
  };

  _proto.tryFocus = function tryFocus() {
    if (!(0, _contains["default"])(this.wrap, document.activeElement)) {
      this.lastOutSideFocusNode = document.activeElement;
      this.sentinelStart.focus();
    }
  };

  _proto.render = function render() {
    var props = this.props;
    var prefixCls = props.prefixCls,
        maskClosable = props.maskClosable;
    var style = this.getWrapStyle();

    if (props.visible) {
      style.display = 'block';
    } else {
      style.display = 'none';
    }

    return /*#__PURE__*/_react["default"].createElement("div", (0, _extends2["default"])({
      tabIndex: -1,
      onKeyDown: this.onKeyDown,
      className: prefixCls + "-wrap " + (props.wrapClassName || ''),
      ref: this.saveRef('wrap'),
      onClick: maskClosable ? this.onMaskClick : null,
      onMouseUp: maskClosable ? this.onMaskMouseUp : null,
      role: "dialog",
      "aria-labelledby": props.title ? this.titleId : null,
      style: style
    }, props.wrapProps), this.getMaskElement(), this.getDialogElement());
  };

  return Dialog;
}(_react.Component);

exports["default"] = Dialog;
Dialog.defaultProps = {
  className: '',
  mask: true,
  visible: false,
  keyboard: true,
  closable: true,
  maskClosable: true,
  destroyOnClose: false,
  visibleControlledWhenClose: false,
  maskClassName: ''
};
module.exports = exports.default;