"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

exports.__esModule = true;
exports["default"] = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _inheritsLoose2 = _interopRequireDefault(require("@babel/runtime/helpers/inheritsLoose"));

var _noop2 = _interopRequireDefault(require("lodash/noop"));

var _react = _interopRequireWildcard(require("react"));

var _miniStore = require("mini-store");

var _dlsIconsReact = require("dls-icons-react");

var _datePickerTools = require("../../core/datePickerTools");

var _titleHeader = _interopRequireDefault(require("./common/titleHeader"));

var _yearPanel = _interopRequireDefault(require("./common/yearPanel"));

var _monthPanel = _interopRequireDefault(require("./common/monthPanel"));

var _input = _interopRequireDefault(require("./common/input"));

var _overlay = _interopRequireDefault(require("../overlay"));

var _button = _interopRequireDefault(require("../button"));

var _commonTools = require("../../core/commonTools");

var _util = require("./util");

var _context = require("../providerConfig/context");

var _dec, _class, _class2, _temp;

var MonthPicker = (_dec = (0, _context.withConfigConsumer)('date-picker'), _dec(_class = (_temp = _class2 = /*#__PURE__*/function (_PureComponent) {
  (0, _inheritsLoose2["default"])(MonthPicker, _PureComponent);

  function MonthPicker(props) {
    var _this;

    _this = _PureComponent.call(this, props) || this;
    _this.store = void 0;

    _this.componentDidUpdate = function (prevProps) {
      var newState = {};

      if ('value' in _this.props) {
        var _value = _this.props.value || '';

        var todayDetail = (0, _datePickerTools.getTodayDetail)();
        var currentDetail = (0, _datePickerTools.getDetailDate)(_value); // 控制一些组件内部属性

        newState = (0, _extends2["default"])({}, newState, {
          _value: _value,
          showYear: _value ? currentDetail.fullYear : todayDetail.fullYear,
          showMonth: _value ? currentDetail.fullMonth : todayDetail.fullMonth
        });
      }

      if ('validateMinDate' in _this.props && _this.props.validateMinDate !== prevProps.validateMinDate) {
        newState = (0, _extends2["default"])({}, newState, {
          validateMinDate: (0, _datePickerTools.transDateFormat)(_this.props.validateMinDate) || (0, _datePickerTools.validateData)().validateMinDate
        });
      }

      if ('validateMaxDate' in _this.props && _this.props.validateMaxDate !== prevProps.validateMaxDate) {
        newState = (0, _extends2["default"])({}, newState, {
          validateMaxDate: (0, _datePickerTools.transDateFormat)(_this.props.validateMaxDate) || (0, _datePickerTools.validateData)().validateMaxDate
        });
      }

      _this.store.setState(newState);
    };

    _this.onSelectMonth = function (value, colsePanel) {
      if (colsePanel === void 0) {
        colsePanel = true;
      }

      var _this$props = _this.props,
          onChange = _this$props.onChange,
          validator = _this$props.validator;
      var newState = {};

      if (!('value' in _this.props)) {
        // 非受控
        newState.currentValue = value;
      }

      var todayDetail = (0, _datePickerTools.getTodayDetail)();
      var currentDetail = (0, _datePickerTools.getDetailDate)(value);

      _this.store.setState({
        _value: value,
        showYear: value ? currentDetail.fullYear : todayDetail.fullYear,
        showMonth: value ? currentDetail.fullMonth : todayDetail.fullMonth
      });

      if (!('visible' in _this.props) && colsePanel) {
        // 非受控
        newState.visible = false;
      }

      var validatorError = '';
      validatorError = validator && typeof validator === 'function' ? validator(value) : '';

      if (!validatorError) {
        onChange(value);
        newState.errorMessage = '';
      } else {
        newState.errorMessage = validatorError;
      }

      _this.setState(newState);
    };

    _this.renderDatePickerBody = function () {
      var _this$props2 = _this.props,
          prefixCls = _this$props2.prefixCls,
          size = _this$props2.size;
      var visible = _this.state.visible;
      var datePickerPanelClassName = (0, _commonTools.classnames)(prefixCls + "-panel", prefixCls + "-panel-" + size);
      return /*#__PURE__*/_react["default"].createElement(_miniStore.Provider, {
        store: _this.store
      }, /*#__PURE__*/_react["default"].createElement("div", {
        className: datePickerPanelClassName
      }, /*#__PURE__*/_react["default"].createElement(_input["default"], (0, _extends2["default"])({}, _this.props, {
        visible: visible,
        onChange: _this.onSelectMonth,
        inputType: "month"
      })), /*#__PURE__*/_react["default"].createElement(_titleHeader["default"], (0, _extends2["default"])({}, _this.props, {
        isMonthRender: true
      })), /*#__PURE__*/_react["default"].createElement(_monthPanel["default"], (0, _extends2["default"])({}, _this.props, {
        isMonthRender: true,
        onClickMonth: _this.onSelectMonth
      })), /*#__PURE__*/_react["default"].createElement(_yearPanel["default"], (0, _extends2["default"])({}, _this.props, {
        isMonthRender: true
      }))));
    };

    _this.onLayerVisibleChange = function (visible) {
      _this.props.onVisibleChange(visible);

      if (!('visible' in _this.props)) {
        _this.setState({
          visible: visible
        });
      }
    };

    _this.onOpenDatePicker = function (e) {
      var onClickButton = _this.props.onClickButton;
      var formatValue;

      if ('value' in _this.props) {
        formatValue = _this.props.value;
      } else {
        formatValue = _this.state.currentValue;
      }

      var todayDetail = (0, _datePickerTools.getTodayDetail)();
      var currentDetail = (0, _datePickerTools.getDetailDate)(formatValue); // 每次打开的时候，重置一下面板的type，并且保证当前value与state的value保持一致

      _this.store.setState({
        panelType: 'month',
        _value: formatValue,
        showYear: formatValue ? currentDetail.fullYear : todayDetail.fullYear,
        showMonth: formatValue ? currentDetail.fullMonth : todayDetail.fullMonth
      });

      _this.onLayerVisibleChange(true);

      onClickButton(e);
    };

    _this.onDetete = function (e) {
      e.stopPropagation();
      e.preventDefault();

      _this.props.onDelete();

      if (!('value' in _this.props)) {
        _this.setState({
          currentValue: ''
        });

        _this.store.setState({
          _value: ''
        });
      }
    };

    var defaultValue = props.defaultValue,
        _value3 = props.value,
        _visible = props.visible,
        defaultVisible = props.defaultVisible;

    var _value2 = defaultValue || _value3 || '';

    var _todayDetail = (0, _datePickerTools.getTodayDetail)();

    var _currentDetail = (0, _datePickerTools.getDetailDate)(_value2);

    _this.state = {
      currentValue: _value2,
      visible: defaultVisible || _visible || false,
      errorMessage: ''
    };
    _this.store = (0, _miniStore.create)({
      _value: _value2,
      showYear: _value2 ? _currentDetail.fullYear : _todayDetail.fullYear,
      showMonth: _value2 ? _currentDetail.fullMonth : _todayDetail.fullMonth,
      // 面板展示 month or year - 选择年份 or 月份
      panelType: 'month',
      validateMinDate: (0, _datePickerTools.transDateFormat)(props.validateMinDate) || (0, _datePickerTools.validateData)().validateMinDate,
      validateMaxDate: (0, _datePickerTools.transDateFormat)(props.validateMaxDate) || (0, _datePickerTools.validateData)().validateMaxDate
    });
    return _this;
  }

  var _proto = MonthPicker.prototype;

  _proto.render = function render() {
    var _classnames, _classnames2;

    var _this$props3 = this.props,
        prefixCls = _this$props3.prefixCls,
        className = _this$props3.className,
        disabled = _this$props3.disabled,
        getPopupContainer = _this$props3.getPopupContainer,
        dateFormat = _this$props3.dateFormat,
        popupPlacement = _this$props3.popupPlacement,
        size = _this$props3.size,
        customButtonTitle = _this$props3.customButtonTitle,
        showDeleteIcon = _this$props3.showDeleteIcon,
        placeholder = _this$props3.placeholder,
        style = _this$props3.style;
    var _this$state = this.state,
        currentValue = _this$state.currentValue,
        visible = _this$state.visible,
        errorMessage = _this$state.errorMessage;
    var formatValue;

    if ('value' in this.props) {
      formatValue = this.props.value;
    } else {
      formatValue = currentValue;
    }

    var buttonText = (0, _datePickerTools.formatButtonText)({
      value: formatValue,
      dateFormat: dateFormat
    });
    var text = customButtonTitle || buttonText || placeholder;
    var datePickerClassNames = (0, _commonTools.classnames)(prefixCls, className, (_classnames = {}, _classnames[prefixCls + "-empty"] = !buttonText, _classnames[prefixCls + "-disabled"] = disabled, _classnames[prefixCls + "-showDeleteIcon"] = showDeleteIcon, _classnames));
    var layerProps = {
      trigger: disabled ? '' : 'click',
      visible: visible,
      onVisibleChange: this.onLayerVisibleChange,
      overlay: this.renderDatePickerBody(),
      dropdownMatchSelectWidth: false,
      getPopupContainer: getPopupContainer,
      popupPlacement: popupPlacement,
      popupClassName: (0, _commonTools.classnames)(prefixCls + "-overlay", prefixCls + "-overlay-" + size),
      align: _util.align
    };
    var textClassName = (0, _commonTools.classnames)(prefixCls + "-title-text", (_classnames2 = {}, _classnames2[prefixCls + "-title-text-empty"] = !formatValue, _classnames2));
    return /*#__PURE__*/_react["default"].createElement("div", {
      className: datePickerClassNames,
      style: style
    }, /*#__PURE__*/_react["default"].createElement(_overlay["default"], layerProps, /*#__PURE__*/_react["default"].createElement(_button["default"], {
      className: prefixCls + "-title",
      disabled: disabled,
      size: size,
      onClick: this.onOpenDatePicker,
      type: "basic"
    }, /*#__PURE__*/_react["default"].createElement("span", {
      className: textClassName
    }, text), /*#__PURE__*/_react["default"].createElement(_dlsIconsReact.IconCalendar, {
      className: prefixCls + "-button-icon " + prefixCls + "-button-icon-calendar"
    }), /*#__PURE__*/_react["default"].createElement(_dlsIconsReact.IconTimesCircle, {
      className: prefixCls + "-button-icon " + prefixCls + "-button-icon-close",
      onClick: this.onDetete
    }))), errorMessage ? /*#__PURE__*/_react["default"].createElement("span", {
      className: prefixCls + "-error-message"
    }, errorMessage) : null);
  };

  return MonthPicker;
}(_react.PureComponent), _class2.defaultProps = {
  dateFormat: 'YYYY-MM',
  prefixCls: 'one-date-picker',
  disabled: false,
  size: 'medium',
  onVisibleChange: _noop2["default"],
  onChange: _noop2["default"],
  onClickButton: _noop2["default"],
  getPopupContainer: function getPopupContainer() {
    return document.body;
  },
  showDeleteIcon: false,
  onDelete: _noop2["default"],
  placeholder: '请选择日期'
}, _class2.getDerivedStateFromProps = function (nextProps) {
  var newState = {};

  if ('value' in nextProps) {
    newState.currentValue = nextProps.value;
  }

  if ('visible' in nextProps) {
    newState.visible = nextProps.visible;
  }

  return newState;
}, _temp)) || _class);
var _default = MonthPicker;
exports["default"] = _default;
module.exports = exports.default;