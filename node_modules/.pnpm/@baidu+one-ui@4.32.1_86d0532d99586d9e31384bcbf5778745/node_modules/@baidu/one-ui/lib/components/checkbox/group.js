"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

exports.__esModule = true;
exports["default"] = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _inheritsLoose2 = _interopRequireDefault(require("@babel/runtime/helpers/inheritsLoose"));

var _react = _interopRequireWildcard(require("react"));

var _commonTools = require("../../core/commonTools");

var _checkbox = _interopRequireDefault(require("./checkbox"));

var _button = _interopRequireDefault(require("./button"));

var _radioAndCheckboxTools = require("../../core/radioAndCheckboxTools");

var _context = _interopRequireDefault(require("./context"));

var _context2 = require("../providerConfig/context");

var _dec, _class, _class2, _temp;

;
var CheckboxGroup = (_dec = (0, _context2.withConfigConsumer)('checkbox-group'), _dec(_class = (_temp = _class2 = /*#__PURE__*/function (_PureComponent) {
  (0, _inheritsLoose2["default"])(CheckboxGroup, _PureComponent);

  function CheckboxGroup(props) {
    var _this;

    _this = _PureComponent.call(this, props) || this;
    _this.options = [];

    _this.register = function (option) {
      _this.options.push(option);
    };

    _this.unregister = function (option) {
      var index = _this.options.findIndex(function (o) {
        return o === option;
      });

      if (index > -1) {
        _this.options.splice(index, 1);
      }
    };

    _this.toggleOption = function (option) {
      var stateValue = _this.state.value || [];
      var optionValue = option.value,
          exclusive = option.exclusive;
      var _this$props = _this.props,
          propsValue = _this$props.value,
          onChange = _this$props.onChange,
          emptyValue = _this$props.emptyValue;
      var value;

      if (exclusive) {
        value = [optionValue];
      } else {
        value = stateValue.filter(function (value) {
          return !_this.exclusive(value);
        });
        var optionIndex = stateValue.indexOf(optionValue);

        if (optionIndex === -1) {
          value.push(optionValue);
        } else {
          value.splice(optionIndex, 1);
        }

        if (value.length === 0 && emptyValue != null) {
          value = [emptyValue];
        }
      }

      if (propsValue == null) {
        _this.setState({
          value: value
        });
      }

      if (onChange) {
        onChange(value);
      }
    };

    _this.state = {
      value: (0, _radioAndCheckboxTools.getRealValue)(props)
    };
    return _this;
  }

  var _proto = CheckboxGroup.prototype;

  _proto.getContext = function getContext() {
    var _this$props2 = this.props,
        disabled = _this$props2.disabled,
        size = _this$props2.size,
        type = _this$props2.type;
    return {
      toggleOption: this.toggleOption,
      register: this.register,
      unregister: this.unregister,
      value: this.state.value,
      disabled: disabled,
      size: size,
      type: type
    };
  };

  CheckboxGroup.getDerivedStateFromProps = function getDerivedStateFromProps(nextProps) {
    if (nextProps.value != null) {
      return {
        value: nextProps.value
      };
    }

    return null;
  };

  _proto.getOptions = function getOptions() {
    return this.props.options.map(function (option) {
      if (typeof option === 'string' || typeof option === 'number') {
        return {
          label: option,
          value: option
        };
      }

      return option;
    });
  };

  _proto.exclusive = function exclusive(val) {
    return this.options.some(function (_ref) {
      var value = _ref.value,
          exclusive = _ref.exclusive;
      return val === value && exclusive;
    });
  };

  _proto.render = function render() {
    var _this2 = this,
        _classnames;

    var _this$props3 = this.props,
        prefixCls = _this$props3.prefixCls,
        className = _this$props3.className,
        options = _this$props3.options,
        disabled = _this$props3.disabled,
        direction = _this$props3.direction,
        size = _this$props3.size,
        name = _this$props3.name,
        type = _this$props3.type,
        style = _this$props3.style;
    var children = this.props.children;

    if (options && options.length > 0) {
      children = this.getOptions().map(function (option) {
        var value = option.value,
            label = option.label,
            optionDisable = option.disabled,
            exclusive = option.exclusive;
        var stateValue = _this2.state.value || [];
        var props = {
          name: name,
          disabled: optionDisable != null ? optionDisable : disabled,
          value: value,
          exclusive: exclusive,
          checked: stateValue.indexOf(value) !== -1,
          onChange: function onChange() {
            return _this2.toggleOption(option);
          }
        };

        if (type === 'strong' || type === 'simple') {
          return /*#__PURE__*/_react["default"].createElement(_button["default"], (0, _extends2["default"])({
            key: value
          }, props, {
            type: type
          }), label);
        }

        return /*#__PURE__*/_react["default"].createElement(_checkbox["default"], (0, _extends2["default"])({
          key: value
        }, props), label);
      });
    }

    var classString = (0, _commonTools.classnames)(prefixCls, className, (_classnames = {}, _classnames[prefixCls + "-" + size] = size, _classnames[prefixCls + "-" + direction] = direction, _classnames[prefixCls + "-" + type] = type, _classnames));
    return /*#__PURE__*/_react["default"].createElement(_context["default"].Provider, {
      value: this.getContext()
    }, /*#__PURE__*/_react["default"].createElement("div", {
      className: classString,
      style: style
    }, /*#__PURE__*/_react["default"].createElement("div", {
      className: prefixCls + "-items"
    }, children)));
  };

  return CheckboxGroup;
}(_react.PureComponent), _class2.defaultProps = {
  options: [],
  prefixCls: 'one-checkbox-group',
  size: 'medium',
  direction: 'row'
}, _temp)) || _class);
var _default = CheckboxGroup;
exports["default"] = _default;
module.exports = exports.default;