"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

exports.__esModule = true;
exports["default"] = void 0;

var _inheritsLoose2 = _interopRequireDefault(require("@babel/runtime/helpers/inheritsLoose"));

var _noop2 = _interopRequireDefault(require("lodash/noop"));

var _react = _interopRequireWildcard(require("react"));

var _reactIs = require("react-is");

var _commonTools = require("../../core/commonTools");

var _context = require("../providerConfig/context");

var _dec, _class, _class2, _temp;

var formatActiveKeyArray = function formatActiveKeyArray(activeKey) {
  var currentKey = activeKey;

  if (!Array.isArray(currentKey)) {
    currentKey = currentKey ? [currentKey] : [];
  }

  return currentKey;
};

var Collapse = (_dec = (0, _context.withConfigConsumer)('collapse'), _dec(_class = (_temp = _class2 = /*#__PURE__*/function (_PureComponent) {
  (0, _inheritsLoose2["default"])(Collapse, _PureComponent);

  function Collapse(_props) {
    var _this;

    _this = _PureComponent.call(this, _props) || this;

    _this.onClickItem = function (key) {
      // 判断是否是手风琴折叠面板
      var activeKey = _this.state.activeKey;
      var isAccordion = _this.props.accordion;

      if (isAccordion) {
        // 选择已打开的面板 => 关闭，选择其他 => 打开面板，关闭已选择的，是全局永远只有一个打开面板
        activeKey = activeKey[0] === key ? [] : [key];
      } else {
        activeKey = [].concat(activeKey);
        var index = activeKey.indexOf(key);
        var isActive = index > -1;

        if (isActive) {
          activeKey.splice(index, 1);
        } else {
          activeKey.push(key);
        }
      }

      if (!('activeKey' in _this.props)) {
        _this.setState({
          activeKey: activeKey
        });
      }

      _this.props.onChange(isAccordion ? activeKey[0] : activeKey);
    };

    _this.renderPanel = function () {
      var activeKey = _this.state.activeKey;
      var _this$props = _this.props,
          children = _this$props.children,
          prefixCls = _this$props.prefixCls,
          accordion = _this$props.accordion,
          destroyNotActivePanel = _this$props.destroyNotActivePanel,
          gutter = _this$props.gutter,
          showExpandIcon = _this$props.showExpandIcon;
      var childList = /*#__PURE__*/_react["default"].isValidElement(children) && (0, _reactIs.isFragment)(children) ? children.props.children : children;

      var newChildren = _react.Children.map(childList, function (child, index) {
        if (!child) {
          return null;
        } // 如果没有key，就用index索引做key


        var key = child.key || String(index);
        var disabled = child.props.disabled;
        var isActive = false;

        if (accordion) {
          isActive = activeKey[0] === key;
        } else {
          isActive = activeKey.indexOf(key) > -1;
        }

        var props = {
          key: key,
          panelKey: key,
          prefixCls: prefixCls,
          children: child.props.children,
          onItemClick: _this.onClickItem,
          isActive: isActive,
          destroyNotActivePanel: destroyNotActivePanel,
          accordion: accordion,
          disabled: _this.props.disabled || disabled,
          id: key,
          gutter: childList.length > index + 1 ? gutter : undefined,
          // 最后一个不传
          showExpandIcon: showExpandIcon
        };
        return /*#__PURE__*/_react["default"].cloneElement(child, props);
      });

      if ((0, _reactIs.isFragment)(children)) {
        return /*#__PURE__*/_react["default"].createElement(_react["default"].Fragment, null, newChildren);
      }

      return newChildren;
    };

    var _activeKey = _props.activeKey,
        defaultActiveKey = _props.defaultActiveKey;
    var currentKey = defaultActiveKey; // 处理受控非受控情况

    if ('activeKey' in _props) {
      currentKey = _activeKey;
    }

    _this.state = {
      activeKey: formatActiveKeyArray(currentKey)
    };
    return _this;
  }

  Collapse.getDerivedStateFromProps = function getDerivedStateFromProps(nextProps) {
    // 判断受控情况
    if ('activeKey' in nextProps) {
      return {
        activeKey: formatActiveKeyArray(nextProps.activeKey)
      };
    }

    return null;
  };

  var _proto = Collapse.prototype;

  /**
    * 归一化边框
    *
    * 不同`type`默认情况如下：
    * normal: Y(不可配)
    * simple: Y(可配)
    * basic: N(可配)
    * strong: N(可配)
    *
    * @param {string} type 类型
    * @param {bool} bordered 边框
    * @return {bool} 是否有边框
   */
  _proto.normalizedBordered = function normalizedBordered(type, bordered) {
    if (type === 'normal') {
      return true;
    }

    if (bordered == null) {
      if (type === 'simple') {
        return true;
      }

      return false;
    }

    return bordered;
  }
  /**
    * 归一化是否响应交互
    *
    * 不同`type`默认情况如下：
    * normal: N(不可配)
    * simple: Y(不可配)
    * basic: N(可配)
    * strong: N(可配)
    *
    * @param {string} type 类型
    * @param {bool} dull 边框
    * @return {bool} 是否响应交互
   */
  ;

  _proto.normalizedDull = function normalizedDull(type, dull) {
    if (type === 'normal') {
      return false;
    }

    if (type === 'simple') {
      return true;
    }

    if (dull == null) {
      return false;
    }

    return dull;
  };

  _proto.render = function render() {
    var _classnames;

    var _this$props2 = this.props,
        prefixCls = _this$props2.prefixCls,
        className = _this$props2.className,
        style = _this$props2.style,
        size = _this$props2.size,
        type = _this$props2.type,
        bordered = _this$props2.bordered,
        dull = _this$props2.dull,
        gutter = _this$props2.gutter,
        showExpandIcon = _this$props2.showExpandIcon,
        expandIconPosition = _this$props2.expandIconPosition;
    var collapseClassName = (0, _commonTools.classnames)(prefixCls, className, prefixCls + "-" + size, prefixCls + "-type-" + type, (_classnames = {}, _classnames[prefixCls + "-border-less"] = !this.normalizedBordered(type, bordered), _classnames[prefixCls + "-dull"] = this.normalizedDull(type, dull), _classnames[prefixCls + "-with-gutter"] = gutter > 0, _classnames[prefixCls + "-expand-icon-" + expandIconPosition] = showExpandIcon, _classnames));
    return /*#__PURE__*/_react["default"].createElement("div", {
      className: collapseClassName,
      style: style
    }, this.renderPanel());
  };

  return Collapse;
}(_react.PureComponent), _class2.defaultProps = {
  prefixCls: 'one-collapse',
  size: 'medium',
  onChange: _noop2["default"],
  type: 'normal',
  showExpandIcon: true,
  expandIconPosition: 'left'
}, _class2.Panel = void 0, _temp)) || _class);
var _default = Collapse;
exports["default"] = _default;
module.exports = exports.default;