"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

exports.__esModule = true;
exports["default"] = void 0;

var _inheritsLoose2 = _interopRequireDefault(require("@babel/runtime/helpers/inheritsLoose"));

var _partial2 = _interopRequireDefault(require("lodash/partial"));

var _react = _interopRequireWildcard(require("react"));

var _miniStore = require("mini-store");

var _dayjs = _interopRequireDefault(require("dayjs"));

var _datePickerTools = require("../../../core/datePickerTools");

var _util = require("../util");

var Input = /*#__PURE__*/function (_PureComponent) {
  (0, _inheritsLoose2["default"])(Input, _PureComponent);

  function Input(props) {
    var _this;

    _this = _PureComponent.call(this, props) || this;

    _this.onChangeInput = function (type, e) {
      var value = e.target.value;
      var _this$props = _this.props,
          dateFormat = _this$props.dateFormat,
          onChange = _this$props.onChange,
          multiple = _this$props.multiple,
          validateMaxDate = _this$props.validateMaxDate,
          validateMinDate = _this$props.validateMinDate,
          inputType = _this$props.inputType,
          validateDisabled = _this$props.validateDisabled,
          mode = _this$props.mode;
      var _this$state = _this.state,
          endDate = _this$state.endDate,
          beginDate = _this$state.beginDate;
      var reg = /^[\d/.///-]*$/;

      if (!reg.test(value)) {
        return;
      }

      var newState = {};

      if (type === 'beginDate') {
        newState = {
          beginDate: value
        };
      } else if (type === 'endDate') {
        newState = {
          endDate: value
        };
      }

      _this.setState(newState);

      if (validateDisabled && typeof validateDisabled === 'function') {
        if (validateDisabled({
          dayItem: value,
          timeStamp: (0, _datePickerTools.getTimeTramp)(value),
          getTimeStamp: _datePickerTools.getTimeTramp
        })) {
          return;
        }
      }

      if (newState.endDate) {
        var endDateTimeTramp = (0, _datePickerTools.getTimeTramp)(newState.endDate);

        if (endDateTimeTramp < (0, _datePickerTools.getTimeTramp)(validateMinDate) || endDateTimeTramp > (0, _datePickerTools.getTimeTramp)(validateMaxDate)) {
          return;
        }
      }

      if (newState.beginDate) {
        var beginDateTimeTramp = (0, _datePickerTools.getTimeTramp)(newState.beginDate);

        if (beginDateTimeTramp < (0, _datePickerTools.getTimeTramp)(validateMinDate) || beginDateTimeTramp > (0, _datePickerTools.getTimeTramp)(validateMaxDate)) {
          return;
        }
      }

      value = value.replace(/\./g, '/');
      var timeArray = value.split('/');

      if (timeArray.length === 1) {
        timeArray = value.split('-');
      }

      if ((0, _datePickerTools.getTimeStamp)(value) && inputType !== 'month' && timeArray.length === 3 && ("" + timeArray[0]).length === 4 && ("" + timeArray[1]).length === 2 && ("" + timeArray[2]).length === 2 && (0, _datePickerTools.monthDayRange)(timeArray[0])[+timeArray[1] - 1] && +timeArray[2] <= (0, _datePickerTools.monthDayRange)(timeArray[0])[+timeArray[1] - 1]) {
        // 合法时间戳的话，并且日期为标准的XXXX/XX/XX格式，则实时修改
        var formatDate = (0, _dayjs["default"])(new Date(value)).format(dateFormat);

        if (!multiple && mode !== 'week' && (0, _datePickerTools.getTimeTramp)(value) <= (0, _datePickerTools.getTimeTramp)(validateMaxDate) && (0, _datePickerTools.getTimeTramp)(value) >= (0, _datePickerTools.getTimeTramp)(validateMinDate)) {
          onChange(formatDate, false);
        } else if (type === 'beginDate' && (0, _datePickerTools.getTimeTramp)(value) < (0, _datePickerTools.getTimeTramp)(endDate) && (0, _datePickerTools.getTimeTramp)(value) >= (0, _datePickerTools.getTimeTramp)(validateMinDate)) {
          if (mode === 'week' && !multiple) {
            onChange((0, _util.getValidWeekDates)(value, dateFormat, validateMinDate, validateMaxDate), false);
          } else {
            var endDateFormat = endDate ? (0, _dayjs["default"])(new Date(endDate)).format(dateFormat) : '';
            onChange([(0, _util.getValidDate)(formatDate, dateFormat, validateMinDate, validateMaxDate, mode, false), endDateFormat], false);
          }
        } else if (type === 'endDate' && (0, _datePickerTools.getTimeTramp)(value) > (0, _datePickerTools.getTimeTramp)(beginDate) && (0, _datePickerTools.getTimeTramp)(value) <= (0, _datePickerTools.getTimeTramp)(validateMaxDate)) {
          if (mode === 'week' && !multiple) {
            onChange((0, _util.getValidWeekDates)(value, dateFormat, validateMinDate, validateMaxDate), false);
          } else {
            var beginDateFormat = beginDate ? (0, _dayjs["default"])(new Date(beginDate)).format(dateFormat) : '';
            onChange([beginDateFormat, (0, _util.getValidDate)(formatDate, dateFormat, validateMinDate, validateMaxDate, mode, true)], false);
          }
        }
      }

      if (inputType === 'month' && timeArray.length === 2 && ("" + timeArray[0]).length === 4 && ("" + timeArray[1]).length === 2 && +timeArray[1] < 13 && (0, _datePickerTools.getTimeTramp)(value) <= (0, _datePickerTools.getTimeTramp)(validateMaxDate) && (0, _datePickerTools.getTimeTramp)(value) >= (0, _datePickerTools.getTimeTramp)(validateMinDate)) {
        var _formatDate = (0, _dayjs["default"])(new Date(value)).format(dateFormat);

        onChange(_formatDate, false);
      }
    };

    _this.renderInput = function () {
      var inputProps = {
        value: _this.state.beginDate,
        onChange: (0, _partial2["default"])(_this.onChangeInput, 'beginDate'),
        placeholder: '请输入日期'
      };
      return /*#__PURE__*/_react["default"].createElement("div", {
        className: _this.props.prefixCls + "-input-container"
      }, /*#__PURE__*/_react["default"].createElement("input", inputProps));
    };

    _this.renderMultipleInput = function () {
      var prefixCls = _this.props.prefixCls;
      var _this$state2 = _this.state,
          beginDate = _this$state2.beginDate,
          endDate = _this$state2.endDate;
      var beginInputProps = {
        value: beginDate || '',
        onChange: (0, _partial2["default"])(_this.onChangeInput, 'beginDate'),
        placeholder: '请输入日期'
      };
      var endInputProps = {
        value: endDate || '',
        onChange: (0, _partial2["default"])(_this.onChangeInput, 'endDate'),
        placeholder: '请输入日期'
      };
      var containerClassNames = prefixCls + "-input-multiple";
      return /*#__PURE__*/_react["default"].createElement("div", {
        className: containerClassNames
      }, /*#__PURE__*/_react["default"].createElement("div", {
        className: _this.props.prefixCls + "-input-container"
      }, /*#__PURE__*/_react["default"].createElement("input", beginInputProps)), /*#__PURE__*/_react["default"].createElement("span", null, " ~ "), /*#__PURE__*/_react["default"].createElement("div", {
        className: _this.props.prefixCls + "-input-container"
      }, /*#__PURE__*/_react["default"].createElement("input", endInputProps)));
    };

    var _value = props.value,
        _dateFormat = props.dateFormat;

    var _formatMultipleDate = (0, _datePickerTools.formatMultipleDate)(_value, _dateFormat),
        _beginDate = _formatMultipleDate.beginDate,
        _endDate = _formatMultipleDate.endDate;

    _this.state = {
      beginDate: _beginDate,
      endDate: _endDate,
      prevProps: _this.props
    };
    return _this;
  }

  var _proto = Input.prototype;

  _proto.render = function render() {
    var _this$props2 = this.props,
        prefixCls = _this$props2.prefixCls,
        multiple = _this$props2.multiple,
        mode = _this$props2.mode;
    var inputClassNames = prefixCls + "-input";
    return /*#__PURE__*/_react["default"].createElement("div", {
      className: inputClassNames
    }, multiple || mode === 'week' ? this.renderMultipleInput() : this.renderInput());
  };

  return Input;
}(_react.PureComponent);

Input.defaultProps = {
  onChange: function onChange() {},
  multiple: false
};

Input.getDerivedStateFromProps = function (nextProps, prevState) {
  var prevProps = prevState.prevProps;

  if ('value' in nextProps && nextProps.value !== prevProps.value || nextProps.visible !== prevProps.visible) {
    var _value2 = nextProps.value,
        dateFormat = nextProps.dateFormat;

    var _formatMultipleDate2 = (0, _datePickerTools.formatMultipleDate)(_value2, dateFormat),
        beginDate = _formatMultipleDate2.beginDate,
        endDate = _formatMultipleDate2.endDate;

    return {
      beginDate: beginDate,
      endDate: endDate,
      prevProps: nextProps
    };
  }

  return null;
};

var _default = (0, _miniStore.connect)(function (state) {
  return {
    value: state._value,
    validateMinDate: state.validateMinDate,
    validateMaxDate: state.validateMaxDate
  };
})(Input);

exports["default"] = _default;
module.exports = exports.default;