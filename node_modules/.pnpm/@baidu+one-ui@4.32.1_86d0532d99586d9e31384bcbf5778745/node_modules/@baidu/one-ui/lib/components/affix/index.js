"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

exports.__esModule = true;
exports["default"] = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _inheritsLoose2 = _interopRequireDefault(require("@babel/runtime/helpers/inheritsLoose"));

var _noop2 = _interopRequireDefault(require("lodash/noop"));

var _throttle2 = _interopRequireDefault(require("lodash/throttle"));

var _react = _interopRequireWildcard(require("react"));

var _addEventListener = _interopRequireDefault(require("rc-util/lib/Dom/addEventListener"));

var _shallowequal = _interopRequireDefault(require("shallowequal"));

var _omit = _interopRequireDefault(require("omit.js"));

var _commonTools = require("../../core/commonTools");

var _affixTools = require("../../core/affixTools");

var _context = require("../providerConfig/context");

var _dec, _class, _class2, _temp;

var getTargetRect = function getTargetRect(target) {
  return target !== window ? target.getBoundingClientRect() : {
    top: 0,
    left: 0,
    bottom: 0
  };
};

var getOffset = function getOffset(element, target) {
  var elemRect = element.getBoundingClientRect();
  var targetRect = getTargetRect(target);
  var scrollTop = (0, _affixTools.getScroll)(target, true);
  var scrollLeft = (0, _affixTools.getScroll)(target, false);
  var docElem = window.document.body;
  var clientTop = docElem.clientTop || 0;
  var clientLeft = docElem.clientLeft || 0;
  return {
    top: elemRect.top - targetRect.top + (scrollTop - clientTop),
    left: elemRect.left - targetRect.left + (scrollLeft - clientLeft),
    width: elemRect.width,
    height: elemRect.height
  };
};

var Affix = (_dec = (0, _context.withConfigConsumer)('affix'), _dec(_class = (_temp = _class2 = /*#__PURE__*/function (_Component) {
  (0, _inheritsLoose2["default"])(Affix, _Component);

  function Affix() {
    var _this;

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _Component.call.apply(_Component, [this].concat(args)) || this;
    _this.timeout = void 0;
    _this.fixedNode = void 0;
    _this.affixNode = void 0;
    _this.state = {
      affixStyle: null,
      placeholderStyle: null
    };

    _this.setTargetEventListeners = function (getTarget) {
      var target = getTarget();

      if (!target) {
        return;
      }

      _this.clearEventListeners();

      _this.events.forEach(function (eventName) {
        _this.eventHandlers[eventName] = (0, _addEventListener["default"])(target, eventName, (0, _throttle2["default"])(_this.updatePosition, 10));
      });
    };

    _this.setAffixStyle = function (eventType, affixStyle) {
      var _this$props = _this.props,
          onChange = _this$props.onChange,
          target = _this$props.target;
      var originalAffixStyle = _this.state.affixStyle;
      var isWindow = target() === window;

      if (eventType === 'scroll' && originalAffixStyle && affixStyle && isWindow) {
        return;
      }

      if ((0, _shallowequal["default"])(affixStyle, originalAffixStyle)) {
        return;
      }

      _this.setState({
        affixStyle: affixStyle
      }, function () {
        var affixed = !!_this.state.affixStyle;

        if (affixStyle && !originalAffixStyle || !affixStyle && originalAffixStyle) {
          onChange(affixed);
        }
      });
    };

    _this.saveAffixNode = function (affixNode) {
      _this.affixNode = affixNode;
    };

    _this.setPlaceholderStyle = function (placeholderStyle) {
      var originalPlaceholderStyle = _this.state.placeholderStyle;

      if ((0, _shallowequal["default"])(placeholderStyle, originalPlaceholderStyle)) {
        return;
      }

      _this.setState({
        placeholderStyle: placeholderStyle
      });
    };

    _this.getFixedNode = function (node) {
      _this.fixedNode = node;
    };

    _this.updatePosition = function (event) {
      if (!_this.fixedNode) {
        return;
      }

      var eventType = null;

      if (event) {
        eventType = event.type;
      }

      var _this$props2 = _this.props,
          offsetBottom = _this$props2.offsetBottom,
          target = _this$props2.target,
          zIndex = _this$props2.zIndex;
      var offsetTop = _this.props.offsetTop;
      var targetNode = target();
      var scrollTop = (0, _affixTools.getScroll)(targetNode, true);
      var elemOffset = getOffset(_this.affixNode, targetNode);
      var elemSize = {
        width: _this.fixedNode.offsetWidth,
        height: _this.fixedNode.offsetHeight
      };
      var offsetMode = {
        top: false,
        bottom: false
      };

      if (typeof offsetTop !== 'number' && typeof offsetBottom !== 'number') {
        offsetMode.top = true;
        offsetTop = 0;
      } else {
        offsetMode.top = typeof offsetTop === 'number';
        offsetMode.bottom = typeof offsetBottom === 'number';
      }

      var targetRect = getTargetRect(targetNode);
      var targetInnerHeight = targetNode.innerHeight || targetNode.clientHeight;

      if (offsetMode.top && scrollTop > elemOffset.top - offsetTop) {
        // Fixed Top
        var width = elemOffset.width;

        _this.setAffixStyle(eventType, {
          position: 'fixed',
          top: targetRect.top + offsetTop,
          left: targetRect.left + elemOffset.left,
          width: width,
          zIndex: zIndex
        });

        _this.setPlaceholderStyle({
          width: width,
          height: elemSize.height
        });
      } else if (offsetMode.bottom && scrollTop < elemOffset.top + elemSize.height + (offsetBottom - targetInnerHeight)) {
        var targetBottomOffet = targetNode === window ? 0 : window.innerHeight - targetRect.bottom;
        var _width = elemOffset.width;

        _this.setAffixStyle(eventType, {
          position: 'fixed',
          bottom: targetBottomOffet + offsetBottom,
          left: targetRect.left + elemOffset.left,
          width: _width,
          zIndex: zIndex
        });

        _this.setPlaceholderStyle({
          width: _width,
          height: elemOffset.height
        });
      } else {
        var affixStyle = _this.state.affixStyle;
        var affixNodeOffsetWidth = _this.affixNode.offsetWidth;

        if (eventType === 'resize' && affixStyle && affixStyle.position === 'fixed' && affixNodeOffsetWidth) {
          _this.setAffixStyle(eventType, (0, _extends2["default"])({}, affixStyle, {
            width: affixNodeOffsetWidth
          }));
        } else {
          _this.setAffixStyle(eventType, null);
        }

        _this.setPlaceholderStyle(null);
      }
    };

    _this.eventHandlers = {};

    _this.clearEventListeners = function () {
      _this.events.forEach(function (eventName) {
        var handler = _this.eventHandlers[eventName];

        if (handler && handler.remove) {
          handler.remove();
        }
      });
    };

    _this.events = ['resize', 'scroll', 'touchstart', 'touchmove', 'touchend', 'pageshow', 'load'];
    return _this;
  }

  var _proto = Affix.prototype;

  _proto.componentDidMount = function componentDidMount() {
    var _this2 = this;

    var target = this.props.target;
    this.timeout = setTimeout(function () {
      _this2.setTargetEventListeners(target);

      _this2.updatePosition();
    });
  };

  _proto.componentDidUpdate = function componentDidUpdate(prevProps) {
    if (this.props.target !== prevProps.target) {
      this.clearEventListeners();
      this.setTargetEventListeners(this.props.target);
    }

    this.updatePosition();
  };

  _proto.componentWillUnmount = function componentWillUnmount() {
    this.clearEventListeners();
    clearTimeout(this.timeout);
  };

  _proto.render = function render() {
    var _classnames;

    var _this$state = this.state,
        affixStyle = _this$state.affixStyle,
        placeholderStyle = _this$state.placeholderStyle;
    var _this$props3 = this.props,
        prefixCls = _this$props3.prefixCls,
        style = _this$props3.style,
        children = _this$props3.children;
    var className = (0, _commonTools.classnames)((_classnames = {}, _classnames[prefixCls] = affixStyle, _classnames));
    var props = (0, _omit["default"])(this.props, ['prefixCls', 'offsetTop', 'offsetBottom', 'target', 'onChange', 'zIndex']);
    return /*#__PURE__*/_react["default"].createElement("div", (0, _extends2["default"])({}, props, {
      style: style,
      ref: this.saveAffixNode
    }), placeholderStyle && /*#__PURE__*/_react["default"].createElement("div", {
      "aria-hidden": true,
      style: placeholderStyle
    }), /*#__PURE__*/_react["default"].createElement("div", {
      className: className,
      ref: this.getFixedNode,
      style: affixStyle
    }, children));
  };

  return Affix;
}(_react.Component), _class2.defaultProps = {
  prefixCls: 'one-affix',
  target: function target() {
    return window;
  },
  onChange: _noop2["default"],
  zIndex: 1
}, _temp)) || _class);
var _default = Affix;
exports["default"] = _default;
module.exports = exports.default;