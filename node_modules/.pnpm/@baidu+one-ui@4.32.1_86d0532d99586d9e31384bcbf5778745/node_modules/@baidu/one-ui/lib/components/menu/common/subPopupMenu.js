"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

exports.__esModule = true;
exports.getActiveKey = getActiveKey;
exports["default"] = exports.SubPopupMenu = void 0;

var _inheritsLoose2 = _interopRequireDefault(require("@babel/runtime/helpers/inheritsLoose"));

var _extends4 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _react = _interopRequireWildcard(require("react"));

var _miniStore = require("mini-store");

var _shallowequal = _interopRequireDefault(require("shallowequal"));

var _commonTools = require("../../../core/commonTools");

var _util = require("./util");

;

function updateActiveKey(store, menuId, activeKey) {
  var _extends2;

  var state = store.getState();
  store.setState({
    activeKey: (0, _extends4["default"])({}, state.activeKey, (_extends2 = {}, _extends2[menuId] = activeKey, _extends2))
  });
}

function getEventKey(eventKey) {
  return eventKey || '0-menu-';
}

function getActiveKey(props, originalActiveKey) {
  var activeKey = originalActiveKey;
  var children = props.children,
      eventKey = props.eventKey,
      defaultActiveFirst = props.defaultActiveFirst;

  if (activeKey) {
    var found;
    (0, _util.loopMenuItem)(children, function (child, i) {
      if (child && child.props && !child.props.disabled && activeKey === (0, _util.getKeyFromChildrenIndex)(child, eventKey, i)) {
        found = true;
      }
    });

    if (found) {
      return activeKey;
    }
  }

  activeKey = null;

  if (defaultActiveFirst) {
    (0, _util.loopMenuItem)(children, function (child, i) {
      if (!activeKey && child && !child.props.disabled) {
        activeKey = (0, _util.getKeyFromChildrenIndex)(child, eventKey, i);
      }
    });
    return activeKey;
  }

  return activeKey;
}

var SubPopupMenu = /*#__PURE__*/function (_React$Component) {
  (0, _inheritsLoose2["default"])(SubPopupMenu, _React$Component);

  function SubPopupMenu(props) {
    var _extends3;

    var _this;

    _this = _React$Component.call(this, props) || this;

    _this.onItemHover = function (e) {
      var key = e.key,
          hover = e.hover;
      updateActiveKey(_this.props.store, getEventKey(_this.props.eventKey), hover ? key : null);
    };

    _this.renderMenuItem = function (child, index, subMenuKey) {
      if (! /*#__PURE__*/(0, _react.isValidElement)(child)) {
        return child;
      }

      var _this$props = _this.props,
          prefixCls = _this$props.prefixCls,
          store = _this$props.store,
          eventKey = _this$props.eventKey,
          mode = _this$props.mode,
          level = _this$props.level,
          inlineIndent = _this$props.inlineIndent,
          parentMenu = _this$props.parentMenu,
          multiple = _this$props.multiple,
          onClick = _this$props.onClick,
          motion = _this$props.motion,
          subMenuOpenDelay = _this$props.subMenuOpenDelay,
          subMenuCloseDelay = _this$props.subMenuCloseDelay,
          forceSubMenuRender = _this$props.forceSubMenuRender,
          onOpenChange = _this$props.onOpenChange,
          onDeselect = _this$props.onDeselect,
          onSelect = _this$props.onSelect,
          builtinPlacements = _this$props.builtinPlacements,
          triggerSubMenuAction = _this$props.triggerSubMenuAction;
      var state = store.getState();
      var key = (0, _util.getKeyFromChildrenIndex)(child, eventKey, index);
      var childProps = child.props;
      var active = key === state.activeKey;
      var newChildProps = {
        mode: childProps.mode || mode,
        level: level,
        inlineIndent: inlineIndent,
        renderMenuItem: _this.renderMenuItem,
        prefixCls: prefixCls,
        index: index,
        parentMenu: parentMenu,
        eventKey: key,
        active: !childProps.disabled && active,
        multiple: multiple,
        onClick: function (_onClick) {
          function onClick(_x) {
            return _onClick.apply(this, arguments);
          }

          onClick.toString = function () {
            return _onClick.toString();
          };

          return onClick;
        }(function (e) {
          if (typeof childProps.onClick === 'function') {
            childProps.onClick(e);
          }

          onClick(e);
        }),
        onItemHover: _this.onItemHover,
        motion: motion,
        subMenuOpenDelay: subMenuOpenDelay,
        subMenuCloseDelay: subMenuCloseDelay,
        forceSubMenuRender: forceSubMenuRender,
        onOpenChange: onOpenChange,
        onDeselect: onDeselect,
        onSelect: onSelect,
        builtinPlacements: builtinPlacements,
        openKeys: state.openKeys,
        selectedKeys: state.selectedKeys,
        triggerSubMenuAction: triggerSubMenuAction,
        subMenuKey: subMenuKey
      };
      return /*#__PURE__*/_react["default"].cloneElement(child, newChildProps);
    };

    props.store.setState({
      activeKey: (0, _extends4["default"])({}, props.store.getState().activeKey, (_extends3 = {}, _extends3[props.eventKey] = getActiveKey(props, props.activeKey), _extends3))
    });
    return _this;
  }

  var _proto = SubPopupMenu.prototype;

  _proto.componentDidMount = function componentDidMount() {
    // invoke customized ref to expose component to mixin
    if (this.props.manualRef) {
      this.props.manualRef(this);
    }
  };

  _proto.shouldComponentUpdate = function shouldComponentUpdate(nextProps) {
    return this.props.visible || nextProps.visible || this.props.className !== nextProps.className || !(0, _shallowequal["default"])(this.props.style, nextProps.style);
  };

  _proto.componentDidUpdate = function componentDidUpdate(prevProps) {
    var _this$props2 = this.props,
        store = _this$props2.store,
        activeKeyProp = _this$props2.activeKey,
        eventKey = _this$props2.eventKey;
    var originalActiveKey = 'activeKey' in this.props ? activeKeyProp : store.getState().activeKey[getEventKey(eventKey)];
    var activeKey = getActiveKey(this.props, originalActiveKey);

    if (activeKey !== originalActiveKey) {
      updateActiveKey(store, getEventKey(eventKey), activeKey);
    } else if ('activeKey' in prevProps) {
      // If prev activeKey is not same as current activeKey,
      // we should set it.
      var prevActiveKey = getActiveKey(prevProps, prevProps.activeKey);

      if (activeKey !== prevActiveKey) {
        updateActiveKey(store, getEventKey(eventKey), activeKey);
      }
    }
  };

  _proto.render = function render() {
    var _this2 = this;

    var _this$props3 = this.props,
        role = _this$props3.role,
        prefixCls = _this$props3.prefixCls,
        className = _this$props3.className,
        mode = _this$props3.mode,
        children = _this$props3.children,
        eventKey = _this$props3.eventKey;
    return /*#__PURE__*/_react["default"].createElement("ul", {
      role: role || 'menu',
      className: (0, _commonTools.classnames)(prefixCls, className, prefixCls + "-" + mode)
    }, _react["default"].Children.map(children, function (child, index) {
      return _this2.renderMenuItem(child, index, getEventKey(eventKey));
    }));
  };

  return SubPopupMenu;
}(_react["default"].Component);

exports.SubPopupMenu = SubPopupMenu;
SubPopupMenu.defaultProps = {
  prefixCls: 'one-menu',
  className: '',
  mode: 'vertical',
  level: 1,
  inlineIndent: 24,
  visible: true,
  focusable: true,
  manualRef: function manualRef() {}
};
var connected = (0, _miniStore.connect)()(SubPopupMenu);
var _default = connected;
exports["default"] = _default;