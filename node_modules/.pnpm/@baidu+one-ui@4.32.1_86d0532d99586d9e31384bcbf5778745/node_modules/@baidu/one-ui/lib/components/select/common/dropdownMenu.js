"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

exports.__esModule = true;
exports["default"] = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _assertThisInitialized2 = _interopRequireDefault(require("@babel/runtime/helpers/assertThisInitialized"));

var _inheritsLoose2 = _interopRequireDefault(require("@babel/runtime/helpers/inheritsLoose"));

var _react = _interopRequireWildcard(require("react"));

var _reactDom = require("react-dom");

var _toArray = _interopRequireDefault(require("rc-util/lib/Children/toArray"));

var _rcMenu = _interopRequireDefault(require("rc-menu"));

var _domScrollIntoView = _interopRequireDefault(require("dom-scroll-into-view"));

var _raf = _interopRequireDefault(require("raf"));

var _selectTools = require("../../../core/selectTools");

;

var DropdownMenu = /*#__PURE__*/function (_Component) {
  (0, _inheritsLoose2["default"])(DropdownMenu, _Component);

  function DropdownMenu(props) {
    var _this;

    _this = _Component.call(this, props) || this;
    _this.lastInputValue = void 0;
    _this.saveMenuRef = void 0;
    _this.menuRef = void 0;
    _this.saveManualRef = void 0;
    _this.manualRef = void 0;
    _this.firstActiveItem = void 0;
    _this.rafInstance = void 0;
    _this.lastVisible = void 0;

    _this.scrollActiveItemToView = function () {
      // scroll into view
      var itemComponent = (0, _reactDom.findDOMNode)(_this.firstActiveItem);
      var _this$props = _this.props,
          value = _this$props.value,
          visible = _this$props.visible,
          firstActiveValue = _this$props.firstActiveValue;

      if (!itemComponent || !visible) {
        return;
      }

      var scrollIntoViewOpts = {
        onlyScrollIfNeeded: true,
        alignWithTop: false
      };

      if ((!value || value.length === 0) && firstActiveValue) {
        scrollIntoViewOpts.alignWithTop = true;
      } // Delay to scroll since current frame item position is not ready when pre view is by filter


      _this.rafInstance = (0, _raf["default"])(function () {
        (0, _domScrollIntoView["default"])(itemComponent, (0, _reactDom.findDOMNode)(_this.menuRef), scrollIntoViewOpts);
      });
    };

    _this.lastInputValue = props.inputValue;
    _this.saveMenuRef = (0, _selectTools.saveRef)((0, _assertThisInitialized2["default"])(_this), 'menuRef');
    _this.saveManualRef = (0, _selectTools.saveRef)((0, _assertThisInitialized2["default"])(_this), 'manualRef');
    return _this;
  }

  var _proto = DropdownMenu.prototype;

  _proto.componentDidMount = function componentDidMount() {
    this.scrollActiveItemToView();
    this.lastVisible = this.props.visible;
  };

  _proto.shouldComponentUpdate = function shouldComponentUpdate(nextProps) {
    if (!nextProps.visible) {
      this.lastVisible = false;
    } // freeze when hide


    return nextProps.visible || nextProps.inputValue !== this.props.inputValue;
  };

  _proto.componentDidUpdate = function componentDidUpdate(prevProps) {
    var props = this.props;

    if (!prevProps.visible && props.visible) {
      this.scrollActiveItemToView();
    }

    this.lastVisible = props.visible;
    this.lastInputValue = props.inputValue;
  };

  _proto.componentWillUnmount = function componentWillUnmount() {
    if (this.rafInstance && this.rafInstance.cancel) {
      this.rafInstance.cancel();
    }
  };

  _proto.renderMenu = function renderMenu() {
    var _this2 = this;

    var props = this.props;
    var menuItems = props.menuItems,
        menuItemSelectedIcon = props.menuItemSelectedIcon,
        defaultActiveFirstOption = props.defaultActiveFirstOption,
        value = props.value,
        prefixCls = props.prefixCls,
        multiple = props.multiple,
        onMenuSelect = props.onMenuSelect,
        onMenuDeselect = props.onMenuDeselect,
        inputValue = props.inputValue,
        firstActiveValue = props.firstActiveValue,
        backfillValue = props.backfillValue;

    if (menuItems && menuItems.length) {
      var menuProps;

      if (multiple) {
        menuProps = {
          onDeselect: onMenuDeselect,
          onSelect: onMenuSelect
        };
      } else {
        menuProps = {
          onClick: onMenuSelect
        };
      }

      var selectedKeys = (0, _selectTools.getSelectKeys)(menuItems, value);
      var clonedMenuItems = menuItems;

      if (selectedKeys.length || firstActiveValue) {
        if (props.visible && !this.lastVisible) {
          menuProps.activeKey = selectedKeys[0] || firstActiveValue;
        }

        var foundFirst = false; // set firstActiveItem via cloning menus
        // for scroll into view

        var clone = function clone(item) {
          if (!foundFirst && selectedKeys.indexOf(item.key) !== -1 || !foundFirst && !selectedKeys.length && firstActiveValue.indexOf(item.key) !== -1) {
            foundFirst = true;
            return /*#__PURE__*/(0, _react.cloneElement)(item, {
              ref: function ref(_ref) {
                _this2.firstActiveItem = _ref;
              }
            });
          }

          return item;
        };

        clonedMenuItems = menuItems.map(function (item) {
          if (item.type.isMenuItemGroup) {
            var children = (0, _toArray["default"])(item.props.children).map(clone);
            return /*#__PURE__*/(0, _react.cloneElement)(item, {}, children);
          }

          return clone(item);
        });
      } else {
        // Clear firstActiveItem when dropdown menu items was empty
        // Avoid `Unable to find node on an unmounted component`
        this.firstActiveItem = null;
      } // clear activeKey when inputValue change


      var lastValue = value && value[value.length - 1];

      if (inputValue !== this.lastInputValue && (!lastValue || lastValue !== backfillValue)) {
        menuProps.activeKey = '';
      }

      return /*#__PURE__*/_react["default"].createElement(_rcMenu["default"], (0, _extends2["default"])({
        ref: this.saveMenuRef,
        manualRef: this.saveManualRef,
        style: this.props.dropdownMenuStyle,
        defaultActiveFirst: defaultActiveFirstOption // @ts-ignore
        ,
        role: "listbox",
        itemIcon: multiple ? menuItemSelectedIcon : null,
        multiple: multiple
      }, menuProps, {
        selectedKeys: selectedKeys,
        prefixCls: prefixCls + "-menu"
      }), clonedMenuItems);
    }

    return null;
  };

  _proto.render = function render() {
    var renderMenu = this.renderMenu();
    var _this$props2 = this.props,
        prefixCls = _this$props2.prefixCls,
        footer = _this$props2.footer;
    return renderMenu ? /*#__PURE__*/_react["default"].createElement("div", {
      className: prefixCls + "-menu-container",
      onFocus: this.props.onPopupFocus,
      onMouseDown: _selectTools.preventDefaultEvent,
      onScroll: this.props.onPopupScroll
    }, renderMenu, footer ? /*#__PURE__*/_react["default"].createElement("div", {
      className: prefixCls + "-menu-footer"
    }, footer) : null) : null;
  };

  return DropdownMenu;
}(_react.Component);

exports["default"] = DropdownMenu;
module.exports = exports.default;