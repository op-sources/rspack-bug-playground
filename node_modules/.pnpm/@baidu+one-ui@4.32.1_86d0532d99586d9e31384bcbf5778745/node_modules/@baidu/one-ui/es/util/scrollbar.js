// See https://github.com/ecomfe/veui/blob/d20/packages/veui/src/managers/modal.js
import { getScrollbarWidth } from './dom';
export var LockManager = /*#__PURE__*/function () {
  function LockManager() {
    this.originalPaddingRight = '';
    this.originalOverflowY = '';
    this.unlockCallbacks = [];
    this.locked = false;
  }

  var _proto = LockManager.prototype;

  _proto.lock = function lock() {
    if (this.locked) {
      return;
    }

    this.locked = true; // See https://www.w3.org/TR/CSS22/visufx.html#propdef-overflow

    var _document = document,
        html = _document.documentElement,
        body = _document.body;
    var htmlOverflowY = getComputedStyle(html).overflowY;

    if (htmlOverflowY === 'visible') {
      // overflow of <body> is propagated to the viewport
      // check <body> & lock <html>
      this.onUnlock(lockScroll(body, html));
    } else if (htmlOverflowY === 'hidden') {
      // potential scroll will happen inside <body>
      // check <body> & lock <body>
      this.onUnlock(lockScroll(body));
    } else {
      // overflow of <html> is propagated to the viewport
      // check both & lock both, order matters because changes made on body will
      // impact scrollHeight for html
      this.onUnlock(lockScroll(html));
      this.onUnlock(lockScroll(body));
    }
  };

  _proto.onUnlock = function onUnlock(fn) {
    this.unlockCallbacks.push(fn);
  };

  _proto.unlock = function unlock() {
    if (!this.locked) {
      return;
    }

    this.locked = false;
    this.unlockCallbacks.forEach(function (fn) {
      return fn();
    });
    this.unlockCallbacks = [];
  };

  return LockManager;
}();
/**
 * Lock scroll based on trigger and target element.
 * The trigger element and the target element can be different due to the special
 * behavior for `overflow` on <html> and <body>.
 * We need to set trigger element's `overflow-y` to `hidden` and add an extra `padding-right`
 * for the width of the scrollbar.
 *
 * @param {HTMLElement} trigger the element whose overflow value may trigger scroll
 * @param {HTMLElement} target the element where scrollbar appears
 */

function lockScroll(trigger, target) {
  if (target === void 0) {
    target = trigger;
  }

  var _target = target,
      scrollHeight = _target.scrollHeight,
      clientHeight = _target.clientHeight;

  if (scrollHeight <= clientHeight) {
    return function () {};
  }

  var triggerStyle = trigger.getAttribute('style') || '';

  var _getComputedStyle = getComputedStyle(trigger),
      overflowY = _getComputedStyle.overflowY;

  var isRoot = target === document.documentElement;

  if (overflowY !== 'hidden' && (isRoot || overflowY !== 'visible')) {
    var targetStyle = target.getAttribute('style') || '';
    var scrollbarWidth = getScrollbarWidth();

    var _getComputedStyle2 = getComputedStyle(target),
        paddingRight = _getComputedStyle2.paddingRight;

    var newPaddingRight = parseInt(paddingRight, 10) + scrollbarWidth + "px";
    target.setAttribute('style', targetStyle + ";padding-right:" + newPaddingRight + ";overflow-y:hidden");
    return function () {
      trigger.setAttribute('style', triggerStyle);
      target.setAttribute('style', targetStyle);
    };
  }

  return function () {};
}

export var lockManager = new LockManager();