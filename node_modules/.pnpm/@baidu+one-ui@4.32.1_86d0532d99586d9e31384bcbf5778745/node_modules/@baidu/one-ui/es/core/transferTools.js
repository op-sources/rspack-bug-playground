export var getCandidateNumber = function getCandidateNumber(allDataMap, candidateList) {
  if (candidateList === void 0) {
    candidateList = [];
  }

  if (!candidateList.length) {
    return [];
  }

  var newCandidateList = [];

  var conductDown = function conductDown(key) {
    if (allDataMap[key] && allDataMap[key].children && allDataMap[key].children.length > 0) {
      allDataMap[key].children.forEach(function (keyId) {
        conductDown(keyId);
      });
    } else {
      newCandidateList.push("" + key);
    }
  };

  candidateList.map(function (key) {
    conductDown(key);
  });
  return newCandidateList;
};
export var getParentExpandedKeys = function getParentExpandedKeys(checkedKeys, entities) {
  var parentKeys = [].concat(checkedKeys);

  var conductUp = function conductUp(key) {
    if (entities[key] && entities[key].parent && entities[key].parent.key != null && parentKeys.indexOf(entities[key].parent.key) < 0) {
      parentKeys.push(entities[key].parent.key);
      conductUp(entities[key].parent.key);
    }
  };

  checkedKeys.forEach(function (key) {
    conductUp(key);
  });
  return parentKeys;
};
export var formatParentRelationMap = function formatParentRelationMap(allDataMap) {
  if (allDataMap === void 0) {
    allDataMap = {};
  }

  var entities = {};
  Object.keys(allDataMap).forEach(function (key) {
    if (allDataMap[key] && allDataMap[key].children) {
      allDataMap[key].children.forEach(function (child) {
        entities[child] = String(allDataMap[key].key);
      });
    }
  });
  return entities;
};
export var formatSelectedList = function formatSelectedList(list, parentRelationMap, allDataMap) {
  var entities = {};
  var topLevel = [];

  var conductUp = function conductUp(key) {
    var parentKey = parentRelationMap[key];

    if (parentKey == null) {
      if (!topLevel.includes(key)) {
        topLevel.push(key);
      }

      return;
    }

    if (!entities[parentKey]) {
      entities[parentKey] = {};
      entities[parentKey].children = [key];
    } else if (entities[parentKey].children.indexOf(key) === -1) {
      entities[parentKey].children.push(key);
    }

    if (parentRelationMap[parentKey]) {
      conductUp(parentKey);
    } else if (topLevel.indexOf(parentKey) === -1) {
      topLevel.push(parentKey);
    }
  };

  var mergeChildren = function mergeChildren(key) {
    var _allDataMap$key;

    var keys = (_allDataMap$key = allDataMap[key]) == null ? void 0 : _allDataMap$key.children;

    if (keys && keys.length) {
      entities[key] = {
        children: keys.map(function (key) {
          return String(key);
        })
      };
      keys.forEach(function (key) {
        return mergeChildren(key);
      });
    }
  };

  list.forEach(function (key) {
    conductUp(key);
    mergeChildren(key);
  });
  return {
    entities: entities,
    topLevel: topLevel
  };
};
export var getCheckedKeyIsDisabled = function getCheckedKeyIsDisabled(key, keyEntities, allDataMap) {
  if (allDataMap[key] && allDataMap[key].disabled) {
    return true;
  }

  var entity = keyEntities[key];

  if (!entity) {
    return false;
  }

  var disabled = false;

  var conductUp = function conductUp(key) {
    var entity = keyEntities[key];

    if (!entity) {
      return false;
    }

    if (allDataMap[key] && allDataMap[key].disabled) {
      disabled = true;
      return;
    }

    var parent = entity.parent;

    if (parent && parent.key != null && disabled === false) {
      conductUp(parent.key);
    }
  };

  var parent = entity.parent;

  if (parent && parent.key != null) {
    conductUp(parent.key);
  }

  return disabled;
};
export var getCheckedKeyIsDisabledByParentRelationMap = function getCheckedKeyIsDisabledByParentRelationMap(key, parentRelationMap, allDataMap) {
  if (allDataMap[key] && allDataMap[key].disabled) {
    return true;
  }

  var disabled = false;

  var conductUp = function conductUp(key) {
    var parentKey = parentRelationMap[key];

    if (allDataMap[key] && allDataMap[key].disabled) {
      disabled = true;
      return;
    }

    if (parentKey != null && disabled === false) {
      conductUp(parentKey);
    }
  };

  var parentKey = parentRelationMap[key];

  if (parentKey == null) {
    return false;
  }

  conductUp(parentKey);
  return disabled;
};