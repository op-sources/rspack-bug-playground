import React, { useContext } from 'react';
import PropTypes from 'prop-types';
import { connect } from 'mini-store';
import Context from './context';

function ColGroup(props) {
  var _useContext = useContext(Context),
      table = _useContext.table;

  var _props$allColumnsWidt = props.allColumnsWidth,
      allColumnsWidth = _props$allColumnsWidt === void 0 ? [] : _props$allColumnsWidt;
  var cols = [];
  var leafColumns;
  leafColumns = table.columnManager.leafColumns();
  cols = cols.concat(leafColumns.map(function (c) {
    var curColumn = allColumnsWidth.filter(function (column) {
      return (c.key || c.dataIndex) === column.key;
    })[0];
    var style = {};

    if (curColumn && curColumn.width) {
      style.width = curColumn.width;
    }

    if (curColumn && curColumn.minWidth) {
      style.minWidth = curColumn.minWidth;
    }

    if (curColumn && curColumn.maxWidth) {
      style.maxWidth = curColumn.maxWidth;
    }

    return /*#__PURE__*/React.createElement("col", {
      key: c.key || c.dataIndex,
      style: style
    });
  }));
  return /*#__PURE__*/React.createElement("colgroup", null, cols);
}

ColGroup.propTypes = {
  fixed: PropTypes.string
};
export default connect(function (state) {
  return {
    allColumnsWidth: state.allColumnsWidth
  };
})(ColGroup);