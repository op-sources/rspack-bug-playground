import { CSSProperties, PureComponent, ReactElement, ReactNode, WheelEvent } from 'react';
import { TabPaneProps, TabsProps } from '../interface';
interface ScrollBarProps {
    content: ReactElement<TabPaneProps>[];
    prefixCls: string;
    showAdd: boolean;
    type: string;
    sortable: boolean;
    onSort: (fromIndex: number, toIndex: number) => void;
    onAdd(e: any): any;
    activeKey: string;
    onNextClick(e: any): any;
    onPrevClick(e: any): any;
    showAddDisabled: boolean;
    addButtonText: ReactNode;
    extra: ReactNode;
    style: CSSProperties;
    size: TabsProps['size'];
}
export default class ScrollBar extends PureComponent<ScrollBarProps> {
    static defaultProps: {
        onNextClick(): void;
        onPrevClick(): void;
    };
    state: {
        canScrollForward: boolean;
        canScrollBackward: boolean;
    };
    offset: number;
    debouncedResize: any;
    resizeObserver: any;
    navBar: any;
    navWrapper: any;
    activeTab: any;
    navContainer: any;
    navTabsContainer: any;
    navBarScroll: any;
    componentDidMount(): void;
    componentDidUpdate: (prevProps: any) => void;
    componentWillUnmount: () => void;
    isScrollable: () => boolean;
    updateScrollState: (offset?: number) => void;
    setOffset: (offset: any, smooth?: boolean) => void;
    handleOnScroll: () => void;
    getRef: (name: any, ref: any) => void;
    renderPrevIcon: () => JSX.Element;
    renderNextIcon: () => JSX.Element;
    scrollToActiveTab: (e?: any) => void;
    prev: (e: any) => void;
    next: (e: any) => void;
    handleWheelScroll: (e: WheelEvent) => void;
    handleMove: (e: any) => boolean;
    handleOnSort: (options: any, fromIndex: any, toIndex: any) => void;
    render(): JSX.Element;
    renderTab: (item: any) => any;
    renderExtra(extra: any, prefixCls: any): JSX.Element;
}
export {};
