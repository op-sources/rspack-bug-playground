import _extends from "@babel/runtime/helpers/extends";
import _objectWithoutPropertiesLoose from "@babel/runtime/helpers/objectWithoutPropertiesLoose";
import _inheritsLoose from "@babel/runtime/helpers/inheritsLoose";

var _dec, _class, _class2, _temp;

import React, { PureComponent } from 'react';
import omit from 'omit.js';
import { IconTimes } from 'dls-icons-react';
import { classnames } from '../../core/commonTools';
import { withConfigConsumer } from '../providerConfig/context';
;
var Tag = (_dec = withConfigConsumer('tag'), _dec(_class = (_temp = _class2 = /*#__PURE__*/function (_PureComponent) {
  _inheritsLoose(Tag, _PureComponent);

  function Tag(props) {
    var _this;

    _this = _PureComponent.call(this, props) || this;

    _this.close = function (e) {
      var _this$props = _this.props,
          onClose = _this$props.onClose,
          disabled = _this$props.disabled,
          noClosed = _this$props.noClosed;

      if (disabled) {
        return;
      }

      if (onClose) {
        onClose(e);
      }

      if (e.defaultPrevented) {
        return;
      }

      if (!noClosed) {
        _this.setState({
          closed: true
        });
      }
    };

    _this.isPresetColor = function (color) {
      if (!color) {
        return false;
      }

      return /^(pink|red|yellow|orange|cyan|green|blue|purple)(-inverse)?$/.test(color);
    };

    _this.onClickTag = function () {
      var checked = !_this.state.checked;
      var _this$props2 = _this.props,
          onChange = _this$props2.onChange,
          disabled = _this$props2.disabled;

      if (disabled) {
        return;
      }

      if (!('checked' in _this.props)) {
        _this.setState({
          checked: checked
        });
      }

      onChange(checked);
    };

    _this.state = {
      closed: false,
      checked: props.checked
    };
    return _this;
  }

  var _proto = Tag.prototype;

  _proto.render = function render() {
    var _classnames;

    var _this$props3 = this.props,
        prefixCls = _this$props3.prefixCls,
        closable = _this$props3.closable,
        className = _this$props3.className,
        children = _this$props3.children,
        style = _this$props3.style,
        color = _this$props3.color,
        size = _this$props3.size,
        disabled = _this$props3.disabled,
        checkable = _this$props3.checkable,
        tipTag = _this$props3.tipTag,
        bordered = _this$props3.bordered,
        otherProps = _objectWithoutPropertiesLoose(_this$props3, ["prefixCls", "closable", "className", "children", "style", "color", "size", "disabled", "checkable", "tipTag", "bordered"]);

    var checked = checkable && this.state.checked;
    var closeIcon = closable ? /*#__PURE__*/React.createElement(IconTimes, {
      className: prefixCls + "-close-icon",
      onClick: this.close
    }) : '';
    var isPresetColor = this.isPresetColor(color);
    var classString = classnames(prefixCls, className, prefixCls + "-" + size, (_classnames = {}, _classnames[prefixCls + "-" + color] = isPresetColor, _classnames[prefixCls + "-has-color"] = color && !isPresetColor, _classnames[prefixCls + "-can-closable"] = closable, _classnames[prefixCls + "-inverse"] = checked, _classnames[prefixCls + "-" + color + "-inverse"] = checked && isPresetColor, _classnames[prefixCls + "-checkable"] = checkable, _classnames[prefixCls + "-disabled"] = disabled, _classnames[prefixCls + "-" + tipTag] = !!tipTag, _classnames[prefixCls + "-no-bordered"] = !bordered, _classnames));
    var divProps = omit(otherProps, ['checked', 'onChange', 'onClose', 'noClosed']);

    if (checkable) {
      divProps.onClick = this.onClickTag;
    }

    var tagStyle = _extends({
      backgroundColor: color && !isPresetColor ? color : null
    }, style);

    var tag = this.state.closed ? null : /*#__PURE__*/React.createElement("div", _extends({
      "data-show": !this.state.closed
    }, divProps, {
      className: classString,
      style: tagStyle
    }), /*#__PURE__*/React.createElement("span", {
      className: prefixCls + "-text"
    }, children), closeIcon);
    return tag;
  };

  return Tag;
}(PureComponent), _class2.defaultProps = {
  prefixCls: 'one-tag',
  closable: false,
  size: 'medium',
  disabled: false,
  checkable: false,
  onChange: function onChange() {},
  bordered: true,
  noClosed: false
}, _class2.Group = void 0, _class2.EditableGroup = void 0, _class2.getDerivedStateFromProps = function (nextProps, prevState) {
  if ('checked' in nextProps && nextProps.checked !== prevState.checked) {
    return {
      checked: nextProps.checked
    };
  }

  return null;
}, _temp)) || _class);
export default Tag;