import _extends from "@babel/runtime/helpers/extends";
import React from 'react';
import ReactDOM from 'react-dom';
import { IconCheckCircle, IconExclamationCircle, IconInfoCircle, IconTimesCircle } from 'dls-icons-react';
import Dialog from './dialog';
import ActionButton from './actionButton';
import { classnames } from '../../core/commonTools';
export default function confirm(config) {
  var _classnames2;

  var _config$prefixCls = config.prefixCls,
      prefixCls = _config$prefixCls === void 0 ? 'one-dialog-confirm' : _config$prefixCls,
      _config$buttonPositio = config.buttonPosition,
      buttonPosition = _config$buttonPositio === void 0 ? 'left' : _config$buttonPositio,
      _config$okCancel = config.okCancel,
      okCancel = _config$okCancel === void 0 ? true : _config$okCancel,
      content = config.content,
      okType = config.okType,
      onOk = config.onOk,
      _config$okProps = config.okProps,
      okProps = _config$okProps === void 0 ? {} : _config$okProps,
      _config$cancelProps = config.cancelProps,
      cancelProps = _config$cancelProps === void 0 ? {} : _config$cancelProps,
      onCancel = config.onCancel,
      _config$size = config.size,
      size = _config$size === void 0 ? 'medium' : _config$size,
      okText = config.okText,
      cancelType = config.cancelType,
      cancelText = config.cancelText,
      type = config.type,
      _config$className = config.className,
      className = _config$className === void 0 ? '' : _config$className,
      _config$title = config.title,
      title = _config$title === void 0 ? '提示' : _config$title,
      _config$buttonSize = config.buttonSize,
      buttonSize = _config$buttonSize === void 0 ? 'medium' : _config$buttonSize,
      _config$width = config.width,
      width = _config$width === void 0 ? 'small' : _config$width,
      okOrder = config.okOrder,
      cancelOrder = config.cancelOrder,
      icon = config.icon,
      iconType = config.iconType,
      _config$needCloseIcon = config.needCloseIcon,
      needCloseIcon = _config$needCloseIcon === void 0 ? false : _config$needCloseIcon;
  var maskClosable = config.maskClosable;
  var div = document.createElement('div');
  document.body.appendChild(div); // 默认为 false，保持旧版默认行为

  maskClosable = maskClosable === undefined ? false : maskClosable;

  var close = function close(params) {
    if (params === void 0) {
      params = {};
    }

    var unmountResult = ReactDOM.unmountComponentAtNode(div);

    if (unmountResult && div.parentNode) {
      div.parentNode.removeChild(div);
    }

    var triggerCancel = params.triggerCancel;

    if (onCancel && triggerCancel) {
      onCancel();
    }
  };

  var body = /*#__PURE__*/React.createElement("div", {
    className: prefixCls + "-body"
  }, /*#__PURE__*/React.createElement("div", {
    className: prefixCls + "-content"
  }, content));
  var footer = null;

  var okButtonProps = _extends({
    type: okType,
    actionFn: onOk,
    closeModal: close,
    autoFocus: true,
    order: okOrder,
    size: buttonSize,
    triggerCancel: false
  }, okProps);

  if (config.footer) {
    footer = config.footer;
  } else if (okCancel) {
    footer = [/*#__PURE__*/React.createElement(ActionButton, _extends({
      key: "confirm"
    }, okButtonProps), okText), /*#__PURE__*/React.createElement(ActionButton, _extends({
      key: "cancel",
      type: cancelType,
      closeModal: close,
      order: cancelOrder || null,
      size: buttonSize
    }, cancelProps), cancelText)];

    if (buttonPosition === 'right') {
      footer = [footer[1], footer[0]];
    }
  } else {
    footer = [/*#__PURE__*/React.createElement(ActionButton, _extends({
      key: "confirm"
    }, okButtonProps), okText)];
  }

  var $title = title;
  var $icon = null;

  if (icon) {
    $icon = icon;
  } else if (iconType) {
    switch (iconType) {
      case 'success':
        $icon = /*#__PURE__*/React.createElement(IconCheckCircle, null);
        break;

      case 'warning':
        $icon = /*#__PURE__*/React.createElement(IconExclamationCircle, null);
        break;

      case 'info':
        $icon = /*#__PURE__*/React.createElement(IconInfoCircle, null);
        break;

      case 'fail':
        $icon = /*#__PURE__*/React.createElement(IconTimesCircle, null);
        break;

      default:
        break;
    }
  }

  if ($icon) {
    var _classnames;

    $title = /*#__PURE__*/React.createElement("div", {
      className: prefixCls + "-title-icon"
    }, /*#__PURE__*/React.createElement("span", {
      className: classnames(prefixCls + "-title-icon-container", (_classnames = {}, _classnames[prefixCls + "-title-icon-" + iconType] = !!iconType, _classnames[prefixCls + "-title-icon-custom"] = !!icon, _classnames))
    }, $icon), $title);
  }

  var classString = classnames(prefixCls, (_classnames2 = {}, _classnames2[prefixCls + "-" + type] = true, _classnames2[prefixCls + "-has-icon"] = !!$icon, _classnames2[prefixCls + "-order-reverse"] = cancelOrder && okOrder && cancelOrder < okOrder, _classnames2), className);
  ReactDOM.render( /*#__PURE__*/React.createElement(Dialog, _extends({}, config, {
    className: classString,
    onCancel: close,
    visible: true,
    title: $title,
    maskClosable: maskClosable,
    size: size,
    footer: footer,
    width: width,
    buttonPosition: buttonPosition,
    needCloseIcon: needCloseIcon
  }), /*#__PURE__*/React.createElement("div", null, body)), div);
  return {
    destroy: close
  };
}