import _inheritsLoose from "@babel/runtime/helpers/inheritsLoose";

/**
 * @file 导航组件-动效滑动条
 * @date 2021-12-29
 */
import React, { PureComponent } from 'react';
import { classnames } from '../../core/commonTools';
;

var Ink = /*#__PURE__*/function (_PureComponent) {
  _inheritsLoose(Ink, _PureComponent);

  function Ink(props) {
    var _this;

    _this = _PureComponent.call(this, props) || this;
    _this.innerRef = void 0;

    _this.setInkStyle = function () {
      var _this$innerRef;

      var _this$props = _this.props,
          hoverIndex = _this$props.hoverIndex,
          itemTextRefMap = _this$props.itemTextRefMap;
      var textDom = itemTextRefMap == null ? void 0 : itemTextRefMap[hoverIndex]; // 计算新的位置

      var left = (textDom == null ? void 0 : textDom.offsetLeft) + ((textDom == null ? void 0 : textDom.offsetWidth) - ((_this$innerRef = _this.innerRef) == null ? void 0 : _this$innerRef.offsetWidth)) / 2;
      return {
        left: left || 0
      };
    };

    _this.getInnerRef = function (ref) {
      _this.innerRef = ref;
    };

    _this.state = {
      prevProps: props,
      animateLeft: false,
      animateWidth: false
    };
    return _this;
  }

  Ink.getDerivedStateFromProps = function getDerivedStateFromProps(nextProps, prevState) {
    var isHover = nextProps.hoverIndex || nextProps.hoverIndex === 0; // 鼠标移入

    if (isHover) {
      var _prevState$prevProps, _prevState$prevProps2, _prevState$prevProps3;

      // 原来没有hover，现在鼠标hover了
      if ((prevState == null ? void 0 : (_prevState$prevProps = prevState.prevProps) == null ? void 0 : _prevState$prevProps.hoverIndex) == null) {
        return {
          animateLeft: false,
          animateWidth: true,
          prevProps: nextProps
        };
      } // 原来hover到item1，现在移动到item2
      else if (prevState != null && (_prevState$prevProps2 = prevState.prevProps) != null && _prevState$prevProps2.hoverIndex || (prevState == null ? void 0 : (_prevState$prevProps3 = prevState.prevProps) == null ? void 0 : _prevState$prevProps3.hoverIndex) === 0) {
        return {
          animateLeft: true,
          animateWidth: false,
          prevProps: nextProps
        };
      }
    } // 鼠标移出


    return {
      animateWidth: false,
      animateLeft: false,
      prevProps: nextProps
    };
  };

  var _proto = Ink.prototype;

  _proto.render = function render() {
    var _classnames;

    var prefixCls = this.props.prefixCls;
    var _this$state = this.state,
        animateLeft = _this$state.animateLeft,
        animateWidth = _this$state.animateWidth;
    var inkClass = classnames(prefixCls + "-ink", (_classnames = {}, _classnames[prefixCls + "-ink-animate-left"] = animateLeft, _classnames[prefixCls + "-ink-animate-width"] = animateWidth, _classnames));
    var style = this.setInkStyle();
    return /*#__PURE__*/React.createElement("div", {
      className: inkClass,
      style: style
    }, /*#__PURE__*/React.createElement("div", {
      className: prefixCls + "-ink-inner",
      ref: this.getInnerRef
    }));
  };

  return Ink;
}(PureComponent);

export default Ink;