import _extends from "@babel/runtime/helpers/extends";
import _inheritsLoose from "@babel/runtime/helpers/inheritsLoose";
import _isEqual from "lodash/isEqual";
import _cloneDeepWith from "lodash/cloneDeepWith";
import _last from "lodash/last";

var _dec, _class, _class2, _temp;

import React, { cloneElement, isValidElement, PureComponent } from 'react';
import RcTrigger from 'rc-trigger';
import Trigger from './trigger';
import CascaderPane from '../cascaderPane';
import { Tree } from '../../data/tree';
import shallowEqual from 'shallowequal';
import warning from 'warning';
import { classnames } from '../../core/commonTools';
import { withConfigConsumer } from '../providerConfig/context';
var BUILT_IN_PLACEMENTS = {
  bottomLeft: {
    points: ['tl', 'bl'],
    offset: [0, 4],
    overflow: {
      adjustX: 1,
      adjustY: 1
    }
  },
  topLeft: {
    points: ['bl', 'tl'],
    offset: [0, -4],
    overflow: {
      adjustX: 1,
      adjustY: 1
    }
  },
  bottomRight: {
    points: ['tr', 'br'],
    offset: [0, 4],
    overflow: {
      adjustX: 1,
      adjustY: 1
    }
  },
  topRight: {
    points: ['br', 'tr'],
    offset: [0, -4],
    overflow: {
      adjustX: 1,
      adjustY: 1
    }
  }
};
;
var Cascader = (_dec = withConfigConsumer('cascader'), _dec(_class = (_temp = _class2 = /*#__PURE__*/function (_PureComponent) {
  _inheritsLoose(Cascader, _PureComponent);

  function Cascader(props) {
    var _this;

    _this = _PureComponent.call(this, props) || this;
    _this.rcTrigger = void 0;

    _this.toggleExpanded = function (expanded) {
      if (!('popupVisible' in _this.props)) {
        _this.setState({
          expanded: expanded
        });
      }

      _this.setState({
        query: ''
      });

      var onPopupVisibleChange = _this.props.onPopupVisibleChange;

      if (onPopupVisibleChange) {
        onPopupVisibleChange(expanded);
      }
    };

    _this.handleCheckboxChange = function (value) {
      var tree = _this.state.tree;

      if (!('value' in _this.props)) {
        var _this$props = _this.props,
            options = _this$props.options,
            fieldNames = _this$props.fieldNames;
        tree = new Tree(options, value, fieldNames);

        _this.setState({
          value: value,
          tree: tree,
          resultOptions: tree.getNormalizedOptions(value)
        });
      }

      var onChange = _this.props.onChange;

      if (onChange) {
        onChange(value, tree.getOptions(value));
      }
    };

    _this.handleOnHover = function (option, columnIndex, value) {
      var tree = _this.state.tree;
      option = tree.getNormalizedOption(_last(value), value);

      if (!option) {
        return;
      }

      _this.loadData(option, value);
    };

    _this.handleOnSelect = function (option, columnIndex, value) {
      var _this$props2 = _this.props,
          multiple = _this$props2.multiple,
          changeOnSelect = _this$props2.changeOnSelect,
          onChange = _this$props2.onChange;
      var tree = _this.state.tree;
      option = tree.getNormalizedOption(_last(value), value);

      if (!option) {
        return;
      }

      _this.loadData(option, value);

      if (multiple) {
        return;
      }

      _this.setState({
        query: ''
      });

      var existChildren = option.children && option.children.length > 0 || option.isLeaf === false;
      var change = !multiple && (changeOnSelect || !existChildren);

      if (change && !('value' in _this.props)) {
        _this.setState({
          value: value,
          resultOptions: tree.getNormalizedOptions(value, true)
        });
      }

      if (change && onChange) {
        onChange(value, tree.getPathOptions(value));
      }

      if (!multiple && !existChildren) {
        _this.toggleExpanded(false);
      }
    };

    _this.handleOnSearch = function (query) {
      _this.setState({
        query: query
      });
    };

    _this.handleOnRemove = function (key) {
      var _this$state = _this.state,
          tree = _this$state.tree,
          value = _this$state.value;

      _this.handleCheckboxChange(tree.toggleChecked(key, value));
    };

    _this.handleOnRemoveAll = function () {
      _this.handleCheckboxChange([]);

      _this.setState({
        query: ''
      });
    };

    warning(!('width' in props), 'The `width` prop of `Cascader` is deprecated, use `className` or `style` instead');
    _this.state = {
      value: props.defaultValue || [],
      options: [],
      optionsClone: [],
      query: ''
    };
    return _this;
  }

  var _proto = Cascader.prototype;

  _proto.prefix = function prefix(key) {
    return this.props.prefixCls + "-" + key;
  };

  _proto.componentDidUpdate = function componentDidUpdate() {
    if (this.rcTrigger) {
      this.rcTrigger.forcePopupAlign();
    }
  };

  _proto.render = function render() {
    var _this2 = this;

    var _this$props3 = this.props,
        prefixCls = _this$props3.prefixCls,
        className = _this$props3.className,
        style = _this$props3.style,
        width = _this$props3.width,
        disabled = _this$props3.disabled,
        size = _this$props3.size,
        fieldNames = _this$props3.fieldNames,
        onChange = _this$props3.onChange,
        changeOnSelect = _this$props3.changeOnSelect,
        multiple = _this$props3.multiple,
        firstColumnGroup = _this$props3.firstColumnGroup,
        inputIsControlled = _this$props3.inputIsControlled,
        placeholder = _this$props3.placeholder,
        allowClear = _this$props3.allowClear,
        showSearch = _this$props3.showSearch,
        onInputChange = _this$props3.onInputChange,
        inputPrefixCls = _this$props3.inputPrefixCls,
        displayRender = _this$props3.displayRender,
        displayParent = _this$props3.displayParent,
        popupClassName = _this$props3.popupClassName,
        popupPlacement = _this$props3.popupPlacement,
        getPopupContainer = _this$props3.getPopupContainer,
        loadOnSelect = _this$props3.loadOnSelect,
        showCheckAll = _this$props3.showCheckAll,
        expandTrigger = _this$props3.expandTrigger,
        notFoundContent = _this$props3.notFoundContent,
        renderOption = _this$props3.renderOption,
        columnHeader = _this$props3.columnHeader,
        columnFooter = _this$props3.columnFooter,
        header = _this$props3.header,
        footer = _this$props3.footer,
        before = _this$props3.before,
        popupWidthStretch = _this$props3.popupWidthStretch,
        children = _this$props3.children;
    var _this$state2 = this.state,
        expanded = _this$state2.expanded,
        _this$state2$resultOp = _this$state2.resultOptions,
        resultOptions = _this$state2$resultOp === void 0 ? [] : _this$state2$resultOp,
        _this$state2$value = _this$state2.value,
        value = _this$state2$value === void 0 ? [] : _this$state2$value,
        query = _this$state2.query,
        options = _this$state2.options;
    var triggerPorps = {
      placeholder: placeholder,
      allowClear: allowClear,
      showSearch: !!showSearch,
      onInputChange: onInputChange,
      inputPrefixCls: inputPrefixCls,
      displayRender: displayRender,
      displayParent: displayParent,
      size: size,
      width: width,
      style: style,
      className: className,
      prefixCls: prefixCls,
      options: resultOptions,
      expanded: expanded,
      children: children,
      disabled: disabled,
      multiple: multiple,
      query: query,
      before: before,
      onRemove: this.handleOnRemove,
      onRemoveAll: this.handleOnRemoveAll,
      onSearch: this.handleOnSearch
    };
    var cascaderPaneProps = {
      fieldNames: fieldNames,
      options: options,
      showCheckAll: showCheckAll,
      expandTrigger: expandTrigger,
      emptyNode: notFoundContent,
      emptyType: 'option',
      columnHeader: columnHeader,
      columnFooter: columnFooter,
      header: header,
      footer: footer,
      changeOnSelect: changeOnSelect,
      size: size,
      showCheckbox: multiple,
      showSearch: false,
      searchValue: query,
      searchConfig: typeof showSearch === 'boolean' ? undefined : showSearch,
      paneWidth: width,
      firstColumnGroup: firstColumnGroup,
      visible: expanded,
      useDefaultFilter: !inputIsControlled,
      onSelect: this.handleOnSelect,
      onHover: this.handleOnHover,
      onClickSearchItem: this.handleOnSelect,
      onCheckboxChange: this.handleCheckboxChange,
      renderOption: renderOption
    };

    if (multiple) {
      cascaderPaneProps.checkedKeys = value;
    } else {
      cascaderPaneProps.value = value;
    }

    var rcTriggerProps = {
      prefixCls: prefixCls + "-menus",
      popupClassName: classnames(prefixCls + "-menus-" + size, popupClassName),
      popupPlacement: popupPlacement,
      builtinPlacements: BUILT_IN_PLACEMENTS,
      getPopupContainer: getPopupContainer,
      popupTransitionName: 'one-transition-slide-down',
      popupVisible: expanded,
      action: disabled ? undefined : ['click'],
      onPopupVisibleChange: this.toggleExpanded,
      popupAlign: {
        ignoreShake: true
      },
      popup: /*#__PURE__*/React.createElement(CascaderPane, cascaderPaneProps),
      stretch: popupWidthStretch === 'min-width' ? 'minWidth' : popupWidthStretch
    };
    return /*#__PURE__*/React.createElement(RcTrigger, _extends({}, rcTriggerProps, {
      ref: function ref(_ref) {
        return _this2.rcTrigger = _ref;
      }
    }), /*#__PURE__*/React.createElement(Trigger, triggerPorps));
  };

  _proto.loadData = function loadData(option, value) {
    var tree = this.state.tree;
    var _this$props4 = this.props,
        loadOnSelect = _this$props4.loadOnSelect,
        loadData = _this$props4.loadData;

    if (option.isLeaf === false && (!option.children || loadOnSelect) && loadData) {
      loadData(tree.getPathOptions(value)); // 支持之前mutable操作

      this.setState({
        loadData: true
      });
    }
  };

  return Cascader;
}(PureComponent), _class2.defaultProps = {
  prefixCls: 'one-cascader',
  inputPrefixCls: 'one-input',
  placeholder: '请选择',
  popupPlacement: 'bottomLeft',
  options: [],
  disabled: false,
  allowClear: true,
  notFoundContent: '未找到合适的选项',
  style: {},
  size: 'medium',
  inputIsControlled: false,
  onInputChange: function onInputChange() {},
  multiple: false,
  showCheckAll: false,
  displayParent: true
}, _class2.getDerivedStateFromProps = function (props, state) {
  var newState = {};
  var needBuildTree = false;
  var value = state.value;

  if ('value' in props && !shallowEqual(props.value || [], state.value)) {
    value = props.value || [];
    newState.value = value;
    needBuildTree = true;
  }

  if (!_isEqual(props.options, state.optionsClone)) {
    newState.optionsClone = _cloneDeepWith(props.options, function (value) {
      return /*#__PURE__*/isValidElement(value) ? /*#__PURE__*/cloneElement(value) : undefined;
    });
    newState.options = props.options;
    needBuildTree = true;
  }

  if ('popupVisible' in props) {
    newState.expanded = props.popupVisible;
  }

  if (state.loadData) {
    newState.loadData = false;
    needBuildTree = true;
  }

  if (needBuildTree) {
    var checkedKeys = props.multiple ? value : [];
    var tree = new Tree(newState.options || state.options, checkedKeys, props.fieldNames);

    if (props.multiple) {
      newState.resultOptions = tree.getNormalizedOptions(tree.getCheckedKeys());
    } else {
      newState.resultOptions = tree.getNormalizedOptions(value, true);
    }

    newState.tree = tree;
  }

  return newState;
}, _temp)) || _class);
export default Cascader;