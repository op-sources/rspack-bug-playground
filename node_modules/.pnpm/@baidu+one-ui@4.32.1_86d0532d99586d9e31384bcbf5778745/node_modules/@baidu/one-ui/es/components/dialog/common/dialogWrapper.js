import _extends from "@babel/runtime/helpers/extends";
import _inheritsLoose from "@babel/runtime/helpers/inheritsLoose";
import React, { Component } from 'react';
import Portal from 'rc-util/lib/Portal';
import Dialog from './dialog';

var DialogWrap = /*#__PURE__*/function (_Component) {
  _inheritsLoose(DialogWrap, _Component);

  function DialogWrap() {
    var _this;

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _Component.call.apply(_Component, [this].concat(args)) || this;
    _this._component = null;

    _this.renderComponent = function () {};

    _this.removeContainer = function () {};

    _this.saveDialog = function (node) {
      _this._component = node;
    };

    _this.getComponent = function (extra) {
      if (extra === void 0) {
        extra = {};
      }

      return /*#__PURE__*/React.createElement(Dialog, _extends({
        ref: _this.saveDialog
      }, _this.props, extra, {
        key: "dialog"
      }));
    };

    _this.getContainer = function () {
      var container = document.createElement('div');

      if (_this.props.getContainer) {
        _this.props.getContainer().appendChild(container);
      } else {
        document.body.appendChild(container);
      }

      return container;
    };

    return _this;
  }

  var _proto = DialogWrap.prototype;

  _proto.shouldComponentUpdate = function shouldComponentUpdate(_ref) {
    var visible = _ref.visible,
        forceRender = _ref.forceRender;
    return !!(this.props.visible || visible) || this.props.forceRender || forceRender;
  };

  _proto.render = function render() {
    var _this$props = this.props,
        visible = _this$props.visible,
        forceRender = _this$props.forceRender;
    var portal = null;

    if (visible || forceRender || this._component) {
      portal = /*#__PURE__*/React.createElement(Portal, {
        getContainer: this.getContainer
      }, this.getComponent());
    }

    return portal;
  };

  return DialogWrap;
}(Component);

DialogWrap.defaultProps = {
  visible: false,
  forceRender: false
};
export default DialogWrap;