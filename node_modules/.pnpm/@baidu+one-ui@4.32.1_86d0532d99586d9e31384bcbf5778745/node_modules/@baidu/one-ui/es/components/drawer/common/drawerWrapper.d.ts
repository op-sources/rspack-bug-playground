import * as React from 'react';
import { DrawerProps } from '../interface';
export interface DrawerWrapperProps extends Omit<DrawerProps, 'zIndex' | 'visible' | 'mask' | 'destroyOnClose' | 'closable' | 'title' | 'cancelProps' | 'okProps' | 'okText' | 'cancelText' | 'onOk' | 'onCancel' | 'hideDefaultFooter' | 'footer' | 'type'> {
    open: boolean;
    defaultOpen: boolean;
    onHandleClick?(event: any): any;
    wrapperClassName: any;
    forceRender: any;
    handler: any;
    level: any;
    afterVisibleChange: any;
    onClose: any;
    showMask: boolean;
    ease: any;
    duration: any;
}
interface DrawerWrapperState {
    open?: boolean;
    prevProps?: DrawerWrapperProps;
}
declare class DrawerWrapper extends React.Component<DrawerWrapperProps, DrawerWrapperState> {
    static defaultProps: {
        prefixCls: string;
        placement: string;
        getContainer: () => HTMLElement;
        defaultOpen: boolean;
        level: string;
        duration: string;
        ease: string;
        onChange: () => void;
        afterVisibleChange: () => void;
        handler: JSX.Element;
        showMask: boolean;
        maskClosable: boolean;
        maskStyle: {};
        wrapperClassName: string;
        className: string;
        keyboard: boolean;
        forceRender: boolean;
    };
    constructor(props: any);
    dom: any;
    static getDerivedStateFromProps: (props: any, { prevProps }: {
        prevProps: any;
    }) => DrawerWrapperState;
    onHandleClick: (e: any) => void;
    onClose: (e: any) => void;
    render(): JSX.Element;
}
export default DrawerWrapper;
