import _extends from "@babel/runtime/helpers/extends";
import _inheritsLoose from "@babel/runtime/helpers/inheritsLoose";
import _isEqual from "lodash/isEqual";
import React, { Component } from 'react';
import { findDOMNode } from 'react-dom';
import shallowequal from 'shallowequal';
import { IconFilterSolid } from 'dls-icons-react';
import { classnames } from '../../../core/commonTools';
import Dropdown from '../../dropdown';
import Checkbox from '../../checkbox';
import Button from '../../button';
import Menu from '../../menu';
var SubMenu = Menu.SubMenu;
var MenuItem = Menu.Item;

var FilterDropdownMenuWrapper = function FilterDropdownMenuWrapper(props) {
  return /*#__PURE__*/React.createElement("div", {
    className: props.className,
    onClick: props.onClick
  }, props.children);
};

var isSelected = function isSelected(keys) {
  if (Array.isArray(keys)) {
    return keys.length > 0;
  }

  return keys != null;
};

var FilterMenu = /*#__PURE__*/function (_Component) {
  _inheritsLoose(FilterMenu, _Component);

  function FilterMenu(props) {
    var _this;

    _this = _Component.call(this, props) || this;
    _this.watchScroll = void 0;

    _this.onVisibleChange = function (visible) {
      var _this$props = _this.props,
          filterWithoutConfirm = _this$props.filterWithoutConfirm,
          selectedKeys = _this$props.selectedKeys;

      _this.setVisible(visible);

      if (!visible) {
        if (filterWithoutConfirm) {
          // 不带确认按钮的话执行筛选
          _this.confirmFilter();
        } else {
          // 带确认按钮
          _this.setState({
            selectedKeys: selectedKeys
          });
        }
      }
    };

    _this.setSelectedKeys = function (_ref) {
      var selectedKeys = _ref.selectedKeys;
      var _this$props2 = _this.props,
          filterWithoutConfirm = _this$props2.filterWithoutConfirm,
          columnKey = _this$props2.columnKey;

      _this.setState({
        selectedKeys: selectedKeys
      });

      if (filterWithoutConfirm) {
        _this.props.confirmFilter(columnKey, selectedKeys);
      }
    };

    _this.handleConfirm = function () {
      _this.setVisible(false);

      _this.confirmFilter();
    };

    _this.handleCancel = function () {
      _this.setVisible(false);

      _this.setState({
        selectedKeys: _this.props.selectedKeys
      });
    };

    _this.handleClear = function () {
      _this.setState({
        selectedKeys: []
      });

      _this.props.confirmFilter(_this.props.columnKey, []);
    };

    _this.handleMenuItemClick = function (info) {
      if (info.keyPath.length <= 1) {
        return;
      }

      var updater = function updater(state) {
        var keyPathOfSelectedItem = _extends({}, state.keyPathOfSelectedItem);

        if (state.selectedKeys.indexOf(info.key) >= 0) {
          // deselect SubMenu child
          delete keyPathOfSelectedItem[info.key];
        } else {
          // select SubMenu child
          keyPathOfSelectedItem[info.key] = info.keyPath;
        }

        return {
          keyPathOfSelectedItem: keyPathOfSelectedItem
        };
      };

      _this.setState(updater);
    };

    _this.renderFilterIcon = function () {
      var _classnames, _classnames2;

      var _this$props3 = _this.props,
          filterIcon = _this$props3.filterIcon,
          filterTitleText = _this$props3.filterTitleText,
          prefixCls = _this$props3.prefixCls,
          size = _this$props3.size;
      var dropdownSelectedClass = isSelected(_this.props.selectedKeys) ? prefixCls + "-selected" : prefixCls + "-normal";
      return filterIcon ? /*#__PURE__*/React.cloneElement(filterIcon, {
        title: filterTitleText,
        className: classnames(filterIcon.props.className, (_classnames = {}, _classnames[prefixCls + "-icon"] = true, _classnames[prefixCls + "-filter-icon-normal"] = true, _classnames[prefixCls + "-filter-icon-selected"] = isSelected(_this.state.selectedKeys), _classnames))
      }) : /*#__PURE__*/React.createElement(Button, {
        type: "text",
        size: size,
        className: classnames((_classnames2 = {}, _classnames2[prefixCls + "-icon"] = true, _classnames2[prefixCls + "-icon-visible"] = _this.state.visible, _classnames2))
      }, /*#__PURE__*/React.createElement(IconFilterSolid, {
        title: filterTitleText,
        className: dropdownSelectedClass
      }));
    };

    _this.handleScroll = function () {
      _this.setVisible(false);
    };

    var _visible = 'filterDropdownVisible' in props ? props.filterDropdownVisible : false;

    _this.state = {
      selectedKeys: props.selectedKeys,
      keyPathOfSelectedItem: {},
      // 记录所有有选中子菜单的祖先菜单
      visible: _visible
    };
    return _this;
  }

  var _proto = FilterMenu.prototype;

  _proto.setVisible = function setVisible(visible) {
    var onFilterDropdownVisibleChange = this.props.onFilterDropdownVisibleChange;

    if (!('filterDropdownVisible' in this.props)) {
      this.setState({
        visible: visible
      });
    }

    if (onFilterDropdownVisibleChange) {
      onFilterDropdownVisibleChange(visible);
    }
  };

  _proto.confirmFilter = function confirmFilter() {
    if (this.state.selectedKeys !== this.props.selectedKeys) {
      this.props.confirmFilter(this.props.columnKey, this.state.selectedKeys);
    }
  };

  _proto.hasSubMenu = function hasSubMenu() {
    var _this$props$filters = this.props.filters,
        filters = _this$props$filters === void 0 ? [] : _this$props$filters;
    return filters.some(function (item) {
      return !!(item.children && item.children.length > 0);
    });
  };

  _proto.renderMenus = function renderMenus(items) {
    var _this2 = this;

    return items.map(function (item) {
      if (item.children && item.children.length > 0) {
        var keyPathOfSelectedItem = _this2.state.keyPathOfSelectedItem;
        var containSelected = Object.keys(keyPathOfSelectedItem).some(function (key) {
          return keyPathOfSelectedItem[key].indexOf(item.value) >= 0;
        });
        var subMenuCls = containSelected ? _this2.props.dropdownPrefixCls + "-submenu-contain-selected" : '';
        return /*#__PURE__*/React.createElement(SubMenu, {
          title: item.text,
          className: subMenuCls,
          key: item.value.toString()
        }, _this2.renderMenus(item.children));
      }

      return _this2.renderMenuItem(item);
    });
  };

  _proto.renderMenuItem = function renderMenuItem(item) {
    var filterMultiple = this.props.filterMultiple;
    var multiple = filterMultiple;
    var input = multiple ? /*#__PURE__*/React.createElement(Checkbox, {
      checked: this.state.selectedKeys.indexOf(item.value.toString()) >= 0
    }) : null;
    return /*#__PURE__*/React.createElement(MenuItem, {
      key: item.value
    }, input, /*#__PURE__*/React.createElement("span", null, item.text));
  };

  _proto.shouldComponentUpdate = function shouldComponentUpdate(nextProps, nextState) {
    return !shallowequal(this.props, nextProps, function (a, b, key) {
      if (key === 'selectedKeys' || key === 'defaultFilteredValue' || key === 'filteredValue') {
        return shallowequal(a, b);
      } else if (key === 'filters') {
        return _isEqual(a, b);
      }
    }) || !shallowequal(this.state, nextState, function (a, b, key) {
      if (key === 'selectedKeys') {
        return shallowequal(a, b);
      }
    });
  };

  _proto.render = function render() {
    var _classnames3, _classnames4;

    var _this$props4 = this.props,
        filterDropdownProps = _this$props4.filterDropdownProps,
        filterMultiple = _this$props4.filterMultiple,
        filterWithoutConfirm = _this$props4.filterWithoutConfirm,
        filterDropdownTitle = _this$props4.filterDropdownTitle,
        filterDropdown = _this$props4.filterDropdown,
        filters = _this$props4.filters,
        filterConfirmText = _this$props4.filterConfirmText,
        filterClearText = _this$props4.filterClearText,
        prefixCls = _this$props4.prefixCls,
        dropdownPrefixCls = _this$props4.dropdownPrefixCls,
        getPopupContainer = _this$props4.getPopupContainer,
        size = _this$props4.size; // default multiple selection in filter dropdown

    var multiple = filterMultiple;
    var dropdownMenuClass = classnames((_classnames3 = {}, _classnames3[dropdownPrefixCls + "-menu-without-submenu"] = !this.hasSubMenu(), _classnames3));
    var menus = /*#__PURE__*/React.createElement(FilterDropdownMenuWrapper, {
      className: classnames((_classnames4 = {}, _classnames4[prefixCls + "-dropdown-with-confirm"] = !filterWithoutConfirm, _classnames4[prefixCls + "-dropdown-with-title"] = !!filterDropdownTitle, _classnames4))
    }, !!filterDropdownTitle && /*#__PURE__*/React.createElement("div", {
      className: prefixCls + "-dropdown-title"
    }, filterDropdownTitle), filterDropdown ? filterDropdown : /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Menu, {
      multiple: multiple,
      onClick: this.handleMenuItemClick,
      prefixCls: dropdownPrefixCls + "-menu",
      className: dropdownMenuClass,
      onSelect: this.setSelectedKeys,
      onDeselect: this.setSelectedKeys,
      selectedKeys: this.state.selectedKeys
    }, this.renderMenus(filters)), !filterWithoutConfirm ? /*#__PURE__*/React.createElement("div", {
      className: prefixCls + "-dropdown-btns"
    }, /*#__PURE__*/React.createElement(Button, {
      size: size,
      className: prefixCls + "-dropdown-link " + prefixCls + "-dropdown-link-confirm",
      onClick: this.handleConfirm,
      type: "text-strong"
    }, filterConfirmText), /*#__PURE__*/React.createElement(Button, {
      size: size,
      className: prefixCls + "-dropdown-link " + prefixCls + "-dropdown-link-clear",
      onClick: this.handleClear,
      type: "text"
    }, filterClearText)) : null));
    return /*#__PURE__*/React.createElement(Dropdown, _extends({
      trigger: ['click'],
      overlay: menus,
      visible: this.state.visible,
      onVisibleChange: this.onVisibleChange,
      getPopupContainer: getPopupContainer,
      overlayClassName: prefixCls + "-dropdown",
      transparent: false
    }, filterDropdownProps), this.renderFilterIcon());
  };

  _proto.componentDidUpdate = function componentDidUpdate() {
    var container = this.props.getScrollContainer();
    var visible = this.state.visible;

    if (container && visible && !this.watchScroll) {
      container.addEventListener('scroll', this.handleScroll);
      this.watchScroll = true;
    } else if (container && !visible && this.watchScroll) {
      container.removeEventListener('scroll', this.handleScroll);
      this.watchScroll = false;
    }

    var node = findDOMNode(this); // TODO: FIXME，当前结构，暂时这样实现

    if (this.state.visible) {
      node.parentElement.parentElement.classList.add(this.props.prefixCls + "-expanded");
    } else {
      node.parentElement.parentElement.classList.remove(this.props.prefixCls + "-expanded");
    }
  };

  return FilterMenu;
}(Component);

FilterMenu.defaultProps = {
  handleFilter: function handleFilter() {},
  filterMultiple: true,
  filterWithoutConfirm: false
};

FilterMenu.getDerivedStateFromProps = function (nextProps, prevState) {
  var newState = {
    selectedKeysProp: nextProps.selectedKeys
  };

  if ('selectedKeys' in nextProps && !shallowequal(prevState.selectedKeysProp, nextProps.selectedKeys)) {
    newState.selectedKeys = nextProps.selectedKeys;
  }

  if ('filterDropdownVisible' in nextProps && prevState.visible !== nextProps.filterDropdownVisible) {
    newState.visible = nextProps.filterDropdownVisible;
  }

  return newState;
};

export default FilterMenu;