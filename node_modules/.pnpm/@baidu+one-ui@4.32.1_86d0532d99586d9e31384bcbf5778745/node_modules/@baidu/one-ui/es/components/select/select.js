import _extends from "@babel/runtime/helpers/extends";
import _objectWithoutPropertiesLoose from "@babel/runtime/helpers/objectWithoutPropertiesLoose";
import _inheritsLoose from "@babel/runtime/helpers/inheritsLoose";

var _dec, _class, _class2, _temp;

import React, { PureComponent } from 'react';
import warning from 'warning';
import { classnames } from '../../core/commonTools';
import { IconChevronDown, IconTimesCircle, IconTimes } from 'dls-icons-react';
import OneSelect from './common/oneSelect';
import { withConfigConsumer } from '../providerConfig/context';
import { COMPONENT_MAIN } from '../config';

var isMultipleMode = function isMultipleMode(props) {
  return props.mode === 'multiple';
};

var isTagsMode = function isTagsMode(props) {
  return props.mode === 'tags';
};

;
var Select = (_dec = withConfigConsumer('select'), _dec(_class = (_temp = _class2 = /*#__PURE__*/function (_PureComponent) {
  _inheritsLoose(Select, _PureComponent);

  /**
   * @deprecated
   */

  /**
   * @deprecated
   */

  /**
   * @deprecated
   */

  /**
   * @deprecated
   */
  function Select(_props) {
    var _this;

    _this = _PureComponent.call(this, _props) || this;
    _this.state = {
      errorMessage: null
    };
    _this.rcSelect = void 0;

    _this.onChange = function (value, options) {
      var props = _this.props;
      var mode = props.mode,
          maxTagCount = props.maxTagCount;

      if (props.onChange) {
        props.onChange(value, options);
      }

      if (!('errorMessage' in _this.props)) {
        var isMultiple = mode === 'multiple';
        var valueLength = value && value.length;

        if (isMultiple) {
          var errorMessage = valueLength > maxTagCount ? "\u5DF2\u8D85\u8FC7\u6700\u5927\u53EF\u9009\u6570\u91CF" + (valueLength - maxTagCount) + "\u4E2A" : '';

          _this.setState({
            errorMessage: errorMessage
          });
        }
      }
    };

    _this.saveSelect = function (node) {
      _this.rcSelect = node;
    };

    var _this$props = _this.props,
        showSearch = _this$props.showSearch,
        _mode = _this$props.mode;
    warning(!(showSearch == null && _mode === 'multiple'), 'The `showSearch` prop of `Select` in `multiple mode` will default to `false` in future versions. ' + 'Please set the value of `showSearch` prop as soon as possible.');
    return _this;
  }

  var _proto = Select.prototype;

  _proto.focus = function focus() {
    this.rcSelect.focus();
  };

  _proto.blur = function blur() {
    this.rcSelect.blur();
  };

  _proto.getNormalizedShowSearch = function getNormalizedShowSearch(mode, showSearch) {
    // tags 与 combobox 模式强制开启搜索能力
    if (mode === 'tags' || mode === 'combobox') {
      return true;
    } // 由于4.0.15之前版本对于多选搜索不依赖showSearch属性，一直开启，但原默认属性值为false
    // 所以为了多选支持showSearch属性，未配置情况下默认开启搜索


    return showSearch == null ? mode === 'multiple' : showSearch;
  };

  _proto.render = function render() {
    var _classnames, _classnames2;

    var props = this.props;

    var prefixCls = props.prefixCls,
        className = props.className,
        mode = props.mode,
        onChange = props.onChange,
        width = props.width,
        style = props.style,
        multipleRenderTargetMode = props.multipleRenderTargetMode,
        dropdownClassName = props.dropdownClassName,
        customRenderTarget = props.customRenderTarget,
        defaultVisible = props.defaultVisible,
        visible = props.visible,
        open = props.open,
        suffixIcon = props.suffixIcon,
        checkboxPrefixCls = props.checkboxPrefixCls,
        showSearch = props.showSearch,
        restProps = _objectWithoutPropertiesLoose(props, ["prefixCls", "className", "mode", "onChange", "width", "style", "multipleRenderTargetMode", "dropdownClassName", "customRenderTarget", "defaultVisible", "visible", "open", "suffixIcon", "checkboxPrefixCls", "showSearch"]);

    var normalizedVisible = 'open' in props ? open : visible; // 由于4.0.15之前版本对于多选搜索不依赖showSearch属性，一直开启，但原默认属性值为false
    // 所以为了多选支持showSearch属性，未配置情况下默认开启搜索

    var normalizedShowSearch = this.getNormalizedShowSearch(mode, showSearch);
    var notFoundContent = props.notFoundContent,
        optionLabelProp = props.optionLabelProp;
    var errorMessage = this.state.errorMessage;
    var size = this.props.size;
    var selectCls = classnames(prefixCls + "-" + size, COMPONENT_MAIN, (_classnames = {}, _classnames[prefixCls + "-error-line"] = errorMessage, _classnames));
    var isMultiple = isMultipleMode(props);
    var isTags = isTagsMode(props);
    var isCombobox = mode === 'combobox';

    if (isCombobox) {
      notFoundContent = null; // children 带 dom 结构时，无法填入输入框

      optionLabelProp = 'value';
    }

    var modeConfig = {
      multiple: isMultiple,
      combobox: isCombobox,
      tags: isTags
    };

    var selectStyle = _extends({}, style);

    if (width) {
      selectStyle.width = width;
    }

    var dropdownCls = classnames(dropdownClassName, prefixCls + "-dropdown-" + size);

    if (!isMultiple && !isTags) {
      selectCls = classnames(selectCls, className);
      return /*#__PURE__*/React.createElement(OneSelect, _extends({}, restProps, modeConfig, {
        ref: this.saveSelect,
        prefixCls: prefixCls,
        className: selectCls,
        optionLabelProp: optionLabelProp,
        notFoundContent: notFoundContent,
        inputIcon: /*#__PURE__*/React.createElement(IconChevronDown, null),
        clearIcon: /*#__PURE__*/React.createElement(IconTimesCircle, null),
        removeIcon: /*#__PURE__*/React.createElement(IconTimes, null),
        onChange: onChange,
        style: selectStyle,
        customRenderTarget: customRenderTarget,
        dropdownClassName: dropdownCls,
        defaultOpen: defaultVisible,
        open: normalizedVisible,
        suffixIcon: suffixIcon,
        checkboxPrefixCls: checkboxPrefixCls,
        showSearch: normalizedShowSearch
      }));
    }

    var selectRootCls = classnames(prefixCls + "-container", className, (_classnames2 = {}, _classnames2[prefixCls + "-multiple"] = isMultiple, _classnames2));
    return /*#__PURE__*/React.createElement("div", {
      className: selectRootCls
    }, /*#__PURE__*/React.createElement(OneSelect, _extends({}, restProps, modeConfig, {
      prefixCls: prefixCls,
      className: selectCls,
      optionLabelProp: optionLabelProp,
      notFoundContent: notFoundContent,
      inputIcon: /*#__PURE__*/React.createElement(IconChevronDown, null),
      clearIcon: /*#__PURE__*/React.createElement(IconTimesCircle, null),
      removeIcon: /*#__PURE__*/React.createElement(IconTimes, null),
      onChange: this.onChange,
      style: selectStyle,
      dropdownClassName: dropdownCls,
      size: size,
      defaultOpen: defaultVisible,
      open: normalizedVisible,
      suffixIcon: suffixIcon,
      titleCallback: {
        type: multipleRenderTargetMode,
        selectorName: this.props.selectorName,
        customRenderTarget: multipleRenderTargetMode === 'custom' ? customRenderTarget : null
      },
      checkboxPrefixCls: checkboxPrefixCls,
      showSearch: normalizedShowSearch
    })), errorMessage ? /*#__PURE__*/React.createElement("div", {
      className: prefixCls + "-selection-text-error"
    }, errorMessage) : null);
  };

  return Select;
}(PureComponent), _class2.defaultProps = {
  prefixCls: 'one-select',
  className: '',
  size: 'medium',
  transitionName: 'one-transition-slide-down',
  choiceTransitionName: 'zoom',
  trigger: 'click',
  optionLabelProp: 'children',
  notFoundContent: '无匹配结果',
  multipleRenderTargetMode: 'list',
  suffixIcon: null,
  checkboxPrefixCls: 'one-checkbox',
  loading: false,
  loadingText: '加载中...',
  mode: 'default',
  placeholder: '请选择',
  showCheckAll: false,
  autoClearSearchValue: true
}, _class2.Option = void 0, _class2.OptGroup = void 0, _class2.SearchText = void 0, _class2.CheckboxText = void 0, _class2.SingleSelect = void 0, _class2.SelectPopOver = void 0, _class2.getDerivedStateFromProps = function (nextProps, prevState) {
  if ('errorMessage' in nextProps && nextProps.errorMessage !== prevState.errorMessage && isMultipleMode(nextProps)) {
    return {
      errorMessage: nextProps.errorMessage
    };
  }

  return null;
}, _temp)) || _class);
export default Select;