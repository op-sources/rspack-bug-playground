import _objectWithoutPropertiesLoose from "@babel/runtime/helpers/objectWithoutPropertiesLoose";
import _extends from "@babel/runtime/helpers/extends";

/**
 * @file 顶层context
 * @author huangshiming
 * @date 2020-04-28
 */
import React, { forwardRef } from 'react';
import classnames from 'classnames';
import { THEME_LIGHT_D22 } from '../config';
var context = /*#__PURE__*/React.createContext(undefined);
var lightThemeComponents = [// components
'select', 'dropdown', 'cascader', 'uploader', 'pagination', 'radio-group', 'checkbox-group', 'input', 'number-input', 'textarea', 'search-box', 'time-picker', 'date-picker', 'button', // containers
'popover', 'tooltip', 'overlay', 'drawer', 'row', 'tabs', 'layout', 'layout-header', 'layout-footer', 'layout-sidebar', 'layout-content'];
export var Consumer = context.Consumer;
export default context;
/**
 * 组件decorator，用于处理全局config
 *
 * @param suffixCls 组件className后缀
 */

export var withConfigConsumer = function withConfigConsumer(suffixCls) {
  return function (Component) {
    var ComponentWithConsumer = /*#__PURE__*/forwardRef(function (props, ref) {
      return /*#__PURE__*/React.createElement(Consumer, null, function (config) {
        if (!config) {
          return /*#__PURE__*/React.createElement(Component, _extends({
            ref: ref
          }, props));
        }

        var size = config.size,
            prefixCls = config.prefixCls,
            theme = config.theme,
            table = config.table;
        var normalizedConfig = suffixCls === 'table' && table && table.loadingOption ? {
          loadingOption: table.loadingOption
        } : {};

        if (size) {
          normalizedConfig.size = size;
        }

        if (prefixCls) {
          normalizedConfig.prefixCls = prefixCls + "-" + suffixCls;
        }

        if (theme) {
          normalizedConfig.theme = theme;
        }

        var className = props.className,
            restProps = _objectWithoutPropertiesLoose(props, ["className"]);

        if (theme && (theme !== THEME_LIGHT_D22 || lightThemeComponents.includes(suffixCls))) {
          var themeClassName = prefixCls + "-theme-" + theme;

          if (!className || className.indexOf(themeClassName) === -1) {
            className = classnames(className, themeClassName);
          }
        }

        if (className) {
          normalizedConfig.className = className;
        }

        var component = /*#__PURE__*/React.createElement(Component, _extends({
          ref: ref
        }, normalizedConfig, restProps));

        if (theme === THEME_LIGHT_D22 && !lightThemeComponents.includes(suffixCls)) {
          return /*#__PURE__*/React.createElement(context.Provider, {
            value: _extends({}, config, {
              theme: ''
            })
          }, component);
        }

        return component;
      });
    });
    ComponentWithConsumer.displayName = Component.displayName || Component.name;
    return ComponentWithConsumer;
  };
};