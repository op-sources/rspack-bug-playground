import _inheritsLoose from "@babel/runtime/helpers/inheritsLoose";
import React, { PureComponent } from 'react';
import moment from 'moment';
import { IconClock, IconTimesCircle } from 'dls-icons-react';
import { fomatStr, addZero } from '../../../core/timePickerTools';
import Input from '../../input';
import { classnames } from '../../../core/commonTools';
;

var TimeInput = /*#__PURE__*/function (_PureComponent) {
  _inheritsLoose(TimeInput, _PureComponent);

  function TimeInput(props) {
    var _this;

    _this = _PureComponent.call(this, props) || this;
    _this.refInput = void 0;
    _this.___stopBlur___ = void 0;

    _this.onEsc = function () {
      _this.props.onEsc();

      _this.refInput.focus();
    };

    _this.onInputChange = function (event) {
      var str = event.value;
      var preFn = event.preFn;
      str = fomatStr(str);

      _this.setState({
        str: str
      });

      var _this$props = _this.props,
          format = _this$props.format,
          hourOptions = _this$props.hourOptions,
          minuteOptions = _this$props.minuteOptions,
          secondOptions = _this$props.secondOptions,
          disabledHours = _this$props.disabledHours,
          disabledMinutes = _this$props.disabledMinutes,
          disabledSeconds = _this$props.disabledSeconds,
          onChange = _this$props.onChange,
          allowEmpty = _this$props.allowEmpty;

      if (str) {
        var originalValue = _this.props.value;

        var _value2 = _this.getProtoValue().clone();

        var parsed = moment(str, format, true);
        var newState = {
          invalid: true
        };
        var originalStr = originalValue && originalValue.format(_this.props.format) || '';

        if (!parsed.isValid()) {
          if (preFn === 'onBlur') {
            newState = {
              str: originalStr,
              invalid: false
            };
          }

          _this.setState(newState);

          return;
        }

        _value2.hour(parsed.hour()).minute(parsed.minute()).second(parsed.second()); // if time value not allowed, response warning.


        if (hourOptions.indexOf(_value2.hour()) < 0 || minuteOptions.indexOf(_value2.minute()) < 0 || secondOptions.indexOf(_value2.second()) < 0) {
          if (preFn === 'onBlur') {
            newState = {
              str: originalStr,
              invalid: false
            };
          }

          _this.setState(newState);

          return;
        } // if time value is disabled, response warning.


        var disabledHourOptions = disabledHours();
        var disabledMinuteOptions = disabledMinutes(_value2.hour());
        var disabledSecondOptions = disabledSeconds(_value2.hour(), _value2.minute());

        if (disabledHourOptions && disabledHourOptions.indexOf(_value2.hour()) >= 0 || disabledMinuteOptions && disabledMinuteOptions.indexOf(_value2.minute()) >= 0 || disabledSecondOptions && disabledSecondOptions.indexOf(_value2.second()) >= 0) {
          if (preFn === 'onBlur') {
            newState = {
              str: originalStr,
              invalid: false
            };
          }

          _this.setState(newState);

          return;
        }

        if (originalValue) {
          var changedValue = originalValue.clone();
          changedValue.hour(_value2.hour());
          changedValue.minute(_value2.minute());
          changedValue.second(_value2.second());
          onChange(changedValue);
        } else if (originalValue !== _value2) {
          onChange(_value2);
        }
      } else if (allowEmpty) {
        onChange(null);
      } else {
        _this.setState({
          invalid: true
        });

        return;
      }

      _this.setState({
        invalid: false
      });
    };

    _this.onKeyDown = function (e) {
      if (e.keyCode === 27) {
        _this.onEsc();
      } else if (e.keyCode === 13) {
        _this.onBlur();
      }

      _this.props.onKeyDown(e);
    };

    _this.onFocus = function () {
      _this.setState({
        isFocus: true
      });

      _this.props.onFocus();
    };

    _this.blurTimeout = void 0;

    _this.onBlur = function () {
      _this.blurTimeout = setTimeout(function () {
        if (_this.___stopBlur___) {
          _this.___stopBlur___ = false;
          return;
        }

        var _this$state = _this.state,
            str = _this$state.str,
            invalid = _this$state.invalid;

        if (str && invalid) {
          // 为了小于10的数补上0
          _this.onInputChange({
            value: addZero(str),
            preFn: 'onBlur'
          });
        }

        _this.setState({
          isFocus: false
        });
      }, 200);

      _this.props.onBlur();
    };

    _this.onClear = function (e) {
      _this.___stopBlur___ = true;

      _this.props.onClear(e);
    };

    _this.getProtoValue = function () {
      var _this$props2 = _this.props,
          value = _this$props2.value,
          defaultOpenValue = _this$props2.defaultOpenValue;
      return value || defaultOpenValue;
    };

    _this.renderClearButton = function () {
      var _this$state2 = _this.state,
          str = _this$state2.str,
          isFocus = _this$state2.isFocus;
      var _this$props3 = _this.props,
          prefixCls = _this$props3.prefixCls,
          allowEmpty = _this$props3.allowEmpty;

      if (!allowEmpty) {
        return null;
      }

      return isFocus && str ? /*#__PURE__*/React.createElement(IconTimesCircle, {
        onClick: _this.onClear,
        className: prefixCls + "-icon-close"
      }) : /*#__PURE__*/React.createElement(IconClock, {
        className: prefixCls + "-icon-clock"
      });
    };

    _this.renderInput = function () {
      var _this$props4 = _this.props,
          prefixCls = _this$props4.prefixCls,
          placeholder = _this$props4.placeholder,
          inputReadOnly = _this$props4.inputReadOnly,
          disabled = _this$props4.disabled,
          style = _this$props4.style,
          size = _this$props4.size,
          name = _this$props4.name,
          width = _this$props4.width;
      var _this$state3 = _this.state,
          invalid = _this$state3.invalid,
          str = _this$state3.str;
      var invalidClass = invalid ? prefixCls + "-input-invalid" : '';
      return /*#__PURE__*/React.createElement(Input, {
        style: style,
        className: prefixCls + "-input  " + invalidClass,
        ref: function ref(_ref) {
          _this.refInput = _ref;
        },
        onKeyDown: _this.onKeyDown,
        value: str,
        placeholder: placeholder,
        onChange: _this.onInputChange,
        readOnly: !!inputReadOnly,
        isRequired: false,
        onFocus: _this.onFocus,
        onBlur: _this.onBlur,
        disabled: disabled,
        name: name,
        size: size,
        width: width
      });
    };

    var _value = props.value,
        _format = props.format;
    _this.state = {
      str: _value && _value.format(_format) || '',
      invalid: false,
      isFocus: false,
      prevProps: props
    };
    return _this;
  }

  var _proto = TimeInput.prototype;

  _proto.componentWillUnmount = function componentWillUnmount() {
    clearTimeout(this.blurTimeout);
  };

  _proto.render = function render() {
    var _classnames;

    var _this$props5 = this.props,
        prefixCls = _this$props5.prefixCls,
        errorMessage = _this$props5.errorMessage;
    var wrapClass = classnames(prefixCls + "-input-wrap", (_classnames = {}, _classnames[prefixCls + "-input-wrap-error"] = errorMessage, _classnames));
    return /*#__PURE__*/React.createElement("div", {
      className: wrapClass
    }, this.renderInput(), this.renderClearButton());
  };

  return TimeInput;
}(PureComponent);

TimeInput.defaultProps = {
  inputReadOnly: false,
  style: {}
};

TimeInput.getDerivedStateFromProps = function (nextProps, prevState) {
  var value = nextProps.value,
      format = nextProps.format;
  var originValue = prevState.prevProps.value;
  var newState = {
    prevProps: nextProps
  };
  var currentStr = originValue && originValue.format(format) || '';
  var nextStr = value && value.format(format) || '';

  if (nextStr !== currentStr) {
    newState.str = nextStr;
    newState.invalid = false;
  }

  return newState;
};

export default TimeInput;