import _inheritsLoose from "@babel/runtime/helpers/inheritsLoose";
import React, { PureComponent } from 'react';
import { classnames } from '../../../core/commonTools';
import { IconChevronDown } from 'dls-icons-react';
import Checkbox from '../../checkbox';
import Dropdown from '../../dropdown';
import Menu from '../../menu';
;

var SelectionCheckboxAll = /*#__PURE__*/function (_PureComponent) {
  _inheritsLoose(SelectionCheckboxAll, _PureComponent);

  function SelectionCheckboxAll(props) {
    var _this;

    _this = _PureComponent.call(this, props) || this;
    _this.unsubscribe = void 0;

    _this.handleSelectAllChagne = function (e) {
      var checked = e.target.checked;

      _this.props.onSelect(checked ? 'all' : 'removeAll', 0, null);
    };

    _this.state = {
      checked: _this.getCheckState(props),
      indeterminate: _this.getIndeterminateState(props)
    };
    return _this;
  }

  var _proto = SelectionCheckboxAll.prototype;

  _proto.getSelections = function getSelections() {
    var _this$props = this.props,
        hideDefaultSelections = _this$props.hideDefaultSelections,
        selectAllText = _this$props.selectAllText,
        selectInvertText = _this$props.selectInvertText,
        selections = _this$props.selections;
    var defaultSelections = hideDefaultSelections ? [] : [{
      key: 'all',
      text: selectAllText,
      onSelect: function onSelect() {}
    }, {
      key: 'invert',
      text: selectInvertText,
      onSelect: function onSelect() {}
    }];
    return Array.isArray(selections) ? defaultSelections.concat(selections) : defaultSelections;
  };

  _proto.componentDidMount = function componentDidMount() {
    this.subscribe();
  };

  _proto.componentWillUnmount = function componentWillUnmount() {
    if (this.unsubscribe) {
      this.unsubscribe();
    }
  };

  _proto.getCheckState = function getCheckState(props) {
    var store = props.store,
        data = props.data;
    var checked;

    if (!data.length) {
      checked = false;
    } else {
      checked = store.getState().selectionDirty ? this.checkSelection(data, 'every', false) : this.checkSelection(data, 'every', false) || this.checkSelection(data, 'every', true);
    }

    return checked;
  };

  _proto.getIndeterminateState = function getIndeterminateState(props) {
    var store = props.store,
        data = props.data;
    var indeterminate;

    if (!data.length) {
      indeterminate = false;
    } else {
      indeterminate = store.getState().selectionDirty ? this.checkSelection(data, 'some', false) && !this.checkSelection(data, 'every', false) : this.checkSelection(data, 'some', false) && !this.checkSelection(data, 'every', false) || this.checkSelection(data, 'some', true) && !this.checkSelection(data, 'every', true);
    }

    return indeterminate;
  };

  _proto.setCheckState = function setCheckState(props) {
    var checked = this.getCheckState(props);
    var indeterminate = this.getIndeterminateState(props);

    if (checked !== this.state.checked) {
      this.setState({
        checked: checked
      });
    }

    if (indeterminate !== this.state.indeterminate) {
      this.setState({
        indeterminate: indeterminate
      });
    }
  };

  _proto.checkSelection = function checkSelection(data, type, byDefaultChecked) {
    var _this$props2 = this.props,
        store = _this$props2.store,
        getCheckboxPropsByItem = _this$props2.getCheckboxPropsByItem,
        getRecordKey = _this$props2.getRecordKey; // type should be 'every' | 'some'

    if (type === 'every' || type === 'some') {
      return byDefaultChecked ? data[type](function (item, i) {
        return getCheckboxPropsByItem(item, i).defaultChecked;
      }) : data[type](function (item, i) {
        return store.getState().selectedRowKeys.indexOf(getRecordKey(item, i)) >= 0;
      });
    }

    return false;
  };

  _proto.subscribe = function subscribe() {
    var _this2 = this;

    var store = this.props.store;
    this.unsubscribe = store.subscribe(function () {
      _this2.setCheckState(_this2.props);
    });
  };

  _proto.renderMenus = function renderMenus(selections) {
    var _this3 = this;

    return selections.map(function (selection, index) {
      return /*#__PURE__*/React.createElement(Menu.Item, {
        key: selection.key || index
      }, /*#__PURE__*/React.createElement("div", {
        onClick: function onClick() {
          _this3.props.onSelect(selection.key, index, selection.onSelect);
        }
      }, selection.text));
    });
  };

  _proto.render = function render() {
    var _classnames;

    var _this$props3 = this.props,
        disabled = _this$props3.disabled,
        prefixCls = _this$props3.prefixCls,
        selections = _this$props3.selections,
        getPopupContainer = _this$props3.getPopupContainer;
    var checked = this.getCheckState(this.props);
    var indeterminate = this.getIndeterminateState(this.props);
    var selectionPrefixCls = prefixCls + "-selection";
    var customSelections = null;

    if (selections) {
      var newSelections = this.getSelections();
      var menu = /*#__PURE__*/React.createElement(Menu, {
        className: selectionPrefixCls + "-menu",
        selectedKeys: []
      }, this.renderMenus(newSelections));
      customSelections = newSelections.length > 0 ? /*#__PURE__*/React.createElement(Dropdown, {
        overlay: menu,
        getPopupContainer: getPopupContainer,
        transparent: true
      }, /*#__PURE__*/React.createElement("div", {
        className: selectionPrefixCls + "-down"
      }, /*#__PURE__*/React.createElement(IconChevronDown, null))) : null;
    }

    return /*#__PURE__*/React.createElement("div", {
      className: selectionPrefixCls
    }, /*#__PURE__*/React.createElement(Checkbox, {
      className: classnames((_classnames = {}, _classnames[selectionPrefixCls + "-select-all-custom"] = customSelections, _classnames)),
      checked: checked,
      indeterminate: indeterminate,
      disabled: disabled,
      onChange: this.handleSelectAllChagne
    }), customSelections);
  };

  return SelectionCheckboxAll;
}(PureComponent);

export { SelectionCheckboxAll as default };