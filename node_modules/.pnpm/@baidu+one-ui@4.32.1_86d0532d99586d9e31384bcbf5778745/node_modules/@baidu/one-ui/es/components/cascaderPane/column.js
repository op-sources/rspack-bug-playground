import _extends from "@babel/runtime/helpers/extends";
import _inheritsLoose from "@babel/runtime/helpers/inheritsLoose";

/**
 * @file 菜单的列
 */
import React, { PureComponent } from 'react';
import { classnames } from '../../core/commonTools';
import Option from './option';

var Column = /*#__PURE__*/function (_PureComponent) {
  _inheritsLoose(Column, _PureComponent);

  function Column() {
    var _this;

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _PureComponent.call.apply(_PureComponent, [this].concat(args)) || this;
    _this.state = {
      expandedKeys: []
    };

    _this.renderGroup = function (option) {
      var key = option.key,
          expandType = option.expandType;
      return /*#__PURE__*/React.createElement(React.Fragment, null, _this.renderOption(option, true), (expandType !== 'toggle' || expandType === 'toggle' && _this.state.expandedKeys.includes(key)) && /*#__PURE__*/React.createElement("ul", {
        key: "g-" + key,
        className: _this.prefix('menu-item-group')
      }, _this.renderOptions(option.children)));
    };

    _this.handleOnHover = function (key, keyPath) {
      var _this$props = _this.props,
          onHover = _this$props.onHover,
          index = _this$props.index;
      onHover && onHover(key, keyPath, index);
    };

    _this.handleOnSelect = function (key, keyPath) {
      var _this$props2 = _this.props,
          onSelect = _this$props2.onSelect,
          index = _this$props2.index;
      var expandedKeys = _this.state.expandedKeys;

      if (expandedKeys.includes(key)) {
        _this.setState({
          expandedKeys: expandedKeys.filter(function (o) {
            return o !== key;
          })
        });
      } else {
        _this.setState({
          expandedKeys: expandedKeys.concat(key)
        });
      }

      onSelect && onSelect(key, keyPath, index);
    };

    return _this;
  }

  var _proto = Column.prototype;

  _proto.prefix = function prefix(name) {
    return this.props.prefixCls + "-" + name;
  };

  _proto.render = function render() {
    var _classnames;

    var _this$props3 = this.props,
        width = _this$props3.width,
        style = _this$props3.style,
        options = _this$props3.options,
        CustomItemRender = _this$props3.CustomItemRender,
        firstColumnGroup = _this$props3.firstColumnGroup;
    var className = classnames((_classnames = {}, _classnames[this.prefix('menu')] = true, _classnames[this.prefix('menu-fixed-width')] = width, _classnames));

    var colStyle = _extends({}, style);

    if (width) {
      colStyle.width = width;
    }

    var renderGroup = firstColumnGroup === true || firstColumnGroup && firstColumnGroup.length;
    return /*#__PURE__*/React.createElement("ul", {
      className: className,
      style: colStyle
    }, this.renderHeader(), CustomItemRender && this.renderCustomItem(CustomItemRender), renderGroup ? this.renderGroupOptions(options) : this.renderOptions(options), this.renderFooter());
  };

  _proto.renderGroupOptions = function renderGroupOptions(options) {
    var _this2 = this;

    var firstColumnGroup = this.props.firstColumnGroup;

    if (firstColumnGroup === false) {
      return null;
    }

    if (firstColumnGroup === true) {
      return options.map(this.renderGroup);
    }

    return firstColumnGroup.map(function (group) {
      return /*#__PURE__*/React.createElement("ul", {
        key: group.value,
        className: _this2.prefix('menu-item-group')
      }, /*#__PURE__*/React.createElement("div", {
        className: _this2.prefix('menu-item-group-title')
      }, group.label), (group.children || []).map(function (key) {
        return _this2.renderOptions(options.filter(function (opt) {
          return opt.key === key;
        }));
      }));
    });
  };

  _proto.renderOptions = function renderOptions(options) {
    var _this3 = this;

    if (!options || options.length === 0) {
      return null;
    }

    return options.map(function (option) {
      return _this3.renderOption(option);
    });
  };

  _proto.renderOption = function renderOption(option, group) {
    var _this$props4 = this.props,
        prefixCls = _this$props4.prefixCls,
        size = _this$props4.size,
        expandIcon = _this$props4.expandIcon,
        loadingIcon = _this$props4.loadingIcon,
        value = _this$props4.value,
        valuePath = _this$props4.valuePath,
        activeValuePath = _this$props4.activeValuePath,
        showCheckbox = _this$props4.showCheckbox,
        checkboxPrefixCls = _this$props4.checkboxPrefixCls,
        onCheck = _this$props4.onCheck,
        expandTrigger = _this$props4.expandTrigger,
        renderOption = _this$props4.renderOption,
        loadingMap = _this$props4.loadingMap;
    var key = option.key,
        keyPath = option.keyPath,
        checked = option.checked,
        indeterminate = option.indeterminate,
        loading = option.loading,
        selectable = option.selectable,
        expandType = option.expandType;

    if ((expandType === 'inline' || expandType === 'toggle') && !group) {
      return this.renderGroup(option);
    }

    var active = !group && selectable !== false && keyPath.every(function (key, index) {
      return activeValuePath[index] === key;
    });
    var selected = !group && key === value && selectable !== false && keyPath.every(function (key, index) {
      return valuePath[index] === key;
    });
    return /*#__PURE__*/React.createElement(Option, {
      key: key,
      size: size,
      active: active,
      selected: selected,
      checked: checked,
      indeterminate: indeterminate,
      loading: loading || loadingMap[key],
      option: option,
      prefixCls: prefixCls,
      expandIcon: expandIcon,
      expanded: expandType === 'toggle' && this.state.expandedKeys.includes(key),
      loadingIcon: loadingIcon,
      onSelect: this.handleOnSelect,
      onHover: this.handleOnHover,
      onCheck: onCheck,
      showCheckbox: showCheckbox,
      checkboxPrefixCls: checkboxPrefixCls,
      expandTrigger: expandTrigger,
      group: group,
      renderOption: renderOption
    });
  };

  Column.getDerivedStateFromProps = function getDerivedStateFromProps(nextProps, prevState) {
    if (prevState.expandedKeys.length === 0 && nextProps.activeValuePath.length > 0 && !prevState.inited) {
      return {
        expandedKeys: nextProps.activeValuePath,
        inited: true
      };
    }

    return null;
  };

  _proto.componentDidUpdate = function componentDidUpdate(prevProps) {
    if (this.state.expandedKeys.length === 0 && this.props.activeValuePath.length > 0 && prevProps.activeValuePath.length === 0) {
      this.setState({
        expandedKeys: this.props.activeValuePath
      });
    }
  };

  _proto.renderCustomItem = function renderCustomItem(CustomItemRender) {
    return /*#__PURE__*/React.createElement("li", {
      className: this.prefix('menu-item')
    }, CustomItemRender);
  };

  _proto.getParentOption = function getParentOption() {
    var _options$;

    var options = this.props.options;
    var parentOption = (_options$ = options[0]) == null ? void 0 : _options$.parent;
    return parentOption && !parentOption.root ? parentOption.item : undefined;
  };

  _proto.renderHeader = function renderHeader() {
    var _this$props5 = this.props,
        header = _this$props5.header,
        index = _this$props5.index;

    if (!header) {
      return null;
    }

    if (typeof header === 'function') {
      header = header(index, this.getParentOption());
    }

    if (header) {
      return /*#__PURE__*/React.createElement("li", {
        className: this.prefix('menu-header')
      }, header);
    }

    return null;
  };

  _proto.renderFooter = function renderFooter() {
    var _this$props6 = this.props,
        footer = _this$props6.footer,
        index = _this$props6.index;

    if (!footer) {
      return null;
    }

    if (typeof footer === 'function') {
      footer = footer(index, this.getParentOption());
    }

    if (footer) {
      return /*#__PURE__*/React.createElement("li", {
        className: this.prefix('menu-footer')
      }, footer);
    }

    return null;
  };

  return Column;
}(PureComponent);

export { Column as default };