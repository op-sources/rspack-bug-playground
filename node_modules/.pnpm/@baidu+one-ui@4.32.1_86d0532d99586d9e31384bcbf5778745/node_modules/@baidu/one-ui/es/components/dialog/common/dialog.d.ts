import React, { Component, CSSProperties } from 'react';
import { DialogProps } from '../interface';
export interface InnerDialogProps extends Omit<DialogProps, 'centered' | 'className' | 'buttonPosition' | 'destroyOnClose' | 'size' | 'fullScreen' | 'okOrder' | 'cancelOrder'> {
    forceRender?: boolean;
    closable?: boolean;
    /**
     * 弹窗关闭触发
     */
    onClose?(e: any): any;
}
export default class Dialog extends Component<InnerDialogProps> {
    static defaultProps: {
        className: string;
        mask: boolean;
        visible: boolean;
        keyboard: boolean;
        closable: boolean;
        maskClosable: boolean;
        destroyOnClose: boolean;
        visibleControlledWhenClose: boolean;
        maskClassName: string;
    };
    titleId: any;
    wrap: any;
    timeoutId: any;
    dialogMouseDown: any;
    openTime: any;
    lastOutSideFocusNode: any;
    inTransition: any;
    sentinelStart: any;
    componentDidMount(): void;
    toggleScrollLock(unmount?: any): void;
    componentDidUpdate: (prevProps: any) => void;
    componentWillUnmount(): void;
    tryFocus(): void;
    onDialogMouseDown: () => void;
    onMaskMouseUp: () => void;
    onMaskClick: (e: any) => void;
    onKeyDown: (e: any) => void;
    getZIndexStyle: () => React.CSSProperties;
    getWrapStyle: () => CSSProperties;
    saveRef: (name: any) => (node: any) => void;
    getMaskElement: () => any;
    getDialogElement: () => JSX.Element;
    close: (e: any) => void;
    render(): JSX.Element;
}
