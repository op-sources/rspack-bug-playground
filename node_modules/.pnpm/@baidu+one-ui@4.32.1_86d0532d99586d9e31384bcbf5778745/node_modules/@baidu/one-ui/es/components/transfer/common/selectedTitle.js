import _extends from "@babel/runtime/helpers/extends";

/**
 * @file selected title
 * @author huangshiming
 * @date 2020-05-16
 */
import React from 'react';
import Title from './title';
import Button from '../../button';
import { getCheckedKeyIsDisabledByParentRelationMap } from '../../../core/transferTools';
;

var getSelectedNum = function getSelectedNum(allDataMap, selectedList) {
  var list = [];

  var mergeChildren = function mergeChildren(children) {
    children.forEach(function (id) {
      var _allDataMap$key;

      var key = String(id);
      var children = (_allDataMap$key = allDataMap[key]) == null ? void 0 : _allDataMap$key.children;
      var hasChildren = children && children.length;

      if (hasChildren) {
        mergeChildren(children);
      }

      if (!hasChildren && !list.includes(key)) {
        list.push(key);
      }
    });
  };

  mergeChildren(selectedList);
  return list.length;
};

var SelectedTitle = function SelectedTitle(props) {
  var prefixCls = props.prefixCls,
      size = props.size,
      selectedList = props.selectedList,
      treeName = props.treeName,
      maxSelectedNum = props.maxSelectedNum,
      showSelectedNum = props.showSelectedNum,
      onDeleteAll = props.onDeleteAll,
      showCandidateNum = props.showCandidateNum,
      parentRelationMap = props.parentRelationMap,
      allDataMap = props.allDataMap,
      SelectedTitleButtonRender = props.SelectedTitleButtonRender,
      CustomSelectedOperation = props.CustomSelectedOperation,
      SelectedTitleRender = props.SelectedTitleRender;

  var selectedTitleProps = _extends({}, props, {
    prefixCls: prefixCls,
    treeName: treeName,
    title: '已选',
    selectedNum: getSelectedNum(allDataMap, selectedList || []),
    maxSelectedNum: maxSelectedNum,
    showSelectedNum: showSelectedNum,
    showCandidateNum: showCandidateNum,
    SelectedTitleButtonRender: SelectedTitleButtonRender
  });

  var titleRender;

  if (typeof SelectedTitleRender === 'function') {
    var CustomSelectedTitle = SelectedTitleRender;
    titleRender = /*#__PURE__*/React.createElement(CustomSelectedTitle, selectedTitleProps);
  } else if (SelectedTitleRender && typeof SelectedTitleRender === 'object') {
    titleRender = SelectedTitleRender;
  } else {
    titleRender = /*#__PURE__*/React.createElement(Title, selectedTitleProps);
  }

  var buttonDisabled = (selectedList || []).length <= 0;
  var disabledKeys = [];
  selectedList.forEach(function (key) {
    if (getCheckedKeyIsDisabledByParentRelationMap(key, parentRelationMap, allDataMap)) {
      disabledKeys.push(key);
    }
  });

  if (disabledKeys.length === selectedList.length && disabledKeys.length > 0) {
    buttonDisabled = true;
  }

  var buttonRender;
  var buttonProps = {
    className: prefixCls + "-delete-all",
    onClick: onDeleteAll,
    type: 'text-strong',
    disabled: buttonDisabled,
    size: size
  };

  if (SelectedTitleButtonRender) {
    buttonRender = /*#__PURE__*/React.createElement(SelectedTitleButtonRender, buttonProps);
  } else if (CustomSelectedOperation) {
    buttonRender = CustomSelectedOperation;
  } else {
    buttonRender = /*#__PURE__*/React.createElement(Button, buttonProps, "\u6E05\u7A7A");
  }

  return /*#__PURE__*/React.createElement("div", {
    className: prefixCls + "-pane-title"
  }, titleRender, buttonRender);
};

export default SelectedTitle;