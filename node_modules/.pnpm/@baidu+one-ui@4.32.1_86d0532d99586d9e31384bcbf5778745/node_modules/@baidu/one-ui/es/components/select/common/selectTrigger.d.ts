import { CSSProperties, FocusEventHandler, PureComponent, ReactNode, UIEventHandler } from 'react';
import { MouseEventHandler } from 'react';
interface SelectTriggerState {
    dropdownWidth: number;
}
interface SelectTriggerProps {
    onPopupFocus: FocusEventHandler<HTMLDivElement>;
    onPopupScroll: UIEventHandler<HTMLDivElement>;
    onMouseEnter: MouseEventHandler<HTMLDivElement>;
    onMouseLeave: MouseEventHandler<HTMLDivElement>;
    combobox: boolean;
    action: Array<string>;
    dropdownMatchSelectWidth: boolean;
    dropdownAlign: object;
    visible: boolean;
    disabled: boolean;
    showSearch: boolean;
    dropdownClassName: string;
    multiple: boolean;
    inputValue: string;
    options: any;
    prefixCls: string;
    popupClassName?: string;
    children: any;
    showAction: Array<string>;
    menuItemSelectedIcon: ReactNode | (() => ReactNode);
    dropdownStyle: CSSProperties;
    getPopupContainer(triggerNode: HTMLElement): HTMLElement;
    onDropdownVisibleChange(visible: boolean): any;
    transitionName: string;
    animation: string;
    onMenuSelect(selectedInfo: any): any;
    onMenuDeselect(selectedInfo: any): any;
    value: Array<string | number>;
    backfillValue: string;
    firstActiveValue: string;
    defaultActiveFirstOption: boolean;
    dropdownMenuStyle: CSSProperties;
    footer: ReactNode | (() => ReactNode);
}
export default class SelectTrigger extends PureComponent<SelectTriggerProps, SelectTriggerState> {
    static defaultProps: {
        dropdownAlign: {
            ignoreShake: boolean;
        };
    };
    constructor(props: any);
    saveDropdownMenuRef: any;
    dropdownMenuRef: any;
    saveTriggerRef: any;
    triggerRef: any;
    root: any;
    componentDidMount(): void;
    componentDidUpdate(): void;
    setDropdownWidth: () => void;
    getInnerMenu: () => any;
    getInnerManualRef: () => any;
    getPopupDOMNode: () => any;
    getDropdownElement: (newProps: any) => JSX.Element;
    getDropdownTransitionName: () => string;
    getDropdownPrefixCls: () => string;
    saveRoot: (node: any) => void;
    render(): JSX.Element;
}
export {};
