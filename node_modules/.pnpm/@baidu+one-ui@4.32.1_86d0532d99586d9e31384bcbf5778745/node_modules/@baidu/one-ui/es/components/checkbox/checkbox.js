import _extends from "@babel/runtime/helpers/extends";
import _objectWithoutPropertiesLoose from "@babel/runtime/helpers/objectWithoutPropertiesLoose";
import _inheritsLoose from "@babel/runtime/helpers/inheritsLoose";

var _dec, _class, _class2, _temp;

import React, { PureComponent } from 'react';
import { classnames } from '../../core/commonTools';
import { withConfigConsumer } from '../providerConfig/context';
import CommonCheckbox from './common/commonCheckbox';
import Context from './context';
var Checkbox = (_dec = withConfigConsumer('checkbox'), _dec(_class = (_temp = _class2 = /*#__PURE__*/function (_PureComponent) {
  _inheritsLoose(Checkbox, _PureComponent);

  function Checkbox() {
    var _this;

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _PureComponent.call.apply(_PureComponent, [this].concat(args)) || this;
    _this.refCheckbox = void 0;

    _this.saveCheckbox = function (node) {
      _this.refCheckbox = node;
    };

    return _this;
  }

  var _proto = Checkbox.prototype;

  _proto.focus = function focus() {
    this.refCheckbox.focus();
  };

  _proto.blur = function blur() {
    this.refCheckbox.blur();
  };

  _proto.componentDidMount = function componentDidMount() {
    var _this$context;

    (_this$context = this.context) == null ? void 0 : _this$context.register(this.props);
  };

  _proto.componentWillUnmount = function componentWillUnmount() {
    var _this$context2;

    (_this$context2 = this.context) == null ? void 0 : _this$context2.unregister(this.props);
  };

  _proto.render = function render() {
    var _classnames, _classnames2;

    var _this$props = this.props,
        prefixCls = _this$props.prefixCls,
        className = _this$props.className,
        children = _this$props.children,
        indeterminate = _this$props.indeterminate,
        style = _this$props.style,
        onMouseEnter = _this$props.onMouseEnter,
        onMouseLeave = _this$props.onMouseLeave,
        direction = _this$props.direction,
        size = _this$props.size,
        mode = _this$props.mode,
        buttonType = _this$props.buttonType,
        exclusive = _this$props.exclusive,
        restProps = _objectWithoutPropertiesLoose(_this$props, ["prefixCls", "className", "children", "indeterminate", "style", "onMouseEnter", "onMouseLeave", "direction", "size", "mode", "buttonType", "exclusive"]);

    var checkboxProps = _extends({}, restProps, {
      indeterminate: indeterminate,
      mode: mode
    });

    var realSize = size;

    if (this.context) {
      var _this$props2 = this.props,
          value = _this$props2.value,
          _disabled = _this$props2.disabled,
          _checked = _this$props2.checked;
      var _this$context3 = this.context,
          toggleOption = _this$context3.toggleOption,
          checkboxValue = _this$context3.value,
          checkboxDisabled = _this$context3.disabled,
          groupSize = _this$context3.size;
      realSize = realSize || groupSize;

      checkboxProps.onChange = function () {
        return toggleOption({
          label: children,
          value: value,
          exclusive: exclusive
        });
      };

      checkboxProps.checked = checkboxValue != null ? checkboxValue.indexOf(value) !== -1 : _checked;
      checkboxProps.disabled = _disabled || checkboxDisabled;
    }

    var wrapperClass = prefixCls + "-wrapper";
    var checked = checkboxProps.checked,
        disabled = checkboxProps.disabled;
    var classString = classnames((_classnames = {}, _classnames["" + wrapperClass] = true, _classnames[wrapperClass + "-checked"] = checked, _classnames[wrapperClass + "-disabled"] = disabled, _classnames[wrapperClass + "-checked-disabled"] = checked && disabled, _classnames[wrapperClass + "-" + direction] = direction, _classnames[wrapperClass + "-" + realSize] = realSize, _classnames[wrapperClass + "-" + buttonType] = buttonType, _classnames), className);
    var checkboxClass = classnames((_classnames2 = {}, _classnames2[prefixCls + "-indeterminate"] = indeterminate, _classnames2));
    var itemProps = {
      className: classnames(prefixCls + "-item")
    };
    var otherProps = {};

    if (mode === 'strong') {
      otherProps.tabIndex = disabled ? -1 : 0;
    }

    var radioType = mode === 'basic' && exclusive;
    return /*#__PURE__*/React.createElement("label", _extends({
      // TODO: 仅这5个属性，看起来也不太合理
      className: classString,
      style: style,
      onMouseEnter: onMouseEnter,
      onMouseLeave: onMouseLeave
    }, otherProps), /*#__PURE__*/React.createElement(CommonCheckbox, _extends({}, checkboxProps, {
      prefixCls: radioType ? 'one-radio' : prefixCls,
      type: radioType ? 'radio' : 'checkbox',
      className: checkboxClass,
      ref: this.saveCheckbox
    })), children != null ? /*#__PURE__*/React.createElement("span", itemProps, children) : null, mode === 'strong' && !exclusive ? /*#__PURE__*/React.createElement("i", {
      className: wrapperClass + "-strong-icon"
    }) : null);
  };

  return Checkbox;
}(PureComponent), _class2.defaultProps = {
  prefixCls: 'one-checkbox',
  indeterminate: false,
  direction: 'row',
  mode: 'basic'
}, _class2.Button = void 0, _class2.Group = void 0, _class2.contextType = Context, _temp)) || _class);
export default Checkbox;