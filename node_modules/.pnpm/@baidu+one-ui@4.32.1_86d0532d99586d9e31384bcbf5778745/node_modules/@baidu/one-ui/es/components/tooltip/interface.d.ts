import { CSSProperties, ReactElement, ReactNode } from 'react';
import { BaseProps } from '../interface';
export declare type TooltipPlacement = 'top' | 'left' | 'right' | 'bottom' | 'topLeft' | 'topRight' | 'bottomLeft' | 'bottomRight' | 'leftTop' | 'leftBottom' | 'rightTop' | 'rightBottom';
export interface TooltipProps extends BaseProps {
    /**
     * 默认是否展示
     */
    defaultVisible?: boolean;
    /**
     * 是否可视
     */
    visible?: boolean;
    /**
     * 标题
     */
    title?: ReactNode;
    /**
     * 自定义内嵌, 与title作用，相同推荐使用title
     */
    overlay?: ReactNode;
    /**
     * light为白色背景色，dark为黑色背景色
     */
    type?: 'light' | 'dark';
    /**
     * tip的位置
     */
    placement?: TooltipPlacement;
    /**
     * 弹窗可视变化时候触发的函数
     */
    onVisibleChange?(visible: boolean): any;
    /**
     * 弹窗可视变化结束后触发
     */
    afterPopupVisibleChange?(visible: boolean): any;
    /**
     * 隐藏时消毁
     */
    destroyTooltipOnHide?: boolean;
    /**
     * 触发方式
     */
    trigger?: 'hover' | 'click' | 'focus';
    /**
     * 弹窗挂载函数
     */
    getPopupContainer?: (triggerNode: HTMLElement) => HTMLElement;
    /**
     * overlay类名
     */
    overlayClassName?: string;
    /**
     * overlay样式
     */
    overlayStyle?: CSSProperties;
    /**
     * 动效名称
     */
    transitionName?: string;
    /**
     * 弹窗展开时候触发的类名
     */
    openClassName?: string;
    /**
     * 箭头居中
     */
    arrowPointAtCenter?: boolean;
    /**
     * 被遮挡时是否自适应
     */
    autoAdjustOverflow?: boolean | {
        adjustX: 0 | 1;
        adjustY: 0 | 1;
    };
    children: ReactElement;
}
