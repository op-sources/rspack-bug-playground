import _extends from "@babel/runtime/helpers/extends";
import _inheritsLoose from "@babel/runtime/helpers/inheritsLoose";
import _last from "lodash/last";

/**
 * @file 搜索结果菜单
 */
import React, { PureComponent } from 'react';
import { classnames } from '../../core/commonTools';
import Option, { EmptyOption } from './option';
import { IconChevronRight } from 'dls-icons-react';
;

var SearchMenu = /*#__PURE__*/function (_PureComponent) {
  _inheritsLoose(SearchMenu, _PureComponent);

  function SearchMenu() {
    return _PureComponent.apply(this, arguments) || this;
  }

  var _proto = SearchMenu.prototype;

  _proto.prefix = function prefix(name) {
    return this.props.prefixCls + "-" + name;
  };

  _proto.render = function render() {
    var _this$props = this.props,
        style = _this$props.style,
        width = _this$props.width,
        emptyType = _this$props.emptyType,
        options = _this$props.options;
    var className = classnames(this.prefix('menus'), this.prefix('menus-search-box'));

    var menuStyle = _extends({}, style);

    var empty = !options || options.length === 0;
    return /*#__PURE__*/React.createElement("div", {
      className: className,
      style: menuStyle
    }, empty && emptyType === 'option' ? this.renderEmptyOption() : /*#__PURE__*/React.createElement("div", {
      className: this.prefix('menus-search-box-container')
    }, empty ? this.renderEmpty() : this.renderResults()));
  };

  _proto.highlight = function highlight(query, label) {
    if (typeof label === 'string') {
      var labels = label.split(query);

      if (labels.length === 1) {
        return label;
      }

      var labelArray = [];

      for (var i = 0; i < labels.length; i++) {
        labelArray.push( /*#__PURE__*/React.createElement("span", {
          key: i
        }, labels[i]));

        if (i !== labels.length - 1) {
          labelArray.push( /*#__PURE__*/React.createElement("span", {
            key: i + "-highlight",
            className: this.prefix('menu-item-highlight')
          }, query));
        }
      }

      return /*#__PURE__*/React.createElement("span", null, labelArray);
    }

    return label;
  };

  _proto.renderResults = function renderResults() {
    var _this = this;

    var _this$props2 = this.props,
        prefixCls = _this$props2.prefixCls,
        size = _this$props2.size,
        showCheckbox = _this$props2.showCheckbox,
        options = _this$props2.options,
        onCheck = _this$props2.onCheck,
        onSelect = _this$props2.onSelect,
        query = _this$props2.query,
        renderLabel = _this$props2.renderLabel;
    var opts = options.map(function (path) {
      var option = _extends({}, _last(path));

      option.label = renderLabel ? renderLabel(query, path.map(function (o) {
        return o.item;
      }), prefixCls) : path.map(function (o, index) {
        var label = o.label;
        return /*#__PURE__*/React.createElement("span", {
          key: index
        }, _this.highlight(query, label), path.length > index + 1 ? /*#__PURE__*/React.createElement(IconChevronRight, {
          className: _this.prefix('menu-item-separator')
        }) : null);
      });
      return option;
    });
    return /*#__PURE__*/React.createElement("ul", null, opts.map(function (option, index) {
      return /*#__PURE__*/React.createElement(Option, {
        prefixCls: prefixCls,
        size: size,
        key: index,
        option: option,
        showCheckbox: showCheckbox,
        checked: option.checked,
        indeterminate: option.indeterminate,
        onCheck: onCheck,
        onSelect: onSelect
      });
    }));
  };

  _proto.renderEmpty = function renderEmpty() {
    var emptyNode = this.props.emptyNode;
    return /*#__PURE__*/React.createElement("div", {
      className: this.prefix('empty')
    }, emptyNode);
  };

  _proto.renderEmptyOption = function renderEmptyOption() {
    var _this$props3 = this.props,
        prefixCls = _this$props3.prefixCls,
        emptyNode = _this$props3.emptyNode;
    return /*#__PURE__*/React.createElement("ul", null, /*#__PURE__*/React.createElement(EmptyOption, {
      emptyNode: emptyNode,
      prefixCls: prefixCls
    }));
  };

  return SearchMenu;
}(PureComponent);

export { SearchMenu as default };