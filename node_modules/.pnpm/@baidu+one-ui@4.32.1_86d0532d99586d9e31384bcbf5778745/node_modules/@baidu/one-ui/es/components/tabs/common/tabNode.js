import _regeneratorRuntime from "@babel/runtime/regenerator";
import _asyncToGenerator from "@babel/runtime/helpers/asyncToGenerator";
import _inheritsLoose from "@babel/runtime/helpers/inheritsLoose";
import React, { PureComponent } from 'react';
import { IconTimes } from 'dls-icons-react';
import { classnames } from '../../../core/commonTools';
import Button from '../../button';
import StatusIcon from './statusIcon';
import Transition from '../../transition';

var TabNode = /*#__PURE__*/function (_PureComponent) {
  _inheritsLoose(TabNode, _PureComponent);

  function TabNode() {
    var _this;

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _PureComponent.call.apply(_PureComponent, [this].concat(args)) || this;
    _this.state = {
      deleted: false
    };

    _this.handleOnDelete = /*#__PURE__*/function () {
      var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(e) {
        var deletable;
        return _regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                e.stopPropagation();

                if (!_this.state.deleted) {
                  _context.next = 3;
                  break;
                }

                return _context.abrupt("return");

              case 3:
                _context.next = 5;
                return _this.props.onBeforeDelete();

              case 5:
                deletable = _context.sent;

                if (deletable !== false) {
                  _this.setState({
                    deleted: true
                  });
                }

              case 7:
              case "end":
                return _context.stop();
            }
          }
        }, _callee);
      }));

      return function (_x) {
        return _ref.apply(this, arguments);
      };
    }();

    _this.tab = void 0;

    _this.saveRef = function (tab) {
      _this.tab = tab;
      var tabRef = _this.props.tabRef;

      if (tabRef) {
        tabRef(tab);
      }
    };

    return _this;
  }

  var _proto = TabNode.prototype;

  _proto.render = function render() {
    var _classnames,
        _classnames2,
        _this2 = this;

    var _this$props = this.props,
        prefixCls = _this$props.prefixCls,
        size = _this$props.size,
        tab = _this$props.tab,
        Icon = _this$props.Icon,
        closable = _this$props.closable,
        disabled = _this$props.disabled,
        onClick = _this$props.onClick,
        onDelete = _this$props.onDelete,
        status = _this$props.status,
        index = _this$props.index,
        total = _this$props.total,
        activeIndex = _this$props.activeIndex,
        className = _this$props.className;
    var isActive = index === activeIndex;
    var tabClassName = classnames(prefixCls + "-tab-item", className, (_classnames = {}, _classnames[prefixCls + "-tab-item-is-active"] = isActive, _classnames[prefixCls + "-tab-item-is-inactive"] = !isActive, _classnames[prefixCls + "-tab-item-is-active-prev"] = index === activeIndex - 1, _classnames[prefixCls + "-tab-item-is-active-next"] = index === activeIndex + 1, _classnames[prefixCls + "-tab-item-is-active-first"] = isActive && index === 0, _classnames[prefixCls + "-tab-item-is-active-last"] = isActive && index === total - 1, _classnames));
    var tabTitleClassName = classnames(prefixCls + "-title", (_classnames2 = {}, _classnames2[prefixCls + "-title-is-active"] = isActive, _classnames2[prefixCls + "-title-disabled"] = disabled, _classnames2[prefixCls + "-title-has-icon"] = Icon, _classnames2[prefixCls + "-title-closable"] = closable, _classnames2), [prefixCls + "-title-" + size]);
    var deleted = this.state.deleted;
    return /*#__PURE__*/React.createElement(Transition, {
      className: tabClassName,
      name: "tab-remove",
      onExited: onDelete,
      "in": !deleted,
      appear: false,
      timeout: 200,
      unmountOnExit: true
    }, /*#__PURE__*/React.createElement("span", {
      ref: function (_ref2) {
        function ref(_x2) {
          return _ref2.apply(this, arguments);
        }

        ref.toString = function () {
          return _ref2.toString();
        };

        return ref;
      }(function (ref) {
        return _this2.saveRef(ref);
      }),
      style: {
        width: deleted && this.tab ? this.tab.offsetWidth : 'auto'
      }
    }, /*#__PURE__*/React.createElement("span", {
      onClick: onClick,
      className: tabTitleClassName
    }, Icon && /*#__PURE__*/React.createElement("span", {
      className: prefixCls + "-title-icon-container"
    }, Icon), /*#__PURE__*/React.createElement("span", {
      className: prefixCls + "-title-inline-text"
    }, tab), /*#__PURE__*/React.createElement(StatusIcon, {
      status: status,
      prefixCls: prefixCls
    }), closable ? /*#__PURE__*/React.createElement(Button, {
      type: "text-aux",
      size: size,
      className: prefixCls + "-close-icon",
      onClick: this.handleOnDelete
    }, /*#__PURE__*/React.createElement(IconTimes, null)) : null)));
  };

  return TabNode;
}(PureComponent);

TabNode.defaultProps = {
  Icon: null,
  closable: false,
  disabled: false
};
export { TabNode as default };