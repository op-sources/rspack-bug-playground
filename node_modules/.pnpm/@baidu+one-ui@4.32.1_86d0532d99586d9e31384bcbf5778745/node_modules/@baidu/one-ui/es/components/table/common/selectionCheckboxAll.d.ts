import React, { PureComponent, ReactNode } from 'react';
interface SelectionCheckboxAllProps {
    store: any;
    selectAllText: ReactNode;
    selectInvertText: ReactNode;
    disabled: boolean;
    getCheckboxPropsByItem(record: any, index: any): any;
    getRecordKey(record: any, index: any): string;
    data: [];
    prefixCls: string;
    onSelect(key: any, index: any, onSelect: any): any;
    hideDefaultSelections: boolean;
    selections: boolean | {
        key: string;
        text: ReactNode;
        onSelect(): void;
    }[];
    getPopupContainer(): HTMLElement;
}
interface SelectionCheckboxAllState {
    checked: boolean;
    indeterminate: boolean;
}
export default class SelectionCheckboxAll extends PureComponent<SelectionCheckboxAllProps, SelectionCheckboxAllState> {
    constructor(props: any);
    getSelections(): {
        key: string;
        text: React.ReactNode;
        onSelect: () => void;
    }[];
    unsubscribe: any;
    componentDidMount(): void;
    componentWillUnmount(): void;
    getCheckState(props: any): any;
    getIndeterminateState(props: any): any;
    setCheckState(props: any): void;
    checkSelection(data: any, type: any, byDefaultChecked: any): any;
    subscribe(): void;
    handleSelectAllChagne: (e: any) => void;
    renderMenus(selections: any): any;
    render(): JSX.Element;
}
export {};
