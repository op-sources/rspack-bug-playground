import React from 'react';
import { TreeProps } from '../interface';
interface TreeState {
    keyEntities?: {};
    selectedKeys?: string[];
    checkedKeys?: string[];
    halfCheckedKeys?: string[];
    loadedKeys?: string[];
    loadingKeys?: string[];
    expandedKeys?: string[];
    treeNode?: [];
    prevProps?: TreeProps;
    flattenNodes?: any;
}
declare class VirtualTree extends React.Component<TreeProps, TreeState> {
    static defaultProps: {
        prefixCls: string;
        showLine: boolean;
        showIcon: boolean;
        selectable: boolean;
        multiple: boolean;
        checkable: boolean;
        disabled: boolean;
        checkStrictly: boolean;
        draggable: boolean;
        defaultExpandParent: boolean;
        autoExpandParent: boolean;
        defaultExpandAll: boolean;
        defaultExpandedKeys: any[];
        defaultCheckedKeys: any[];
        defaultSelectedKeys: any[];
        checkActionEqualSelet: boolean;
        size: string;
        onScroll: () => void;
    };
    state: TreeState;
    getContext(): {
        rcTree: {
            prefixCls: string;
            selectable: boolean;
            showIcon: boolean;
            icon: React.ReactElement<any, string | React.JSXElementConstructor<any>>;
            switcherIcon: React.ReactElement<any, string | React.JSXElementConstructor<any>> | ((option: {
                isLeaf: boolean;
                loading: boolean;
            }) => React.ReactElement<any, string | React.JSXElementConstructor<any>>);
            checkable: boolean;
            checkStrictly: boolean;
            disabled: boolean;
            loadData: (node: any, key: string, type: "select" | "expand" | "check") => Promise<void>;
            filterTreeNode: (treeNode: any) => string | boolean;
            renderTreeNode: (child: any, index: any, level?: number) => React.FunctionComponentElement<{
                key: any;
                eventKey: any;
                expanded: boolean;
                selected: boolean;
                loaded: boolean;
                loading: boolean;
                checked: boolean;
                halfChecked: boolean;
                pos: any;
                level: any;
            }>;
            isKeyChecked: (key: any) => boolean;
            onNodeClick: (e: any, treeNode: any) => void;
            onNodeDoubleClick: (e: any, treeNode: any) => void;
            onNodeExpand: (e: any, treeNode: any) => Promise<void>;
            onNodeSelect: (e: any, treeNode: any) => void;
            onNodeCheck: (e: any, treeNode: any, checked: any) => void;
            onNodeLoad: (treeNode: any, eventType: any) => Promise<unknown>;
            onNodeMouseEnter: (event: any, node: any) => void;
            onNodeMouseLeave: (event: any, node: any) => void;
            onNodeContextMenu: (event: any, node: any) => void;
        };
    };
    static getDerivedStateFromProps(props: any, prevState: any): TreeState;
    onNodeClick: (e: any, treeNode: any) => void;
    onNodeDoubleClick: (e: any, treeNode: any) => void;
    onNodeSelect: (e: any, treeNode: any) => void;
    onNodeCheck: (e: any, treeNode: any, checked: any) => void;
    onNodeLoad: (treeNode: any, eventType: any) => Promise<unknown>;
    onNodeExpand: (e: any, treeNode: any) => Promise<void>;
    onNodeMouseEnter: (event: any, node: any) => void;
    onNodeMouseLeave: (event: any, node: any) => void;
    onNodeContextMenu: (event: any, node: any) => void;
    /**
     * Only update the value which is not in props
     */
    setUncontrolledState: (state: any) => void;
    isKeyChecked: (key: any) => boolean;
    /**
     * [Legacy] Original logic use `key` as tracking clue.
     * We have to use `cloneElement` to pass `key`.
     */
    renderTreeNode: (child: any, index: any, level?: number) => React.FunctionComponentElement<{
        key: any;
        eventKey: any;
        expanded: boolean;
        selected: boolean;
        loaded: boolean;
        loading: boolean;
        checked: boolean;
        halfChecked: boolean;
        pos: any;
        level: any;
    }>;
    renderNode: ({ index, style }: {
        index: any;
        style: any;
    }) => JSX.Element;
    render(): JSX.Element;
}
export default VirtualTree;
