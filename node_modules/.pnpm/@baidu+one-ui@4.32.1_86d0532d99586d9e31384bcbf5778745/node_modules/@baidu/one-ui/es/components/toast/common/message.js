import _inheritsLoose from "@babel/runtime/helpers/inheritsLoose";
import React, { PureComponent } from 'react';
import classes from 'component-classes';
import { IconInfoCircleSolid, IconExclamationCircleSolid, IconCheckCircleSolid, IconTimesCircleSolid, IconTimes } from 'dls-icons-react';
import IconLoading from '../../loading';
import { classnames } from '../../../core/commonTools';
var minHeightMap = {
  small: 37,
  medium: 42
};

var getIconInfo = function getIconInfo(type, prefixCls) {
  var map = {
    info: /*#__PURE__*/React.createElement(IconInfoCircleSolid, {
      className: prefixCls + "-info"
    }),
    warning: /*#__PURE__*/React.createElement(IconExclamationCircleSolid, {
      className: prefixCls + "-warning"
    }),
    success: /*#__PURE__*/React.createElement(IconCheckCircleSolid, {
      className: prefixCls + "-success"
    }),
    error: /*#__PURE__*/React.createElement(IconTimesCircleSolid, {
      className: prefixCls + "-error"
    }),
    loading: /*#__PURE__*/React.createElement("span", {
      className: prefixCls + "-loading"
    }, /*#__PURE__*/React.createElement(IconLoading, null))
  };
  return map[type];
};

var Message = /*#__PURE__*/function (_PureComponent) {
  _inheritsLoose(Message, _PureComponent);

  function Message() {
    var _this;

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _PureComponent.call.apply(_PureComponent, [this].concat(args)) || this;
    _this.messageRef = void 0;

    _this.componentDidMount = function () {
      var _this$props = _this.props,
          size = _this$props.size,
          prefixCls = _this$props.prefixCls;
      var height = _this.messageRef.offsetHeight;
      var minHeight = minHeightMap[size];

      if (height > minHeight) {
        var dom = classes(_this.messageRef);
        dom.add(prefixCls + "-multiple-line");
      }
    };

    _this.saveRef = function (ref) {
      _this.messageRef = ref;
    };

    _this.render = function () {
      var _classnames;

      var _this$props2 = _this.props,
          prefixCls = _this$props2.prefixCls,
          type = _this$props2.type,
          title = _this$props2.title,
          size = _this$props2.size,
          content = _this$props2.content,
          showCloseIcon = _this$props2.showCloseIcon,
          onClose = _this$props2.onClose,
          target = _this$props2.target,
          instance = _this$props2.instance;
      var wrapClass = classnames((_classnames = {}, _classnames[prefixCls + "-" + type] = type, _classnames[prefixCls + "-header"] = !!title, _classnames[prefixCls + "-widthout-header"] = !title, _classnames[prefixCls + "-has-close-icon"] = !!showCloseIcon, _classnames), prefixCls + "-custom-content", prefixCls + "-" + size);

      function removeNotice() {
        if (instance) {
          instance.removeNotice(target);
        }

        onClose();
      }

      ;
      var iconNode = getIconInfo(type, prefixCls);
      return /*#__PURE__*/React.createElement("div", {
        className: wrapClass,
        ref: _this.saveRef
      }, /*#__PURE__*/React.createElement("span", {
        className: prefixCls + "-icon"
      }, iconNode), /*#__PURE__*/React.createElement("div", {
        className: prefixCls + "-container"
      }, title ? /*#__PURE__*/React.createElement("div", {
        className: prefixCls + "-container-header"
      }, title) : null, content ? /*#__PURE__*/React.createElement("div", {
        className: prefixCls + "-container-content"
      }, content) : null), showCloseIcon && /*#__PURE__*/React.createElement("span", {
        className: prefixCls + "-close-icon"
      }, /*#__PURE__*/React.createElement(IconTimes, {
        className: prefixCls + "-close-icon-svg",
        onClick: removeNotice
      })));
    };

    return _this;
  }

  return Message;
}(PureComponent);

Message.defaultProps = {
  size: 'medium',
  prefixCls: 'one-toast',
  type: 'info'
};
export { Message as default };