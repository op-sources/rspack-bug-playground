import _extends from "@babel/runtime/helpers/extends";
import _objectWithoutPropertiesLoose from "@babel/runtime/helpers/objectWithoutPropertiesLoose";
import _inheritsLoose from "@babel/runtime/helpers/inheritsLoose";
import React, { PureComponent } from 'react';
import { classnames } from '../../core/commonTools';
import Popover from '../popover';
import { IconInfoCircleSolid, IconExclamationCircleSolid, IconExclamationTriangleSolid, IconCheckCircleSolid } from 'dls-icons-react';
var typedIcons = {
  info: /*#__PURE__*/React.createElement(IconInfoCircleSolid, null),
  aux: /*#__PURE__*/React.createElement(IconInfoCircleSolid, null),
  error: /*#__PURE__*/React.createElement(IconExclamationCircleSolid, null),
  warning: /*#__PURE__*/React.createElement(IconExclamationTriangleSolid, null),
  success: /*#__PURE__*/React.createElement(IconCheckCircleSolid, null)
};

var Message = /*#__PURE__*/function (_PureComponent) {
  _inheritsLoose(Message, _PureComponent);

  function Message() {
    return _PureComponent.apply(this, arguments) || this;
  }

  var _proto = Message.prototype;

  _proto.renderRoot = function renderRoot(iconNode, contentNode) {
    var _this$props = this.props,
        prefixCls = _this$props.prefixCls,
        className = _this$props.className,
        type = _this$props.type,
        size = _this$props.size,
        display = _this$props.display,
        children = _this$props.children,
        icon = _this$props.icon,
        resetProps = _objectWithoutPropertiesLoose(_this$props, ["prefixCls", "className", "type", "size", "display", "children", "icon"]);

    return /*#__PURE__*/React.createElement("div", _extends({
      className: classnames(prefixCls, prefixCls + "-" + size, prefixCls + "-type-" + type, prefixCls + "-display-" + display, className)
    }, resetProps), iconNode, display !== 'popup' ? contentNode : null);
  };

  _proto.renderIcon = function renderIcon(contentNode) {
    var _this$props2 = this.props,
        icon = _this$props2.icon,
        type = _this$props2.type,
        display = _this$props2.display,
        prefixCls = _this$props2.prefixCls;

    if (display === 'simple') {
      return null;
    }

    var iconNode = icon || typedIcons[type];

    if (display === 'popup') {
      iconNode = /*#__PURE__*/React.createElement(Popover, {
        placement: "top",
        content: contentNode
      }, iconNode);
    }

    return /*#__PURE__*/React.createElement("div", {
      className: prefixCls + "-icon"
    }, iconNode);
  };

  _proto.render = function render() {
    var _this$props3 = this.props,
        prefixCls = _this$props3.prefixCls,
        children = _this$props3.children;
    var contentNode = /*#__PURE__*/React.createElement("div", {
      className: prefixCls + "-content"
    }, children);
    var iconNode = this.renderIcon(contentNode);
    return this.renderRoot(iconNode, contentNode);
  };

  return Message;
}(PureComponent);

Message.defaultProps = {
  prefixCls: 'one-message',
  type: 'info',
  size: 'medium',
  display: 'normal'
};
export default Message;