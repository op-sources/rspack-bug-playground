import _objectWithoutPropertiesLoose from "@babel/runtime/helpers/objectWithoutPropertiesLoose";
import _extends from "@babel/runtime/helpers/extends";
import _assertThisInitialized from "@babel/runtime/helpers/assertThisInitialized";
import _inheritsLoose from "@babel/runtime/helpers/inheritsLoose";
import Trigger from 'rc-trigger';
import React, { PureComponent } from 'react';
import { classnames } from '../../../core/commonTools';
import { isSingleMode, saveRef } from '../../../core/selectTools';
import DropdownMenu from './dropdownMenu';
Trigger.displayName = 'Trigger';
var BUILT_IN_PLACEMENTS = {
  bottomLeft: {
    points: ['tl', 'bl'],
    offset: [0, 4],
    overflow: {
      adjustX: 0,
      adjustY: 1
    }
  },
  topLeft: {
    points: ['bl', 'tl'],
    offset: [0, -4],
    overflow: {
      adjustX: 0,
      adjustY: 1
    }
  }
};
;
;

var SelectTrigger = /*#__PURE__*/function (_PureComponent) {
  _inheritsLoose(SelectTrigger, _PureComponent);

  function SelectTrigger(_props) {
    var _this;

    _this = _PureComponent.call(this, _props) || this;
    _this.saveDropdownMenuRef = void 0;
    _this.dropdownMenuRef = void 0;
    _this.saveTriggerRef = void 0;
    _this.triggerRef = void 0;
    _this.root = void 0;

    _this.setDropdownWidth = function () {
      var width = _this.root.offsetWidth;

      if (width !== _this.state.dropdownWidth) {
        _this.setState({
          dropdownWidth: width
        });
      }
    };

    _this.getInnerMenu = function () {
      return _this.dropdownMenuRef && _this.dropdownMenuRef.menuRef;
    };

    _this.getInnerManualRef = function () {
      return _this.dropdownMenuRef && _this.dropdownMenuRef.manualRef;
    };

    _this.getPopupDOMNode = function () {
      return _this.triggerRef.getPopupDomNode();
    };

    _this.getDropdownElement = function (newProps) {
      var props = _this.props;
      return /*#__PURE__*/React.createElement(DropdownMenu, _extends({
        ref: _this.saveDropdownMenuRef
      }, newProps, {
        prefixCls: _this.getDropdownPrefixCls(),
        onMenuSelect: props.onMenuSelect,
        onMenuDeselect: props.onMenuDeselect,
        onPopupScroll: props.onPopupScroll,
        value: props.value,
        backfillValue: props.backfillValue,
        firstActiveValue: props.firstActiveValue,
        defaultActiveFirstOption: props.defaultActiveFirstOption,
        dropdownMenuStyle: props.dropdownMenuStyle,
        menuItemSelectedIcon: props.menuItemSelectedIcon
      }));
    };

    _this.getDropdownTransitionName = function () {
      var props = _this.props;
      var transitionName = props.transitionName;

      if (!transitionName && props.animation) {
        transitionName = _this.getDropdownPrefixCls() + "-" + props.animation;
      }

      return transitionName;
    };

    _this.getDropdownPrefixCls = function () {
      return _this.props.prefixCls + "-dropdown";
    };

    _this.saveRoot = function (node) {
      _this.root = node;

      if (_this.props.children && _this.props.children.ref) {
        _this.props.children.ref(node);
      }
    };

    _this.saveDropdownMenuRef = saveRef(_assertThisInitialized(_this), 'dropdownMenuRef');
    _this.saveTriggerRef = saveRef(_assertThisInitialized(_this), 'triggerRef');
    _this.state = {
      dropdownWidth: null
    };
    return _this;
  }

  var _proto = SelectTrigger.prototype;

  _proto.componentDidMount = function componentDidMount() {
    this.setDropdownWidth();
  };

  _proto.componentDidUpdate = function componentDidUpdate() {
    this.setDropdownWidth();
  };

  _proto.render = function render() {
    var _popupClassName;

    var _this$props = this.props,
        onPopupFocus = _this$props.onPopupFocus,
        props = _objectWithoutPropertiesLoose(_this$props, ["onPopupFocus"]);

    var multiple = props.multiple,
        visible = props.visible,
        inputValue = props.inputValue,
        dropdownAlign = props.dropdownAlign,
        disabled = props.disabled,
        showSearch = props.showSearch,
        dropdownClassName = props.dropdownClassName,
        dropdownStyle = props.dropdownStyle,
        dropdownMatchSelectWidth = props.dropdownMatchSelectWidth,
        transitionName = props.transitionName,
        footer = props.footer;
    var dropdownPrefixCls = this.getDropdownPrefixCls();
    var popupClassName = (_popupClassName = {}, _popupClassName[dropdownClassName] = !!dropdownClassName, _popupClassName[dropdownPrefixCls + "--" + (multiple ? 'multiple' : 'single')] = 1, _popupClassName);
    var popupElement = this.getDropdownElement({
      menuItems: props.options,
      onPopupFocus: onPopupFocus,
      multiple: multiple,
      inputValue: inputValue,
      visible: visible,
      footer: footer
    });
    var hideAction;

    if (disabled) {
      hideAction = [];
    } else if (isSingleMode(props) && !showSearch) {
      hideAction = ['click'];
    } else {
      hideAction = ['blur'];
    }

    var popupStyle = _extends({}, dropdownStyle);

    var widthProp = dropdownMatchSelectWidth ? 'width' : 'minWidth';

    if (this.state.dropdownWidth) {
      popupStyle[widthProp] = this.state.dropdownWidth + "px";
    }

    return /*#__PURE__*/React.createElement(Trigger, _extends({}, props, {
      showAction: disabled ? [] : this.props.showAction,
      hideAction: hideAction,
      ref: this.saveTriggerRef,
      popupPlacement: "bottomLeft",
      builtinPlacements: BUILT_IN_PLACEMENTS,
      prefixCls: dropdownPrefixCls,
      popupTransitionName: transitionName,
      onPopupVisibleChange: props.onDropdownVisibleChange,
      popup: popupElement,
      popupAlign: dropdownAlign,
      popupVisible: visible,
      getPopupContainer: props.getPopupContainer,
      popupClassName: classnames(popupClassName),
      popupStyle: popupStyle
    }), /*#__PURE__*/React.cloneElement(props.children, {
      ref: this.saveRoot
    }));
  };

  return SelectTrigger;
}(PureComponent);

SelectTrigger.defaultProps = {
  dropdownAlign: {
    ignoreShake: true
  }
};
export { SelectTrigger as default };