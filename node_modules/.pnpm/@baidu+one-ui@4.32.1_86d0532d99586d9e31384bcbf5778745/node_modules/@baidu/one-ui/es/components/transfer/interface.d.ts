import { CSSProperties, ReactElement, ReactNode } from "react";
import { BaseProps } from "../interface";
import { SearchBoxProps } from "../searchBox";
export interface TransferDataOption {
    /**
     * key
     */
    key: string;
    /**
     * 标题
     */
    title: ReactNode;
    /**
     * 禁用
     */
    disabled?: boolean;
    /**
     * 是否为叶子节点
     */
    isLeaf?: boolean;
    /**
     * 子节点
     */
    children?: string[];
}
export interface TransferDataItem {
    /**
     * key
     */
    key: string;
    /**
     * 标题
     */
    title: ReactNode;
    /**
     * 禁用
     */
    disabled?: boolean;
    /**
     * 是否为叶子节点
     */
    isLeaf?: boolean;
    /**
     * 子节点
     */
    children?: TransferDataItem[];
}
export interface TransferProps extends BaseProps {
    /**
     * transfer的尺寸
     */
    size?: 'small' | 'medium';
    /**
     * 数据源，默认备选区全部展示，可配合`candidateList`进行部分展示
     * @version 4.16
     */
    dataSource?: TransferDataItem[];
    /**
     * 值
     * @version 4.16
     */
    value?: string[];
    /**
     * 默认值
     * @version 4.16
     */
    defaultValue?: string[];
    /**
     * 已选变化回调(包括所有select与delete操作)
     * @version 4.16
     */
    onChange?: (selectedList: string[]) => void;
    /**
     * 值合并选择策略
     */
    mergeChecked?: 'keep-all' | 'downwards' | 'upwards';
    /**
     * 右侧已选中的树节点，注意这里只包含叶子节点即可【选填 受控】
     *
     * @deprecated use `value`
     */
    selectedList?: string[];
    /**
     * 左侧候选的树节点，注意多层树的话只包含顶层节点即可，筛选可根据修改此字段实现【必填项 受控】
     */
    candidateList?: string[];
    /**
     * 展示面板
     */
    display?: 'candidate' | 'selected' | 'both';
    /**
     * 穿梭框名字
     */
    treeName?: string;
    /**
     * 搜索框placeholder
     */
    placeholder?: string;
    /**
     * 展示选择全部
     */
    showSelectAll?: boolean;
    /**
     * 是否展示可选项数目，默认为true
     */
    showCandidateNum?: boolean;
    /**
     * 是否显示已选数目，默认为true
     */
    showSelectedNum?: boolean;
    /**
     * 已选节点上限，不传则无上限
     */
    maxSelectedNum?: number;
    /**
     * 虚拟滚动
     */
    useVirtualScroll?: boolean;
    /**
     * 穿梭框是否是loading状态
     */
    loading?: boolean;
    /**
     * 穿梭框的loading文案
     */
    loadingText?: ReactNode;
    /**
     * 异步加载子节点数据
     */
    loadData?: (params: {
        parent: TransferDataOption;
        scope: 'descendants' | 'children';
        trigger: 'expand' | 'check';
    }) => Promise<void>;
    /**
     * 右侧已选树的展开节点【选填 受控】
     */
    expandedSelectedKeys?: string[];
    /**
     * 左侧候选树的展开节点【选填 受控】
     */
    expandedCandidateKeys?: string[];
    /**
     * 右侧已选树展开/收起时触发
     */
    handleSelectedExpand?: (expandedKeys: string[]) => void;
    /**
     * 左侧候选树展开/收起时触发
     */
    handleCandidateExpand?: (expandedKeys: any, { expanded, node }: {
        expanded: boolean;
        node: any;
    }) => void;
    /**
     * 整个穿梭框的资源信息【必填 受控】
     * 示例：
     * {
     *   [key]: {
     *      key: 1,
     *      title: '计划1'
     *   },
     *   ...
     * }
     *
     */
    allDataMap?: {
        [key: string]: TransferDataOption;
    };
    /**
     * 左侧候选树节点单个选择回调
     */
    handleSelect?: (selectedList: string[], allDataMap: any, expandedKeys: string[], event: {
        target: {
            key: string;
        };
    }) => void;
    /**
     * 全选回调
     */
    handleSelectAll?: (selectedList: string[], allDataMap: any, expandedKeys: string[]) => void;
    /**
     * 右侧已选树单个删除回调
     */
    handleDelete?: (selectedList: string[], allDataMap: any, deleteKey: string) => void;
    /**
     * 右侧已选树全部删除回调
     */
    handleDeleteAll?: (selectedList: string[], allDataMap: any, expandedKeys: string[]) => void;
    /**
     * 自定义左侧树样式
     */
    candidateTreeStyle?: CSSProperties;
    /**
     * 自定义右侧树样式
     */
    selectedTreeStyle?: CSSProperties;
    /**
     * 自定义候选树头部标题render
     */
    CandidateTitleRender?: ReactNode | (() => ReactNode);
    /**
     * 自定义已选树头部标题render
     */
    SelectedTitleRender?: ReactNode | (() => ReactNode);
    /**
     * 自定义候选项格式，可实现多列选择器
     */
    CandidateItem?: ReactNode | (() => ReactNode);
    /**
     * 自定义候选项的props，在传CandidateItem时生效
     */
    candidateItemProps?: object;
    /**
     * 自定义已选项格式，可实现多列选择器
     */
    SelectedItem?: ReactElement | (() => ReactElement);
    /**
     * 自定义已选项的props，在传SelectedItem时生效
     */
    selectedItemProps?: object;
    /**
     * 是否显示搜索框，默认为true
     */
    showSearchBox?: boolean;
    /**
     * 搜索框搜索回调
     */
    handleSearch?: SearchBoxProps['onSearch'];
    /**
     * 搜索框的值
     */
    searchValue?: string;
    /**
     * 搜索框的默认值 - 非受控
     */
    defaultSearchValue?: string;
    /**
     * 搜索框输入回调
     */
    onSearchChange?: SearchBoxProps['onChange'] | SearchBoxProps['onClearClick'];
    /**
     * 自定义搜索筛选render
     */
    SearchBoxRender?: ReactElement | (() => ReactElement);
    /**
     * 自定义搜索筛选props
     */
    searchRenderProps?: object;
    /**
     * 搜索框focus回调
     */
    onSearchBoxFocus?: SearchBoxProps['onFocus'];
    /**
     * 搜索框blur回调
     */
    onSearchBoxBlur?: (e: React.FocusEvent<HTMLInputElement, Element>, isShowLevelSelect: boolean) => void;
    /**
     * 当前选中层级
     */
    levelKey?: string;
    /**
     * 是否显示层级信息，默认为false
     */
    isShowLevel?: boolean;
    /**
     * 层级信息配置，isShowLevelSelect为true时生效
     */
    levelOptions?: Array<{
        value: string;
        label: ReactNode;
    }>;
    /**
     * 层级切换回调，参数同Select组件
     */
    handleLevelChange?: (value: string) => void;
    /**
     * 是否启用层级选择筛选，默认为true
     */
    isShowLevelSelect?: boolean;
    /**
     * 是否展示新建按钮
     */
    showCandidateFooter?: boolean;
    /**
     * 新建按钮自定义props
     */
    candidateFooterProps?: object;
    /**
     * 自定义footer
     */
    CandidateFooterRender?: ReactNode | (() => ReactNode);
    /**
     * 自定义结果区footer
     */
    selectedPaneFooter?: ReactNode | (() => ReactNode);
    /**
     * 自定义备选区
     */
    CustomCandidatePane?: ReactElement | ((props: any) => ReactElement);
    /**
     * 自定义已选区
     */
    CustomSelectedPane?: ReactElement | ((props: any) => ReactElement);
    /**
     * 自定义备选区顶部
     */
    BeforeCandidatePane?: ReactElement | (() => ReactElement);
    /**
     * 自定义已选区底部
     */
    BeforeSelectedPane?: ReactElement | (() => ReactElement);
    /**
     * 自定义备选区操作
     */
    CustomCandidateOperation?: ReactNode;
    /**
     * 自定义已选区操作
     */
    CustomSelectedOperation?: ReactNode;
    /**
     * 待选区为空时展示内容
     */
    candidateEmpty?: ReactNode;
    /**
     * 已选区为空时展示内容
     */
    seletedEmpty?: ReactNode;
}
