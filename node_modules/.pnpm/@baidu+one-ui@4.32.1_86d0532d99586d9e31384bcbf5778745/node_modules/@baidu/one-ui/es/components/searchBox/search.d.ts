import { PureComponent } from 'react';
import { SearchBoxProps } from './interface';
interface SearchBoxState {
    searchIconWidth?: number;
    visible?: boolean;
    inputValue?: string;
    value?: string;
    hasFocus?: boolean;
    prevProps?: SearchBoxProps;
}
declare class SearchBox extends PureComponent<SearchBoxProps, SearchBoxState> {
    static defaultProps: {
        prefixCls: string;
        type: string;
        disabled: boolean;
        defaultQuery: {};
        isShowSearchIcon: boolean;
        dropdownHeight: string;
        options: any[];
        searchIconType: string;
        size: string;
        showSearchIcon: boolean;
        showCloseIcon: boolean;
        autoFocus: boolean;
        customRender: any;
    };
    constructor(props: any);
    searchIconAnchor: any;
    composition: any;
    search: any;
    ___stopBlur___: any;
    container: any;
    componentDidMount(): void;
    componentDidUpdate(): void;
    setSearchIconWidth(): void;
    static getDerivedStateFromProps: (nextProps: any, prevState: any) => SearchBoxState;
    onCompositionStart: () => void;
    onCompositionEnd: (e: any) => void;
    onChange: (e: any) => void;
    onVisibleChange: (visible: any) => void;
    focus(): void;
    blur(): void;
    onFocus: (e: any) => void;
    onBlur: (e: any) => void;
    getInputClassName: () => any;
    getSubMenuItem: (option: any) => JSX.Element;
    handleMenuClick: (e: any) => void;
    handleKeyDown: (e: any) => void;
    addAnchor: (key: any, el: any) => void;
    handleClose: () => void;
    handleSearch: () => void;
    renderIcon: () => JSX.Element;
    renderInput: () => JSX.Element;
    renderLayer: () => JSX.Element;
    render(): JSX.Element;
}
export default SearchBox;
