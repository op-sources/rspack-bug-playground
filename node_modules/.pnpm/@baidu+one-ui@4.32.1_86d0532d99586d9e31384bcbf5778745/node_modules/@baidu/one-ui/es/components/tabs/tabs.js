import _extends from "@babel/runtime/helpers/extends";
import _regeneratorRuntime from "@babel/runtime/regenerator";
import _asyncToGenerator from "@babel/runtime/helpers/asyncToGenerator";
import _inheritsLoose from "@babel/runtime/helpers/inheritsLoose";
import _findIndex from "lodash/findIndex";
import _partial from "lodash/partial";

var _dec, _class, _class2, _temp;

import React, { isValidElement, PureComponent } from 'react';
import TabNode from './common/tabNode';
import ScrollBar from './common/scrollBar';
import ScrollContainer from './common/scrollContainer';
import { classnames } from '../../core/commonTools';
import { withConfigConsumer } from '../providerConfig/context';
;
var Tabs = (_dec = withConfigConsumer('tabs'), _dec(_class = (_temp = _class2 = /*#__PURE__*/function (_PureComponent) {
  _inheritsLoose(Tabs, _PureComponent);

  function Tabs(_props) {
    var _this;

    _this = _PureComponent.call(this, _props) || this;

    _this.onClick = function (key, props) {
      if (props.disabled) {
        return;
      }

      if (!('activeKey' in _this.props)) {
        // 非受控
        _this.setState({
          activeKey: key
        });
      }

      _this.props.onTabClick(key);

      _this.onChange(key);
    };

    _this.onBeforeDelete = /*#__PURE__*/function () {
      var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(key, props) {
        var onBeforeDelete;
        return _regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                if (!props.disabled) {
                  _context.next = 2;
                  break;
                }

                return _context.abrupt("return", false);

              case 2:
                onBeforeDelete = _this.props.onBeforeDelete;

                if (!onBeforeDelete) {
                  _context.next = 13;
                  break;
                }

                _context.prev = 4;
                _context.next = 7;
                return onBeforeDelete(key);

              case 7:
                return _context.abrupt("return", _context.sent);

              case 10:
                _context.prev = 10;
                _context.t0 = _context["catch"](4);
                return _context.abrupt("return", false);

              case 13:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, null, [[4, 10]]);
      }));

      return function (_x, _x2) {
        return _ref.apply(this, arguments);
      };
    }();

    _this.onDelete = function (key, props) {
      if (props.disabled) {
        return;
      }

      _this.props.onDelete(key);
    };

    _this.onAdd = function () {
      _this.props.onAdd(_this.state.activeKey);
    };

    _this.onChange = function (currentKey) {
      if (_this.state.activeKey !== currentKey) {
        _this.props.onChange(currentKey);
      }
    };

    _this.renderChildren = function () {
      var titles = [];
      var newPaneChildren = [];
      var _this$props = _this.props,
          children = _this$props.children,
          prefixCls = _this$props.prefixCls,
          size = _this$props.size,
          type = _this$props.type;
      var activeKey = _this.state.activeKey;
      React.Children.forEach(children, function (child) {
        var _classnames;

        if (! /*#__PURE__*/isValidElement(child)) {
          return;
        }

        var _child$props = child.props,
            props = _child$props === void 0 ? {} : _child$props,
            key = child.key;

        var nodeProps = _extends({}, props, {
          key: key,
          currentKey: key,
          activeKey: activeKey,
          prefixCls: prefixCls,
          size: size,
          onClick: _partial(_this.onClick, key, props),
          onDelete: _partial(_this.onDelete, key, props),
          onBeforeDelete: _partial(_this.onBeforeDelete, key, props)
        });

        titles.push(nodeProps);
        var paneClassName = classnames(prefixCls + "-tab-pane", (_classnames = {}, _classnames[prefixCls + "-tab-pane-is-active"] = activeKey === key, _classnames[prefixCls + "-tab-pane-is-inactive"] = activeKey !== key, _classnames));
        newPaneChildren.push( /*#__PURE__*/React.createElement("div", {
          key: key,
          className: paneClassName
        }, child));
      });

      var activeIndex = _findIndex(titles, function (item) {
        return activeKey === item.key;
      });

      var total = titles.length;
      return {
        newTitleChildren: titles.map(function (props, index) {
          return /*#__PURE__*/React.createElement(TabNode, _extends({}, props, {
            index: index,
            total: total,
            activeIndex: activeIndex
          }));
        }),
        newPaneChildren: newPaneChildren
      };
    };

    _this.scrollBarRef = void 0;

    _this.getScrollBarRef = function (ref) {
      _this.scrollBarRef = ref;
    };

    var _activeKey = _props.activeKey || _props.defaultActiveKey || null;

    _this.state = {
      activeKey: _activeKey
    };
    return _this;
  }

  var _proto = Tabs.prototype;

  _proto.render = function render() {
    var _classnames2;

    var _this$props2 = this.props,
        prefixCls = _this$props2.prefixCls,
        size = _this$props2.size,
        className = _this$props2.className,
        hideSpace = _this$props2.hideSpace,
        type = _this$props2.type,
        bordered = _this$props2.bordered,
        showAdd = _this$props2.showAdd,
        showAddDisabled = _this$props2.showAddDisabled,
        onNextClick = _this$props2.onNextClick,
        onPrevClick = _this$props2.onPrevClick,
        addButtonText = _this$props2.addButtonText,
        extra = _this$props2.extra,
        style = _this$props2.style,
        sortable = _this$props2.sortable,
        onSort = _this$props2.onSort;
    var activeKey = this.state.activeKey;
    var tabsClassNames = classnames(prefixCls, prefixCls + "-" + size, prefixCls + "-" + type, (_classnames2 = {}, _classnames2[prefixCls + "-hide-space"] = hideSpace, _classnames2[prefixCls + "-border-less"] = !bordered, _classnames2), className);

    var _this$renderChildren = this.renderChildren(),
        newTitleChildren = _this$renderChildren.newTitleChildren,
        newPaneChildren = _this$renderChildren.newPaneChildren;

    return /*#__PURE__*/React.createElement("div", {
      className: tabsClassNames
    }, /*#__PURE__*/React.createElement(ScrollBar, {
      content: newTitleChildren,
      prefixCls: prefixCls,
      showAdd: showAdd,
      type: type,
      onAdd: this.onAdd,
      activeKey: activeKey,
      showAddDisabled: showAddDisabled,
      ref: this.getScrollBarRef,
      onNextClick: onNextClick,
      onPrevClick: onPrevClick,
      addButtonText: addButtonText,
      extra: extra,
      style: style,
      size: size,
      sortable: sortable,
      onSort: onSort
    }), /*#__PURE__*/React.createElement(ScrollContainer, {
      content: newPaneChildren,
      prefixCls: prefixCls,
      title: newTitleChildren,
      activeKey: activeKey
    }));
  };

  return Tabs;
}(PureComponent), _class2.defaultProps = {
  prefixCls: 'one-tabs',
  className: '',
  size: 'medium',
  showAdd: false,
  type: 'line',
  bordered: true,
  sortable: false,
  onTabClick: function onTabClick() {},
  onChange: function onChange() {},
  onDelete: function onDelete() {},
  onAdd: function onAdd() {},
  showAddDisabled: false,
  addButtonText: '添加标签',
  hideSpace: false
}, _class2.getDerivedStateFromProps = function (nextProps, prevState) {
  var newState = {};

  if ('activeKey' in nextProps && nextProps.activeKey !== prevState.activeKey) {
    newState.activeKey = nextProps.activeKey;
  }

  return newState;
}, _class2.TabPane = void 0, _temp)) || _class);
export default Tabs;