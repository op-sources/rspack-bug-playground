import React from 'react';
import { DrawerWrapperProps } from './drawerWrapper';
interface DrawerChildProps extends Omit<DrawerWrapperProps, 'defaultOpen' | 'wrapperClassName' | 'forceRender'> {
    getOpenCount?(): number;
    switchScrollingEffect?: any;
    scrollLocker?: any;
}
declare class DrawerChild extends React.Component<DrawerChildProps> {
    constructor(props: any);
    static getDerivedStateFromProps: (props: any, { prevProps, _self }: {
        prevProps: any;
        _self: any;
    }) => {
        prevProps: any;
    };
    passive: any;
    drawerId: any;
    dom: any;
    handlerDom: any;
    maskDom: any;
    contentDom: any;
    levelDom: any;
    contentWrapper: any;
    startPos: any;
    handleClickBody: (e: any) => void;
    componentDidMount(): void;
    componentDidUpdate(prevProps: any): void;
    componentWillUnmount(): void;
    domFocus: () => void;
    removeStartHandler: (e: any) => void;
    removeMoveHandler: (e: any) => void;
    transitionEnd: (e: any) => void;
    onKeyDown: (e: any) => void;
    onWrapperTransitionEnd: (e: any) => void;
    openLevelTransition: () => void;
    setLevelTransform: (open: any, placementName?: any, value?: any, right?: any) => void;
    setLevelAndScrolling: (open: any, placementName: any, value: any) => void;
    toggleScrollingToDrawerAndBody: (right: any) => void;
    getCurrentDrawerSome: () => boolean;
    getLevelDom: ({ level, getContainer }: {
        level: any;
        getContainer?: any;
    }) => void;
    getHorizontalBoolAndPlacementName: () => {
        isHorizontal: boolean;
        placementName: string;
    };
    onClick: (e: any) => void;
    render(): JSX.Element;
}
export default DrawerChild;
