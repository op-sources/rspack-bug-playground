import React, { CSSProperties, PureComponent, ReactElement, ReactNode, KeyboardEventHandler } from 'react';
import { SelectOptionProps, SelectValueType } from '../interface';
import { BasePropsWithChildren } from '../../interface';
interface SelectOptionInfo {
    label: ReactNode;
    title?: string;
    value: string | number;
    disabled?: boolean;
    exclusive?: boolean;
    option: ReactElement<SelectOptionProps>;
}
interface OneSelectBaseProps extends BasePropsWithChildren {
    multiple?: boolean;
    tags?: boolean;
    combobox?: boolean;
    filterOption?: any;
    showSearch?: boolean;
    disabled?: boolean;
    allowClear?: boolean;
    showArrow?: boolean;
    transitionName?: string;
    choiceTransitionName?: string;
    animation?: string;
    optionLabelProp?: string;
    optionFilterProp?: string;
    onBlur?(value: any): any;
    onFocus?(): any;
    onSelect?(value: any, option: any): any;
    onSearch?(query: any): any;
    onPopupScroll?(): any;
    onMouseEnter?(): any;
    onMouseLeave?(): any;
    onInputKeyDown?: KeyboardEventHandler<HTMLInputElement>;
    placeholder?: any;
    onDeselect?(event: any, value: any): any;
    labelInValue?: boolean;
    dropdownStyle?: object;
    dropdownClassName?: string;
    maxTagCount?: number;
    tokenSeparators?: Array<string>;
    getInputElement?(): ReactElement;
    showAction?: Array<string>;
    clearIcon?: ReactNode;
    inputIcon?: ReactNode;
    removeIcon?: ReactNode;
    menuItemSelectedIcon?: ReactNode | (() => ReactNode);
    titleCallback: {
        type: string;
        selectorName: string;
        customRenderTarget(singleValue: any): ReactNode;
    };
    trigger?: string;
    disabledReason?: string;
    selectorName?: string;
    customRenderTarget?(singleValue: any, optionInfo: any): ReactNode;
    size?: 'xsmall' | 'small' | 'medium' | 'large';
    suffixIcon?: ReactNode | (() => ReactNode);
    checkboxPrefixCls?: string;
    /**
     * 穿梭框是否是loading状态
     */
    loading?: boolean;
    /**
     * 穿梭框的loading文案
     */
    loadingText?: ReactNode;
    autoFocus?: boolean;
    autoClearSearchValue?: boolean;
    style?: CSSProperties;
    onDropdownVisibleChange?(visible: boolean): any;
    notFoundContent?: ReactNode;
    dropdownMatchSelectWidth?: boolean;
    defaultActiveFirstOption?: boolean;
    dropdownMenuStyle?: CSSProperties;
    backfill?: boolean;
    getPopupContainer?(triggerNode: HTMLElement): HTMLElement;
    id?: string;
    open?: boolean;
    defaultOpen?: boolean;
    firstActiveValue?: string;
    dropdownAlign?: object;
    showCheckAll?: boolean;
    footer?: ReactNode | (() => ReactNode);
}
declare type OneSelectProps = OneSelectBaseProps & Omit<SelectValueType, 'mode'>;
interface OneSelectState {
    inputValue?: string;
    value?: Array<string | number>;
    backfillValue?: string;
    open?: boolean;
    ctrNodeHeight?: number;
    skipBuildOptionsInfo?: boolean;
    optionsInfo?: {
        [key: string]: SelectOptionInfo;
    };
    showDisabledReason?: boolean;
    children?: ReactElement[];
}
export default class OneSelect extends PureComponent<OneSelectProps, OneSelectState> {
    static defaultProps: {
        prefixCls: string;
        defaultOpen: boolean;
        labelInValue: boolean;
        defaultActiveFirstOption: boolean;
        allowClear: boolean;
        placeholder: string;
        onChange: () => void;
        onFocus: () => void;
        onBlur: () => void;
        onSelect: () => void;
        onSearch: () => void;
        onDeselect: () => void;
        onInputKeyDown: () => void;
        showArrow: boolean;
        dropdownMatchSelectWidth: boolean;
        dropdownStyle: {};
        dropdownMenuStyle: {};
        optionFilterProp: string;
        optionLabelProp: string;
        notFoundContent: string;
        backfill: boolean;
        showAction: string[];
        tokenSeparators: any[];
        autoClearSearchValue: boolean;
        titleCallback: {
            type: string;
            selectorName: string;
        };
        disabledReason: string;
        selectorName: string;
        size: string;
        suffixIcon: any;
        checkboxPrefixCls: string;
        loading: boolean;
        loadingText: string;
    };
    constructor(props: any);
    inputRef: any;
    inputMirrorRef: any;
    topCtrlRef: any;
    selectTriggerRef: any;
    rootRef: any;
    selectionRef: any;
    saveInputRef: any;
    saveInputMirrorRef: any;
    saveTopCtrlRef: any;
    saveSelectTriggerRef: any;
    saveRootRef: any;
    saveSelectionRef: any;
    dropdownContainer: any;
    _focused: boolean;
    blurTimer: any;
    focusTimer: any;
    _mouseDown: any;
    _options: any;
    componentDidMount(): void;
    static getDerivedStateFromProps(props: any, state: any): OneSelectState;
    componentDidUpdate: (prevProps: any, prevState: any) => void;
    componentWillUnmount(): void;
    onInputChange: (event: any) => void;
    onDropdownVisibleChange: (open: any) => void;
    onKeyDown: (event: any) => void;
    onInputKeyDown: (event: any) => void;
    onMenuSelect: ({ item }: {
        item: any;
    }) => void;
    onMenuDeselect: ({ item, domEvent }: {
        item: any;
        domEvent: any;
    }) => void;
    onArrowClick: (e: any) => void;
    onPlaceholderClick: () => void;
    onOuterFocus: (e: any) => void;
    onPopupFocus: () => void;
    onOuterBlur: (e: any) => void;
    onMouseEnter: () => void;
    onMouseLeave: () => void;
    onClearSelection: (event: any) => void;
    onChoiceAnimationLeave: () => void;
    static getOptionsFromChildren: (children: any, options?: any[]) => any[];
    static getInputValueForCombobox: (props: any, optionsInfo: any, useDefaultValue?: any) => string;
    static getLabelFromOption: (props: any, option: any) => any;
    static getOptionsInfoFromProps: (props: any, preState?: any) => {};
    static getValueFromProps: (props: any, useDefaultValue?: any) => any[];
    getOptionInfoBySingleValue: (value: any, optionsInfo?: {
        [key: string]: SelectOptionInfo;
    }) => SelectOptionInfo;
    getOptionBySingleValue: (value: string | number) => ReactElement<SelectOptionProps>;
    getOptionsBySingleValue: (values: any) => any;
    getValueByLabel: (label: any) => any;
    getVLBySingleValue: (value: any) => any;
    getVLForOnChange: (vls_: any) => any;
    getLabelBySingleValue: (value: string | number, optionsInfo?: any) => React.ReactNode;
    getDropdownContainer: () => any;
    getPlaceholderElement: () => JSX.Element;
    getInputElement: () => JSX.Element;
    getInputDOMNode: () => any;
    getInputMirrorDOMNode: () => any;
    getPopupDOMNode: () => any;
    getPopupMenuComponent: () => any;
    setOpenState: (open: boolean, needFocus?: boolean) => void;
    setInputValue: (inputValue: any, fireSearch?: boolean) => void;
    getValueByInput: (string: any) => (string | number)[];
    getRealOpenState: (state?: OneSelectState) => boolean;
    hidePopElementInSearchMode: () => boolean;
    focus: () => void;
    blur: () => void;
    markMouseDown: () => void;
    markMouseLeave: () => void;
    handleBackfill: (item: any) => void;
    filterOption: (input: any, child: any, defaultFilter?: any) => any;
    timeoutFocus: () => void;
    clearFocusTime: () => void;
    clearBlurTime: () => void;
    updateFocusClassName: () => void;
    maybeFocus: (open: any, needFocus: any) => void;
    getToggleAllValue(): (string | number)[];
    getCheckAllState(): {
        checked: boolean;
        indeterminate: boolean;
    };
    removeSelected: (selectedKey: string | number, e?: any) => void;
    openIfHasChildren: () => void;
    fireSelect: (value: any) => void;
    fireChange: (value: any) => void;
    isChildDisabled: (key: any) => boolean;
    forcePopupAlign: () => void;
    renderFilterOptions: () => any[];
    renderFilterOptionsFromChildren: (children: any, childrenKeys: any, menuItems: any) => any[];
    renderTopControlNode: () => JSX.Element;
    renderClear(): JSX.Element;
    renderTotalDom(): JSX.Element;
    render(): JSX.Element;
}
export {};
