import _inheritsLoose from "@babel/runtime/helpers/inheritsLoose";
import _partial from "lodash/partial";
import React, { PureComponent } from 'react';
import dayjs from 'dayjs';
import { formatPerMonthInDay, getTimeTramp, formatWeek } from '../../../core/datePickerTools';
import { classnames } from '../../../core/commonTools';

var betweenTime = function betweenTime(startTime, endTime, time) {
  return startTime && endTime && time >= startTime && time <= endTime;
};

var normalizeWeekDays = function normalizeWeekDays(day, _ref, selectedValue) {
  var minTime = _ref.minTime,
      maxTime = _ref.maxTime,
      validator = _ref.validator;
  var dayTime = getTimeTramp(day.value);
  var disabled = false;

  if (dayTime > maxTime || dayTime < minTime) {
    disabled = true;
  } else if (validator && typeof validator === 'function') {
    disabled = validator({
      selectedValue: selectedValue,
      dayItem: day.value,
      timeStamp: dayTime,
      getTimeStamp: getTimeTramp
    });
  }

  day.disabled = disabled;
  return day;
};

var RangeDayItemRender = /*#__PURE__*/function (_PureComponent) {
  _inheritsLoose(RangeDayItemRender, _PureComponent);

  function RangeDayItemRender() {
    var _this;

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _PureComponent.call.apply(_PureComponent, [this].concat(args)) || this;
    _this.cache = {};

    _this.memoize = function (param) {
      if (!this.cache[param]) {
        var date = param.split('/');
        var result = formatPerMonthInDay({
          year: date[0],
          month: date[1]
        });
        this.cache[param] = result;
      }

      return this.cache[param];
    };

    _this.onClickDay = function (value, disabled, readOnly) {
      if (disabled) {
        return;
      }

      var _this$props = _this.props,
          onChange = _this$props.onChange,
          dateFormat = _this$props.dateFormat,
          multiple = _this$props.multiple;
      onChange(dayjs(value).format(dateFormat), multiple && readOnly);
    };

    _this.onMouseEnter = function (value, disabled) {
      if (disabled) {
        return;
      }

      _this.props.onMouseEnter(value);
    };

    _this.onMouseLeave = function (value, disabled) {
      if (disabled) {
        return;
      }

      _this.props.onMouseLeave(value);
    };

    _this.renderMonthItem = function () {
      var _this$props2 = _this.props,
          showYear = _this$props2.showYear,
          showMonth = _this$props2.showMonth,
          prefixCls = _this$props2.prefixCls,
          beginDate = _this$props2.beginDate,
          validateMinDate = _this$props2.validateMinDate,
          validateMaxDate = _this$props2.validateMaxDate,
          endDate = _this$props2.endDate,
          hoverDate = _this$props2.hoverDate,
          mode = _this$props2.mode,
          multiple = _this$props2.multiple,
          validateDisabled = _this$props2.validateDisabled;

      var perMonthInDay = _this.memoize(showYear + "/" + showMonth);

      var selectedValue = [beginDate, endDate].filter(Boolean);
      var minTime = getTimeTramp(validateMinDate);
      var maxTime = getTimeTramp(validateMaxDate);
      var validation = {
        minTime: minTime,
        maxTime: maxTime,
        validator: validateDisabled
      };
      var weeks = formatWeek(perMonthInDay).map(function (days) {
        return days.map(function (day) {
          return normalizeWeekDays(day, validation, selectedValue);
        });
      });
      var itemDaysClx = prefixCls + "-body-month";
      var todayTime = getTimeTramp(dayjs().startOf('day'));
      var startTime = beginDate ? getTimeTramp(beginDate) : null;
      var endTime = endDate ? getTimeTramp(endDate) : startTime;
      var singleSelected = multiple && beginDate && !endDate;
      var hoverTime = hoverDate ? getTimeTramp(hoverDate) : null;

      if (singleSelected && hoverTime && hoverTime < startTime && mode === 'week') {
        startTime = Math.min(maxTime, getTimeTramp(dayjs(endTime).endOf('week').startOf('day')));
        endTime = startTime;
      }

      var hoverStartTime = hoverTime;
      var hoverEndTime = hoverTime;

      if (mode === 'week' && hoverTime) {
        hoverStartTime = Math.max(minTime, getTimeTramp(dayjs(hoverTime).startOf('week')));
        hoverEndTime = Math.min(maxTime, getTimeTramp(dayjs(hoverTime).endOf('week').startOf('day')));
      }

      var rangeStartTime = singleSelected && hoverStartTime ? Math.min(startTime, hoverStartTime) : startTime;
      var rangeEndTime = singleSelected && hoverEndTime ? Math.max(endTime, hoverEndTime) : endTime;
      return /*#__PURE__*/React.createElement("div", {
        className: itemDaysClx
      }, weeks.map(function (days, index) {
        return /*#__PURE__*/React.createElement("div", {
          key: "week-" + index,
          className: itemDaysClx + "-week"
        }, days.map(function (_ref2) {
          var _classnames;

          var value = _ref2.value,
              label = _ref2.label,
              disabled = _ref2.disabled,
              isCurrentMonth = _ref2.isCurrentMonth;
          var dayTime = getTimeTramp(value);
          var readOnly = !isCurrentMonth;
          var range = betweenTime(rangeStartTime, rangeEndTime, dayTime) && !readOnly && !disabled;
          var startSelected = dayTime === startTime && !readOnly;
          var endSelected = dayTime === endTime && !readOnly;
          var selected = startSelected || endSelected;
          var className = classnames(itemDaysClx + "-item", (_classnames = {}, _classnames[itemDaysClx + "-item-read-only"] = readOnly, _classnames[itemDaysClx + "-item-today"] = dayTime === todayTime && !readOnly, _classnames[itemDaysClx + "-item-disabled"] = disabled, _classnames[itemDaysClx + "-item-selected"] = selected, _classnames[itemDaysClx + "-item-selected-start"] = startSelected, _classnames[itemDaysClx + "-item-selected-end"] = endSelected, _classnames[itemDaysClx + "-item-range"] = range, _classnames[itemDaysClx + "-item-range-start"] = rangeStartTime === dayTime && !readOnly && !disabled, _classnames[itemDaysClx + "-item-range-end"] = rangeEndTime === dayTime && !readOnly && !disabled, _classnames[itemDaysClx + "-item-hover"] = !singleSelected && !readOnly && betweenTime(hoverStartTime, hoverEndTime, dayTime), _classnames[itemDaysClx + "-item-hover-end"] = !singleSelected && !readOnly && hoverEndTime === dayTime, _classnames));
          return /*#__PURE__*/React.createElement("span", {
            key: value,
            className: className,
            onClick: _partial(_this.onClickDay, value, disabled, readOnly),
            onMouseEnter: _partial(_this.onMouseEnter, value, disabled),
            onMouseLeave: _partial(_this.onMouseLeave, value, disabled)
          }, /*#__PURE__*/React.createElement("span", null, label));
        }));
      }));
    };

    return _this;
  }

  var _proto = RangeDayItemRender.prototype;

  _proto.render = function render() {
    return this.renderMonthItem();
  };

  return RangeDayItemRender;
}(PureComponent);

RangeDayItemRender.defaultProps = {
  onChange: function onChange() {},
  onMouseEnter: function onMouseEnter() {},
  onMouseLeave: function onMouseLeave() {}
};
export { RangeDayItemRender as default };