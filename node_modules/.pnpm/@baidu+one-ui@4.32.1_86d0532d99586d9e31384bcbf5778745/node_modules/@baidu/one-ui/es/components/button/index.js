import _extends from "@babel/runtime/helpers/extends";
import _objectWithoutPropertiesLoose from "@babel/runtime/helpers/objectWithoutPropertiesLoose";
import _inheritsLoose from "@babel/runtime/helpers/inheritsLoose";
import _noop from "lodash/noop";

var _dec, _class, _class2, _temp;

/**
 * @file 按钮
 * @author huangshiming
 * @date 2020-05-04
 */
import React, { PureComponent } from 'react';
import { withConfigConsumer } from '../providerConfig/context';
import { classnames } from '../../core/commonTools';
import Loading from '../loading';
import IconSvg from '../iconSvg';
import { COMPONENT_MAIN } from '../config';
import { isValidElementType } from 'react-is';
var Button = (_dec = withConfigConsumer('button'), _dec(_class = (_temp = _class2 = /*#__PURE__*/function (_PureComponent) {
  _inheritsLoose(Button, _PureComponent);

  function Button() {
    var _this;

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _PureComponent.call.apply(_PureComponent, [this].concat(args)) || this;

    _this.handleClick = function (e) {
      var _this$props = _this.props,
          disabled = _this$props.disabled,
          readonly = _this$props.readonly,
          onClick = _this$props.onClick,
          readOnly = _this$props.readOnly,
          loading = _this$props.loading;

      if (disabled || readonly || readOnly || loading) {
        e.preventDefault();
        return;
      }

      if (onClick) {
        onClick(e);
      }
    };

    return _this;
  }

  var _proto = Button.prototype;

  _proto.render = function render() {
    var _classnames;

    var _this$props2 = this.props,
        type = _this$props2.type,
        className = _this$props2.className,
        icon = _this$props2.icon,
        htmlType = _this$props2.htmlType,
        disabled = _this$props2.disabled,
        readonly = _this$props2.readonly,
        readOnly = _this$props2.readOnly,
        loading = _this$props2.loading,
        children = _this$props2.children,
        prefixCls = _this$props2.prefixCls,
        size = _this$props2.size,
        rest = _objectWithoutPropertiesLoose(_this$props2, ["type", "className", "icon", "htmlType", "disabled", "readonly", "readOnly", "loading", "children", "prefixCls", "size"]);

    var onlyIcon = !children && icon;
    var newType = type === 'link' ? 'text' : type;
    var classes = classnames(prefixCls, className, COMPONENT_MAIN, (_classnames = {}, _classnames[prefixCls + "-" + newType] = newType, _classnames[prefixCls + "-" + size] = size, _classnames[prefixCls + "-" + newType + "-disabled"] = disabled, _classnames[prefixCls + "-readOnly"] = readonly || readOnly, _classnames[prefixCls + "-icon-only"] = onlyIcon, _classnames[prefixCls + "-" + newType + "-loading"] = loading, _classnames[prefixCls + "-has-icon"] = icon, _classnames));

    var buttonProps = _extends({
      type: htmlType || 'button',
      disabled: disabled
    }, rest, {
      onClick: this.handleClick
    });

    var iconNode = null;

    if (icon) {
      if (typeof icon === 'string') {
        iconNode = /*#__PURE__*/React.createElement(IconSvg, {
          type: icon
        });
      } else if (isValidElementType(icon)) {
        var RealIcon = icon;
        iconNode = /*#__PURE__*/React.createElement(RealIcon, null);
      } else if (typeof icon === 'object') {
        iconNode = icon;
      }

      if ( /*#__PURE__*/React.isValidElement(iconNode)) {
        iconNode = /*#__PURE__*/React.cloneElement(iconNode, {
          className: classnames(iconNode.props.className, prefixCls + "-icon")
        });
      }
    }

    if (onlyIcon && loading) {
      // 只有图标，并且只在loading状态的时候，只展现loading状态
      return (
        /*#__PURE__*/
        // eslint-disable-next-line react/button-has-type
        React.createElement("button", _extends({}, buttonProps, {
          className: classes
        }), /*#__PURE__*/React.createElement(Loading, {
          size: "small",
          className: prefixCls + "-loading-icon"
        }))
      );
    }

    return /*#__PURE__*/React.createElement("button", _extends({}, buttonProps, {
      className: classes
    }), loading ? /*#__PURE__*/React.createElement(Loading, {
      size: "small",
      className: prefixCls + "-loading-icon"
    }) : iconNode, children && /*#__PURE__*/React.createElement("span", null, children));
  };

  return Button;
}(PureComponent), _class2.defaultProps = {
  prefixCls: 'one-button',
  type: 'normal',
  size: 'medium',
  name: '',
  icon: '',
  htmlType: 'button',
  disabled: false,
  readonly: false,
  readOnly: false,
  onClick: _noop,
  loading: false
}, _class2.displayName = 'Button', _temp)) || _class);
export default Button;
export * from './interface';