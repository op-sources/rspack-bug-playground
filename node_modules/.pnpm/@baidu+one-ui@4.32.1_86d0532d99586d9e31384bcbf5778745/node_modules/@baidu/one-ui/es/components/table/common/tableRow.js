import _extends from "@babel/runtime/helpers/extends";
import _inheritsLoose from "@babel/runtime/helpers/inheritsLoose";
import _isEqual from "lodash/isEqual";
import React, { Component } from 'react';
import { connect } from 'mini-store';
import TableCell from './tableCell';
import { classnames } from '../../../core/commonTools';
import shallowequal from 'shallowequal';
;

var TableRow = /*#__PURE__*/function (_Component) {
  _inheritsLoose(TableRow, _Component);

  function TableRow(props) {
    var _this;

    _this = _Component.call(this, props) || this;

    _this.onRowClick = function (event) {
      var _this$props = _this.props,
          record = _this$props.record,
          index = _this$props.index,
          onRowClick = _this$props.onRowClick;

      if (onRowClick) {
        onRowClick(record, index, event);
      }
    };

    _this.onRowDoubleClick = function (event) {
      var _this$props2 = _this.props,
          record = _this$props2.record,
          index = _this$props2.index,
          onRowDoubleClick = _this$props2.onRowDoubleClick;

      if (onRowDoubleClick) {
        onRowDoubleClick(record, index, event);
      }
    };

    _this.onContextMenu = function (event) {
      var _this$props3 = _this.props,
          record = _this$props3.record,
          index = _this$props3.index,
          onRowContextMenu = _this$props3.onRowContextMenu;

      if (onRowContextMenu) {
        onRowContextMenu(record, index, event);
      }
    };

    _this.onMouseEnter = function (event) {
      var _this$props4 = _this.props,
          record = _this$props4.record,
          index = _this$props4.index,
          onRowMouseEnter = _this$props4.onRowMouseEnter,
          onHover = _this$props4.onHover,
          rowKey = _this$props4.rowKey;
      onHover(true, rowKey);

      if (onRowMouseEnter) {
        onRowMouseEnter(record, index, event);
      }
    };

    _this.onMouseLeave = function (event) {
      var _this$props5 = _this.props,
          record = _this$props5.record,
          index = _this$props5.index,
          onRowMouseLeave = _this$props5.onRowMouseLeave,
          onHover = _this$props5.onHover,
          rowKey = _this$props5.rowKey;
      onHover(false, rowKey);

      if (onRowMouseLeave) {
        onRowMouseLeave(record, index, event);
      }
    };

    _this.state = {};
    return _this;
  }

  TableRow.getDerivedStateFromProps = function getDerivedStateFromProps(nextProps, prevState) {
    if (prevState.visible || !prevState.visible && nextProps.visible) {
      return {
        shouldRender: true,
        visible: nextProps.visible
      };
    }

    return {
      visible: nextProps.visible
    };
  };

  var _proto = TableRow.prototype;

  _proto.shouldComponentUpdate = function shouldComponentUpdate(nextProps) {
    return !!(this.props.visible || nextProps.visible) && !shallowequal(this.props, nextProps, function (a, b, key) {
      if (key === 'columns' || key === 'allColumnsWidth' || key === 'ancestorKeys') {
        return _isEqual(a, b);
      }
    });
  };

  _proto.render = function render() {
    if (!this.state.shouldRender) {
      return null;
    }

    var _this$props6 = this.props,
        prefixCls = _this$props6.prefixCls,
        columns = _this$props6.columns,
        record = _this$props6.record,
        index = _this$props6.index,
        onRow = _this$props6.onRow,
        indent = _this$props6.indent,
        indentSize = _this$props6.indentSize,
        height = _this$props6.height,
        visible = _this$props6.visible,
        hasExpandIcon = _this$props6.hasExpandIcon,
        renderExpandIcon = _this$props6.renderExpandIcon,
        renderExpandIconCell = _this$props6.renderExpandIconCell,
        expanded = _this$props6.expanded,
        _this$props6$allColum = _this$props6.allColumnsWidth,
        allColumnsWidth = _this$props6$allColum === void 0 ? [] : _this$props6$allColum,
        dynamicWidth = _this$props6.dynamicWidth;
    var className = this.props.className;
    var cells = [];
    var colWidth = 0;
    allColumnsWidth.forEach(function (col) {
      colWidth += col.width;
    });
    var existStickyRight = false;

    var _loop = function _loop(i) {
      var _classnames;

      var column = columns[i];
      var columnKey = column.key || column.dataIndex;

      var _ref = allColumnsWidth.find(function (col) {
        return col.key === columnKey;
      }) || {},
          left = _ref.left,
          width = _ref.width;

      var stickyLeft = column.fixed === 'left';
      var stickyRight = column.fixed === 'right';
      var nextColumn = columns[i + 1];
      var nextStickyLeft = nextColumn && nextColumn.fixed === 'left';
      var classNames = classnames(column.className, (_classnames = {}, _classnames[prefixCls + "-body-cell-sticky-left"] = stickyLeft, _classnames[prefixCls + "-body-cell-sticky-right"] = stickyRight, _classnames[prefixCls + "-body-cell-sticky-left-last"] = stickyLeft && !nextStickyLeft, _classnames[prefixCls + "-body-cell-sticky-right-first"] = stickyRight && !existStickyRight, _classnames));

      if (stickyRight) {
        existStickyRight = true;
      }

      var leftPos = void 0;
      var rightPos = void 0;

      if (left) {
        if (stickyLeft) {
          leftPos = left - width;
        }

        if (stickyRight) {
          var right = (dynamicWidth || colWidth) - left;

          if (right >= 0) {
            rightPos = right;
          }
        }
      }

      cells.push( /*#__PURE__*/React.createElement(TableCell, {
        prefixCls: prefixCls,
        className: classNames,
        record: record,
        indentSize: indentSize,
        indent: indent,
        index: index,
        cellIndex: i,
        align: column.align,
        render: column.render,
        dataIndex: column.dataIndex,
        onCell: column.onCell,
        onCellClick: column.onCellClick,
        key: column.key || column.dataIndex,
        expandIcon: hasExpandIcon(i) && renderExpandIcon(expanded),
        left: leftPos,
        right: rightPos
      }));
    };

    for (var i = 0; i < columns.length; i++) {
      _loop(i);
    }

    renderExpandIconCell(cells);
    var rowClassName = (prefixCls + " " + className + " " + prefixCls + "-tree-level " + prefixCls + "-level-" + indent).trim();
    var rowProps = onRow(record, index);
    var customStyle = rowProps ? rowProps.style : {};
    var style = {
      height: height
    };

    if (!visible) {
      style.display = 'none';
    }

    style = _extends({}, style, customStyle);
    return /*#__PURE__*/React.createElement("tr", _extends({
      onClick: this.onRowClick,
      onDoubleClick: this.onRowDoubleClick,
      onMouseEnter: this.onMouseEnter,
      onMouseLeave: this.onMouseLeave,
      onContextMenu: this.onContextMenu,
      className: rowClassName
    }, rowProps, {
      style: style
    }), cells);
  };

  return TableRow;
}(Component);

TableRow.defaultProps = {
  onRow: function onRow() {},
  onHover: function onHover() {},
  hasExpandIcon: function hasExpandIcon() {
    return false;
  },
  renderExpandIcon: function renderExpandIcon() {},
  renderExpandIconCell: function renderExpandIconCell() {}
};
export default connect(function (state, props) {
  var expandedRowKeys = state.expandedRowKeys;
  var rowKey = props.rowKey,
      ancestorKeys = props.ancestorKeys,
      columns = props.columns; // eslint-disable-next-line no-bitwise

  var visible = ancestorKeys.length === 0 || ancestorKeys.every(function (k) {
    return ~expandedRowKeys.indexOf(k);
  });
  var hasFixed = columns.some(function (col) {
    return !!col.fixed;
  });
  return {
    dynamicWidth: hasFixed ? state.dynamicWidth : null,
    allColumnsWidth: hasFixed ? state.allColumnsWidth : [],
    ancestorKeys: [],
    visible: visible
  };
})(TableRow);