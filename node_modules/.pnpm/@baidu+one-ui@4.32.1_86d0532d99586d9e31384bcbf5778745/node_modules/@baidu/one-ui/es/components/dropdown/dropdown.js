import _extends from "@babel/runtime/helpers/extends";
import _inheritsLoose from "@babel/runtime/helpers/inheritsLoose";

var _dec, _class, _class2, _temp;

import React, { isValidElement, PureComponent } from 'react';
import warning from 'warning';
import { classnames } from '../../core/commonTools';
import CommonDropdown from './common/dropdown';
import { IconChevronRight } from 'dls-icons-react';
import { withConfigConsumer } from '../providerConfig/context';
var Dropdown = (_dec = withConfigConsumer('dropdown'), _dec(_class = (_temp = _class2 = /*#__PURE__*/function (_PureComponent) {
  _inheritsLoose(Dropdown, _PureComponent);

  function Dropdown(props) {
    var _this;

    _this = _PureComponent.call(this, props) || this;
    warning(!(props.transparent === true), 'The `transparent` prop of `Dropdown` will default to `false` in future versions. ' + 'Please migrate to use `transparent={false}` as soon as possible.');
    return _this;
  }

  var _proto = Dropdown.prototype;

  _proto.render = function render() {
    var _this$props = this.props,
        children = _this$props.children,
        prefixCls = _this$props.prefixCls,
        overlay = _this$props.overlay,
        trigger = _this$props.trigger,
        disabled = _this$props.disabled,
        className = _this$props.className,
        size = _this$props.size;
    var child = React.Children.only(children);
    var overlayElement = React.Children.only(overlay);

    if (! /*#__PURE__*/isValidElement(child) || ! /*#__PURE__*/isValidElement(overlayElement)) {
      return child;
    }

    var dropdownTrigger = /*#__PURE__*/React.cloneElement(child, {
      className: classnames(child.props.className, prefixCls + "-trigger"),
      disabled: disabled
    }); // menu cannot be selectable in dropdown defaultly
    // menu should be focusable in dropdown defaultly

    var _overlayElement$props = overlayElement.props,
        _overlayElement$props2 = _overlayElement$props.selectable,
        selectable = _overlayElement$props2 === void 0 ? false : _overlayElement$props2,
        _overlayElement$props3 = _overlayElement$props.focusable,
        focusable = _overlayElement$props3 === void 0 ? true : _overlayElement$props3;
    var expandIcon = /*#__PURE__*/React.createElement("span", {
      className: prefixCls + "-menu-submenu-arrow"
    }, /*#__PURE__*/React.createElement(IconChevronRight, {
      className: prefixCls + "-menu-submenu-arrow-icon"
    })); // TODO: 需要优化

    var fixedModeOverlay = typeof overlayElement.type === 'string' ? overlayElement : /*#__PURE__*/React.cloneElement(overlayElement, {
      // @ts-ignore
      mode: 'vertical',
      selectable: selectable,
      focusable: focusable,
      expandIcon: expandIcon,
      className: classnames(overlayElement && overlayElement.props && overlayElement.props.className || '', prefixCls + "-menu-" + size)
    });
    var triggerActions = disabled ? [] : trigger;
    var alignPoint;

    if (triggerActions && triggerActions.indexOf('contextMenu') !== -1) {
      alignPoint = true;
    }

    var overlayClassName = classnames(className, this.props.overlayClassName);
    return /*#__PURE__*/React.createElement(CommonDropdown, _extends({
      alignPoint: alignPoint
    }, this.props, {
      trigger: triggerActions,
      overlay: fixedModeOverlay,
      overlayClassName: overlayClassName
    }), dropdownTrigger);
  };

  return Dropdown;
}(PureComponent), _class2.Button = void 0, _class2.defaultProps = {
  prefixCls: 'one-dropdown',
  mouseEnterDelay: 0.15,
  mouseLeaveDelay: 0.1,
  placement: 'bottomLeft',
  className: '',
  overlayClassName: '',
  size: 'medium',
  overlayStyle: {},
  transparent: true,
  // 兼容早期默认透明背景实现
  showConfirm: false,
  okText: '应用',
  cancelText: '取消',
  transitionName: 'one-transition-slide-down'
}, _temp)) || _class);
export default Dropdown;