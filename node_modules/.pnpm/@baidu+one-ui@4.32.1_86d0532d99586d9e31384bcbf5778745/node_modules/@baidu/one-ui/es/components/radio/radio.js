import _extends from "@babel/runtime/helpers/extends";
import _objectWithoutPropertiesLoose from "@babel/runtime/helpers/objectWithoutPropertiesLoose";
import _inheritsLoose from "@babel/runtime/helpers/inheritsLoose";

var _dec, _class, _class2, _temp;

/**
 * @file 单选
 * @author shanqianmin
 * @date 2018/08/23
 */
import React, { PureComponent } from 'react';
import { classnames } from '../../core/commonTools';
import CommonCheckbox from '../checkbox/common/commonCheckbox';
import Context from './context';
import { withConfigConsumer } from '../providerConfig/context';
var Radio = (_dec = withConfigConsumer('radio'), _dec(_class = (_temp = _class2 = /*#__PURE__*/function (_PureComponent) {
  _inheritsLoose(Radio, _PureComponent);

  function Radio() {
    var _this;

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _PureComponent.call.apply(_PureComponent, [this].concat(args)) || this;
    _this.refCheckbox = void 0;

    _this.saveCheckbox = function (node) {
      _this.refCheckbox = node;
    };

    return _this;
  }

  var _proto = Radio.prototype;

  _proto.focus = function focus() {
    this.refCheckbox.focus();
  };

  _proto.blur = function blur() {
    this.refCheckbox.blur();
  };

  _proto.render = function render() {
    var _this2 = this;

    return /*#__PURE__*/React.createElement(Context.Consumer, null, function (context) {
      return _this2.renderRadio(context);
    });
  };

  _proto.renderRadio = function renderRadio(context) {
    var _classnames;

    var props = this.props;

    var prefixCls = props.prefixCls,
        className = props.className,
        children = props.children,
        style = props.style,
        direction = props.direction,
        type = props.type,
        size = props.size,
        restProps = _objectWithoutPropertiesLoose(props, ["prefixCls", "className", "children", "style", "direction", "type", "size"]);

    var radioGroup = context;

    var radioProps = _extends({}, restProps);

    if (radioGroup) {
      var value = radioGroup.value,
          _disabled = radioGroup.disabled;
      radioProps.name = radioGroup.name;
      radioProps.onChange = radioGroup.onChange;
      radioProps.checked = value != null ? props.value === value : props.checked;
      radioProps.disabled = props.disabled || _disabled;
    }

    var checked = radioProps.checked,
        disabled = radioProps.disabled;
    var wrapperClassString = classnames(className, prefixCls + "-wrapper-" + size, (_classnames = {}, _classnames[prefixCls + "-wrapper"] = true, _classnames[prefixCls + "-wrapper-checked"] = checked, _classnames[prefixCls + "-wrapper-disabled"] = disabled, _classnames[prefixCls + "-wrapper-checked-disabled"] = checked && disabled, _classnames[prefixCls + "-wrapper-" + direction] = direction, _classnames[prefixCls + "-wrapper-" + type] = type, _classnames));
    return /*#__PURE__*/React.createElement("label", {
      className: wrapperClassString,
      style: style,
      onMouseEnter: props.onMouseEnter,
      onMouseLeave: props.onMouseLeave
    }, /*#__PURE__*/React.createElement(CommonCheckbox, _extends({}, radioProps, {
      prefixCls: prefixCls,
      ref: this.saveCheckbox,
      type: "radio"
    })), children != null ? /*#__PURE__*/React.createElement("span", null, children) : null);
  };

  return Radio;
}(PureComponent), _class2.defaultProps = {
  direction: 'row',
  prefixCls: 'one-radio'
}, _class2.Group = void 0, _class2.Button = void 0, _temp)) || _class);
export default Radio;