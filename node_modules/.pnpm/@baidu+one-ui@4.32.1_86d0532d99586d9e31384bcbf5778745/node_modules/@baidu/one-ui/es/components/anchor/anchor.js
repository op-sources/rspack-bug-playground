import _extends from "@babel/runtime/helpers/extends";
import _inheritsLoose from "@babel/runtime/helpers/inheritsLoose";
import _noop from "lodash/noop";

var _dec, _class, _class2, _temp;

import React, { PureComponent, cloneElement } from 'react';
import addEventListener from 'rc-util/lib/Dom/addEventListener';
import Affix from '../affix';
import { sharpMatcherRegx, scrollToDom, getOffsetTop } from '../../core/anchorTools';
import { classnames } from '../../core/commonTools';
import { withConfigConsumer } from '../providerConfig/context';
import Context from './context';
var Anchor = (_dec = withConfigConsumer('anchor'), _dec(_class = (_temp = _class2 = /*#__PURE__*/function (_PureComponent) {
  _inheritsLoose(Anchor, _PureComponent);

  function Anchor() {
    var _this;

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _PureComponent.call.apply(_PureComponent, [this].concat(args)) || this;
    _this.state = {
      activeLink: null
    };
    _this.links = [];
    _this.scrollContainer = void 0;
    _this.scrollEvent = void 0;
    _this.animating = false;

    _this.getContext = function () {
      return {
        registerLink: function registerLink(link) {
          if (!_this.links.includes(link)) {
            _this.links.push(link);
          }
        },
        unregisterLink: function unregisterLink(link) {
          var index = _this.links.indexOf(link);

          if (index !== -1) {
            _this.links.splice(index, 1);
          }
        },
        activeLink: _this.state.activeLink,
        scrollTo: _this.handleScrollTo,
        onClick: _this.props.onClick
      };
    };

    _this.handleScroll = function () {
      if (_this.animating) {
        return;
      }

      var activeLink = _this.state.activeLink;
      var _this$props = _this.props,
          offsetTop = _this$props.offsetTop,
          bounds = _this$props.bounds;

      var currentActiveLink = _this.getCurrentAnchor(offsetTop, bounds);

      if (activeLink !== currentActiveLink) {
        _this.setState({
          activeLink: currentActiveLink
        });
      }
    };

    _this.handleScrollTo = function (link) {
      var _this$props2 = _this.props,
          offsetTop = _this$props2.offsetTop,
          getContainer = _this$props2.getContainer;
      _this.animating = true;

      _this.setState({
        activeLink: link
      });

      scrollToDom(link, offsetTop, getContainer, function () {
        _this.animating = false;
      });
    };

    _this.getCurrentAnchor = function (offsetTop, bounds) {
      if (offsetTop === void 0) {
        offsetTop = 0;
      }

      if (bounds === void 0) {
        bounds = 5;
      }

      var linkSections = [];
      var getContainer = _this.props.getContainer;
      var container = getContainer();

      _this.links.forEach(function (link) {
        var sharpLinkMatch = sharpMatcherRegx.exec(link.toString());

        if (!sharpLinkMatch) {
          return;
        }

        var target = document.getElementById(sharpLinkMatch[1]);

        if (target) {
          var top = getOffsetTop(target, container);

          if (top < offsetTop + bounds) {
            linkSections.push({
              link: link,
              top: top
            });
          }
        }
      });

      if (linkSections.length) {
        var maxSection = linkSections.reduce(function (prev, curr) {
          return curr.top > prev.top ? curr : prev;
        });
        return maxSection.link;
      }

      return '';
    };

    return _this;
  }

  var _proto = Anchor.prototype;

  _proto.componentDidMount = function componentDidMount() {
    var getContainer = this.props.getContainer;
    this.scrollContainer = getContainer();
    this.scrollEvent = addEventListener(this.scrollContainer, 'scroll', this.handleScroll);
    this.handleScroll();
  };

  _proto.componentWillUnmount = function componentWillUnmount() {
    if (this.scrollEvent) {
      this.scrollEvent.remove();
    }
  };

  _proto.componentDidUpdate = function componentDidUpdate() {
    if (this.scrollEvent) {
      var getContainer = this.props.getContainer;
      var currentContainer = getContainer();

      if (this.scrollContainer !== currentContainer) {
        this.scrollContainer = currentContainer;
        this.scrollEvent.remove();
        this.scrollEvent = addEventListener(this.scrollContainer, 'scroll', this.handleScroll);
        this.handleScroll();
      }
    }
  };

  _proto.render = function render() {
    var _this$props3 = this.props,
        prefixCls = _this$props3.prefixCls,
        className = _this$props3.className,
        style = _this$props3.style,
        offsetTop = _this$props3.offsetTop,
        affix = _this$props3.affix,
        children = _this$props3.children,
        getContainer = _this$props3.getContainer,
        size = _this$props3.size,
        type = _this$props3.type;
    var wrapperClass = classnames(className, prefixCls + "-wrapper", prefixCls + "-wrapper-" + type);
    var anchorClassName = classnames(prefixCls, prefixCls + "-" + size);

    var wrapperStyle = _extends({
      maxHeight: offsetTop ? "calc(100vh - " + offsetTop + "px)" : '100vh'
    }, style);

    var anchorContent = /*#__PURE__*/React.createElement("div", {
      className: wrapperClass,
      style: wrapperStyle
    }, /*#__PURE__*/React.createElement("div", {
      className: anchorClassName
    }, React.Children.map(children, function (child) {
      if ( /*#__PURE__*/React.isValidElement(child)) {
        return /*#__PURE__*/cloneElement(child, {
          size: size,
          className: classnames(prefixCls + "-first-level", child.props.className)
        });
      }

      return child;
    })));
    return /*#__PURE__*/React.createElement(Context.Provider, {
      value: this.getContext()
    }, !affix ? anchorContent : /*#__PURE__*/React.createElement(Affix, {
      offsetTop: offsetTop,
      target: getContainer
    }, anchorContent));
  };

  return Anchor;
}(PureComponent), _class2.defaultProps = {
  prefixCls: 'one-anchor',
  affix: true,
  getContainer: function getContainer() {
    return window;
  },
  onClick: _noop,
  bounds: 5,
  offsetTop: 0,
  size: 'medium',
  type: 'normal'
}, _class2.Link = void 0, _temp)) || _class);
export default Anchor;