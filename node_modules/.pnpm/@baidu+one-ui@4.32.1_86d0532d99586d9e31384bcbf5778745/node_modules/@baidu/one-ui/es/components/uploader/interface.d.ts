import { ReactElement, ReactNode, ChangeEvent, Component, FunctionComponent, MouseEvent } from 'react';
import { BaseProps } from '../interface';
import { LightboxDataItem, LightboxProps } from '../lightbox';
import { THEME_LIGHT_D22 } from '../config';
export declare type UploaderListType = 'file' | 'image' | 'video' | 'media';
export declare type UploadStatus = 'waiting' | 'uploading' | 'success' | 'error';
/**
 * 上传文件
 */
export declare type UploadFile = {
    /**
     * 上传状态
     */
    status?: UploadStatus;
    /**
     * 文件名
     */
    name: string;
    /**
     * 原始文件
     */
    originFile?: File;
    /**
     * uuid
     */
    uid?: string;
    /**
     * 类型
     */
    type?: string;
    /**
     * 校验错误
     */
    errorMessage?: string[];
    /**
     * 上传进度
     */
    progressStep?: number;
    /**
     * 预览图
     */
    thumbUrl?: string;
    /**
     * 底部自定义
     */
    footer?: ReactNode;
};
export declare type UploadImageDefaultAction = 'delete' | 'preview' | 'reUpload' | string;
export declare type UploadFileDefaultAction = 'delete' | string;
export declare type UploadBaseActionItem = {
    /**
     * key
     */
    key: string;
    /**
     * 是否展示
     */
    visible?: boolean;
    /**
     * 是否禁用
     */
    disabled?: boolean;
    /**
     * 图标
     */
    icon?: ReactElement;
};
export declare type UploadImageActionItem = UploadBaseActionItem & {
    /**
     * key
     */
    key: UploadImageDefaultAction;
    /**
     * 子选项
     */
    children?: Array<UploadImageActionItem & {
        label: ReactNode;
    }>;
};
export declare type UploadFileActionItem = UploadBaseActionItem & {
    /**
     * key
     */
    key: UploadFileDefaultAction;
    /**
     * 点击
     */
    onClick?: (file: UploadFile, event: any) => void;
};
export declare type UploadEntryActionItem = UploadBaseActionItem & {
    /**
     * 标签
     */
    label: ReactNode;
    /**
     * 子选项
     */
    children?: UploadEntryActionItem[];
    /**
     * 是否默认上传行为
     */
    isDefaultUpload?: boolean;
    /**
     * 点击事件
     */
    onClick?: () => void;
};
export declare type UploadActionsProducer<T> = (file: UploadFile, defaultActions: T[]) => T[];
/**
 * 卡片底部操作图标配置
 */
export declare type UploadOperationListIcon = {
    /**
     * 预览
     */
    showPreviewIcon?: boolean;
    /**
     * 重新上传
     */
    showReUploadIcon?: boolean;
    /**
     * 删除
     */
    showRemoveOnIcon?: boolean;
} | UploadActionsProducer<UploadImageActionItem>;
/**
 * 帮助提示
 */
interface UploaderHelper {
    /**
     * 帮助
     */
    helperText?: ReactNode;
    /**
     * @deprecated use `helperTextPosition`
     */
    helperTextPostion?: 'right' | 'bottom';
    /**
     * 帮助位置 right or bottom
     */
    helperTextPosition?: 'right' | 'bottom';
}
/**
 * 图片类属性
 */
export interface UploaderImageItemProps extends UploaderHelper {
    status?: UploadStatus;
    errorMessage?: string[];
    name: string;
    progressStep?: number;
    onRemove(index: number): void;
    prefixCls: string;
    index: number;
    thumbUrl: string;
    renderCustomIcon(props: any): ReactNode;
    customUploadListIcon?: ReactNode;
    onPreview(index: number): void;
    onReUpload(index: number): void;
    showUploadListIcon: UploadOperationListIcon;
    fileList: UploadFile[];
    size: string;
    realType: UploaderListType;
    type: string;
    className?: string;
    pickerIcon?: ReactNode;
    errorDisplay?: 'normal' | 'popup';
    footer?: ReactNode;
    showHelper?: boolean;
    file?: UploadFile;
    controls?: UploadActionsProducer<UploadImageActionItem>;
    theme?: typeof THEME_LIGHT_D22 | string;
}
/**
 * 文件项属性
 */
export interface UploaderFileItemProps {
    status?: string;
    errorMessage?: string[];
    name: string;
    progressStep?: number;
    onRemove(index: number, event: MouseEvent): void;
    prefixCls: string;
    index: number;
    className?: string;
    file?: UploadFile;
    controls?: UploadActionsProducer<UploadFileActionItem>;
}
/**
 * 卡片底部操作区域相关属性
 */
export interface UploaderOperationProps {
    /**
     * 点击删除回调
     */
    onRemove?: (value: {
        fileList: UploadFile[];
        index: number;
    }) => void;
    /**
     * 点击预览回调
     */
    onPreview?: (value: {
        file: UploadFile;
        fileList: UploadFile[];
        index: number;
    }) => boolean | void;
    /**
     * 点击重新上传回调
     */
    onReUpload?: (value: {
        file: UploadFile;
        fileList: UploadFile[];
        index: number;
    }) => boolean | void;
    /**
     * 操作区按钮配置
     * @deprecated use `controls`
     */
    showUploadListIcon?: UploadOperationListIcon;
    /**
     * 自定义操作区
     * @deprecated use `controls`
     */
    customUploadListIcon?: ReactNode;
    /**
     * 自定义操作区
     * @deprecated use `controls`
     */
    renderCustomIcon?: (props: UploaderImageItemProps | UploaderFileItemProps) => ReactNode;
}
export interface UploadPickerProps {
    /**
     * 自定义上传的锚点
     * @deprecated use `CustomUploadPicker`
     */
    CustomUploadAnchor?: typeof Component | FunctionComponent;
    /**
     * 自定义上传的锚点
     */
    CustomUploadPicker?: typeof Component | FunctionComponent;
    /**
     * 图标
     */
    pickerIcon?: ReactNode;
    /**
     * 图标下的描述
     */
    pickerText?: ReactNode;
    /**
     * 上传input的name
     */
    inputControlName?: string;
    /**
     * loading
     */
    loading?: boolean;
    /**
     * picker与list的顺序
     *
     * @deprecated use `pickerPosition`
     */
    order?: 'normal' | 'reverse';
    /**
     * 隐藏picker
     *
     * @deprecated use `hidePicker`
     */
    hideAnchor?: boolean;
    /**
     * 隐藏picker
     */
    hidePicker?: boolean;
    /**
     * 格式化picker
     * @deprecated use `picker`
     */
    formatUploadAnchor?: (picker: ReactElement) => ReactElement;
    /**
     * 自定义picker
     */
    picker?: (picker: ReactElement) => ReactElement;
    /**
     * 点击picker
     * 返回值`false`, 不调起默认文件选择
     */
    onPickerClick?: () => void | boolean;
    /**
     * picker位置, none隐藏
     */
    pickerPosition?: 'before' | 'after' | 'top' | 'none';
}
/**
 * 上传列表属性
 */
export interface UploaderListProps extends Omit<UploadPickerProps, 'picker'>, UploaderHelper, UploaderOperationProps {
    fileList?: UploadFile[];
    sortable?: boolean;
    prefixCls?: string;
    /**
     * FIXME: 实际上是anchorType
     */
    listType?: 'file' | 'image';
    size?: string;
    previewList?: LightboxDataItem[];
    /**
     * FIXME: 可以重命名
     */
    realType?: UploaderListType;
    picker?: ReactElement;
    onSort?: (fileList: UploadFile[]) => void;
    onInsertImage?: (b: boolean, index: number) => void;
    /**
     * 点击删除回调
     */
    onRemove?: (value: {
        originFileList: UploadFile[];
        fileList: UploadFile[];
        index: number;
    }) => void;
    /**
     * 上传文件个数限制
     */
    maxFileLength?: number;
    /**
    * 错误展示方式
    */
    errorDisplay?: 'normal' | 'popup';
    /**
     * 自定义操作
     */
    controls?: UploadActionsProducer<UploadFileActionItem>;
    /**
     * 预览灯箱属性，可参考Lightbox组件
     */
    lightboxProps?: LightboxProps;
    theme?: typeof THEME_LIGHT_D22 | string;
}
/**
 * 文件上传进度事件，带占比
 */
export interface UploaderProgressEvent extends ProgressEvent {
    percent: number;
}
/**
 * 文件上传入口
 */
export interface UploaderFileAnchorProps extends UploaderHelper {
    onClick(event: MouseEvent): void;
    loading: boolean;
    prefixCls: string;
    disabled: boolean;
    maxSize: number;
    pickerIcon?: ReactNode;
    pickerText?: ReactNode;
}
/**
 * 上传入口基础属性
 */
interface UploaderAnchorBaseProps extends UploadPickerProps, UploaderHelper {
    prefixCls?: string;
    /**
     * 禁用
     */
    disabled?: boolean;
    /**
     * loading
     */
    loading?: boolean;
    realType?: UploaderListType;
    /**
     * size 目前只对listType为image、video、media 生效
     */
    size?: 'small' | 'medium';
    entries?: UploadEntryActionItem[];
    theme?: typeof THEME_LIGHT_D22 | string;
}
/**
 * 图片类上传入口
 */
export interface UploaderImageAnchorProps extends UploaderAnchorBaseProps {
    onClick?: () => void;
}
/**
 * 多入口属性
 */
export declare type UploaderMultipleAnchorProps = UploaderImageAnchorProps;
/**
 * 上传入口属性
 */
export interface UploaderAnchorProps extends UploaderAnchorBaseProps {
    /**
     * 接收的参数
     */
    accept?: string[];
    /**
     * 上传回调
     *
     * @param e 事件
     */
    onChange(e: ChangeEvent<HTMLInputElement>): void;
    /**
     * 是否支持多选
     */
    multiple?: boolean;
    /**
     * 列表的样式类型
     */
    listType?: UploaderListType;
    /**
     * 上传文件的最大尺寸
     */
    maxSize?: number;
    /**
     * 文件列表
     */
    fileList: UploadFile[];
    /**
     * 上传文件个数限制
     */
    maxFileLength?: number;
}
/**
 * 上传组件属性
 */
export interface UploaderProps extends UploaderOperationProps, UploadPickerProps, UploaderHelper, BaseProps {
    /**
     * 列表的样式类型
     */
    listType?: UploaderListType;
    /**
     * 文件列表的list - 受控属性
     */
    fileList?: UploadFile[];
    /**
     * 文件列表的list - 非受控属性
     */
    defaultFileList?: UploadFile[];
    /**
     * input的accept，表示可以接收的文件格式
     */
    accept?: string[];
    /**
     * 自定义校验，入参为上传后的单个file；正确不返回，错误返回错误信息
     */
    validator?: (file: File) => string | void;
    /**
     * 上传前的钩子
     */
    beforeUpload?: (file: UploadFile, fileList: UploadFile[]) => boolean | Promise<UploadFile>;
    /**
     * 上传后的钩子
     */
    afterUpload?: (response: any, file: UploadFile, fileList: UploadFile[]) => Object;
    /**
     * 上传的url
     */
    uploadResquestUrl?: string;
    /**
     * 禁用
     */
    disabled?: boolean;
    /**
     * 是否可排序
     */
    sortable?: boolean;
    /**
     * 请求的headers
     */
    headers?: Object;
    /**
     * upload请求的延时
     */
    timeout?: number;
    /**
     * 是否支持多选
     */
    multiple?: boolean;
    /**
     * 上传文件的最大尺寸
     */
    maxSize?: number;
    /**
     * 最大可并行上传的文件个数
     */
    maxParallelFileNumber?: number;
    /**
     * 状态改变时候的回调
     */
    onChange?: (value: {
        /**
         * 当前文件index
         */
        index?: number;
        /**
         * 文件
         */
        file?: File | UploadFile;
        /**
         * 文件列表
         */
        fileList: UploadFile[];
        /**
         * 当前上传错误
         */
        err?: Error | ProgressEvent;
        /**
         * 当前上传返回值
         */
        response?: any;
    }) => void;
    /**
     * 自定义上传方法
     */
    uploader?: (value: {
        /**
         * 上传的url, 见uploadResquestUrl
         */
        action: string;
        /**
         * 文件名
         */
        filename: string;
        /**
         * 请求额外的data
         */
        reqData?: Object;
        /**
         * 文件
         */
        file: UploadFile | File;
        /**
         * 请求的headers
         */
        headers?: Object;
        /**
         * 上传请求时是否携带 cookie
         */
        withCredentials: boolean;
        /**
         * 请求的方式，默认是post
         */
        method: string;
        /**
         * 上传中
         *
         * @param event 事件
         */
        onProgress(event: UploaderProgressEvent): void;
        /**
         * 上传中
         * @param response 结果
         */
        onSuccess(response: any): void;
        /**
         * 上传失败
         * @param err 错误
         * @param response 结果
         */
        onError(err: Error | ProgressEvent, response?: any): void;
    }) => {
        abort(): void;
    };
    /**
     * 将origin的File转成所需要的file
     */
    transformFile?: (file: UploadFile) => UploadFile | File;
    /**
     * 上传请求时是否携带 cookie
     */
    withCredentials?: boolean;
    /**
     * 请求的方式，默认是post
     */
    method?: string;
    /**
     * 请求额外的data
     */
    reqData?: any;
    /**
     * 上传文件个数限制
     */
    maxFileLength?: number;
    /**
     * 超出限制报错
     */
    maxFileLengthErrorMessage?: ReactNode;
    /**
     * 是否在表单中使用
     */
    useInForm?: boolean;
    /**
     * size 目前只对listType为image、video、media 生效
     */
    size?: 'small' | 'medium';
    /**
     * 多路径上传，只针对listType为image、video、media 生效
     */
    entries?: UploadEntryActionItem[];
    /**
     * 预览文件列表; 参考Lightbox组件`datasource`
     */
    previewList?: LightboxDataItem[];
    /**
     * 错误展示方式
     */
    errorDisplay?: 'normal' | 'popup';
    /**
     * 自定义操作
     */
    controls?: UploadActionsProducer<UploadFileActionItem>;
    /**
     * 预览灯箱属性，可参考Lightbox组件
     */
    lightboxProps?: LightboxProps;
}
export {};
