import React, { PureComponent, ReactNode } from 'react';
import { TableColumnWidth, TableProps } from '../interface';
import { InnerTableColumnProps } from './interface';
export interface InnerTableProps extends TableProps {
    loadingText?: ReactNode | (() => ReactNode);
    emptyText?: ReactNode | (() => ReactNode);
    data?: object[];
    id?: string;
    onHeaderRow: any;
    /**
     * @deprecated
     */
    title?(data: any): any;
    /**
     * @deprecated
     */
    footer?(data: any): any;
}
interface InnerTableState {
    isBottomScrollShow?: boolean;
    columns?: InnerTableColumnProps[];
    containerWidth?: number;
}
export interface TableStore {
    dynamicWidth: number;
    allColumnsWidth: TableColumnWidth[];
    dragging: boolean;
    expandedRowKeys: Array<string | number>;
}
declare class ComponentTable extends PureComponent<InnerTableProps, InnerTableState> {
    static defaultProps: {
        headerFixTop: any;
        data: any[];
        useFixedHeader: boolean;
        rowKey: string;
        rowClassName: () => string;
        onRow(): void;
        onHeaderRow(): void;
        prefixCls: string;
        bodyStyle: {};
        style: {};
        showHeader: boolean;
        scroll: {};
        bottomScroll: {
            bottom: any;
            style: {};
        };
        rowRef: () => any;
        emptyText: () => string;
        updateWidthChange: boolean;
        useStickyFixTop: boolean;
    };
    columnManager: any;
    store: any;
    debouncedWindowResize: any;
    debouncedWindowScroll: any;
    resizeEvent: any;
    scrollEvent: any;
    headTableWheelEvent: any;
    headTable: any;
    bottomScroll: any;
    scrollPosition: any;
    bodyTable: any;
    tableNode: any;
    fixedHeadTable: any;
    lastScrollLeft: any;
    lastScrollTop: any;
    expander: any;
    tableContainerRef: any;
    dragLeftRef: any;
    curAllColumnsWidth: any;
    curDynamicWidth: any;
    constructor(props: any);
    resizeObserver: any;
    getContext(): {
        table: {
            props: Readonly<InnerTableProps> & Readonly<{
                children?: React.ReactNode;
            }>;
            columnManager: any;
            saveRef: (name: any) => (node: any) => void;
            headTable: any;
            bottomScroll: any;
            bodyTable: any;
            containerWidth: any;
        };
    };
    static getDerivedStateFromProps(nextProps: any, prevState: any): {
        columns: any;
    };
    setTableScrollbar(): void;
    handleHeadWheel: ({ nativeEvent }: {
        nativeEvent: any;
    }) => void;
    componentDidMount(): void;
    componentDidUpdate(prevProps: any): void;
    componentWillUnmount(): void;
    updateColumnWidths(columns: any): void;
    getRowKey: (record: any, index: any) => any;
    setScrollPosition(position: any): void;
    setScrollPositionClassName(): void;
    handleWindowResize: () => void;
    handleWindowScroll: () => any;
    resetScrollX(): void;
    hasScrollX(): boolean;
    handleBodyScrollLeft: (e: any) => void;
    handleBodyScrollTop: (e: any) => void;
    handleBodyScroll: (e: any) => void;
    handleWheel: (event: any) => void;
    saveRef: (name: any) => (node: any) => void;
    getContainerWidth: () => any;
    renderMainTable: (expander: any) => JSX.Element;
    calcDragLeft: (dragLeft: any, isMovingFixedKey: any) => number;
    onDragStart: (props: any) => void;
    onDraging: (props: any) => void;
    onDragEnd: (props: any) => void;
    onHeaderCellMouseEnter: (props: any) => void;
    onHeaderCellMouseLeave: () => void;
    renderTable(options: any): JSX.Element[];
    renderBottomScroll(): JSX.Element;
    renderTitle(): JSX.Element;
    renderFooter(): JSX.Element;
    tableRef: (ref: any) => void;
    saveDragLineRef: (ref: any) => void;
    render(): JSX.Element;
}
export default ComponentTable;
