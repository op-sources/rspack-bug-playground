/**
 * @file transfer main
 * @author huangshiming
 * @date 2020-05-16
 */
import { PureComponent } from 'react';
import CandidatePane from './common/candidatePane';
import SelectedPane from './common/selectedPane';
import { TransferProps } from './interface';
interface TransferState {
    selectedList?: string[];
    expandedCandidateKeys?: string[];
    expandedSelectedKeys?: string[];
    parentRelationMap?: any;
    prevProps?: TransferProps;
    searchValue?: string;
    candidateHeight?: number;
    selectedHeight?: number;
    hasSearch?: boolean;
    isShowLevelSelect?: boolean;
    hasEdit?: boolean;
    allDataMap?: any;
    candidateList?: string[];
}
declare class Transfer extends PureComponent<TransferProps, TransferState> {
    static defaultProps: {
        allDataMap: {};
        treeName: string;
        placeholder: string;
        className: string;
        candidateTreeStyle: {};
        selectedTreeStyle: {};
        maxSelectedNum: any;
        showCandidateFooter: boolean;
        candidateItemProps: {};
        selectedItemProps: {};
        showSelectedNum: boolean;
        showSearchBox: boolean;
        candidateFooterProps: {};
        isShowLevel: boolean;
        showCandidateNum: boolean;
        handleSelect: () => void;
        handleSelectAll: () => void;
        handleDelete: () => void;
        handleDeleteAll: () => void;
        handleSearch: () => void;
        onSearchChange: () => void;
        handleSelectedExpand: () => void;
        handleCandidateExpand: () => void;
        levelOptions: any;
        handleLevelChange: () => void;
        isShowLevelSelect: boolean;
        searchRenderProps: {};
        onSearchBoxFocus: () => void;
        onSearchBoxBlur: () => void;
        levelKey: any;
        showSelectAll: boolean;
        prefixCls: string;
        size: string;
        useVirtualScroll: boolean;
        CustomCandidatePane: typeof CandidatePane;
        CustomSelectedPane: typeof SelectedPane;
        loading: boolean;
        loadingText: string;
        mergeChecked: string;
        candidateEmpty: string;
        selectedEmpty: string;
    };
    static CommonTitleRender: any;
    static CommonItemRender: any;
    static CommonSearchRender: any;
    static CommonFooterRender: any;
    resizeObserver: any;
    constructor(props: any);
    candidatePaneRef: any;
    selectedPaneRef: any;
    candidateTreeRef: any;
    selectedTreeRef: any;
    componentDidMount(): void;
    componentWillUnmount(): void;
    static getDerivedStateFromProps: (nextProps: any, prevState: any) => TransferState;
    getExpandedSelectedKeys(keys: any): string[];
    mergeChecked(item: any, checkedKeys: any): boolean;
    onCheck: (checkedKeys: any, info: any) => void;
    onSelect: (selectedKeys: any, info: any) => void;
    onCandidateExpand: (expandedKeys: any, info: any) => void;
    onSelectedExpand: (...args: any[]) => void;
    onSelectedDelete: (deleteKey: any) => void;
    handleSearch: (e: any) => void;
    onSearchChange: (e: any) => void;
    searchBoxFocus: (e: any) => void;
    searchBoxBlur: (e: any) => void;
    onSelectAll: () => void;
    normalizeCheckedKeys(checkedKeys: any): any;
    getCandidatePaneRef: (ref: any) => void;
    getSelectedPaneRef: (ref: any) => void;
    getCandidateTreeRef: (ref: any) => void;
    getSelectedTreeRef: (ref: any) => void;
    onDeleteAll: () => void;
    handleChange(keys: any): void;
    render(): JSX.Element;
    renderSeletedPaneFooter(): JSX.Element;
}
export default Transfer;
