import _objectWithoutPropertiesLoose from "@babel/runtime/helpers/objectWithoutPropertiesLoose";
import _inheritsLoose from "@babel/runtime/helpers/inheritsLoose";
import _extends from "@babel/runtime/helpers/extends";
import _isInteger from "lodash/isInteger";
import _debounce from "lodash/debounce";

var _dec, _class, _class2, _temp;

import React, { PureComponent } from 'react';
import SlickCarousel from 'react-slick';
import { IconChevronRight, IconChevronLeft } from 'dls-icons-react';
import Button from '../button';
import { classnames } from '../../core/commonTools';
import { withConfigConsumer } from '../providerConfig/context';
;
;

var NextArrow = function NextArrow(props) {
  var _classnames;

  var onClick = props.onClick,
      prefixCls = props.prefixCls,
      showButton = props.showButton,
      _props$buttonProps = props.buttonProps,
      buttonProps = _props$buttonProps === void 0 ? {} : _props$buttonProps;
  var buttonCls = prefixCls + "-slick-change";

  var style = _extends({
    display: 'inline-flex'
  }, buttonProps.style || {});

  if (!showButton) {
    style = {
      display: 'none'
    };
  }

  var currentButtonProps = {
    className: classnames(buttonCls, buttonCls + "-next", (_classnames = {}, _classnames[buttonProps.className] = !!buttonProps.className, _classnames)),
    type: 'translucent',
    icon: /*#__PURE__*/React.createElement(IconChevronRight, {
      className: prefixCls + "-icon-right"
    }),
    size: 'medium',
    style: style,
    onClick: onClick,
    disabled: !onClick
  };
  return /*#__PURE__*/React.createElement(Button, currentButtonProps);
};

var PrevArrow = function PrevArrow(props) {
  var _classnames2;

  var onClick = props.onClick,
      prefixCls = props.prefixCls,
      showButton = props.showButton,
      _props$buttonProps2 = props.buttonProps,
      buttonProps = _props$buttonProps2 === void 0 ? {} : _props$buttonProps2;
  var buttonCls = prefixCls + "-slick-change";

  var style = _extends({
    display: 'inline-flex'
  }, buttonProps.style || {});

  if (!showButton) {
    style = {
      display: 'none'
    };
  }

  var currentButtonProps = {
    className: classnames(buttonCls, buttonCls + "-prev", (_classnames2 = {}, _classnames2[buttonProps.className] = !!buttonProps.className, _classnames2)),
    type: 'translucent',
    icon: /*#__PURE__*/React.createElement(IconChevronLeft, {
      className: prefixCls + "-icon-left"
    }),
    size: 'medium',
    style: style,
    onClick: onClick,
    disabled: !onClick
  };
  return /*#__PURE__*/React.createElement(Button, currentButtonProps);
};

var Carousel = (_dec = withConfigConsumer('carousel'), _dec(_class = (_temp = _class2 = /*#__PURE__*/function (_PureComponent) {
  _inheritsLoose(Carousel, _PureComponent);

  function Carousel(props) {
    var _this;

    _this = _PureComponent.call(this, props) || this;
    _this.innerSlider = void 0;
    _this.slick = void 0;

    _this.onWindowResized = function () {
      var autoplay = _this.props.autoplay;

      if (autoplay && _this.slick && _this.slick.innerSlider && _this.slick.innerSlider.autoPlay) {
        _this.slick.innerSlider.autoPlay();
      }
    };

    _this.saveSlick = function (node) {
      _this.slick = node;
    };

    _this.getCarouselIsVertical = function () {
      var dotPosition = _this.props.dotPosition;

      if (dotPosition === 'left' || dotPosition === 'right') {
        return true;
      }

      return false;
    };

    _this.isSingleSlideMode = function () {
      return _this.props.mode === 'single';
    };

    _this.afterChange = function (current) {
      _this.setState({
        current: current
      });

      _this.props.afterChange(current);
    };

    _this.onWindowResized = _debounce(_this.onWindowResized, 500, {
      leading: false
    });
    _this.state = {
      current: props.initialSlide || 0
    };
    return _this;
  }

  var _proto = Carousel.prototype;

  _proto.componentDidMount = function componentDidMount() {
    var autoplay = this.props.autoplay;

    if (autoplay) {
      window.addEventListener('resize', this.onWindowResized);
    }

    this.innerSlider = this.slick && this.slick.innerSlider;
  };

  _proto.componentWillUnmount = function componentWillUnmount() {
    var autoplay = this.props.autoplay;

    if (autoplay) {
      window.removeEventListener('resize', this.onWindowResized);
    }
  };

  _proto.next = function next() {
    this.slick.slickNext();
  };

  _proto.prev = function prev() {
    this.slick.slickPrev();
  };

  _proto.goTo = function goTo(slide, dontAnimate) {
    if (dontAnimate === void 0) {
      dontAnimate = false;
    }

    this.slick.slickGoTo(slide, dontAnimate);
  };

  _proto.render = function render() {
    var _classnames3;

    var _this$props = this.props,
        prefixCls = _this$props.prefixCls,
        width = _this$props.width,
        infinite = _this$props.infinite,
        slidesToShow = _this$props.slidesToShow,
        mode = _this$props.mode,
        dotPosition = _this$props.dotPosition,
        sliderMode = _this$props.sliderMode,
        nextArrow = _this$props.nextArrow,
        prevArrow = _this$props.prevArrow,
        className = _this$props.className,
        showButton = _this$props.showButton,
        prevButtonProps = _this$props.prevButtonProps,
        nextButtonProps = _this$props.nextButtonProps,
        restProps = _objectWithoutPropertiesLoose(_this$props, ["prefixCls", "width", "infinite", "slidesToShow", "mode", "dotPosition", "sliderMode", "nextArrow", "prevArrow", "className", "showButton", "prevButtonProps", "nextButtonProps"]);

    var isSlidesToShowIsInteger = _isInteger(slidesToShow);

    var vertical = this.getCarouselIsVertical();
    var dotsClass = 'slick-dots';
    var isSingleSlide = this.isSingleSlideMode();
    var wrapperPrefixCls = !isSingleSlide ? prefixCls : prefixCls + "-" + mode;
    var showDot = !(sliderMode === 'hide' || sliderMode === 'number');

    if ('customSuffix' in this.props) {
      showDot = false;
    }

    var nextArrowProps = {
      prefixCls: prefixCls,
      showButton: showButton || sliderMode === 'button',
      buttonProps: nextButtonProps
    };
    var prevArrowProps = {
      prefixCls: prefixCls,
      showButton: showButton || sliderMode === 'button',
      buttonProps: prevButtonProps
    };

    var slickCarouselProps = _extends({
      dots: showDot,
      vertical: vertical,
      nextArrow: nextArrow || /*#__PURE__*/React.createElement(NextArrow, nextArrowProps),
      prevArrow: prevArrow || /*#__PURE__*/React.createElement(PrevArrow, prevArrowProps),
      cssEase: 'cubic-bezier(.25, .1, .25, 1)',
      infinite: infinite,
      slidesToShow: isSingleSlide ? 1 : slidesToShow,
      dotsClass: dotsClass + " " + dotsClass + "-" + dotPosition
    }, restProps, {
      afterChange: this.afterChange
    });

    var classes = classnames(wrapperPrefixCls, className, (_classnames3 = {}, _classnames3[wrapperPrefixCls + "-vertical"] = vertical, _classnames3[wrapperPrefixCls + "-half-show"] = !isSlidesToShowIsInteger, _classnames3), wrapperPrefixCls + "-slider-" + sliderMode);
    var containerProps = {
      className: classes,
      style: null
    };

    if (width) {
      containerProps.style = {
        width: width
      };
    }

    var current = this.state.current;
    var customNode = null;

    if (this.props.customSuffix) {
      customNode = this.props.customSuffix;
    } else if (sliderMode === 'number') {
      customNode = /*#__PURE__*/React.createElement("div", {
        className: prefixCls + "-custom-suffix"
      }, current + 1, "/", React.Children.count(this.props.children));
    }

    return /*#__PURE__*/React.createElement("div", containerProps, /*#__PURE__*/React.createElement(SlickCarousel, _extends({
      ref: this.saveSlick
    }, slickCarouselProps)), !isSlidesToShowIsInteger ? /*#__PURE__*/React.createElement("div", {
      className: prefixCls + "-half-mask"
    }) : null, customNode);
  };

  return Carousel;
}(PureComponent), _class2.defaultProps = {
  prefixCls: 'one-carousel',
  autoplay: false,
  slidesToScroll: 1,
  slidesToShow: 1,
  width: '',
  infinite: false,
  mode: 'multiple',
  dotPosition: 'bottom',
  sliderMode: 'line',
  className: '',
  showButton: false,
  afterChange: function afterChange() {}
}, _temp)) || _class);
export default Carousel;