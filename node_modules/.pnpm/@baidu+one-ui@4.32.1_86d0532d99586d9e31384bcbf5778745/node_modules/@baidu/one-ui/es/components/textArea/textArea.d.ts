import { CSSProperties, PureComponent } from 'react';
import { TextAreaProps } from './interface';
interface TextAreaState {
    value?: string;
    inputValue?: string;
    prevProps?: TextAreaProps;
    hasFocus?: boolean;
    textareaStyles?: CSSProperties;
    errorMessage?: string;
}
declare class TextArea extends PureComponent<TextAreaProps, TextAreaState> {
    static defaultProps: {
        prefixCls: string;
        width: number;
        maxRows: number;
        minRows: number;
        maxLen: any;
        errorMessage: any;
        location: string;
        tipLocation: any;
        errorLocation: any;
        tipText: any;
        onChange: () => void;
        onBlur: () => void;
        onFocus: () => void;
        size: string;
        isRequired: boolean;
        filterArray: any[];
        countMode: any;
        getLength: any;
        disabled: boolean;
        readOnly: boolean;
        showErrorMessage: boolean;
        showErrorWithoutErrorMessage: boolean;
        originTextAreaProps: {};
    };
    constructor(props: any);
    componentDidMount(): void;
    setContainerRef(): any;
    componentDidUpdate(prevProps: any): void;
    static getDerivedStateFromProps(nextProps: any, prevState: any): TextAreaState;
    ___imeStart___: any;
    nextFrameActionId: any;
    textAreaRef: any;
    counterRef: any;
    onInputCompositionStart: () => void;
    onInputCompositionEnd: (e: any) => void;
    onChange: (e: any) => void;
    resizeTextarea: () => void;
    handleError: (e: any, funcName: any, isHandleMin?: boolean) => void;
    blur: (e: any) => void;
    focus: (e: any) => void;
    saveTextAreaRef: (textArea: any) => void;
    saveCounterRef: (node: any) => void;
    render(): JSX.Element;
}
export default TextArea;
