import React, { PureComponent } from 'react';
import { PaginationProps } from '../pagination';
import { TableColumnProps, TableProps } from './interface';
interface TableState {
    filters?: {
        [key: string]: [];
    };
    pagination?: PaginationProps;
    columns?: TableProps['columns'];
    dataSource?: TableProps['dataSource'];
    sortColumn?: TableColumnProps;
    sortOrder?: '' | 'descend' | 'ascend';
    store?: any;
}
declare class Table extends PureComponent<TableProps, TableState> {
    static defaultProps: {
        dataSource: any[];
        prefixCls: string;
        rowSelection: any;
        className: string;
        loading: boolean;
        bordered: boolean;
        locale: {};
        rowKey: string;
        showHeader: boolean;
        expandIconClassName: string;
        onClickExpandIcon(): void;
        size: string;
        type: string;
        onDragStart(): void;
        onDraging(): void;
        onDragEnd(): void;
        headBordered: boolean;
        updateWidthChange: boolean;
        variant: string;
    };
    constructor(props: any);
    columns: any;
    store: any;
    root: any;
    static getDerivedStateFromProps(props: TableProps, state: TableState): TableState;
    getLocale(): {
        filterTitle: string;
        filterConfirm: string;
        filterClear: string;
        emptyText: React.ReactNode;
        selectAll: string;
        selectInvert: string;
        loadingText: React.ReactNode;
    };
    getCheckboxPropsByItem: (item: any, index: any) => {
        visible?: boolean;
        disabled?: boolean;
        indeterminate?: boolean;
        defaultChecked?: boolean;
    };
    getDefaultPagination(props: any): any;
    getDefaultSelection(): any;
    setSelectedRowKeys(selectedRowKeys: any, { selectWay, record, checked, changeRowKeys }: {
        selectWay: any;
        record?: any;
        checked: any;
        changeRowKeys?: any;
    }): void;
    getLocalData(): Record<string, any>[];
    getSorterFn(): (a: any, b: any) => number;
    getRecordKey: (record: any, index: any) => any;
    getPopupContainer: () => any;
    getScrollContainer: () => any;
    getCurrentPageData(): Record<string, any>[];
    getFlatCurrentPageData(): any;
    getMaxCurrent(total: any): number;
    getFlatData(): any;
    isFiltersChanged(filters: any): boolean;
    hasPagination(props?: any): boolean;
    toggleSortOrder: (column: any) => void;
    handleFilter: (columnKey: any, nextFilters: any) => void;
    handleSelect: (record: any, rowIndex: any, e: any) => void;
    handleRadioSelect: (record: any, rowIndex: any, e: any) => void;
    handleSelectRow: (selectionKey: any, index: any, onSelectFunc: any) => any;
    handlePageChange: (e: any) => void;
    isSortColumn(column: any): boolean;
    handleShowSizeChange: (e: any) => void;
    findColumn(myKey: any): any;
    recursiveSort(data: any, sorterFn: any): any;
    renderPagination(): JSX.Element;
    normalizeColumns(columns: any): any;
    renderColumnTitle: (column: any) => JSX.Element;
    renderRowSelection(): TableColumnProps[];
    renderSelectionBox: (_: any, record: any, index: any) => JSX.Element;
    tableRef: (ref: any) => void;
    refNodes: any;
    tableContainerRef: any;
    saveRef: (name: any, node: any) => void;
    updateColumnWidths: (columns: any) => void;
    render(): JSX.Element;
}
export default Table;
