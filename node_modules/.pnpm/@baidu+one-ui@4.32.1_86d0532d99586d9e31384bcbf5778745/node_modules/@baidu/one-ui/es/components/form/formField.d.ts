import React, { PureComponent, ReactNode } from 'react';
import { FormContextProps } from './context';
import { FormFieldProps } from './interface';
interface FormFieldState {
    abstractFields: string[];
}
declare class FormField extends PureComponent<FormFieldProps, FormFieldState> {
    static defaultProps: {
        prefixCls: string;
        helpPosition: string;
        messageDisplay: string;
        validateFirst: boolean;
    };
    static contextType: React.Context<import("./context").FormFieldContextProps>;
    formContext: FormContextProps;
    fieldNode: ReactNode;
    state: {
        abstractFields: any[];
    };
    componentDidMount(): void;
    componentWillUnmount(): void;
    className(name?: string): string;
    renderFieldNode(): React.ReactNode;
    required(): boolean;
    renderTip(): JSX.Element;
    renderMain(): JSX.Element[];
    private renderHelp;
    getMessage(fn: any, name: any, type: any): any;
    renderMessages(helpNode?: any): JSX.Element;
    registerAbstractField: (name: any) => void;
    unregisterAbstractField: (name: any) => void;
    renderField(formContext?: {}): JSX.Element;
    private renderLabel;
    render(): JSX.Element;
}
export default FormField;
