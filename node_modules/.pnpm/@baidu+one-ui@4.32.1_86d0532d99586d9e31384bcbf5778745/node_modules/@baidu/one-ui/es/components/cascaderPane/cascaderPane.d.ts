import { PureComponent } from 'react';
import { Tree } from '../../data/tree';
import { CascaderPaneProps } from './interface';
import { CascaderOption } from '../cascader/interface';
interface CascaderPaneState {
    value?: Array<string | number>;
    activeValue?: Array<string | number>;
    query?: string;
    options?: [];
    optionsClone?: [];
    checkedKeys?: Array<string | number>;
    showCheckbox?: boolean;
    firstColumnGroup?: boolean;
    changeOnSelect?: boolean;
    showCheckAll?: boolean;
    tree?: Tree;
    columns?: [][];
    searchOptions?: [];
    loadingMap?: Record<string, boolean>;
}
declare class CascaderPane extends PureComponent<CascaderPaneProps, CascaderPaneState> {
    static defaultProps: {
        options: any[];
        prefixCls: string;
        expandTrigger: string;
        onSelect(): void;
        visible: boolean;
        fieldNames: {
            label: string;
            value: string;
            children: string;
            icon: string;
        };
        expandIcon: JSX.Element;
        loadingIcon: JSX.Element;
        showCheckbox: boolean;
        checkboxPrefixCls: string;
        onCheckboxChange(): void;
        showSearch: boolean;
        paneWidth: number;
        useDefaultFilter: boolean;
        onInputChange(): void;
        emptyNode: string;
        emptyType: string;
        onClickSearchItem(): void;
        firstColumnGroup: boolean;
        inputType: string;
        showCheckAll: boolean;
        size: string;
    };
    constructor(props: any);
    static getDerivedStateFromProps(props: any, state: any): CascaderPaneState;
    prefix(name: any): string;
    render(): JSX.Element;
    renderMenu(): JSX.Element;
    menuRef: any;
    saveMenuRef: (ref: any) => void;
    componentDidMount(): void;
    componentDidUpdate(preProps: any): void;
    scrollActiveItemToView(): void;
    renderSearch(): JSX.Element;
    onInputChange: (e: any) => void;
    setSearchOptions(query: any): void;
    setColumns(key: any, keyPath?: any): void;
    handleOnHover: (key: any, keyPath: any, columnIndex: any) => void;
    loadData(option: CascaderOption, trigger: any, scope: any): void;
    handleOnSelect: (key: any, keyPath: any, columnIndex?: any) => void;
    handleOnCheck: (key: any) => void;
}
export default CascaderPane;
