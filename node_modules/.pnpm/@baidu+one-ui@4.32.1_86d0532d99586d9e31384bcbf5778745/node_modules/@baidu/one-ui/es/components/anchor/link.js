import _inheritsLoose from "@babel/runtime/helpers/inheritsLoose";

var _dec, _class, _class2, _temp;

import React, { PureComponent } from 'react';
import { classnames } from '../../core/commonTools';
import { withConfigConsumer } from '../providerConfig/context';
import Context from './context';
var AnchorLink = (_dec = withConfigConsumer('anchor'), _dec(_class = (_temp = _class2 = /*#__PURE__*/function (_PureComponent) {
  _inheritsLoose(AnchorLink, _PureComponent);

  function AnchorLink() {
    var _this;

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _PureComponent.call.apply(_PureComponent, [this].concat(args)) || this;
    _this.anchorContext = void 0;

    _this.handleClick = function (e) {
      var _this$anchorContext = _this.anchorContext,
          scrollTo = _this$anchorContext.scrollTo,
          onClick = _this$anchorContext.onClick;
      var _this$props = _this.props,
          href = _this$props.href,
          title = _this$props.title;

      if (onClick) {
        onClick(e, {
          title: title,
          href: href
        });
      }

      scrollTo(href);
    };

    return _this;
  }

  var _proto = AnchorLink.prototype;

  _proto.componentDidMount = function componentDidMount() {
    this.anchorContext.registerLink(this.props.href);
  };

  _proto.componentDidUpdate = function componentDidUpdate(_ref) {
    var prevHref = _ref.href;
    var href = this.props.href;

    if (prevHref !== href) {
      this.anchorContext.unregisterLink(prevHref);
      this.anchorContext.registerLink(href);
    }
  };

  _proto.componentWillUnmount = function componentWillUnmount() {
    this.anchorContext.unregisterLink(this.props.href);
  };

  _proto.renderLink = function renderLink() {
    var _classnames, _classnames2;

    var _this$props2 = this.props,
        prefixCls = _this$props2.prefixCls,
        href = _this$props2.href,
        title = _this$props2.title,
        children = _this$props2.children,
        className = _this$props2.className,
        isALabel = _this$props2.isALabel;
    var active = this.anchorContext.activeLink === href;
    var wrapperClassName = classnames(className, prefixCls + "-link", (_classnames = {}, _classnames[prefixCls + "-link-active"] = active, _classnames[prefixCls + "-link-not-active"] = !active, _classnames[prefixCls + "-link-has-children"] = !!children, _classnames[prefixCls + "-link-without-children"] = !children, _classnames));
    var titleClassName = classnames(prefixCls + "-link-title", (_classnames2 = {}, _classnames2[prefixCls + "-link-title-active"] = active, _classnames2[prefixCls + "-link-title-not-active"] = !active, _classnames2));
    var label = isALabel ? /*#__PURE__*/React.createElement("a", {
      className: titleClassName,
      href: href,
      title: typeof title === 'string' ? title : '',
      onClick: this.handleClick
    }, /*#__PURE__*/React.createElement("span", null, title)) : /*#__PURE__*/React.createElement("span", {
      className: titleClassName,
      title: typeof title === 'string' ? title : '',
      onClick: this.handleClick
    }, /*#__PURE__*/React.createElement("span", null, title));
    return /*#__PURE__*/React.createElement("div", {
      className: wrapperClassName
    }, label, children);
  };

  _proto.render = function render() {
    var _this2 = this;

    return /*#__PURE__*/React.createElement(Context.Consumer, null, function (context) {
      _this2.anchorContext = context;
      return _this2.renderLink();
    });
  };

  return AnchorLink;
}(PureComponent), _class2.defaultProps = {
  prefixCls: 'one-anchor',
  href: '#',
  isALabel: false
}, _temp)) || _class);
export default AnchorLink;