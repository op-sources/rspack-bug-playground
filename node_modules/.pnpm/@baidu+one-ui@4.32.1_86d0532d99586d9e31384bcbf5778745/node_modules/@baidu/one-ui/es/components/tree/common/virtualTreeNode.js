import _objectWithoutPropertiesLoose from "@babel/runtime/helpers/objectWithoutPropertiesLoose";
import _extends from "@babel/runtime/helpers/extends";
import _assertThisInitialized from "@babel/runtime/helpers/assertThisInitialized";
import _inheritsLoose from "@babel/runtime/helpers/inheritsLoose";
import React, { PureComponent } from 'react';
import { classnames } from '../../../core/commonTools';
import { isTreeNode, getDataAndAria, warnOnlyTreeNode } from '../../../core/treeTools';
import Checkbox from '../../checkbox';
import SearchText from '../../select/searchText';
import toArray from '../../../core/childrenTools';
import Context from './context';
var ICON_OPEN = 'open';
var ICON_CLOSE = 'close';
var defaultTitle = '---';

var VirtualTreeNode = /*#__PURE__*/function (_PureComponent) {
  _inheritsLoose(VirtualTreeNode, _PureComponent);

  function VirtualTreeNode() {
    var _this;

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _PureComponent.call.apply(_PureComponent, [this].concat(args)) || this;
    _this.selectHandle = void 0;

    _this.onSelectorClick = function (e) {
      if (_this.isDisabled() && _this.props.disabledAllWhenNodeDisabled) {
        return;
      }

      var onNodeClick = _this.context.rcTree.onNodeClick;
      onNodeClick(e, _assertThisInitialized(_this));

      if (_this.isSelectable()) {
        _this.onSelect(e);
      } else {
        _this.onCheck(e);
      }
    };

    _this.onSelectorDoubleClick = function (e) {
      if (_this.isDisabled() && _this.props.disabledAllWhenNodeDisabled) {
        return;
      }

      var onNodeDoubleClick = _this.context.rcTree.onNodeDoubleClick;
      onNodeDoubleClick(e, _assertThisInitialized(_this));
    };

    _this.onSelect = function (e) {
      if (_this.isDisabled()) {
        return;
      }

      var onNodeSelect = _this.context.rcTree.onNodeSelect; // e.preventDefault();

      onNodeSelect(e, _assertThisInitialized(_this));
    };

    _this.onCheck = function (e) {
      if (_this.isDisabled()) {
        return;
      }

      var _this$props = _this.props,
          disableCheckbox = _this$props.disableCheckbox,
          checked = _this$props.checked;
      var _this$context$rcTree = _this.context.rcTree,
          checkable = _this$context$rcTree.checkable,
          onNodeCheck = _this$context$rcTree.onNodeCheck;

      if (!checkable || disableCheckbox) {
        return;
      }

      e.preventDefault();
      var targetChecked = !checked;
      onNodeCheck(e, _assertThisInitialized(_this), targetChecked);
    };

    _this.onMouseEnter = function (e) {
      var onNodeMouseEnter = _this.context.rcTree.onNodeMouseEnter;
      onNodeMouseEnter(e, _assertThisInitialized(_this));
    };

    _this.onMouseLeave = function (e) {
      var onNodeMouseLeave = _this.context.rcTree.onNodeMouseLeave;
      onNodeMouseLeave(e, _assertThisInitialized(_this));
    };

    _this.onContextMenu = function (e) {
      var onNodeContextMenu = _this.context.rcTree.onNodeContextMenu;
      onNodeContextMenu(e, _assertThisInitialized(_this));
    };

    _this.onExpand = function (e) {
      if (_this.isDisabled() && _this.props.disabledAllWhenNodeDisabled) {
        return;
      }

      var onNodeExpand = _this.context.rcTree.onNodeExpand;
      onNodeExpand(e, _assertThisInitialized(_this));
    };

    _this.setSelectHandle = function (node) {
      _this.selectHandle = node;
    };

    _this.getNodeChildren = function () {
      var _this$props2 = _this.props,
          children = _this$props2.children,
          disableCheckbox = _this$props2.disableCheckbox;
      var originList = toArray(children).map(function (child) {
        // 父存在disabled的话，所有的子都是disabled checkbox
        if (disableCheckbox) {
          return _extends({}, child, {
            props: _extends({}, child.props, {
              disableCheckbox: disableCheckbox
            })
          });
        }

        return child;
      }).filter(function (node) {
        return node;
      });
      var targetList = originList.filter(isTreeNode);

      if (originList.length !== targetList.length) {
        warnOnlyTreeNode();
      }

      return targetList;
    };

    _this.getNodeState = function (isLeaf) {
      var expanded = _this.props.expanded;

      if (isLeaf) {
        return null;
      }

      return expanded ? ICON_OPEN : ICON_CLOSE;
    };

    _this.isLeaf = function (hasChildren) {
      var _this$props3 = _this.props,
          isLeaf = _this$props3.isLeaf,
          loaded = _this$props3.loaded;
      var loadData = _this.context.rcTree.loadData;

      if (isLeaf === false) {
        return false;
      }

      return isLeaf || !loadData && !hasChildren || loadData && loaded && !hasChildren;
    };

    _this.isDisabled = function () {
      var disabled = _this.props.disabled;
      var treeDisabled = _this.context.rcTree.disabled; // Follow the logic of Selectable

      if (disabled === false) {
        return false;
      }

      return !!(treeDisabled || disabled);
    };

    _this.syncLoadData = function (props) {
      var expanded = props.expanded,
          loading = props.loading,
          loaded = props.loaded;
      var _this$context$rcTree2 = _this.context.rcTree,
          loadData = _this$context$rcTree2.loadData,
          onNodeLoad = _this$context$rcTree2.onNodeLoad;

      if (!loadData || !expanded || loaded || loading) {
        return;
      }

      var hasChildren = _this.getNodeChildren().length > 0; // read from state to avoid loadData at same time

      if (!hasChildren && !_this.isLeaf(hasChildren)) {
        // We needn't reload data when has children in sync logic
        // It's only needed in node expanded
        onNodeLoad(_assertThisInitialized(_this));
      }
    };

    return _this;
  }

  var _proto = VirtualTreeNode.prototype;

  _proto.componentDidMount = function componentDidMount() {
    this.syncLoadData(this.props);
  };

  _proto.componentDidUpdate = function componentDidUpdate() {
    this.syncLoadData(this.props);
  };

  _proto.isSelectable = function isSelectable() {
    var selectable = this.props.selectable;
    var treeSelectable = this.context.rcTree.selectable; // Ignore when selectable is undefined or null

    if (typeof selectable === 'boolean') {
      return selectable;
    }

    return treeSelectable;
  } // Load data to avoid default expanded tree without data
  ;

  // 缩进
  _proto.renderIndent = function renderIndent() {
    var prefixCls = this.context.rcTree.prefixCls;
    var level = this.props.level;
    var arr = [];

    for (var i = 0; i < level; i++) {
      arr.push( /*#__PURE__*/React.createElement("span", {
        key: i + "-indent",
        className: prefixCls + "-node-indent-start"
      }));
    }

    return /*#__PURE__*/React.createElement("span", {
      className: prefixCls + "-node-indent " + prefixCls + "-node-indent-" + level
    }, arr);
  } // Switcher
  ;

  _proto.renderSwitcher = function renderSwitcher(isLeaf) {
    var _this$props4 = this.props,
        switcherIconFromProps = _this$props4.switcherIcon,
        expanded = _this$props4.expanded;
    var _this$context$rcTree3 = this.context.rcTree,
        prefixCls = _this$context$rcTree3.prefixCls,
        switcherIconFromCtx = _this$context$rcTree3.switcherIcon;
    var switcherIcon = switcherIconFromProps || switcherIconFromCtx;

    if (isLeaf) {
      return /*#__PURE__*/React.createElement("span", {
        className: classnames(prefixCls + "-switcher", prefixCls + "-switcher-noop")
      }, typeof switcherIcon === 'function' ? /*#__PURE__*/React.createElement(switcherIcon, _extends({}, this.props, {
        isLeaf: true
      })) : switcherIcon);
    }

    var switcherCls = classnames(prefixCls + "-switcher", prefixCls + "-switcher_" + (expanded ? ICON_OPEN : ICON_CLOSE));
    return /*#__PURE__*/React.createElement("span", {
      onClick: this.onExpand,
      className: switcherCls
    }, typeof switcherIcon === 'function' ? /*#__PURE__*/React.createElement(switcherIcon, _extends({}, this.props, {
      isLeaf: false
    })) : switcherIcon);
  } // Checkbox
  ;

  _proto.renderCheckbox = function renderCheckbox() {
    var _this$props5 = this.props,
        checked = _this$props5.checked,
        halfChecked = _this$props5.halfChecked,
        disableCheckbox = _this$props5.disableCheckbox,
        size = _this$props5.size;
    var _this$context$rcTree4 = this.context.rcTree,
        prefixCls = _this$context$rcTree4.prefixCls,
        checkable = _this$context$rcTree4.checkable;
    var disabled = this.isDisabled();
    var currentCheckable = checkable;

    if ('checkable' in this.props) {
      currentCheckable = this.props.checkable;
    }

    if (!currentCheckable) {
      return null;
    } // [Legacy] Custom element should be separate with `checkable` in future


    var $custom = typeof currentCheckable !== 'boolean' ? currentCheckable : null;

    if (typeof currentCheckable === 'boolean' && currentCheckable === true) {
      $custom = /*#__PURE__*/React.createElement(Checkbox, {
        checked: checked,
        indeterminate: !checked && halfChecked,
        disabled: disabled || disableCheckbox,
        size: size
      });
    }

    return /*#__PURE__*/React.createElement("span", {
      className: classnames(prefixCls + "-checkbox", checked && prefixCls + "-checkbox-checked", !checked && halfChecked && prefixCls + "-checkbox-indeterminate", (disabled || disableCheckbox) && prefixCls + "-checkbox-disabled"),
      onClick: this.onCheck
    }, $custom);
  } // Icon + Title
  ;

  _proto.renderSelector = function renderSelector(filterTitle, isLeafNode) {
    var _this$props6 = this.props,
        title = _this$props6.title,
        selected = _this$props6.selected,
        icon = _this$props6.icon;
    var _this$context$rcTree5 = this.context.rcTree,
        prefixCls = _this$context$rcTree5.prefixCls,
        showIcon = _this$context$rcTree5.showIcon,
        treeIcon = _this$context$rcTree5.icon;
    var disabled = this.isDisabled();
    var wrapClass = prefixCls + "-node-content-wrapper"; // Icon - Still show loading icon when loading without showIcon

    var $icon;

    if (showIcon) {
      var currentIcon = icon || treeIcon;
      $icon = currentIcon ? /*#__PURE__*/React.createElement("span", {
        className: classnames(prefixCls + "-iconEle", prefixCls + "-icon__customize")
      }, typeof currentIcon === 'function' ? /*#__PURE__*/React.createElement(currentIcon, _extends({}, this.props)) : currentIcon) : null;
    }

    var currentTitle = title;

    if (typeof title === 'string' && typeof filterTitle === 'string' && !!filterTitle) {
      currentTitle = /*#__PURE__*/React.createElement(SearchText, {
        prefixCls: prefixCls,
        text: title,
        searchValue: filterTitle,
        showSearch: true
      });
    } // Title


    var $title = /*#__PURE__*/React.createElement("span", {
      className: prefixCls + "-title"
    }, currentTitle);
    return /*#__PURE__*/React.createElement("span", {
      ref: this.setSelectHandle,
      title: typeof title === 'string' ? title : '',
      className: classnames("" + wrapClass, wrapClass + "-" + (this.getNodeState(isLeafNode) || 'normal'), !disabled && selected && prefixCls + "-node-selected"),
      onMouseEnter: this.onMouseEnter,
      onMouseLeave: this.onMouseLeave,
      onContextMenu: this.onContextMenu,
      onClick: this.onSelectorClick,
      onDoubleClick: this.onSelectorDoubleClick
    }, $icon, $title);
  };

  _proto.render = function render() {
    var _classnames, _classnames2;

    var _this$props7 = this.props,
        className = _this$props7.className,
        style = _this$props7.style,
        isLeaf = _this$props7.isLeaf,
        expanded = _this$props7.expanded,
        selected = _this$props7.selected,
        checked = _this$props7.checked,
        halfChecked = _this$props7.halfChecked,
        loading = _this$props7.loading,
        otherProps = _objectWithoutPropertiesLoose(_this$props7, ["className", "style", "isLeaf", "expanded", "selected", "checked", "halfChecked", "loading"]);

    var _this$context$rcTree6 = this.context.rcTree,
        prefixCls = _this$context$rcTree6.prefixCls,
        filterTreeNode = _this$context$rcTree6.filterTreeNode;
    var disabled = this.isDisabled();
    var dataOrAriaAttributeProps = getDataAndAria(otherProps);
    var filterTitle = filterTreeNode && filterTreeNode(this) || false;
    var level = this.props.level;
    var hasChildren = this.getNodeChildren().length > 0;
    var isLeafNode = this.isLeaf(hasChildren);
    return /*#__PURE__*/React.createElement("li", _extends({
      className: classnames(className, (_classnames = {}, _classnames[prefixCls + "-treenode-disabled"] = disabled, _classnames[prefixCls + "-treenode-switcher-" + (expanded ? 'open' : 'close')] = !isLeaf, _classnames[prefixCls + "-treenode-checkbox-checked"] = checked, _classnames[prefixCls + "-treenode-checkbox-indeterminate"] = halfChecked, _classnames[prefixCls + "-treenode-selected"] = selected, _classnames[prefixCls + "-treenode-loading"] = loading, _classnames['current-filter-node'] = filterTitle, _classnames)),
      style: style,
      role: "treeitem"
    }, dataOrAriaAttributeProps), /*#__PURE__*/React.createElement("div", {
      className: classnames(prefixCls + "-treenode-container", (_classnames2 = {}, _classnames2[prefixCls + "-treenode-container-has-node-" + level] = level, _classnames2))
    }, this.renderIndent(), this.renderSwitcher(isLeafNode), /*#__PURE__*/React.createElement("span", {
      className: prefixCls + "-treenode-container-title"
    }, this.renderCheckbox(), this.renderSelector(filterTitle, isLeafNode))));
  };

  return VirtualTreeNode;
}(PureComponent); // @ts-ignore


VirtualTreeNode.contextType = Context;
VirtualTreeNode.defaultProps = {
  title: defaultTitle,
  size: 'medium',
  isFileNode: false,
  disabledAllWhenNodeDisabled: false
};
VirtualTreeNode.isTreeNode = 1;
export default VirtualTreeNode;