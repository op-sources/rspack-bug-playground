import _extends from "@babel/runtime/helpers/extends";
import _objectWithoutPropertiesLoose from "@babel/runtime/helpers/objectWithoutPropertiesLoose";
import _inheritsLoose from "@babel/runtime/helpers/inheritsLoose";
import React, { PureComponent } from 'react';
import KeyCode from 'rc-util/lib/KeyCode';
import Input from '../input';
import Button from '../button';
import { classnames } from '../../core/commonTools';
import { IconTimes, IconTimesCircle, IconChevronDown, IconChevronRight } from 'dls-icons-react';
import { COMPONENT_FOCUS, COMPONENT_MAIN } from '../config';

var Trigger = /*#__PURE__*/function (_PureComponent) {
  _inheritsLoose(Trigger, _PureComponent);

  function Trigger() {
    var _this;

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _PureComponent.call.apply(_PureComponent, [this].concat(args)) || this;
    _this.state = {
      query: '',
      rawInputValue: '',
      inputWidth: 0,
      options: []
    };

    _this.handleInputKeyDown = function (e) {
      var _this$props = _this.props,
          options = _this$props.options,
          multiple = _this$props.multiple;
      var opts = options.filter(function (option) {
        return !option.children && !option.disabled;
      });
      var len = opts.length;

      if (multiple && !e.target.value && e.keyCode === KeyCode.BACKSPACE && opts.length) {
        _this.handleRemove(opts[len - 1].key);
      }
    };

    _this.handleInputValue = function (e) {
      _this.setState({
        rawInputValue: e.target.value
      });
    };

    _this.handleOnSearch = function (e) {
      var query = e.value;
      var _this$props2 = _this.props,
          onSearch = _this$props2.onSearch,
          onInputChange = _this$props2.onInputChange;
      onSearch && onSearch(query);
      onInputChange && onInputChange(query);
    };

    _this.handleInputBlur = function () {
      _this.inputRef.focus();
    };

    _this.handleRemove = function (key) {
      _this.props.onRemove(key);
    };

    _this.handleRemoveAll = function (event) {
      event.stopPropagation();

      _this.props.onRemoveAll();
    };

    _this.inputRef = void 0;
    _this.inputMeasureRef = void 0;

    _this.saveInputRef = function (ref) {
      _this.inputRef = ref;
    };

    _this.saveInputMeasureRef = function (ref) {
      _this.inputMeasureRef = ref;
    };

    return _this;
  }

  Trigger.getDerivedStateFromProps = function getDerivedStateFromProps(props, state) {
    if (props.query !== state.query) {
      var _query = props.query;
      return {
        query: _query,
        rawInputValue: _query
      };
    }

    return null;
  };

  var _proto = Trigger.prototype;

  _proto.prefix = function prefix(name) {
    return this.props.prefixCls + "-" + name;
  };

  _proto.componentDidUpdate = function componentDidUpdate() {
    if (this.inputMeasureRef) {
      this.setState({
        inputWidth: this.inputMeasureRef.offsetWidth
      });
    }
  };

  _proto.render = function render() {
    var _classnames, _classnames2;

    var _this$props3 = this.props,
        className = _this$props3.className,
        style = _this$props3.style,
        width = _this$props3.width,
        disabled = _this$props3.disabled,
        size = _this$props3.size,
        options = _this$props3.options,
        multiple = _this$props3.multiple,
        expanded = _this$props3.expanded,
        children = _this$props3.children,
        allowClear = _this$props3.allowClear,
        showSearch = _this$props3.showSearch,
        prefixCls = _this$props3.prefixCls,
        placeholder = _this$props3.placeholder,
        onInputChange = _this$props3.onInputChange,
        inputPrefixCls = _this$props3.inputPrefixCls,
        displayRender = _this$props3.displayRender,
        displayParent = _this$props3.displayParent,
        onRemove = _this$props3.onRemove,
        onRemoveAll = _this$props3.onRemoveAll,
        onSearch = _this$props3.onSearch,
        query = _this$props3.query,
        before = _this$props3.before,
        restProps = _objectWithoutPropertiesLoose(_this$props3, ["className", "style", "width", "disabled", "size", "options", "multiple", "expanded", "children", "allowClear", "showSearch", "prefixCls", "placeholder", "onInputChange", "inputPrefixCls", "displayRender", "displayParent", "onRemove", "onRemoveAll", "onSearch", "query", "before"]);

    var rawInputValue = this.state.rawInputValue;
    var arrowCls = classnames((_classnames = {}, _classnames[this.prefix('picker-arrow')] = true, _classnames[this.prefix('picker-arrow-expand')] = expanded, _classnames));
    var pickerCls = classnames(className, COMPONENT_MAIN, (_classnames2 = {}, _classnames2[this.prefix('picker')] = true, _classnames2[this.prefix('picker-disabled')] = disabled, _classnames2[this.prefix('picker-show-search')] = !!showSearch, _classnames2[this.prefix('picker-multiple')] = multiple, _classnames2[this.prefix('picker-expanded')] = expanded, _classnames2[this.prefix('picker-focus')] = expanded && !!showSearch, _classnames2[COMPONENT_FOCUS] = expanded && !!showSearch, _classnames2[this.prefix(size)] = size, _classnames2));
    var hasResult = options.length > 0;
    var hasQuery = rawInputValue.length > 0;
    var showPlaceholder = !multiple && expanded && showSearch && !hasQuery || !hasResult && !hasQuery;
    var showResult = !showPlaceholder && !(!multiple && hasQuery);
    var clearable = !disabled && allowClear && (hasResult || hasQuery);
    var showQueryInput = showSearch && expanded;
    var result = showResult ? this.renderResults() : null;
    return children || /*#__PURE__*/React.createElement("div", _extends({
      style: _extends({
        width: width
      }, style),
      className: pickerCls
    }, restProps), before ? /*#__PURE__*/React.createElement("div", {
      className: this.prefix('picker-before')
    }, before) : null, /*#__PURE__*/React.createElement("div", {
      className: this.prefix('picker-main')
    }, result, (showPlaceholder || hasResult && showResult && !result && !hasQuery) && this.renderPlaceholder(), showQueryInput && this.renderQueryInput()), /*#__PURE__*/React.createElement("span", {
      className: this.prefix('picker-icon')
    }, clearable && /*#__PURE__*/React.createElement(IconTimesCircle, {
      className: this.prefix('picker-clear'),
      onClick: this.handleRemoveAll
    }), /*#__PURE__*/React.createElement(IconChevronDown, {
      type: "angle-down",
      className: arrowCls
    })));
  };

  _proto.renderQueryInput = function renderQueryInput() {
    var _this$state = this.state,
        query = _this$state.query,
        inputWidth = _this$state.inputWidth,
        rawInputValue = _this$state.rawInputValue;
    var _this$props4 = this.props,
        inputPrefixCls = _this$props4.inputPrefixCls,
        size = _this$props4.size;
    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Input, {
      autoFocus: true,
      inputRef: this.saveInputRef,
      prefixCls: inputPrefixCls,
      className: classnames(this.prefix('input'), this.prefix('input-autosize')),
      value: query,
      autoComplete: "off",
      onInput: this.handleInputValue,
      onChange: this.handleOnSearch,
      onKeyDown: this.handleInputKeyDown,
      onBlur: this.handleInputBlur,
      isRequired: false,
      size: size,
      style: {
        width: inputWidth || 10
      }
    }), /*#__PURE__*/React.createElement("span", {
      ref: this.saveInputMeasureRef,
      className: this.prefix('input-measure')
    }, rawInputValue, "\xA0\xA0"));
  };

  _proto.renderPlaceholder = function renderPlaceholder() {
    var _this$props5 = this.props,
        options = _this$props5.options,
        placeholder = _this$props5.placeholder;
    var result = options.length > 0 ? this.renderResult(options) : null;
    return /*#__PURE__*/React.createElement("span", {
      className: this.prefix('picker-placeholder')
    }, result || placeholder);
  };

  _proto.renderResult = function renderResult(options) {
    var _this$props6 = this.props,
        displayRender = _this$props6.displayRender,
        prefixCls = _this$props6.prefixCls;
    var labels = options.map(function (o) {
      return o.label;
    });
    var items = options.map(function (o) {
      return o.item;
    });
    var content = displayRender ? displayRender(labels, items, prefixCls) : this.defaultRender(options);

    if (content) {
      return /*#__PURE__*/React.createElement("span", {
        className: this.prefix('picker-label')
      }, content);
    }

    return null;
  };

  _proto.defaultRender = function defaultRender(options) {
    var _this2 = this;

    var opts = this.props.displayParent ? options : options.slice(options.length - 1);
    return /*#__PURE__*/React.createElement("span", {
      className: this.prefix('picker-label-container')
    }, opts.map(function (o, index) {
      var last = index === opts.length - 1;
      return /*#__PURE__*/React.createElement("span", {
        key: index
      }, o.label, !last && /*#__PURE__*/React.createElement(IconChevronRight, {
        className: _this2.prefix('search-split-icon')
      }));
    }));
  };

  _proto.renderResults = function renderResults() {
    var _this3 = this;

    var _this$props7 = this.props,
        options = _this$props7.options,
        disabled = _this$props7.disabled,
        multiple = _this$props7.multiple,
        displayRender = _this$props7.displayRender;

    if (!multiple || displayRender) {
      return this.renderResult(options);
    }

    return options.filter(function (option) {
      return !option.children;
    }).map(function (option) {
      var _classnames3;

      var key = option.key,
          title = option.title,
          label = option.label,
          optionDisabled = option.disabled;
      return /*#__PURE__*/React.createElement("span", {
        className: classnames(_this3.prefix('picker-result'), (_classnames3 = {}, _classnames3[_this3.prefix('picker-result-disabled')] = disabled || optionDisabled, _classnames3)),
        key: key,
        title: title
      }, /*#__PURE__*/React.createElement("span", {
        className: _this3.prefix('picker-result-label')
      }, label), /*#__PURE__*/React.createElement(Button, {
        type: "text-aux",
        className: _this3.prefix('picker-delete'),
        disabled: disabled || optionDisabled,
        onClick: function onClick(e) {
          e.stopPropagation();

          _this3.handleRemove(key);
        }
      }, /*#__PURE__*/React.createElement(IconTimes, null)));
    });
  };

  return Trigger;
}(PureComponent);

export { Trigger as default };