import _inheritsLoose from "@babel/runtime/helpers/inheritsLoose";
import _flattenDeep from "lodash/flattenDeep";
import React, { PureComponent } from 'react';
import { classnames } from '../../core/commonTools';
;
;

var SearchText = /*#__PURE__*/function (_PureComponent) {
  _inheritsLoose(SearchText, _PureComponent);

  function SearchText(props) {
    var _this;

    _this = _PureComponent.call(this, props) || this;

    _this.formatTextWithColor = function (text, searchValue) {
      var pivolIndex = text.indexOf(searchValue);
      var prefixCls = _this.props.prefixCls;

      if (pivolIndex < 0) {
        return /*#__PURE__*/React.createElement("span", null, text);
      }

      var textArray = _flattenDeep(text.split(searchValue).map(function (node, index) {
        return index === 0 ? [/*#__PURE__*/React.createElement("span", {
          key: index
        }, node)] : [/*#__PURE__*/React.createElement("span", {
          key: index + "-highlight",
          className: prefixCls + "-search-text-highlight"
        }, searchValue), /*#__PURE__*/React.createElement("span", {
          key: index
        }, node)];
      }));

      var strDom = /*#__PURE__*/React.createElement("span", null, textArray.map(function (node) {
        return node;
      }));
      return strDom;
    };

    _this.state = {
      searchValue: props.searchValue || ''
    };
    return _this;
  }

  var _proto = SearchText.prototype;

  _proto.render = function render() {
    var _classnames;

    var _this$props = this.props,
        text = _this$props.text,
        showSearch = _this$props.showSearch,
        className = _this$props.className,
        prefixCls = _this$props.prefixCls,
        disabled = _this$props.disabled;
    var searchValue = this.state.searchValue;
    var searchTextClassName = classnames((_classnames = {}, _classnames[prefixCls + "-search-text-disabled"] = disabled, _classnames), className);

    if (!showSearch || !searchValue || typeof text !== 'string') {
      return /*#__PURE__*/React.createElement("span", {
        className: className
      }, text);
    }

    return /*#__PURE__*/React.createElement("span", {
      className: searchTextClassName
    }, this.formatTextWithColor(text, searchValue));
  };

  return SearchText;
}(PureComponent);

SearchText.defaultProps = {
  className: '',
  disabled: false,
  prefixCls: 'one-select'
};

SearchText.getDerivedStateFromProps = function (nextProps, prevState) {
  var searchValue = nextProps.searchValue;
  var currentSearchValue = prevState.searchValue;

  if (searchValue !== currentSearchValue) {
    return {
      searchValue: searchValue
    };
  }

  return null;
};

export default SearchText;