import _objectWithoutPropertiesLoose from "@babel/runtime/helpers/objectWithoutPropertiesLoose";
import _extends from "@babel/runtime/helpers/extends";
import _inheritsLoose from "@babel/runtime/helpers/inheritsLoose";
import _partial from "lodash/partial";
import _omit from "lodash/omit";

var _dec, _class, _class2, _temp;

/**
 * @file 导航组件
 * @author huangshiming
 * @date 2020-04-29
 */
import React, { PureComponent } from 'react';
import ResizeObserver from 'resize-observer-polyfill';
import { IconEllipsis, IconChevronDown, IconChevronRight } from 'dls-icons-react';
import { withConfigConsumer } from '../providerConfig/context';
import { classnames } from '../../core/commonTools';
import InnerOverlay from '../overlay';
import Ink from './ink';
import warning from 'warning';
;
var Nav = (_dec = withConfigConsumer('nav'), _dec(_class = (_temp = _class2 = /*#__PURE__*/function (_PureComponent) {
  _inheritsLoose(Nav, _PureComponent);

  function Nav(props) {
    var _this;

    _this = _PureComponent.call(this, props) || this;
    _this.resizeObserver = null;
    _this.mutationObserver = null;
    _this.itemTextRefMap = {};
    _this.navContainerRef = void 0;

    _this.getMenuItemsByDataSet = function (dateset) {
      var navContainer = _this.navContainerRef;

      if (!navContainer) {
        return [];
      }

      return [].slice.call(navContainer.children).filter(function (node) {
        return node.dataset && +node.dataset[dateset] > 0;
      });
    };

    _this.setWidthWithResize = function () {
      var navContainer = _this.navContainerRef;

      if (!navContainer) {
        return;
      }

      var childrenNodes = navContainer.children;

      if (!childrenNodes || childrenNodes.length === 0) {
        return;
      }

      var lastOverflowedIndicatorPlaceholder = childrenNodes[childrenNodes.length - 1];
      lastOverflowedIndicatorPlaceholder.style.display = 'inline-flex';

      var normalMenus = _this.getMenuItemsByDataSet('isItem');

      normalMenus.forEach(function (node) {
        node.style.display = 'inline-flex';
      });
      var lastShowIndex;
      var totalItemWidth = 0;

      for (var i = 0; i < normalMenus.length; i++) {
        totalItemWidth += normalMenus[i].offsetWidth;

        if (_this.navContainerRef.offsetWidth > totalItemWidth + lastOverflowedIndicatorPlaceholder.offsetWidth) {
          lastShowIndex = i;
        }
      }

      if (_this.navContainerRef.offsetWidth < normalMenus[0].offsetWidth + lastOverflowedIndicatorPlaceholder.offsetWidth) {
        lastShowIndex = -1;
      }

      normalMenus.forEach(function (node, index) {
        if (index > lastShowIndex) {
          node.style.display = 'none';
        }
      });

      if (lastShowIndex === normalMenus.length - 1 || lastShowIndex === undefined) {
        lastOverflowedIndicatorPlaceholder.style.display = 'none';
      }

      _this.setState({
        lastShowIndex: lastShowIndex
      });
    };

    _this.getHoverItemTextRef = function (index, itemRef) {
      _this.itemTextRefMap[index] = itemRef;
    };

    _this.onMouseEnterItem = function (currentHoverIndex, disabled, e) {
      // disabled为true时，hover没有任何效果
      _this.setState({
        hoverIndex: disabled ? null : currentHoverIndex
      });
    };

    _this.onMouseLeaveItem = function () {
      _this.setState({
        hoverIndex: null
      });
    };

    _this.renderItem = function (item) {
      var _classnames;

      var prefixCls = item.prefixCls,
          label = item.label,
          key = item.key,
          disabled = item.disabled,
          index = item.index,
          overlay = item.overlay,
          href = item.href,
          target = item.target;
      var _this$state = _this.state,
          value = _this$state.value,
          lastShowIndex = _this$state.lastShowIndex;
      var itemIHideen = index > lastShowIndex;
      var itemClassNames = classnames(prefixCls + "-item", (_classnames = {}, _classnames[prefixCls + "-item-disabled"] = disabled, _classnames[prefixCls + "-item-selected"] = value === key, _classnames[prefixCls + "-item-hidden"] = itemIHideen, _classnames));
      var renderItemNode = /*#__PURE__*/React.createElement("a", {
        className: itemClassNames,
        "data-is-item": 1,
        key: key,
        tabIndex: 1,
        onClick: function onClick() {
          return _this.onChange(item);
        },
        href: href,
        target: target,
        onMouseEnter: _partial(_this.onMouseEnterItem, index, disabled),
        onMouseLeave: _this.onMouseLeaveItem
      }, /*#__PURE__*/React.createElement("div", {
        className: prefixCls + "-item-text",
        ref: _partial(_this.getHoverItemTextRef, index)
      }, label), overlay && typeof overlay === 'object' ? /*#__PURE__*/React.createElement(IconChevronDown, {
        className: prefixCls + "-item-arrow-down"
      }) : null);

      if (overlay && typeof overlay === 'object' && !itemIHideen) {
        var overlayElement = overlay.overlayElement,
            _overlay$placement = overlay.placement,
            placement = _overlay$placement === void 0 ? 'bottom' : _overlay$placement,
            _overlay$overlayProps = overlay.overlayProps,
            overlayProps = _overlay$overlayProps === void 0 ? {} : _overlay$overlayProps,
            _overlay$className = overlay.className,
            className = _overlay$className === void 0 ? '' : _overlay$className;
        var overlayClassName = classnames(prefixCls + "-overlay", className);
        return /*#__PURE__*/React.createElement(InnerOverlay, _extends({
          popupPlacement: placement,
          dropdownMatchSelectWidth: false,
          overlayClassName: overlayClassName
        }, overlayProps, {
          overlay: overlayElement,
          key: key,
          onVisibleChange: function onVisibleChange(visible) {
            _this.onOverlayVisibleChange(visible, overlayProps, key);
          }
        }), renderItemNode);
      }

      return renderItemNode;
    };

    _this.onChange = function (item) {
      var disabled = item.disabled,
          key = item.key;

      if (disabled) {
        return;
      }

      if (!('value' in _this.props)) {
        _this.setState({
          value: key
        });
      }

      _this.props.onChange({
        item: item,
        target: {
          value: key
        }
      });
    };

    _this.navRef = function (ref) {
      _this.navContainerRef = ref;
    };

    _this.onOverlayVisibleChange = function (visible, overlayProps, key) {
      var onVisibleChange = overlayProps && overlayProps.onVisibleChange;

      if (typeof onVisibleChange === 'function') {
        onVisibleChange({
          visible: visible,
          key: key
        });
      }
    };

    _this.renderOverFlowedItem = function (prefixCls) {
      var lastShowIndex = _this.state.lastShowIndex;

      var dataSource = _this.normalizeDataSource();

      var overflowedMenus = [];
      var value = _this.state.value;
      dataSource.forEach(function (node, index) {
        if (index > lastShowIndex) {
          overflowedMenus.push(node);
        }
      });
      var overlay = /*#__PURE__*/React.createElement("div", {
        className: prefixCls + "-overflow-menus"
      }, overflowedMenus.map(function (menuItem) {
        var _classnames2;

        var disabled = menuItem.disabled,
            key = menuItem.key,
            label = menuItem.label,
            overlayItem = menuItem.overlay,
            href = menuItem.href,
            target = menuItem.target;
        var itemClassNames = classnames(prefixCls + "-item", (_classnames2 = {}, _classnames2[prefixCls + "-overflow-item-disabled"] = disabled, _classnames2[prefixCls + "-overflow-item-selected"] = value === key, _classnames2));
        var renderItemNode = /*#__PURE__*/React.createElement("a", {
          key: key,
          className: itemClassNames,
          onClick: function onClick() {
            return _this.onChange(menuItem);
          },
          href: href,
          target: target
        }, label, overlayItem && typeof overlayItem === 'object' ? /*#__PURE__*/React.createElement(IconChevronRight, {
          className: prefixCls + "-item-arrow-right"
        }) : null);

        if (overlayItem && typeof overlayItem === 'object') {
          var overlayElement = overlayItem.overlayElement,
              _overlayItem$hiddenPl = overlayItem.hiddenPlacement,
              hiddenPlacement = _overlayItem$hiddenPl === void 0 ? 'left' : _overlayItem$hiddenPl,
              _overlayItem$overlayP = overlayItem.overlayProps,
              overlayProps = _overlayItem$overlayP === void 0 ? {} : _overlayItem$overlayP,
              _overlayItem$classNam = overlayItem.className,
              className = _overlayItem$classNam === void 0 ? '' : _overlayItem$classNam;
          var overlayClassName = classnames(prefixCls + "-overlay", className);
          return /*#__PURE__*/React.createElement(InnerOverlay, _extends({
            popupPlacement: hiddenPlacement,
            dropdownMatchSelectWidth: false,
            overlayClassName: overlayClassName
          }, overlayProps, {
            overlay: overlayElement,
            key: key,
            onVisibleChange: function onVisibleChange(visible) {
              return _this.onOverlayVisibleChange(visible, overlayProps, key);
            }
          }), renderItemNode);
        }

        return renderItemNode;
      }));
      return /*#__PURE__*/React.createElement(InnerOverlay, {
        overlay: overlay,
        overlayClassName: prefixCls + "-overlay-overflow-menus",
        dropdownMatchSelectWidth: false
      }, /*#__PURE__*/React.createElement("div", {
        className: prefixCls + "-item " + prefixCls + "-overflow-indicator"
      }, /*#__PURE__*/React.createElement(IconEllipsis, null)));
    };

    warning(!('datasource' in props), 'The `datasource` prop of `Nav` is deprecated, use `dataSource` instead');
    var defaultValue = props.defaultValue,
        _value = props.value;

    var _dataSource = _this.normalizeDataSource();

    var initialValue = _value || defaultValue || _dataSource[0] && _dataSource[0].key || '';

    if (!initialValue) {
      // eslint-disable-next-line no-console
      console.error('no value or no defaultValue or no dataSource is invalid');
    }

    _this.state = {
      value: initialValue,
      lastShowIndex: undefined
    };
    return _this;
  }

  var _proto = Nav.prototype;

  _proto.normalizeDataSource = function normalizeDataSource() {
    var _this$props = this.props,
        dataSource = _this$props.dataSource,
        datasource = _this$props.datasource;
    return datasource || dataSource || [];
  };

  Nav.getDerivedStateFromProps = function getDerivedStateFromProps(nextProps, prevState) {
    if (nextProps.value && nextProps.value !== prevState.value) {
      return {
        value: nextProps.value
      };
    }

    return null;
  };

  _proto.componentDidMount = function componentDidMount() {
    var _this2 = this;

    // resize的时候计算children的width
    this.setWidthWithResize();
    var navContainer = this.navContainerRef;

    if (!navContainer) {
      return;
    }

    this.resizeObserver = new ResizeObserver(function (entries) {
      entries.forEach(_this2.setWidthWithResize);
    });
    [].slice.call(navContainer.children).concat(navContainer).forEach(function (el) {
      _this2.resizeObserver.observe(el);
    });

    if (typeof MutationObserver !== 'undefined') {
      this.mutationObserver = new MutationObserver(function () {
        _this2.resizeObserver.disconnect();

        [].slice.call(navContainer.children).concat(navContainer).forEach(function (el) {
          _this2.resizeObserver.observe(el);
        });

        _this2.setWidthWithResize();
      });
      this.mutationObserver.observe(navContainer, {
        attributes: false,
        childList: true,
        subTree: false
      });
    }
  };

  _proto.componentWillUnmount = function componentWillUnmount() {
    if (this.resizeObserver) {
      this.resizeObserver.disconnect();
    }

    if (this.mutationObserver) {
      this.mutationObserver.disconnect();
    }
  };

  _proto.render = function render() {
    var _this3 = this;

    var _this$props2 = this.props,
        className = _this$props2.className,
        prefixCls = _this$props2.prefixCls,
        restProps = _objectWithoutPropertiesLoose(_this$props2, ["className", "prefixCls"]);

    var dataSource = this.normalizeDataSource();

    if (!(dataSource && dataSource.length)) {
      return null;
    }

    var navClassNames = classnames(prefixCls, className);
    var inkProps = {
      prefixCls: prefixCls,
      hoverIndex: this.state.hoverIndex,
      itemTextRefMap: this.itemTextRefMap
    };

    var props = _omit(restProps, ['value', 'defaultValue', 'dataSource', 'datasource', 'onChange']);

    return /*#__PURE__*/React.createElement("div", _extends({
      className: navClassNames
    }, props, {
      ref: this.navRef
    }), dataSource.map(function (item, index) {
      return _this3.renderItem(_extends({}, item, {
        prefixCls: prefixCls,
        index: index
      }));
    }), /*#__PURE__*/React.createElement(Ink, inkProps), this.renderOverFlowedItem(prefixCls));
  };

  return Nav;
}(PureComponent), _class2.defaultProps = {
  className: '',
  dataSource: [],
  onChange: function onChange() {},
  prefixCls: 'one-nav'
}, _temp)) || _class);
export default Nav;
export * from './interface';