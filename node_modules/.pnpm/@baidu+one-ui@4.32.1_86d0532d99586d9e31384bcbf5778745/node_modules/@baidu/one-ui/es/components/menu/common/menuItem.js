import _extends from "@babel/runtime/helpers/extends";
import _objectWithoutPropertiesLoose from "@babel/runtime/helpers/objectWithoutPropertiesLoose";
import _assertThisInitialized from "@babel/runtime/helpers/assertThisInitialized";
import _inheritsLoose from "@babel/runtime/helpers/inheritsLoose";
import React, { PureComponent } from 'react';
import KeyCode from 'rc-util/lib/KeyCode';
import { classnames } from '../../../core/commonTools';
import scrollIntoView from 'dom-scroll-into-view';
import { connect } from 'mini-store';
import Context from '../context';
import ReactDOM from 'react-dom';
;
export var MenuItem = /*#__PURE__*/function (_PureComponent) {
  _inheritsLoose(MenuItem, _PureComponent);

  function MenuItem() {
    var _this;

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _PureComponent.call.apply(_PureComponent, [this].concat(args)) || this;
    _this.node = void 0;

    _this.onKeyDown = function (e) {
      var keyCode = e.keyCode;

      if (keyCode === KeyCode.ENTER) {
        _this.onClick(e);

        return true;
      }

      return undefined;
    };

    _this.onMouseLeave = function (e) {
      var _this$props = _this.props,
          eventKey = _this$props.eventKey,
          onItemHover = _this$props.onItemHover,
          onMouseLeave = _this$props.onMouseLeave;
      onItemHover({
        key: eventKey,
        hover: false
      });
      onMouseLeave({
        key: eventKey,
        domEvent: e
      });
    };

    _this.onMouseEnter = function (e) {
      var _this$props2 = _this.props,
          eventKey = _this$props2.eventKey,
          onItemHover = _this$props2.onItemHover,
          onMouseEnter = _this$props2.onMouseEnter;
      onItemHover({
        key: eventKey,
        hover: true
      });
      onMouseEnter({
        key: eventKey,
        domEvent: e
      });
    };

    _this.onClick = function (e) {
      var _this$props3 = _this.props,
          eventKey = _this$props3.eventKey,
          multiple = _this$props3.multiple,
          onClick = _this$props3.onClick,
          onSelect = _this$props3.onSelect,
          onDeselect = _this$props3.onDeselect,
          selected = _this$props3.selected;
      var info = {
        key: eventKey,
        keyPath: [eventKey],
        item: _assertThisInitialized(_this),
        domEvent: e
      };
      onClick(info);

      if (multiple) {
        if (selected) {
          onDeselect(info);
        } else {
          onSelect(info);
        }
      } else if (!selected) {
        onSelect(info);
      }
    };

    _this.saveNode = function (node) {
      _this.node = node;
    };

    return _this;
  }

  var _proto = MenuItem.prototype;

  _proto.componentDidUpdate = function componentDidUpdate(prevProps) {
    var _this$props4 = this.props,
        active = _this$props4.active,
        parentMenu = _this$props4.parentMenu,
        eventKey = _this$props4.eventKey;

    if (!prevProps.active && active && (!parentMenu || !parentMenu["scrolled-" + eventKey])) {
      if (this.node) {
        scrollIntoView(this.node, ReactDOM.findDOMNode(parentMenu), {
          onlyScrollIfNeeded: true
        });
        parentMenu["scrolled-" + eventKey] = true;
      }
    } else if (parentMenu && parentMenu["scrolled-" + eventKey]) {
      delete parentMenu["scrolled-" + eventKey];
    }
  };

  _proto.render = function render() {
    var _classnames;

    var _this$props5 = this.props,
        className = _this$props5.className,
        disabled = _this$props5.disabled,
        active = _this$props5.active,
        selected = _this$props5.selected,
        title = _this$props5.title,
        href = _this$props5.href,
        target = _this$props5.target,
        children = _this$props5.children,
        mode = _this$props5.mode,
        role = _this$props5.role,
        level = _this$props5.level,
        icon = _this$props5.icon,
        style = _this$props5.style,
        prefixCls = _this$props5.prefixCls,
        inlineIndent = _this$props5.inlineIndent,
        renderMenuItem = _this$props5.renderMenuItem,
        parentMenu = _this$props5.parentMenu,
        eventKey = _this$props5.eventKey,
        onItemHover = _this$props5.onItemHover,
        subMenuOpenDelay = _this$props5.subMenuOpenDelay,
        subMenuCloseDelay = _this$props5.subMenuCloseDelay,
        forceSubMenuRender = _this$props5.forceSubMenuRender,
        onOpenChange = _this$props5.onOpenChange,
        onDeselect = _this$props5.onDeselect,
        builtinPlacements = _this$props5.builtinPlacements,
        openKeys = _this$props5.openKeys,
        selectedKeys = _this$props5.selectedKeys,
        triggerSubMenuAction = _this$props5.triggerSubMenuAction,
        subMenuKey = _this$props5.subMenuKey,
        manualRef = _this$props5.manualRef,
        onTitleMouseEnter = _this$props5.onTitleMouseEnter,
        onTitleMouseLeave = _this$props5.onTitleMouseLeave,
        onTitleClick = _this$props5.onTitleClick,
        onMouseEnter = _this$props5.onMouseEnter,
        multiple = _this$props5.multiple,
        onClick = _this$props5.onClick,
        onSelect = _this$props5.onSelect,
        onMouseLeave = _this$props5.onMouseLeave,
        itemIcon = _this$props5.itemIcon,
        store = _this$props5.store,
        restProps = _objectWithoutPropertiesLoose(_this$props5, ["className", "disabled", "active", "selected", "title", "href", "target", "children", "mode", "role", "level", "icon", "style", "prefixCls", "inlineIndent", "renderMenuItem", "parentMenu", "eventKey", "onItemHover", "subMenuOpenDelay", "subMenuCloseDelay", "forceSubMenuRender", "onOpenChange", "onDeselect", "builtinPlacements", "openKeys", "selectedKeys", "triggerSubMenuAction", "subMenuKey", "manualRef", "onTitleMouseEnter", "onTitleMouseLeave", "onTitleClick", "onMouseEnter", "multiple", "onClick", "onSelect", "onMouseLeave", "itemIcon", "store"]);

    var attrs = {
      title: title,
      // set to menuitem by default
      role: role || 'menuitem',
      'aria-disabled': disabled
    };

    if (role === 'option') {
      attrs['aria-selected'] = selected;
    } else if (role === null || role === 'none') {
      // sometimes we want to specify role inside <li/> element
      // <li><a role='menuitem'>Link</a></li> would be a good example
      // in this case the role on <li/> should be "none" to
      // remove the implied listitem role.
      // https://www.w3.org/TR/wai-aria-practices-1.1/examples/menubar/menubar-1/menubar-1.html
      attrs.role = 'none';
    } // In case that onClick/onMouseLeave/onMouseEnter is passed down from owner


    var mouseEvent = {
      onClick: disabled ? null : this.onClick,
      onMouseLeave: disabled ? null : this.onMouseLeave,
      onMouseEnter: disabled ? null : this.onMouseEnter
    };

    var itemStyle = _extends({}, style);

    if (mode === 'inline') {
      itemStyle.paddingLeft = this.context.inlineIndent * (level - 1) + this.context.inlinePaddingLeft;
    }

    var afterIcon = itemIcon;

    if (typeof itemIcon === 'function') {
      // TODO: This is a bug which should fixed after TS refactor
      afterIcon = /*#__PURE__*/React.createElement(itemIcon, this.props);
    }

    return /*#__PURE__*/React.createElement("li", _extends({}, restProps, attrs, mouseEvent, {
      style: itemStyle,
      className: classnames(prefixCls + "-item", className, (_classnames = {}, _classnames[prefixCls + "-item-active"] = !disabled && active, _classnames[prefixCls + "-item-selected"] = selected, _classnames[prefixCls + "-item-disabled"] = disabled, _classnames)),
      ref: this.saveNode
    }), href ? /*#__PURE__*/React.createElement("a", {
      href: href,
      target: target
    }, children) : children, afterIcon);
  };

  return MenuItem;
}(PureComponent);
MenuItem.isMenuItem = true;
MenuItem.defaultProps = {
  onSelect: function onSelect() {},
  onMouseEnter: function onMouseEnter() {},
  onMouseLeave: function onMouseLeave() {},
  manualRef: function manualRef() {}
};
MenuItem.contextType = Context;
var connected = connect(function (_ref, _ref2) {
  var activeKey = _ref.activeKey,
      selectedKeys = _ref.selectedKeys;
  var eventKey = _ref2.eventKey,
      subMenuKey = _ref2.subMenuKey;
  return {
    active: activeKey[subMenuKey] === eventKey,
    selected: selectedKeys.indexOf(eventKey) !== -1
  };
})(MenuItem);
export default connected;