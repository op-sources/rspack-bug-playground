declare type TreeNode = {
    children?: TreeNode[];
    value?: any;
    label?: any;
    title?: any;
    disabled?: boolean;
    selectable?: boolean;
    isLeaf?: boolean;
    loading?: boolean;
    expandType?: 'inline' | 'column' | 'toggle';
    item?: TreeNode;
    [key: string]: any;
};
declare type WalkerContext = {
    deep: number;
    parents: Object[];
    parentResult?: TreeNode | void;
    result?: TreeNode;
    childrenResult?: TreeNode[];
};
declare type Walker = {
    enter: (item: TreeNode, context: WalkerContext) => any;
    exit?: (item: TreeNode, context: WalkerContext) => void;
    deepKey?: string;
};
declare type SearchConfig = {
    filter?: (query: string, path: any[]) => boolean;
    sort?: (a: any[], b: any[], query: string) => number;
};
export declare function walk(items: TreeNode[], { enter, exit, deepKey }: Walker, context?: WalkerContext): any[];
declare type FieldNames = {
    children?: string;
    value?: string;
    label?: string;
    title?: string;
    disabled?: string;
    selectable?: string;
    isLeaf?: string;
    loading?: string;
    icon?: string;
    expandType?: string;
};
export declare class Tree {
    constructor(items?: TreeNode[], checkedKeys?: any[], names?: FieldNames, leaf?: boolean);
    getKeyPath(option: TreeNode): any[];
    map: any;
    flatten: any;
    checkedKeys: any;
    tree: any;
    root: any;
    keyPathToString(keyPath: any): string;
    getNormalizedOption(key: any, keyPath?: any): any;
    getNormalizedOptionWithParent(key: any): any[];
    getKeyWithParent(key: any, keyPath: any): any[];
    getNormalizedOptions(keys: any, isPath?: any): any;
    getOption(key: any, keyPath?: any): any;
    getOptions(keys: any): any;
    getPathOptions(keyPath: any): any;
    getOptionWithParent(key: any, keyPath?: any): any[];
    getOptionsWithParent(keys: any): any;
    /**
     * 获取当前key路径中的兄弟节点
     */
    getColumns(key: any, keyPath: any, showCheckAll: any, group: any): any[];
    getCheckedKeys(): any;
    /**
     * 搜索
     *
     * @param {string} query
     * @returns
     */
    search(query: any, config?: SearchConfig): any;
    toggleChecked(key: any, checkedKeys?: any): any;
    /**
     * 保持选择顺序
     *
     * @param {Array} keys
     * @param {Array} orderedKeys
     * @returns
     */
    keepKeysOrder(keys: any, orderedKeys: any): any;
}
export {};
