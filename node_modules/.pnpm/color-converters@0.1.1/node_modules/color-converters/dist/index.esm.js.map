{"version":3,"file":"index.esm.js","sources":["../src/rgb/assert.ts","../src/common.ts","../src/hsl/patch.ts","../src/rgb/to-hsl.ts","../src/hsv/patch.ts","../src/rgb/to-hsv.ts","../src/lab/consts.ts","../src/rgb/to-lab.ts","../src/assert.ts","../src/lab/to-lch.ts","../src/rgb/to-lch.ts","../src/rgb/to-hex.ts","../src/rgb/from-hex.ts","../src/hsl/to-rgb.ts","../src/hsl/to-hsv.ts","../src/hsl/to-lab.ts","../src/hsl/to-lch.ts","../src/hsv/to-hsl.ts","../src/hsv/to-rgb.ts","../src/hsv/to-lab.ts","../src/hsv/to-lch.ts","../src/lch/to-lab.ts","../src/lab/to-rgb.ts","../src/lch/to-rgb.ts","../src/lch/to-hsl.ts","../src/lch/to-hsv.ts","../src/lab/to-hsl.ts","../src/lab/to-hsv.ts"],"sourcesContent":["import { Channels } from \"../common\";\n\nexport function assertRange(val: number | Channels): void {\n  let pass;\n  if (typeof val === \"number\") {\n    pass = 0 <= val && val <= 255;\n  } else {\n    pass = val.every((v) => 0 <= v && v <= 255);\n  }\n  if (!pass) {\n    throw new RangeError(\"RGB channel value shoud be in range [0, 255].\");\n  }\n}\n","export type Channels = [number, number, number];\n\nexport const ε = 1e-6;\n\nfunction clamp(val: number, max: number, min = 0): number {\n  return Math.min(Math.max(val, min), max);\n}\n\nexport function clampRgb(rgb: Channels): Channels {\n  return rgb.map((ch) => clamp(ch, 255)) as Channels;\n}\n","import { Channels } from \"../common\";\nimport { ε } from \"../common\";\n\nexport function patchHsl([h, s, l]: Channels): Channels {\n  if (s < ε) {\n    h = s = 0;\n  }\n  if (l < ε) {\n    h = s = l = 0;\n  } else if (1 - l < ε) {\n    l = 1;\n    h = s = 0;\n  }\n  return [h, s, l];\n}\n","import { Channels } from \"../common\";\nimport { assertRange } from \"./assert\";\nimport { patchHsl } from \"../hsl/patch\";\n\nexport default function (rgb: Channels): Channels {\n  assertRange(rgb);\n\n  const [r, g, b] = rgb.map((ch) => ch / 255);\n  const max = Math.max(r, g, b);\n  const min = Math.min(r, g, b);\n  const diff = max - min;\n  const sum = max + min;\n\n  let h;\n  let s;\n  const l = sum / 2;\n\n  if (max === min) {\n    h = 0;\n  } else if (max === r && g >= b) {\n    h = (60 * (g - b)) / diff + 0;\n  } else if (max === r && g < b) {\n    h = (60 * (g - b)) / diff + 360;\n  } else if (max === g) {\n    h = (60 * (b - r)) / diff + 120;\n  } else {\n    // max === b\n    h = (60 * (r - g)) / diff + 240;\n  }\n\n  if (l === 0 || max === min) {\n    s = 0;\n  } else if (0 < l && l <= 0.5) {\n    s = diff / sum;\n  } else {\n    // l > 0.5\n    s = diff / (2 - sum);\n  }\n\n  return patchHsl([h, s, l]);\n}\n","import { Channels } from \"../common\";\nimport { ε } from \"../common\";\n\nexport function patchHsv([h, s, v]: Channels): Channels {\n  if (s < ε) {\n    h = s = 0;\n  }\n\n  if (v < ε) {\n    h = s = 0;\n  }\n\n  return [h, s, v];\n}\n","import { Channels } from \"../common\";\nimport { assertRange } from \"./assert\";\nimport { patchHsv } from \"../hsv/patch\";\n\nexport default function (rgb: Channels): Channels {\n  assertRange(rgb);\n\n  const [r, g, b] = rgb.map((ch) => ch / 255);\n  const max = Math.max(r, g, b);\n  const min = Math.min(r, g, b);\n  const diff = max - min;\n\n  let h;\n  let s;\n\n  if (max === min) {\n    h = 0;\n  } else if (max === r && g >= b) {\n    h = (60 * (g - b)) / diff + 0;\n  } else if (max === r && g < b) {\n    h = (60 * (g - b)) / diff + 360;\n  } else if (max === g) {\n    h = (60 * (b - r)) / diff + 120;\n  } else {\n    // max === b\n    h = (60 * (r - g)) / diff + 240;\n  }\n\n  if (max === 0) {\n    s = 0;\n  } else {\n    s = diff / max;\n  }\n\n  const v = max;\n  return patchHsv([h, s, v]);\n}\n","export const κ = 24389 / 27; // 29^3/3^3\nexport const ε = 216 / 24389; // 6^3/29^3\nexport const white = [0.96422, 1.0, 0.82521]; // D50 reference white\n","import { Channels } from \"../common\";\nimport { assertRange } from \"./assert\";\nimport { ε, κ, white } from \"../lab/consts\";\n\nconst { pow, cbrt } = Math;\n\nexport default function (rgb: Channels): Channels {\n  assertRange(rgb);\n\n  return xyz50toLab(toXyz50(rgb));\n}\n\nfunction toXyz50(rgb: Channels): Channels {\n  const [r, g, b] = toLrgb(rgb);\n\n  /**\n   * Convert linear sRGB to XYZ. Instead of linear sRGB -> XYZ D65 -> XYZ D50,\n   * we use linear sRGB -> XYZ D50 to calculate faster.\n   * See https://www.w3.org/TR/css-color-4/#color-conversion-code\n   * See http://www.brucelindbloom.com/index.html?Eqn_RGB_XYZ_Matrix.html\n   */\n  return [\n    0.4360747 * r + 0.3850649 * g + 0.1430804 * b,\n    0.2225045 * r + 0.7168786 * g + 0.0606169 * b,\n    0.0139322 * r + 0.0971045 * g + 0.7141733 * b,\n  ];\n}\n\nfunction toLrgb(rgb: Channels): Channels {\n  return rgb.map((ch) => {\n    const val = ch / 255;\n\n    if (val < 0.04045) {\n      return val / 12.92;\n    }\n\n    return pow((val + 0.055) / 1.055, 2.4);\n  }) as Channels;\n}\n\n// See https://www.w3.org/TR/css-color-4/#color-conversion-code\nfunction xyz50toLab(xyz: Channels): Channels {\n  // compute xyz, which is XYZ scaled relative to reference white\n  const scaledXyz = xyz.map((val, i) => val / white[i]);\n\n  const f = scaledXyz.map((val) =>\n    val > ε ? cbrt(val) : (κ * val + 16) / 116\n  );\n\n  return [\n    116 * f[1] - 16, // L\n    500 * (f[0] - f[1]), // a\n    200 * (f[1] - f[2]), // b\n  ];\n}\n","export function assertHue(val: number): void {\n  if (val < 0 || val >= 360) {\n    throw new RangeError(\"Hue channel value shoud be in range [0, 360).\");\n  }\n}\n\nexport function assertUnit(val: number, channelName: string): void {\n  if (val < 0 || val > 1) {\n    throw new RangeError(\n      `${upperFirst(channelName)} channel value shoud be in range [0, 1].`\n    );\n  }\n}\n\nfunction upperFirst(str: string): string {\n  if (str.length === 0) {\n    return str;\n  }\n  return str.charAt(0).toUpperCase() + str.slice(1);\n}\n\nexport function assertCIELightness(val: number): void {\n  if (val < 0) {\n    throw new RangeError(`CIE lightness channel value shoud be positive.`);\n  }\n}\n","import { Channels } from \"../common\";\nimport { assertCIELightness } from \"../assert\";\n\nconst { atan2, PI, sqrt, pow } = Math;\n\nexport default function ([l, a, b]: Channels): Channels {\n  assertCIELightness(l);\n\n  const h = (atan2(b, a) * 180) / PI;\n  return [\n    l, // L is still L\n    sqrt(pow(a, 2) + pow(b, 2)), // Chroma\n    h >= 0 ? h : h + 360, // hue, in degrees [0 to 360)\n  ];\n}\n","import { Channels } from \"../common\";\nimport rgbToLab from \"./to-lab\";\nimport labToLch from \"../lab/to-lch\";\n\nexport default function (rgb: Channels): Channels {\n  return labToLch(rgbToLab(rgb));\n}\n","import { Channels } from \"../common\";\nimport { assertRange } from \"./assert\";\n\nconst { round } = Math;\n\nexport default function (rgb: Channels): string {\n  return \"#\" + rgb.map(convert).join(\"\");\n}\n\nfunction convert(ch: number): string {\n  assertRange(ch);\n\n  const str = round(ch).toString(16);\n  return str.length == 1 ? `0${str}` : str;\n}\n","import { Channels } from \"../common\";\n\nconst hexRe = /^#(?:[0-9a-f]{3}){1,2}$/i;\n\nexport default function (hex: string): Channels {\n  if (!hexRe.test(hex)) {\n    throw new Error(`Invalid format for hex color value: ${hex}`);\n  }\n\n  let val = hex.slice(1);\n\n  if (val.length === 3) {\n    val = val\n      .split(\"\")\n      .map((c) => c + c)\n      .join(\"\");\n  }\n\n  const num = parseInt(val, 16);\n\n  return [num >> 16, (num >> 8) & 255, num & 255];\n}\n","import { Channels } from \"../common\";\nimport { assertHue, assertUnit } from \"../assert\";\n\nexport default function ([h, s, l]: Channels): Channels {\n  assertHue(h);\n  assertUnit(s, \"satuation\");\n  assertUnit(l, \"lightness\");\n\n  // https://www.w3.org/TR/css-color-4/#hsl-to-rgb\n  const t2 = l <= 0.5 ? l * (s + 1) : l + s - l * s;\n  const t1 = l * 2 - t2;\n  const r = hueToRgb(t1, t2, h + 120);\n  const g = hueToRgb(t1, t2, h);\n  const b = hueToRgb(t1, t2, h - 120);\n\n  return [r * 255, g * 255, b * 255];\n}\n\nfunction hueToRgb(t1: number, t2: number, h: number): number {\n  h = (h + 360) % 360;\n\n  if (h < 60) {\n    return ((t2 - t1) * h) / 60 + t1;\n  } else if (h < 180) {\n    return t2;\n  } else if (h < 240) {\n    return ((t2 - t1) * (240 - h)) / 60 + t1;\n  } else {\n    return t1;\n  }\n}\n","import { Channels } from \"../common\";\nimport { assertHue, assertUnit } from \"../assert\";\nimport { patchHsv } from \"../hsv/patch\";\n\nconst { min } = Math;\n\nexport default function ([h, s, l]: Channels): Channels {\n  assertHue(h);\n  assertUnit(s, \"satuation\");\n  assertUnit(l, \"lightness\");\n\n  const hv = h;\n  const v = l + s * min(l, 1 - l);\n  const sv = v === 0 ? 0 : 2 * (1 - l / v);\n\n  return patchHsv([hv, sv, v]);\n}\n","import { Channels } from \"../common\";\nimport hslToRgb from \"./to-rgb\";\nimport rgbToLab from \"../rgb/to-lab\";\n\nexport default function (hsl: Channels): Channels {\n  return rgbToLab(hslToRgb(hsl));\n}\n","import { Channels } from \"../common\";\nimport hslToRgb from \"./to-rgb\";\nimport rgbToLch from \"../rgb/to-lch\";\n\nexport default function (hsl: Channels): Channels {\n  return rgbToLch(hslToRgb(hsl));\n}\n","import { Channels } from \"../common\";\nimport { assertHue, assertUnit } from \"../assert\";\nimport { patchHsl } from \"../hsl/patch\";\n\nexport default function ([h, s, v]: Channels): Channels {\n  assertHue(h);\n  assertUnit(s, \"satuation\");\n  assertUnit(v, \"value\");\n\n  let l = (2 - s) * v;\n  let sl = s * v;\n  sl /= l <= 1 ? l : 2 - l;\n  sl = sl || 0;\n  l /= 2;\n  return patchHsl([h, sl, l]);\n}\n","import { Channels } from \"../common\";\nimport { assertHue, assertUnit } from \"../assert\";\n\nconst { floor } = Math;\n\nexport default function ([h, s, v]: Channels): Channels {\n  assertHue(h);\n  assertUnit(s, \"satuation\");\n  assertUnit(v, \"value\");\n\n  const hi = floor(h / 60);\n  const f = h / 60 - hi;\n  const p = v * (1 - s);\n  const q = v * (1 - f * s);\n  const t = v * (1 - (1 - f) * s);\n\n  let rgb1: Channels;\n\n  switch (hi) {\n    case 0:\n      rgb1 = [v, t, p];\n      break;\n    case 1:\n      rgb1 = [q, v, p];\n      break;\n    case 2:\n      rgb1 = [p, v, t];\n      break;\n    case 3:\n      rgb1 = [p, q, v];\n      break;\n    case 4:\n      rgb1 = [t, p, v];\n      break;\n    case 5:\n      rgb1 = [v, p, q];\n      break;\n    default:\n      rgb1 = [0, 0, 0];\n  }\n\n  return rgb1.map((ch) => ch * 255) as Channels;\n}\n","import { Channels } from \"../common\";\nimport hsvToRgb from \"./to-rgb\";\nimport rgbToLab from \"../rgb/to-lab\";\n\nexport default function (hsv: Channels): Channels {\n  return rgbToLab(hsvToRgb(hsv));\n}\n","import { Channels } from \"../common\";\nimport hsvToRgb from \"./to-rgb\";\nimport rgbToLch from \"../rgb/to-lch\";\n\nexport default function (hsv: Channels): Channels {\n  return rgbToLch(hsvToRgb(hsv));\n}\n","import { Channels } from \"../common\";\nimport { assertHue } from \"../assert\";\n\nconst { cos, sin, PI } = Math;\n\nexport default function ([l, c, h]: Channels): Channels {\n  assertHue(h);\n\n  return [\n    l, // L is still L\n    c * cos((h * PI) / 180), // a\n    c * sin((h * PI) / 180), // b\n  ];\n}\n","import { Channels, clampRgb } from \"../common\";\nimport { assertCIELightness } from \"../assert\";\nimport { ε, κ, white } from \"./consts\";\n\nconst { pow } = Math;\n\nexport default function (lab: Channels): Channels {\n  assertCIELightness(lab[0]);\n\n  return clampRgb(lrgbToRgb(xyz50toLrgb(toXyz50(lab))));\n}\n\nfunction toXyz50([l, a, b]: Channels): Channels {\n  // compute f, starting with the luminance-related term\n  const f1 = (l + 16) / 116;\n  const f0 = a / 500 + f1;\n  const f2 = f1 - b / 200;\n\n  // compute xyz\n  const xyz = [\n    pow(f0, 3) > ε ? pow(f0, 3) : (116 * f0 - 16) / κ,\n    l > κ * ε ? pow((l + 16) / 116, 3) : l / κ,\n    pow(f2, 3) > ε ? pow(f2, 3) : (116 * f2 - 16) / κ,\n  ];\n\n  // Compute XYZ by scaling xyz by reference white\n  return xyz.map((val, i) => val * white[i]) as Channels;\n}\n\nfunction xyz50toLrgb([x, y, z]: Channels): Channels {\n  return [\n    3.1338561 * x + -1.6168667 * y + -0.4906146 * z,\n    -0.9787684 * x + 1.9161415 * y + 0.033454 * z,\n    0.0719453 * x + -0.2289914 * y + 1.4052427 * z,\n  ];\n}\n\nfunction lrgbToRgb(rgb: Channels): Channels {\n  return rgb.map(\n    (val) =>\n      (val > 0.0031308 ? 1.055 * pow(val, 1 / 2.4) - 0.055 : 12.92 * val) * 255\n  ) as Channels;\n}\n","import { Channels } from \"../common\";\nimport { assertHue } from \"../assert\";\nimport lchToLab from \"./to-lab\";\nimport labToRgb from \"../lab/to-rgb\";\n\nexport default function (lch: Channels): Channels {\n  assertHue(lch[2]);\n\n  return labToRgb(lchToLab(lch));\n}\n","import { Channels } from \"../common\";\nimport lchToRgb from \"./to-rgb\";\nimport rgbToHsl from \"../rgb/to-hsl\";\nimport { assertHue } from \"../assert\";\n\nexport default function (lch: Channels): Channels {\n  assertHue(lch[2]);\n\n  return rgbToHsl(lchToRgb(lch));\n}\n","import { Channels } from \"../common\";\nimport lchToRgb from \"./to-rgb\";\nimport rgbToHsv from \"../rgb/to-hsv\";\nimport { assertHue } from \"../assert\";\n\nexport default function (lch: Channels): Channels {\n  assertHue(lch[2]);\n\n  return rgbToHsv(lchToRgb(lch));\n}\n","import { Channels } from \"../common\";\nimport labToRgb from \"./to-rgb\";\nimport rgbToHsl from \"../rgb/to-hsl\";\n\nexport default function (lab: Channels): Channels {\n  return rgbToHsl(labToRgb(lab));\n}\n","import { Channels } from \"../common\";\nimport labToRgb from \"./to-rgb\";\nimport rgbToHsv from \"../rgb/to-hsv\";\n\nexport default function (lab: Channels): Channels {\n  return rgbToHsv(labToRgb(lab));\n}\n"],"names":["ε","pow","PI","toXyz50"],"mappings":"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"}