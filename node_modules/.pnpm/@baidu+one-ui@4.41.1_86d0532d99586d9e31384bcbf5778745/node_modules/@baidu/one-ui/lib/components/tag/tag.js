"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

exports.__esModule = true;
exports["default"] = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _objectWithoutPropertiesLoose2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutPropertiesLoose"));

var _inheritsLoose2 = _interopRequireDefault(require("@babel/runtime/helpers/inheritsLoose"));

var _react = _interopRequireWildcard(require("react"));

var _omit = _interopRequireDefault(require("omit.js"));

var _dlsIconsReact = require("dls-icons-react");

var _commonTools = require("../../core/commonTools");

var _context = require("../providerConfig/context");

var _button = _interopRequireDefault(require("../button"));

var _dec, _class, _class2, _temp;

;
var Tag = (_dec = (0, _context.withConfigConsumer)('tag'), _dec(_class = (_temp = _class2 = /*#__PURE__*/function (_PureComponent) {
  (0, _inheritsLoose2["default"])(Tag, _PureComponent);

  function Tag(props) {
    var _this;

    _this = _PureComponent.call(this, props) || this;

    _this.close = function (e) {
      var _this$props = _this.props,
          onClose = _this$props.onClose,
          disabled = _this$props.disabled,
          noClosed = _this$props.noClosed;

      if (disabled) {
        return;
      }

      if (onClose) {
        onClose(e);
      }

      if (e.defaultPrevented) {
        return;
      }

      if (!noClosed) {
        _this.setState({
          closed: true
        });
      }
    };

    _this.isPresetColor = function (color) {
      if (!color) {
        return false;
      }

      return /^(pink|red|yellow|orange|cyan|green|blue|purple)(-inverse)?$/.test(color);
    };

    _this.onClickTag = function () {
      var checked = !_this.state.checked;
      var _this$props2 = _this.props,
          onChange = _this$props2.onChange,
          disabled = _this$props2.disabled;

      if (disabled) {
        return;
      }

      if (!('checked' in _this.props)) {
        _this.setState({
          checked: checked
        });
      }

      onChange(checked);
    };

    _this.state = {
      closed: false,
      checked: props.checked
    };
    return _this;
  }

  var _proto = Tag.prototype;

  _proto.render = function render() {
    var _classnames;

    var _this$props3 = this.props,
        prefixCls = _this$props3.prefixCls,
        closable = _this$props3.closable,
        className = _this$props3.className,
        children = _this$props3.children,
        style = _this$props3.style,
        color = _this$props3.color,
        size = _this$props3.size,
        disabled = _this$props3.disabled,
        checkable = _this$props3.checkable,
        tipTag = _this$props3.tipTag,
        bordered = _this$props3.bordered,
        normalized = _this$props3.normalized,
        lightPrefix = _this$props3.lightPrefix,
        otherProps = (0, _objectWithoutPropertiesLoose2["default"])(_this$props3, ["prefixCls", "closable", "className", "children", "style", "color", "size", "disabled", "checkable", "tipTag", "bordered", "normalized", "lightPrefix"]);
    var checked = checkable && this.state.checked;
    var closeIcon = closable ? /*#__PURE__*/_react["default"].createElement(_button["default"], {
      type: "text",
      disabled: disabled,
      onClick: this.close,
      className: prefixCls + "-close-icon"
    }, /*#__PURE__*/_react["default"].createElement(_dlsIconsReact.IconTimes, null)) : '';
    var isPresetColor = this.isPresetColor(color);
    var classString = (0, _commonTools.classnames)(prefixCls, className, prefixCls + "-" + size, (_classnames = {}, _classnames[prefixCls + "-" + color] = isPresetColor, _classnames[prefixCls + "-has-color"] = color && !isPresetColor, _classnames[prefixCls + "-can-closable"] = closable, _classnames[prefixCls + "-inverse"] = checked, _classnames[prefixCls + "-" + color + "-inverse"] = checked && isPresetColor, _classnames[prefixCls + "-checkable"] = checkable, _classnames[prefixCls + "-disabled"] = disabled, _classnames[prefixCls + "-" + tipTag] = !!tipTag, _classnames[prefixCls + "-no-bordered"] = !bordered, _classnames[prefixCls + "-normalized"] = normalized, _classnames));
    var divProps = (0, _omit["default"])(otherProps, ['checked', 'onChange', 'onClose', 'noClosed']);

    if (checkable) {
      divProps.onClick = this.onClickTag;
    }

    var tagStyle = (0, _extends2["default"])({
      backgroundColor: color && !isPresetColor ? color : null
    }, style);
    var tag = this.state.closed ? null : /*#__PURE__*/_react["default"].createElement("div", (0, _extends2["default"])({
      "data-show": !this.state.closed
    }, divProps, {
      className: classString,
      style: tagStyle
    }), /*#__PURE__*/_react["default"].createElement("span", {
      className: prefixCls + "-text"
    }, children), closeIcon);
    return tag;
  };

  return Tag;
}(_react.PureComponent), _class2.defaultProps = {
  prefixCls: 'one-tag',
  closable: false,
  size: 'medium',
  disabled: false,
  checkable: false,
  onChange: function onChange() {},
  bordered: true,
  noClosed: false
}, _class2.Group = void 0, _class2.EditableGroup = void 0, _class2.getDerivedStateFromProps = function (nextProps, prevState) {
  if ('checked' in nextProps && nextProps.checked !== prevState.checked) {
    return {
      checked: nextProps.checked
    };
  }

  return null;
}, _temp)) || _class);
var _default = Tag;
exports["default"] = _default;
module.exports = exports.default;