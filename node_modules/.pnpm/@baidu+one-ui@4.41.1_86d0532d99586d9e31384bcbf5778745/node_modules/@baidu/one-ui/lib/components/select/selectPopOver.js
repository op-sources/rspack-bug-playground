"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

exports.__esModule = true;
exports["default"] = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _assertThisInitialized2 = _interopRequireDefault(require("@babel/runtime/helpers/assertThisInitialized"));

var _inheritsLoose2 = _interopRequireDefault(require("@babel/runtime/helpers/inheritsLoose"));

var _react = _interopRequireWildcard(require("react"));

var _commonTools = require("../../core/commonTools");

var _dlsIconsReact = require("dls-icons-react");

var _button = _interopRequireDefault(require("../button"));

var _popSelectTrigger = _interopRequireDefault(require("./common/popSelectTrigger"));

var _selectTools = require("../../core/selectTools");

;
;

var SelectPopOver = /*#__PURE__*/function (_PureComponent) {
  (0, _inheritsLoose2["default"])(SelectPopOver, _PureComponent);

  function SelectPopOver(props) {
    var _this;

    _this = _PureComponent.call(this, props) || this;
    _this.saveSelectionRef = void 0;
    _this.selectPopOver = void 0;

    _this.onVisibleChange = function (visible) {
      var onVisibleChange = _this.props.onVisibleChange;

      if (!('visible' in _this.props)) {
        _this.setState({
          visible: visible
        });
      }

      if (onVisibleChange) {
        onVisibleChange(visible);
      }
    };

    _this.onClickConfirm = function () {
      var onClickConfirm = _this.props.onClickConfirm;

      _this.setState({
        visible: false
      });

      if (onClickConfirm) {
        onClickConfirm();
      }
    };

    _this.onClickCancel = function () {
      var onClickCancel = _this.props.onClickCancel;

      _this.setState({
        visible: false
      });

      if (onClickCancel) {
        onClickCancel();
      }
    };

    _this.getContainerLayer = function (ref) {
      _this.selectPopOver = ref;
    };

    _this.removeSelected = function (selectedKey, e) {
      var _this$props = _this.props,
          onRemoveSelected = _this$props.onRemoveSelected,
          titleCallback = _this$props.titleCallback;
      var type = titleCallback.type;

      if (type !== 'list') {
        return;
      } // Do not trigger Trigger popup


      if (e && e.stopPropagation) {
        e.stopPropagation();
      } // eslint-disable-next-line react/no-access-state-in-setstate


      var value = _this.state.value.filter(function (singleValue) {
        return singleValue !== selectedKey;
      }); // TODO: 此处是否应该在`setValue`生效以后才调用？


      if (onRemoveSelected) {
        onRemoveSelected(selectedKey, value);
      }

      _this.setState({
        value: value
      });
    };

    _this.renderTopControlNode = function () {
      var _this$props2 = _this.props,
          titleCallback = _this$props2.titleCallback,
          prefixCls = _this$props2.prefixCls;
      var type = titleCallback.type,
          selectorName = titleCallback.selectorName;
      var _this$state = _this.state,
          value = _this$state.value,
          visible = _this$state.visible;
      var className = prefixCls + "-selection__rendered";
      var valueLength = value.length;
      var label = selectorName;
      var opacity = 1;

      if (type === 'list') {
        var multipleNode = null;

        if (!valueLength) {
          if (visible) {
            opacity = 0.4;
          }

          multipleNode = /*#__PURE__*/_react["default"].createElement("div", {
            key: "value",
            className: prefixCls + "-selection-selected-value",
            title: (0, _selectTools.toTitle)(label),
            style: {
              opacity: opacity
            }
          }, label);
        } else {
          var selectedValueNodes = value.map(function (singleValue, index) {
            return /*#__PURE__*/_react["default"].createElement("li", (0, _extends2["default"])({
              style: _selectTools.UNSELECTABLE_STYLE
            }, _selectTools.UNSELECTABLE_ATTRIBUTE, {
              onMouseDown: _selectTools.preventDefaultEvent,
              className: prefixCls + "-selection__choice",
              key: singleValue + "-" + index,
              title: (0, _selectTools.toTitle)(singleValue)
            }), /*#__PURE__*/_react["default"].createElement("div", {
              className: prefixCls + "-selection__choice__content"
            }, singleValue), /*#__PURE__*/_react["default"].createElement("span", {
              onClick: function onClick(event) {
                _this.removeSelected(singleValue, event);
              },
              className: prefixCls + "-selection__choice__remove"
            }, /*#__PURE__*/_react["default"].createElement(_dlsIconsReact.IconTimes, null)));
          });
          multipleNode = selectedValueNodes.length ? /*#__PURE__*/_react["default"].createElement("ul", {
            className: prefixCls + "-search-ul"
          }, selectedValueNodes) : null;
        }

        return /*#__PURE__*/_react["default"].createElement("div", {
          className: className
        }, multipleNode);
      }

      if (valueLength) {
        label = valueLength === 1 ? value[0] : value[0] + "\u3001" + value[1] + "\u7B49" + valueLength + "\u4E2A";

        if (type === 'count') {
          label = valueLength === 1 ? value[0] : selectorName + "(" + valueLength + "\u4E2A)";
        }
      }

      if (visible || !valueLength) {
        opacity = 0.4;
      }

      var selectedValue = /*#__PURE__*/_react["default"].createElement("div", {
        key: "value",
        className: prefixCls + "-selection-selected-value",
        title: (0, _selectTools.toTitle)(label),
        style: {
          opacity: opacity
        }
      }, label);

      return /*#__PURE__*/_react["default"].createElement("div", {
        className: className
      }, selectedValue);
    };

    _this.saveSelectionRef = (0, _selectTools.saveRef)((0, _assertThisInitialized2["default"])(_this), 'selectionRef');
    _this.state = {
      visible: !!props.visible,
      value: props.value,
      prevProps: props
    };
    return _this;
  }

  var _proto = SelectPopOver.prototype;

  _proto.getErrorMessage = function getErrorMessage() {
    var _this$props3 = this.props,
        maxTagCount = _this$props3.maxTagCount,
        prefixCls = _this$props3.prefixCls,
        errorMessage = _this$props3.errorMessage;

    if (!maxTagCount && !errorMessage) {
      return null;
    }

    if (errorMessage) {
      return /*#__PURE__*/_react["default"].createElement("div", {
        className: prefixCls + "-selection-text-error"
      }, errorMessage);
    }

    var _this$state2 = this.state,
        value = _this$state2.value,
        open = _this$state2.open;
    var valueLength = value && value.length;

    if (valueLength > maxTagCount && !open) {
      var error = "\u5DF2\u8D85\u8FC7\u6700\u5927\u53EF\u9009\u6570\u91CF" + (valueLength - maxTagCount) + "\u4E2A";
      return /*#__PURE__*/_react["default"].createElement("div", {
        className: prefixCls + "-selection-text-error"
      }, error);
    }

    return null;
  };

  _proto.renderOverLay = function renderOverLay() {
    var _this$props4 = this.props,
        overlay = _this$props4.overlay,
        prefixCls = _this$props4.prefixCls,
        showConfirmButton = _this$props4.showConfirmButton,
        showCancelButton = _this$props4.showCancelButton;
    var newPrefixCls = prefixCls + "-popover";

    var conatiner = /*#__PURE__*/_react["default"].createElement("div", {
      className: newPrefixCls + "-inner-container"
    }, /*#__PURE__*/_react["default"].createElement("div", {
      className: newPrefixCls + "-inner-container-custom"
    }, overlay), /*#__PURE__*/_react["default"].createElement("div", {
      className: newPrefixCls + "-inner-container-button"
    }, showConfirmButton ? /*#__PURE__*/_react["default"].createElement(_button["default"], {
      className: newPrefixCls + "-inner-container-button-item",
      type: "primary",
      onClick: this.onClickConfirm
    }, "\u786E\u5B9A") : null, showCancelButton ? /*#__PURE__*/_react["default"].createElement(_button["default"], {
      className: newPrefixCls + "-inner-container-button-item",
      type: "normal",
      onClick: this.onClickConfirm
    }, "\u53D6\u6D88") : null));

    return conatiner;
  };

  _proto.renderTotalDom = function renderTotalDom() {
    var _classnames;

    var _this$props5 = this.props,
        maxTagCount = _this$props5.maxTagCount,
        prefixCls = _this$props5.prefixCls;
    var value = this.state.value;
    var valueLength = value.length;

    if (!maxTagCount || !valueLength) {
      return null;
    }

    var totalCountCls = (0, _commonTools.classnames)(prefixCls + "-selection__total_count", (_classnames = {}, _classnames[prefixCls + "-selection__total_count-error"] = valueLength > maxTagCount, _classnames));
    return /*#__PURE__*/_react["default"].createElement("span", {
      className: totalCountCls
    }, valueLength, "/", maxTagCount);
  };

  _proto.render = function render() {
    var _classnames2, _classnames3;

    var props = this.props,
        state = this.state;
    var prefixCls = props.prefixCls,
        getPopupContainer = props.getPopupContainer,
        titleCallback = props.titleCallback,
        maxTagCount = props.maxTagCount;
    var visible = state.visible,
        value = state.value;
    var type = titleCallback.type;
    var ctrlNode = this.renderTopControlNode();
    var newPrefixCls = prefixCls + "-popover";
    var containerCls = (0, _commonTools.classnames)(newPrefixCls + "-container", (_classnames2 = {}, _classnames2[newPrefixCls + "-container-open"] = visible, _classnames2));
    var sectionCls = (0, _commonTools.classnames)(prefixCls + "-selection", (_classnames3 = {}, _classnames3[prefixCls + "-selection--multiple"] = type === 'list', _classnames3[prefixCls + "-selection-error"] = maxTagCount && maxTagCount < value.length, _classnames3));
    return /*#__PURE__*/_react["default"].createElement(_popSelectTrigger["default"], (0, _extends2["default"])({}, this.props, {
      prefixCls: newPrefixCls,
      getPopupContainer: getPopupContainer,
      ref: this.getContainerLayer,
      overlay: this.renderOverLay(),
      visible: visible,
      onVisibleChange: this.onVisibleChange,
      trigger: "click"
    }), /*#__PURE__*/_react["default"].createElement("div", {
      className: containerCls
    }, /*#__PURE__*/_react["default"].createElement("div", {
      ref: this.saveSelectionRef,
      key: "selection",
      className: sectionCls // @ts-ignore
      ,
      type: type
    }, ctrlNode, /*#__PURE__*/_react["default"].createElement("span", (0, _extends2["default"])({
      key: "arrow",
      className: prefixCls + "-arrow",
      style: _selectTools.UNSELECTABLE_STYLE
    }, _selectTools.UNSELECTABLE_ATTRIBUTE), /*#__PURE__*/_react["default"].createElement(_dlsIconsReact.IconChevronDown, null)), type === 'list' ? this.renderTotalDom() : null), this.getErrorMessage()));
  };

  return SelectPopOver;
}(_react.PureComponent);

SelectPopOver.defaultProps = {
  prefixCls: 'one-select',
  transitionName: 'zoom-big-fast',
  mouseEnterDelay: 0.1,
  mouseLeaveDelay: 0.1,
  autoAdjustOverflow: true,
  dropdownMatchSelectWidth: true,
  titleCallback: {
    type: 'enum',
    // 三类回填 enum, list, count
    selectorName: '地域选择器'
  },
  value: [],
  showConfirmButton: true,
  showCancelButton: true
};

SelectPopOver.getDerivedStateFromProps = function (nextProps, prevState) {
  var newState = {
    prevProps: nextProps
  };
  var _prevState$prevProps = prevState.prevProps,
      value = _prevState$prevProps.value,
      visible = _prevState$prevProps.visible;

  if ('visible' in nextProps && visible !== nextProps.visible) {
    newState.visible = nextProps.visible;
  }

  if ('value' in nextProps && value !== nextProps.value) {
    newState.value = nextProps.value;
  }

  return newState;
};

var _default = SelectPopOver;
exports["default"] = _default;
module.exports = exports.default;