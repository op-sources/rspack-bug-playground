"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

exports.__esModule = true;
exports["default"] = void 0;

var _inheritsLoose2 = _interopRequireDefault(require("@babel/runtime/helpers/inheritsLoose"));

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _react = _interopRequireWildcard(require("react"));

var _commonTools = require("../../core/commonTools");

var _tooltip = _interopRequireDefault(require("./common/tooltip"));

var _placements = _interopRequireDefault(require("./placements"));

var _context = require("../providerConfig/context");

var _dec, _class, _class2, _temp;

var splitObject = function splitObject(obj, keys) {
  var picked = {};
  var omited = (0, _extends2["default"])({}, obj);
  keys.forEach(function (key) {
    if (obj && key in obj) {
      picked[key] = obj[key];
      delete omited[key];
    }
  });
  return {
    picked: picked,
    omited: omited
  };
};

var Tooltip = (_dec = (0, _context.withConfigConsumer)('tooltip'), _dec(_class = (_temp = _class2 = /*#__PURE__*/function (_PureComponent) {
  (0, _inheritsLoose2["default"])(Tooltip, _PureComponent);

  function Tooltip(props) {
    var _this;

    _this = _PureComponent.call(this, props) || this;

    _this.onVisibleChange = function (visible) {
      var onVisibleChange = _this.props.onVisibleChange;

      if (!('visible' in _this.props)) {
        _this.setState({
          visible: visible
        });
      }

      if (onVisibleChange) {
        onVisibleChange(visible);
      }
    };

    _this.tooltipRef = void 0;

    _this.getTooltipRef = function (ref) {
      _this.tooltipRef = ref;
    };

    _this.onPopupAlign = function (domNode, align) {
      var placements = _this.getPlacements(); // 当前返回的位置


      var placement = Object.keys(placements).filter(function (key) {
        return placements[key].points[0] === align.points[0] && placements[key].points[1] === align.points[1];
      })[0];

      if (!placement) {
        return;
      } // 根据当前坐标设置动画点


      var rect = domNode.getBoundingClientRect();
      var transformOrigin = {
        top: '50%',
        left: '50%'
      };

      if (placement.indexOf('top') >= 0 || placement.indexOf('Bottom') >= 0) {
        transformOrigin.top = rect.height - align.offset[1] + "px";
      } else if (placement.indexOf('Top') >= 0 || placement.indexOf('bottom') >= 0) {
        transformOrigin.top = -align.offset[1] + "px";
      }

      if (placement.indexOf('left') >= 0 || placement.indexOf('Right') >= 0) {
        transformOrigin.left = rect.width - align.offset[0] + "px";
      } else if (placement.indexOf('right') >= 0 || placement.indexOf('Left') >= 0) {
        transformOrigin.left = -align.offset[0] + "px";
      }

      if (placement.indexOf('top') >= 0) {
        domNode.style.top = domNode.style.top.split('px') && +domNode.style.top.split('px')[0] + 4 + "px" || domNode.style.top;
      } else if (placement.indexOf('bottom') >= 0) {
        domNode.style.top = domNode.style.top.split('px') && +domNode.style.top.split('px')[0] - 4 + "px" || domNode.style.top;
      } else if (placement.indexOf('right') >= 0) {
        domNode.style.left = domNode.style.left.split('px') && +domNode.style.left.split('px')[0] - 4 + "px" || domNode.style.left;
      } else if (placement.indexOf('left') >= 0) {
        domNode.style.left = domNode.style.left.split('px') && +domNode.style.left.split('px')[0] + 4 + "px" || domNode.style.left;
      }

      domNode.style.transformOrigin = transformOrigin.left + " " + transformOrigin.top;
    };

    _this.state = {
      visible: !!props.visible || !!props.defaultVisible
    };
    return _this;
  }

  var _proto = Tooltip.prototype;

  _proto.getPlacements = function getPlacements() {
    var _this$props = this.props,
        arrowPointAtCenter = _this$props.arrowPointAtCenter,
        autoAdjustOverflow = _this$props.autoAdjustOverflow;
    return (0, _placements["default"])({
      arrowPointAtCenter: arrowPointAtCenter,
      verticalArrowShift: 8,
      autoAdjustOverflow: autoAdjustOverflow
    });
  } // Fix Tooltip won't hide at disabled button
  ;

  _proto.getDisabledCompatibleChildren = function getDisabledCompatibleChildren(element) {
    if ((element.type === 'button' || element.type.displayName === 'Button' || element.type.displayName === 'Switch') && element.props.disabled && this.isHoverTrigger()) {
      // Pick some layout related style properties up to span
      var _splitObject = splitObject(element.props.style, ['position', 'left', 'right', 'top', 'bottom', 'float', 'display', 'zIndex']),
          picked = _splitObject.picked,
          omited = _splitObject.omited;

      var spanStyle = (0, _extends2["default"])({
        display: 'inline-block'
      }, picked, {
        cursor: 'not-allowed'
      });
      var buttonStyle = (0, _extends2["default"])({}, omited, {
        pointerEvents: 'none'
      });
      var child = /*#__PURE__*/(0, _react.cloneElement)(element, {
        style: buttonStyle,
        className: null
      });
      return /*#__PURE__*/_react["default"].createElement("span", {
        style: spanStyle,
        className: element.props.className
      }, child);
    }

    return element;
  };

  _proto.isHoverTrigger = function isHoverTrigger() {
    var trigger = this.props.trigger;

    if (!trigger || trigger === 'hover') {
      return true;
    }

    if (Array.isArray(trigger)) {
      return trigger.indexOf('hover') >= 0;
    }

    return false;
  };

  _proto.isNoTitle = function isNoTitle() {
    var _this$props2 = this.props,
        title = _this$props2.title,
        overlay = _this$props2.overlay;
    return !title && !overlay; // overlay for old version compatibility
  };

  _proto.render = function render() {
    var _classnames;

    var props = this.props,
        state = this.state;
    var prefixCls = props.prefixCls,
        title = props.title,
        overlay = props.overlay,
        openClassName = props.openClassName,
        getPopupContainer = props.getPopupContainer,
        getTooltipContainer = props.getTooltipContainer,
        overlayClassName = props.overlayClassName,
        type = props.type;
    var children = props.children;
    var visible = this.isNoTitle() ? false : state.visible;
    var child = this.getDisabledCompatibleChildren( /*#__PURE__*/_react["default"].isValidElement(children) ? children : /*#__PURE__*/_react["default"].createElement("span", null, children));
    var childProps = child.props;
    var childCls = (0, _commonTools.classnames)(childProps.className, (_classnames = {}, _classnames[openClassName || prefixCls + "-open"] = true, _classnames));
    var tooltipOverlayClass = (0, _commonTools.classnames)(overlayClassName, prefixCls + "-" + type);
    return /*#__PURE__*/_react["default"].createElement(_tooltip["default"], (0, _extends2["default"])({}, this.props, {
      ref: this.props.toolTipRef || this.getTooltipRef,
      getTooltipContainer: getPopupContainer || getTooltipContainer,
      builtinPlacements: this.getPlacements(),
      overlay: overlay || title || '',
      visible: visible,
      onVisibleChange: this.onVisibleChange // onPopupAlign={this.onPopupAlign}
      ,
      overlayClassName: tooltipOverlayClass
    }), visible ? /*#__PURE__*/(0, _react.cloneElement)(child, {
      className: childCls
    }) : child);
  };

  return Tooltip;
}(_react.PureComponent), _class2.defaultProps = {
  prefixCls: 'one-tooltip',
  placement: 'top',
  transitionName: 'zoom-big-fast',
  mouseEnterDelay: 0.1,
  mouseLeaveDelay: 0.1,
  arrowPointAtCenter: false,
  autoAdjustOverflow: true,
  type: 'light'
}, _class2.getDerivedStateFromProps = function (nextProps, prevState) {
  if ('visible' in nextProps) {
    return {
      visible: nextProps.visible
    };
  }

  return null;
}, _temp)) || _class);
var _default = Tooltip;
exports["default"] = _default;
module.exports = exports.default;