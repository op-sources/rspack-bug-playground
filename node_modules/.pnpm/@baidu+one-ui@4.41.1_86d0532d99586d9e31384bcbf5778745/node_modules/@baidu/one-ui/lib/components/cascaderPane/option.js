"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

exports.__esModule = true;
exports.EmptyOption = EmptyOption;
exports["default"] = void 0;

var _inheritsLoose2 = _interopRequireDefault(require("@babel/runtime/helpers/inheritsLoose"));

var _react = _interopRequireWildcard(require("react"));

var _dlsIconsReact = require("dls-icons-react");

var _commonTools = require("../../core/commonTools");

var _checkbox = _interopRequireDefault(require("../checkbox"));

var _classnames2 = _interopRequireDefault(require("classnames"));

/**
 * @file 菜单的项
 */
;

var Option = /*#__PURE__*/function (_PureComponent) {
  (0, _inheritsLoose2["default"])(Option, _PureComponent);

  function Option() {
    var _this;

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _PureComponent.call.apply(_PureComponent, [this].concat(args)) || this;

    _this.handleOnSelect = function () {
      var _this$props = _this.props,
          onSelect = _this$props.onSelect,
          _this$props$option = _this$props.option,
          key = _this$props$option.key,
          keyPath = _this$props$option.keyPath,
          disabled = _this$props$option.disabled,
          selectable = _this$props$option.selectable,
          showCheckbox = _this$props.showCheckbox;

      if (!disabled && showCheckbox && selectable !== false && !_this.hasChildren()) {
        _this.handleOnCheck();
      }

      onSelect && onSelect(key, keyPath);
    };

    _this.delayTimer = void 0;

    _this.handleMouseEnter = function () {
      var _this$props2 = _this.props,
          onHover = _this$props2.onHover,
          option = _this$props2.option;
      _this.delayTimer = setTimeout(function () {
        onHover && onHover(option.key, option.keyPath);
        _this.delayTimer = null;
      }, 150);
    };

    _this.handleMouseLeave = function () {
      if (_this.delayTimer) {
        clearTimeout(_this.delayTimer);
        _this.delayTimer = null;
      }
    };

    _this.handleOnCheck = function (event) {
      var _this$props3 = _this.props,
          onCheck = _this$props3.onCheck,
          option = _this$props3.option,
          active = _this$props3.active;

      if (event && (active || !_this.hasChildren())) {
        event.stopPropagation();
      }

      onCheck && onCheck(option.key);
    };

    return _this;
  }

  var _proto = Option.prototype;

  _proto.prefix = function prefix(name) {
    return this.props.prefixCls + "-" + name;
  };

  _proto.render = function render() {
    var _classnames;

    var _this$props4 = this.props,
        showCheckbox = _this$props4.showCheckbox,
        checkboxPrefixCls = _this$props4.checkboxPrefixCls,
        option = _this$props4.option,
        size = _this$props4.size,
        active = _this$props4.active,
        selected = _this$props4.selected,
        expandTrigger = _this$props4.expandTrigger,
        group = _this$props4.group,
        renderOption = _this$props4.renderOption;

    if (!option) {
      return null;
    }

    var label = option.label,
        title = option.title,
        icon = option.icon,
        checked = option.checked,
        indeterminate = option.indeterminate,
        disabled = option.disabled,
        loading = option.loading,
        expandType = option.expandType,
        selectable = option.selectable;
    var hasChildren = this.hasChildren();
    var className = (0, _commonTools.classnames)((_classnames = {}, _classnames[this.prefix('menu-item')] = true, _classnames[this.prefix('menu-item-group-title')] = group, _classnames[this.prefix('menu-item-expand')] = hasChildren, _classnames[this.prefix('menu-item-active')] = active, _classnames[this.prefix('menu-item-selected')] = selected, _classnames[this.prefix('menu-item-disabled')] = disabled, _classnames[this.prefix('menu-item-unselectable')] = selectable === false, _classnames[this.prefix('menu-item-loading')] = loading, _classnames));
    var hover = hasChildren && !disabled && expandTrigger === 'hover';

    var node = /*#__PURE__*/_react["default"].createElement("li", {
      className: className,
      title: title,
      onClick: this.handleOnSelect,
      onMouseEnter: hover ? this.handleMouseEnter : null,
      onMouseLeave: hover ? this.handleMouseLeave : null
    }, expandType === 'toggle' && this.renderExpandIcon(), showCheckbox && selectable !== false && /*#__PURE__*/_react["default"].createElement(_checkbox["default"], {
      checked: checked,
      indeterminate: indeterminate,
      size: size === 'large' ? 'medium' : size === 'xsmall' ? 'small' : size,
      disabled: disabled // prefixCls={checkboxPrefixCls}
      ,
      className: this.prefix('menu-item-checkbox') // @ts-ignore checkbox 属性太乱
      ,
      onClick: this.handleOnCheck
    }), this.renderLabel(label), this.renderIcon(icon), hasChildren && !group && this.renderExpandIcon());

    if (renderOption) {
      return renderOption({
        node: node,
        option: option.item
      });
    }

    return node;
  };

  _proto.hasChildren = function hasChildren() {
    var _this$props$option2 = this.props.option,
        isLeaf = _this$props$option2.isLeaf,
        children = _this$props$option2.children;
    return isLeaf === false || children && children.length > 0;
  };

  _proto.componentWillUnmount = function componentWillUnmount() {
    if (this.delayTimer) {
      clearTimeout(this.delayTimer);
    }
  };

  _proto.renderIcon = function renderIcon(icon) {
    if (!icon) {
      return null;
    }

    return /*#__PURE__*/_react["default"].createElement("span", {
      className: this.prefix('menu-item-icon')
    }, icon);
  };

  _proto.renderLabel = function renderLabel(label) {
    return /*#__PURE__*/_react["default"].createElement("span", {
      className: this.prefix('menu-item-label')
    }, label);
  };

  _proto.renderExpandIcon = function renderExpandIcon() {
    var _classNames;

    var _this$props5 = this.props,
        loading = _this$props5.loading,
        loadingIcon = _this$props5.loadingIcon,
        expandIcon = _this$props5.expandIcon,
        expanded = _this$props5.expanded,
        expandType = _this$props5.option.expandType;

    if (loading) {
      return /*#__PURE__*/_react["default"].createElement("span", {
        className: this.prefix('menu-item-loading-icon')
      }, loadingIcon);
    }

    return /*#__PURE__*/_react["default"].createElement("span", {
      className: (0, _classnames2["default"])(this.prefix('menu-item-expand-icon'), (_classNames = {}, _classNames[this.prefix('menu-item-expand-icon-toggle')] = expandType === 'toggle', _classNames[this.prefix('menu-item-expanded')] = expandType === 'toggle' && expanded, _classNames))
    }, expandType === 'toggle' ? /*#__PURE__*/_react["default"].createElement(_dlsIconsReact.IconCaretRight, {
      className: this.prefix('menu-item-expand-arrow')
    }) : expandIcon);
  };

  return Option;
}(_react.PureComponent);

exports["default"] = Option;

function EmptyOption(_ref) {
  var emptyNode = _ref.emptyNode,
      prefixCls = _ref.prefixCls;
  var option = {
    label: emptyNode,
    disabled: true
  };
  return /*#__PURE__*/_react["default"].createElement(Option, {
    option: option,
    prefixCls: prefixCls
  });
}