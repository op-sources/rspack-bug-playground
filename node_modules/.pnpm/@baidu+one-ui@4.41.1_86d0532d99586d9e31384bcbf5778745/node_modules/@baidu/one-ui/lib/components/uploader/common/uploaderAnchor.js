"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

exports.__esModule = true;
exports["default"] = void 0;

var _inheritsLoose2 = _interopRequireDefault(require("@babel/runtime/helpers/inheritsLoose"));

var _react = _interopRequireWildcard(require("react"));

var _imageAnchor = _interopRequireDefault(require("./imageAnchor"));

var _fileAnchor = _interopRequireDefault(require("./fileAnchor"));

var _commonTools = require("../../../core/commonTools");

var _uploaderTools = require("../../../core/uploaderTools");

var UploaderAnchor = /*#__PURE__*/function (_PureComponent) {
  (0, _inheritsLoose2["default"])(UploaderAnchor, _PureComponent);

  function UploaderAnchor() {
    var _this;

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _PureComponent.call.apply(_PureComponent, [this].concat(args)) || this;
    _this.uploadInputRef = void 0;

    _this.inputRef = function (ref) {
      _this.uploadInputRef = ref;
    };

    _this.onPickerClick = function () {
      var onPickerClick = _this.props.onPickerClick;
      var useDefaultPicker = onPickerClick && onPickerClick();

      if (useDefaultPicker === false) {
        return;
      }

      _this.uploadInputRef.value = '';

      _this.uploadInputRef.click();
    };

    _this.renderEntries = function () {
      var _this$props = _this.props,
          realType = _this$props.realType,
          entries = _this$props.entries,
          prefixCls = _this$props.prefixCls;

      if (realType === 'file' || !(entries && Array.isArray(entries) && entries.length)) {
        return null;
      }

      return entries.map(function (entry) {
        return /*#__PURE__*/_react["default"].createElement("div", {
          key: entry.key,
          className: prefixCls + "-entry-item"
        }, entry.label);
      });
    };

    return _this;
  }

  var _proto = UploaderAnchor.prototype;

  _proto.renderHelper = function renderHelper() {
    var _this$props2 = this.props,
        prefixCls = _this$props2.prefixCls,
        listType = _this$props2.listType,
        helperText = _this$props2.helperText;

    if (listType === 'file' || !helperText) {
      return null;
    }

    var helperTextNode;

    if (typeof helperText === 'function') {
      helperTextNode = helperText();
    } else {
      helperTextNode = helperText;
    }

    return helperTextNode ? /*#__PURE__*/_react["default"].createElement("div", {
      className: prefixCls + "-helper-text"
    }, helperTextNode) : null;
  };

  _proto.render = function render() {
    var _classnames, _classnames2;

    var _this$props3 = this.props,
        prefixCls = _this$props3.prefixCls,
        pickerDisabled = _this$props3.disabled,
        listType = _this$props3.listType,
        CustomUploadAnchor = _this$props3.CustomUploadAnchor,
        helperText = _this$props3.helperText,
        helperTextPosition = _this$props3.helperTextPosition,
        inputControlName = _this$props3.inputControlName,
        multiple = _this$props3.multiple,
        onChange = _this$props3.onChange,
        loading = _this$props3.loading,
        maxSize = _this$props3.maxSize,
        realType = _this$props3.realType,
        entries = _this$props3.entries,
        size = _this$props3.size,
        pickerPosition = _this$props3.pickerPosition,
        fileList = _this$props3.fileList,
        maxFileLength = _this$props3.maxFileLength,
        hideAnchor = _this$props3.hideAnchor,
        hidePicker = _this$props3.hidePicker,
        pickerIcon = _this$props3.pickerIcon,
        pickerText = _this$props3.pickerText,
        theme = _this$props3.theme,
        CustomUploadPicker = _this$props3.CustomUploadPicker;
    var limited = maxFileLength && fileList.length >= maxFileLength;
    var disabled = pickerDisabled || limited;
    var hide = pickerPosition === 'none' || hideAnchor || hidePicker || listType !== 'file' && limited && pickerPosition === 'after'; // 媒体类超过限制末尾隐藏

    if (hideAnchor === false || hidePicker === false) {
      hide = false; // 强制展示
    }

    var uploadAnchorClassName = (0, _commonTools.classnames)(prefixCls + "-anchor", (_classnames = {}, _classnames[prefixCls + "-anchor-disabled"] = disabled, _classnames[prefixCls + "-anchor-standalone"] = pickerPosition === 'top', _classnames[prefixCls + "-anchor-has-entries"] = entries && entries.length, _classnames), prefixCls + "-anchor-" + listType, prefixCls + "-anchor-" + listType + "-helper-" + helperTextPosition);
    var inputClassName = (0, _commonTools.classnames)(prefixCls + "-input", (_classnames2 = {}, _classnames2[prefixCls + "-input-disabled"] = disabled, _classnames2));
    var UploadPicker = listType === 'file' ? _fileAnchor["default"] : _imageAnchor["default"];

    if (CustomUploadAnchor) {
      // 自定义anchor
      UploadPicker = CustomUploadAnchor;
    }

    if (CustomUploadPicker) {
      // 自定义anchor
      UploadPicker = CustomUploadPicker;
    }

    var accept = (0, _uploaderTools.getAccept)(this.props.accept, realType);
    var inputProps = {
      ref: this.inputRef,
      type: 'file',
      name: inputControlName,
      className: inputClassName,
      multiple: multiple,
      onChange: onChange,
      disabled: pickerDisabled,
      accept: accept.join(',')
    };

    if (accept.length === 1 && accept[0] === '*') {
      delete inputProps.accept;
    }

    var anchorProps = {
      onClick: this.onPickerClick,
      loading: loading,
      disabled: disabled,
      prefixCls: prefixCls,
      maxSize: maxSize,
      helperText: helperText,
      helperTextPosition: helperTextPosition,
      listType: listType,
      realType: realType,
      entries: entries,
      size: size,
      pickerIcon: pickerIcon,
      pickerText: pickerText,
      theme: theme
    };

    if (CustomUploadAnchor || CustomUploadPicker) {
      // @ts-ignore
      anchorProps.OriginAnchor = listType === 'file' ? _fileAnchor["default"] : _imageAnchor["default"];
    }

    if (hide) {
      return /*#__PURE__*/_react["default"].createElement("input", inputProps);
    }

    return /*#__PURE__*/_react["default"].createElement("div", {
      className: uploadAnchorClassName
    }, /*#__PURE__*/_react["default"].createElement(UploadPicker, anchorProps), /*#__PURE__*/_react["default"].createElement("input", inputProps), this.renderHelper());
  };

  return UploaderAnchor;
}(_react.PureComponent);

exports["default"] = UploaderAnchor;
UploaderAnchor.defaultProps = {
  onPickerClick: function onPickerClick() {},
  helperTextPosition: 'right'
};
module.exports = exports.default;