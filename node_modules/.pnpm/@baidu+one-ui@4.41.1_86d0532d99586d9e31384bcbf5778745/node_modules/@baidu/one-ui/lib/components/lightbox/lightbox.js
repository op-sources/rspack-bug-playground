"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

exports.__esModule = true;
exports["default"] = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _inheritsLoose2 = _interopRequireDefault(require("@babel/runtime/helpers/inheritsLoose"));

var _clamp2 = _interopRequireDefault(require("lodash/clamp"));

var _react = _interopRequireWildcard(require("react"));

var _warning = _interopRequireDefault(require("warning"));

var _commonTools = require("../../core/commonTools");

var _dlsIconsReact = require("dls-icons-react");

var _dialog = _interopRequireDefault(require("../dialog"));

var _button = _interopRequireDefault(require("../button"));

var _context = require("../providerConfig/context");

var _Toolbar = _interopRequireDefault(require("./common/Toolbar"));

var _Carousel = _interopRequireDefault(require("./common/Carousel"));

var _configs = require("./configs");

var _dec, _class, _class2, _temp;

;
var Lightbox = (_dec = (0, _context.withConfigConsumer)('lightbox'), _dec(_class = (_temp = _class2 = /*#__PURE__*/function (_PureComponent) {
  (0, _inheritsLoose2["default"])(Lightbox, _PureComponent);

  function Lightbox(props) {
    var _this;

    _this = _PureComponent.call(this, props) || this;
    _this.root = void 0;
    _this.positionObj = void 0;

    _this.saveRoot = function (node) {
      _this.root = node;
    };

    _this.onCancel = function () {
      _this.props.onClose();

      _this.setState({
        scale: 1,
        position: {
          x: 0,
          y: 0
        }
      });
    };

    _this.checkIsSupportZoom = function (activeIndex) {
      activeIndex = activeIndex || _this.state.slide - 1;

      var dataSource = _this.getDataSource();

      return dataSource[activeIndex].type === 'image';
    };

    _this.limitPosition = function (position, scale, buffer) {
      if (buffer === void 0) {
        buffer = 400;
      }

      var currentImage = _this.root.querySelector('img[data-active="true"]');

      var boundingClientRect = _this.root.getBoundingClientRect();

      var centerPointX = (boundingClientRect.left + boundingClientRect.right) / 2;
      var centerPointY = (boundingClientRect.top + boundingClientRect.bottom) / 2;
      return {
        x: (0, _clamp2["default"])(position.x, (-centerPointX - currentImage.width * scale / 2 + buffer) / scale, (window.innerWidth - centerPointX + currentImage.width * scale / 2 - buffer) / scale),
        y: (0, _clamp2["default"])(position.y, (-centerPointY - currentImage.height * scale / 2 + buffer) / scale, (window.innerHeight - centerPointY + currentImage.height * scale / 2 - buffer) / scale)
      };
    };

    _this.onActionItemClick = function (key) {
      if (!_this.root) {
        return;
      }

      var _this$props = _this.props,
          scaleStep = _this$props.scaleStep,
          maxScale = _this$props.maxScale,
          minScale = _this$props.minScale,
          onScaleToFit = _this$props.onScaleToFit,
          onTransform = _this$props.onTransform,
          onZoomIn = _this$props.onZoomIn,
          onZoomOut = _this$props.onZoomOut,
          onScaleToOriginal = _this$props.onScaleToOriginal;
      var _this$state = _this.state,
          scale = _this$state.scale,
          position = _this$state.position,
          slide = _this$state.slide;
      var newPosition = position;
      var newScale = scale;
      var activeIndex = slide - 1;

      if (key === 'scaleToFit') {
        newPosition = {
          x: 0,
          y: 0
        };
        newScale = 1;
        onScaleToFit(activeIndex);
      } else if (key === 'zoomIn') {
        newScale = Math.min(scale + scaleStep, maxScale);
        newPosition = _this.limitPosition(position, newScale);
        onZoomIn(activeIndex, newScale);
      } else if (key === 'zoomOut') {
        newScale = Math.max(scale - scaleStep, minScale);
        newPosition = _this.limitPosition(position, newScale);
        onZoomOut(activeIndex, newScale);
      } else if (key === 'scaleToOriginal') {
        var currentImage = _this.root.querySelector('img[data-active="true"]');

        if (currentImage) {
          newScale = currentImage.naturalWidth / currentImage.width;
          var boundingClientRect = currentImage.getBoundingClientRect();
          var centerFromTop = (boundingClientRect.top + boundingClientRect.bottom) / 2;
          var top = centerFromTop - currentImage.naturalHeight / 2 - position.y * scale; // 如果图片超出屏幕，则把图片上边缘对齐视窗上边缘

          newPosition = {
            x: 0,
            y: Math.max(-top / newScale, 0)
          };
          onScaleToOriginal(activeIndex);
        }
      }

      _this.setState({
        scale: newScale,
        position: newPosition,
        supportTransition: true
      });

      onTransform(activeIndex, (0, _extends2["default"])({}, newPosition, {
        scale: newScale
      }), key);
    };

    _this.onScaleChange = function (scale) {
      if (!_this.root) {
        return;
      }

      var _this$props2 = _this.props,
          minScale = _this$props2.minScale,
          maxScale = _this$props2.maxScale;
      var _this$state2 = _this.state,
          slide = _this$state2.slide,
          position = _this$state2.position;
      scale = (0, _clamp2["default"])(scale, minScale, maxScale);

      var newPosition = _this.limitPosition(position, scale);

      _this.setState({
        scale: scale,
        position: newPosition,
        supportTransition: false
      });

      _this.props.onTransform(slide - 1, (0, _extends2["default"])({}, newPosition, {
        scale: scale
      }), 'wheel');
    };

    _this.onChangePosition = function (position) {
      if (!_this.root) {
        return;
      }

      var currentImage = _this.root.querySelector('img[data-active="true"]');

      if (!currentImage) {
        return;
      }

      var _this$state3 = _this.state,
          slide = _this$state3.slide,
          scale = _this$state3.scale;
      position = _this.limitPosition(position, scale);

      _this.setState({
        position: position,
        supportTransition: false
      });

      _this.props.onTransform(slide - 1, (0, _extends2["default"])({}, position, {
        scale: scale
      }), 'move');
    };

    _this.onChangePrevPage = function () {
      var _this$props3 = _this.props,
          mode = _this$props3.mode,
          onChange = _this$props3.onChange;
      var slide = _this.state.slide;
      var current;

      if (mode === 'auto') {
        // 翻到第一页的时候，跳转到最后一页
        current = slide === 1 ? _this.getDataSource().length : slide - 1;
      } else {
        current = slide - 1;
      }

      _this.setState({
        scale: 1,
        position: {
          x: 0,
          y: 0
        },
        slide: current
      });

      onChange && onChange(current - 1);
    };

    _this.renderPrevPage = function () {
      var _classnames;

      var _this$props4 = _this.props,
          mode = _this$props4.mode,
          prefixCls = _this$props4.prefixCls;
      var currentButtonProps = {
        className: (0, _commonTools.classnames)(prefixCls + "-page-change", prefixCls + "-page-prev", (_classnames = {}, _classnames[prefixCls + "-page-change-hide"] = mode === 'normal' && _this.state.slide === 1, _classnames)),
        type: 'translucent',
        icon: /*#__PURE__*/_react["default"].createElement(_dlsIconsReact.IconChevronLeft, {
          className: prefixCls + "-icon-left"
        }),
        size: 'medium',
        onClick: _this.onChangePrevPage
      };
      return /*#__PURE__*/_react["default"].createElement(_button["default"], currentButtonProps);
    };

    _this.onChangeNextPage = function () {
      var _this$props5 = _this.props,
          mode = _this$props5.mode,
          onChange = _this$props5.onChange;
      var slide = _this.state.slide;
      var current;

      if (mode === 'auto') {
        // 翻到第一页的时候，跳转到最后一页
        current = slide === _this.getDataSource().length ? 1 : slide + 1;
      } else {
        current = slide + 1;
      }

      _this.setState({
        scale: 1,
        position: {
          x: 0,
          y: 0
        },
        slide: current
      });

      onChange && onChange(current - 1);
    };

    _this.renderNextPage = function () {
      var _classnames2;

      var _this$props6 = _this.props,
          prefixCls = _this$props6.prefixCls,
          mode = _this$props6.mode;
      var currentButtonProps = {
        className: (0, _commonTools.classnames)(prefixCls + "-page-change", prefixCls + "-page-next", (_classnames2 = {}, _classnames2[prefixCls + "-page-change-hide"] = mode === 'normal' && _this.state.slide === _this.getDataSource().length, _classnames2)),
        type: 'translucent',
        icon: /*#__PURE__*/_react["default"].createElement(_dlsIconsReact.IconChevronRight, {
          className: prefixCls + "-icon-right"
        }),
        size: 'medium',
        onClick: _this.onChangeNextPage
      };
      return /*#__PURE__*/_react["default"].createElement(_button["default"], currentButtonProps);
    };

    _this.handleMaskClick = function (e) {
      if (_this.props.maskClosable && e.target === e.currentTarget) {
        _this.setState({
          open: false
        });

        _this.onCancel();
      }
    };

    _this.state = {
      open: props.open || false,
      scale: 1,
      supportTransition: false,
      position: {
        x: 0,
        y: 0
      },
      slide: (props.defaultSlideIndex || props.defaultActiveIndex || 0) + 1
    };

    if ('datasource' in props) {
      (0, _warning["default"])(false, '`datasource` is deprecated use `dataSource` instead');
    }

    return _this;
  }

  var _proto = Lightbox.prototype;

  _proto.componentDidUpdate = function componentDidUpdate() {
    if (!this.root) {
      return;
    }

    var prefixCls = this.props.prefixCls;
    var videos = this.root.querySelectorAll("." + prefixCls + "-item-hide video");
    videos.forEach(function (video) {
      video.pause();
    });
  };

  _proto.getDataSource = function getDataSource() {
    var _this$props7 = this.props,
        datasource = _this$props7.datasource,
        dataSource = _this$props7.dataSource;
    return datasource || dataSource;
  } // 检查是否支持缩放，目前只有图片类型支持
  ;

  _proto.render = function render() {
    var _classnames3;

    var _this$state4 = this.state,
        open = _this$state4.open,
        slide = _this$state4.slide,
        scale = _this$state4.scale,
        position = _this$state4.position,
        supportTransition = _this$state4.supportTransition;
    var _this$props8 = this.props,
        prefixCls = _this$props8.prefixCls,
        className = _this$props8.className,
        minScale = _this$props8.minScale,
        maxScale = _this$props8.maxScale,
        toolbar = _this$props8.toolbar,
        indicator = _this$props8.indicator,
        zIndex = _this$props8.zIndex,
        style = _this$props8.style;
    var dataSource = this.getDataSource();

    if (!dataSource.length) {
      return null;
    }

    var currentItem = dataSource[slide - 1];
    var isSupportZoom = this.checkIsSupportZoom();
    var actionItems = isSupportZoom ? toolbar(_configs.DEFAULT_ACTION_ITEMS) : null;
    var isShowIndicator = indicator !== 'none' && dataSource.length > 1;
    var wrapperClassName = (0, _commonTools.classnames)(prefixCls, prefixCls + "-wrapper", className);
    return /*#__PURE__*/_react["default"].createElement(_dialog["default"], {
      wrapClassName: wrapperClassName,
      wrapStyle: style,
      visible: open,
      footer: null,
      destroyOnClose: true,
      maskClosable: false,
      onCancel: this.onCancel,
      maskClassName: prefixCls + "-mask",
      zIndex: zIndex,
      wrapProps: {
        onClick: this.handleMaskClick
      }
    }, /*#__PURE__*/_react["default"].createElement("div", {
      className: (0, _commonTools.classnames)(prefixCls + "-container", (_classnames3 = {}, _classnames3[prefixCls + "-indicator-hide"] = indicator === 'none' || dataSource.length === 1, _classnames3))
    }, this.renderPrevPage(), /*#__PURE__*/_react["default"].createElement("div", {
      className: prefixCls + "-items-container"
    }, currentItem.desc && /*#__PURE__*/_react["default"].createElement("div", {
      className: prefixCls + "-desc"
    }, currentItem.desc), /*#__PURE__*/_react["default"].createElement(_Carousel["default"], {
      ref: this.saveRoot,
      prefixCls: prefixCls,
      position: position,
      slide: slide,
      scale: scale,
      supportTransition: supportTransition,
      wheelScaleStep: _configs.DEFAULT_WHEEL_SCALE_STEP,
      onScaleChange: this.onScaleChange,
      onChangePosition: this.onChangePosition,
      dataSource: dataSource
    }), (isSupportZoom || isShowIndicator) && /*#__PURE__*/_react["default"].createElement(_Toolbar["default"], {
      minScale: minScale,
      maxScale: maxScale,
      prefixCls: prefixCls,
      actionItems: actionItems,
      scale: scale,
      isSupportZoom: isSupportZoom,
      isShowIndicator: isShowIndicator,
      slide: slide,
      total: dataSource.length,
      onClick: this.onActionItemClick
    })), this.renderNextPage()));
  };

  return Lightbox;
}(_react.PureComponent), _class2.defaultProps = {
  prefixCls: 'one-lightbox',
  className: '',
  indicator: 'number',
  dataSource: [],
  onClose: function onClose() {},
  onChange: function onChange() {},
  mode: 'normal',
  defaultCurrent: 0,
  minScale: _configs.DEFAULT_MIN_SCALE,
  maxScale: _configs.DEFAULT_MAX_SCALE,
  scaleStep: _configs.DEFAULT_SCALE_STEP,
  toolbar: function toolbar() {
    return _configs.DEFAULT_ACTION_ITEMS;
  },
  onScaleToFit: function onScaleToFit() {},
  onZoomIn: function onZoomIn() {},
  onZoomOut: function onZoomOut() {},
  onScaleToOriginal: function onScaleToOriginal() {},
  onTransform: function onTransform() {},
  maskClosable: false
}, _class2.getDerivedStateFromProps = function (nextProps, prevState) {
  var state = {
    open: prevState.open,
    slide: prevState.slide
  };

  if ('open' in nextProps && nextProps.open !== prevState.open) {
    state.open = nextProps.open;
  } // 后续废弃


  if ('slide' in nextProps && nextProps.slide !== prevState.slide) {
    (0, _warning["default"])(false, '`slide` is deprecated use `activeIndex` or `defaultActiveIndex` instead');
    state.slide = nextProps.slide;
  }

  if ('slideIndex' in nextProps && nextProps.slideIndex + 1 !== prevState.slide) {
    (0, _warning["default"])(false, '`slideIndex` is deprecated use `activeIndex` or `defaultActiveIndex` instead');
    state.slide = nextProps.slideIndex + 1;
  }

  if ('activeIndex' in nextProps && nextProps.activeIndex + 1 !== prevState.slide) {
    state.slide = nextProps.activeIndex + 1;
  }

  return state;
}, _temp)) || _class);
var _default = Lightbox;
exports["default"] = _default;
module.exports = exports.default;