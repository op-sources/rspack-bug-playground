"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

exports.__esModule = true;
exports["default"] = void 0;

var _inheritsLoose2 = _interopRequireDefault(require("@babel/runtime/helpers/inheritsLoose"));

var _debounce2 = _interopRequireDefault(require("lodash/debounce"));

var _react = _interopRequireWildcard(require("react"));

var _dlsIconsReact = require("dls-icons-react");

var _resizeObserverPolyfill = _interopRequireDefault(require("resize-observer-polyfill"));

var _button = _interopRequireDefault(require("../../button"));

var _commonTools = require("../../../core/commonTools");

var _sortable = _interopRequireDefault(require("../../sortable"));

var ScrollBar = /*#__PURE__*/function (_PureComponent) {
  (0, _inheritsLoose2["default"])(ScrollBar, _PureComponent);

  function ScrollBar() {
    var _this;

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _PureComponent.call.apply(_PureComponent, [this].concat(args)) || this;
    _this.state = {
      canScrollForward: false,
      canScrollBackward: false
    };
    _this.offset = 0;
    _this.debouncedResize = void 0;
    _this.resizeObserver = void 0;
    _this.navBar = void 0;
    _this.navWrapper = void 0;
    _this.activeTab = void 0;
    _this.navContainer = void 0;
    _this.navTabsContainer = void 0;
    _this.navBarScroll = void 0;

    _this.componentDidUpdate = function (prevProps) {
      if (!prevProps || _this.props.activeKey !== prevProps.activeKey) {
        // can not use props.activeKey
        _this.scrollToActiveTab();
      }

      _this.updateScrollState();
    };

    _this.componentWillUnmount = function () {
      if (_this.resizeObserver) {
        _this.resizeObserver.disconnect();
      }

      if (_this.debouncedResize && _this.debouncedResize.cancel) {
        _this.debouncedResize.cancel();
      }

      _this.navBarScroll.removeEventListener('wheel', _this.handleWheelScroll);
    };

    _this.isScrollable = function () {
      return _this.state.canScrollForward || _this.state.canScrollBackward;
    };

    _this.updateScrollState = function (offset) {
      var allWidth = _this.navBar.offsetWidth;
      var containerWidth = _this.navContainer.offsetWidth;
      offset = offset == null ? _this.navBarScroll.scrollLeft : offset;
      var maxOffset = allWidth > containerWidth ? allWidth - containerWidth : 0;

      _this.setState({
        canScrollBackward: offset < maxOffset && maxOffset > 0,
        canScrollForward: offset > 0 && maxOffset > 0
      });
    };

    _this.setOffset = function (offset, smooth) {
      if (smooth === void 0) {
        smooth = true;
      }

      var allWidth = _this.navBar.offsetWidth;
      var pageWidth = _this.navBarScroll.offsetWidth;
      var maxOffset = allWidth > pageWidth ? allWidth - pageWidth : 0;

      if (offset > maxOffset) {
        offset = maxOffset;
      }

      if (offset < 0) {
        offset = 0;
      }

      if (smooth && _this.navBarScroll.scrollTo) {
        _this.navBarScroll.scrollTo({
          left: offset,
          behavior: smooth ? 'smooth' : 'auto'
        });
      } else {
        _this.navBarScroll.scrollLeft = offset;
      }
    };

    _this.handleOnScroll = function () {
      _this.updateScrollState();
    };

    _this.getRef = function (name, ref) {
      _this[name] = ref;
    };

    _this.renderPrevIcon = function () {
      var _classnames;

      var prefixCls = _this.props.prefixCls;
      var canScrollForward = _this.state.canScrollForward;
      var prevIconClassName = (0, _commonTools.classnames)(prefixCls + "-nav-prev", (_classnames = {}, _classnames[prefixCls + "-nav-prev-disabled"] = !canScrollForward, _classnames));
      var prevProps = {
        className: prevIconClassName,
        onClick: !canScrollForward ? null : _this.prev
      };
      return /*#__PURE__*/_react["default"].createElement("span", prevProps, /*#__PURE__*/_react["default"].createElement(_dlsIconsReact.IconChevronLeft, null));
    };

    _this.renderNextIcon = function () {
      var _classnames2;

      var prefixCls = _this.props.prefixCls;
      var canScrollBackward = _this.state.canScrollBackward;
      var nextIconClassName = (0, _commonTools.classnames)(prefixCls + "-nav-next", (_classnames2 = {}, _classnames2[prefixCls + "-nav-next-disabled"] = !canScrollBackward, _classnames2));
      var nextProps = {
        className: nextIconClassName,
        onClick: !canScrollBackward ? null : _this.next
      };
      return /*#__PURE__*/_react["default"].createElement("span", nextProps, /*#__PURE__*/_react["default"].createElement(_dlsIconsReact.IconChevronRight, {
        className: prefixCls + "-angle-right"
      }));
    };

    _this.scrollToActiveTab = function (e) {
      var activeTab = _this.activeTab;

      if (e && e.target !== e.currentTarget || !activeTab) {
        return;
      }

      var offset = _this.navBarScroll.scrollLeft;
      var pageWidth = _this.navBarScroll.offsetWidth;
      var activeOffset = _this.activeTab.offsetLeft;
      var activeWidth = _this.activeTab.offsetWidth;

      if (offset > activeOffset) {
        _this.setOffset(activeOffset);
      } else if (activeOffset + activeWidth > offset + pageWidth) {
        _this.setOffset(activeOffset - pageWidth + activeWidth);
      }
    };

    _this.prev = function (e) {
      _this.props.onPrevClick(e);

      var pageWidth = _this.navBarScroll.offsetWidth;

      _this.setOffset(_this.navBarScroll.scrollLeft - pageWidth);
    };

    _this.next = function (e) {
      _this.props.onNextClick(e);

      var pageWidth = _this.navBarScroll.offsetWidth;

      _this.setOffset(_this.navBarScroll.scrollLeft + pageWidth);
    };

    _this.handleWheelScroll = function (e) {
      if (!_this.state.canScrollBackward && !_this.state.canScrollForward) {
        return;
      }

      var deltaX = e.deltaX,
          deltaY = e.deltaY;
      var delta = Math.abs(deltaX) > Math.abs(deltaY) ? deltaX : deltaY;

      _this.setOffset(_this.navBarScroll.scrollLeft + delta, false);

      e.preventDefault();
    };

    _this.handleMove = function (e) {
      var dragTab = e.related;
      var offset = _this.navBarScroll.scrollLeft;
      var pageWidth = _this.navBarScroll.offsetWidth;
      var dragTabOffset = dragTab.offsetLeft;
      var dragTabWidth = dragTab.offsetWidth;
      var style = getComputedStyle(dragTab);
      var marginLeft = parseInt(style.marginLeft, 10);
      var marginRight = parseInt(style.marginRight, 10);
      var margin = marginLeft + marginRight;

      if (offset > dragTabOffset - margin) {
        var prevTab = dragTab.previousSibling;

        if (prevTab) {
          _this.setOffset(prevTab.offsetLeft + prevTab.offsetWidth / 2);
        } else {
          _this.setOffset(0);
        }
      } else if (dragTabOffset + dragTabWidth > offset + pageWidth - margin) {
        var nextTab = dragTab.nextSibling;

        if (nextTab) {
          _this.setOffset(nextTab.offsetLeft - pageWidth + nextTab.offsetWidth / 2);
        } else {
          _this.setOffset(_this.navBar.offsetWidth - pageWidth);
        }
      }

      return true;
    };

    _this.handleOnSort = function (options, fromIndex, toIndex) {
      _this.props.onSort(fromIndex, toIndex);
    };

    _this.renderTab = function (item) {
      if (item.key === item.props.activeKey) {
        return /*#__PURE__*/(0, _react.cloneElement)(item, {
          tabRef: function tabRef(tab) {
            return _this.getRef('activeTab', tab);
          }
        });
      }

      return item;
    };

    return _this;
  }

  var _proto = ScrollBar.prototype;

  _proto.componentDidMount = function componentDidMount() {
    var _this2 = this;

    this.updateScrollState();
    this.scrollToActiveTab();
    this.debouncedResize = (0, _debounce2["default"])(function () {
      _this2.updateScrollState();

      _this2.scrollToActiveTab();
    }, 200);
    this.resizeObserver = new _resizeObserverPolyfill["default"](this.debouncedResize);
    this.resizeObserver.observe(this.navContainer);
    this.navBarScroll.addEventListener('wheel', this.handleWheelScroll);
  };

  _proto.render = function render() {
    var _classnames3,
        _this3 = this;

    var _this$props = this.props,
        prefixCls = _this$props.prefixCls,
        content = _this$props.content,
        showAdd = _this$props.showAdd,
        type = _this$props.type,
        onAdd = _this$props.onAdd,
        activeKey = _this$props.activeKey,
        showAddDisabled = _this$props.showAddDisabled,
        addButtonText = _this$props.addButtonText,
        extra = _this$props.extra,
        style = _this$props.style,
        size = _this$props.size,
        sortable = _this$props.sortable,
        onSort = _this$props.onSort;
    var addClassName = (0, _commonTools.classnames)(prefixCls + "-bar-add", prefixCls + "-bar-add-" + type);
    var scrollable = this.isScrollable();
    var containerClassName = (0, _commonTools.classnames)(prefixCls + "-bar", (_classnames3 = {}, _classnames3[prefixCls + "-bar-show-add"] = showAdd, _classnames3[prefixCls + "-bar-pagination-show"] = scrollable, _classnames3));
    return /*#__PURE__*/_react["default"].createElement("div", {
      className: containerClassName,
      style: style
    }, /*#__PURE__*/_react["default"].createElement("div", {
      className: prefixCls + "-nav-container",
      ref: function ref(_ref5) {
        return _this3.getRef('navContainer', _ref5);
      }
    }, scrollable ? this.renderPrevIcon() : null, scrollable ? this.renderNextIcon() : null, /*#__PURE__*/_react["default"].createElement("div", {
      className: prefixCls + "-nav-wrap",
      ref: function ref(_ref4) {
        return _this3.getRef('navWrapper', _ref4);
      }
    }, /*#__PURE__*/_react["default"].createElement("div", {
      className: prefixCls + "-nav-scroll",
      onScroll: this.handleOnScroll,
      ref: function ref(_ref3) {
        return _this3.getRef('navBarScroll', _ref3);
      }
    }, /*#__PURE__*/_react["default"].createElement("div", {
      className: prefixCls + "-nav",
      ref: function ref(_ref2) {
        return _this3.getRef('navBar', _ref2);
      }
    }, /*#__PURE__*/_react["default"].createElement("div", {
      ref: function ref(_ref) {
        return _this3.getRef('navTabsContainer', _ref);
      }
    }, sortable ? /*#__PURE__*/_react["default"].createElement(_sortable["default"], {
      options: content,
      onChange: this.handleOnSort,
      renderOption: this.renderTab,
      onMove: this.handleMove
    }) : content.map(this.renderTab)))))), showAdd ? /*#__PURE__*/_react["default"].createElement(_button["default"], {
      className: addClassName,
      type: "text",
      onClick: onAdd,
      disabled: showAddDisabled,
      size: size,
      icon: _dlsIconsReact.IconPlusCircle
    }, addButtonText) : null, this.renderExtra(extra, prefixCls));
  };

  _proto.renderExtra = function renderExtra(extra, prefixCls) {
    if (typeof extra === 'function') {
      extra = extra();
    }

    if (extra == null) {
      return null;
    }

    return /*#__PURE__*/_react["default"].createElement("div", {
      className: prefixCls + "-bar-extra"
    }, extra);
  };

  return ScrollBar;
}(_react.PureComponent);

exports["default"] = ScrollBar;
ScrollBar.defaultProps = {
  onNextClick: function onNextClick() {},
  onPrevClick: function onPrevClick() {}
};
module.exports = exports.default;