"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

exports.__esModule = true;
exports["default"] = void 0;

var _inheritsLoose2 = _interopRequireDefault(require("@babel/runtime/helpers/inheritsLoose"));

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _partial2 = _interopRequireDefault(require("lodash/partial"));

var _react = _interopRequireWildcard(require("react"));

var _miniStore = require("mini-store");

var _dayjs = _interopRequireDefault(require("dayjs"));

var _monthAndYearPanel = _interopRequireDefault(require("./monthAndYearPanel"));

var _rangeDayRender = _interopRequireDefault(require("./rangeDayRender"));

var _datePickerTools = require("../../../core/datePickerTools");

var _en = _interopRequireDefault(require("dayjs/locale/en"));

var _util = require("../util");

_dayjs["default"].locale((0, _extends2["default"])({}, _en["default"], {
  weekStart: 1
}));

;
;

var RangeRender = /*#__PURE__*/function (_PureComponent) {
  (0, _inheritsLoose2["default"])(RangeRender, _PureComponent);

  function RangeRender(props) {
    var _this;

    _this = _PureComponent.call(this, props) || this;
    _this.store = void 0;

    _this.onPickerDay = function (type, value, readOnly) {
      if (readOnly === void 0) {
        readOnly = false;
      }

      var _this$state = _this.state,
          step = _this$state.step,
          beginDate = _this$state.beginDate;
      var _this$props = _this.props,
          onChange = _this$props.onChange,
          dateFormat = _this$props.dateFormat,
          showYear = _this$props.showYear,
          showMonth = _this$props.showMonth,
          endDateShowYear = _this$props.endDateShowYear,
          endDateShowMonth = _this$props.endDateShowMonth,
          validateMinDate = _this$props.validateMinDate,
          validateMaxDate = _this$props.validateMaxDate,
          mode = _this$props.mode;

      if (step === 0) {
        // 表示开始选择
        _this.setState({
          step: 1,
          endDate: '',
          beginDate: (0, _util.getValidDate)(value, dateFormat, validateMinDate, validateMaxDate, mode, false)
        }); // 如果点击了readOnly部分的话，修改当前面板展示的年月


        if (readOnly) {
          var _getDetailDate = (0, _datePickerTools.getDetailDate)(value),
              fullYear = _getDetailDate.fullYear,
              fullMonth = _getDetailDate.fullMonth;

          var newState = {};
          var currentFirstDate = (0, _datePickerTools.getTimeTramp)(fullYear + "/" + fullMonth + "/01");

          if (type === 'prevMultiple' && currentFirstDate !== (0, _datePickerTools.getTimeTramp)(endDateShowYear + "/" + endDateShowMonth + "/01")) {
            newState = {
              showYear: fullYear,
              showMonth: fullMonth
            };
          } else if (type === 'nextMultiple' && currentFirstDate !== (0, _datePickerTools.getTimeTramp)(showYear + "/" + showMonth + "/01")) {
            newState = {
              endDateShowYear: fullYear,
              endDateShowMonth: fullMonth
            };
          }

          _this.store.setState(newState);
        }
      } else if (step === 1) {
        var currentBeginDate = beginDate;
        var currentEndDate = (0, _util.getValidDate)(value, dateFormat, validateMinDate, validateMaxDate, mode, true);

        if ((0, _datePickerTools.getTimeTramp)(currentBeginDate) > (0, _datePickerTools.getTimeTramp)(currentEndDate)) {
          currentBeginDate = (0, _util.getValidDate)(value, dateFormat, validateMinDate, validateMaxDate, mode, false);
          currentEndDate = (0, _util.getValidDate)(beginDate, dateFormat, validateMinDate, validateMaxDate, mode, true);
        }

        _this.setState({
          step: 0,
          endDate: currentEndDate,
          beginDate: currentBeginDate,
          hoverDate: ''
        });

        onChange([(0, _dayjs["default"])(new Date(currentBeginDate)).format(dateFormat), (0, _dayjs["default"])(new Date(currentEndDate)).format(dateFormat)]);
      }
    };

    _this.onMouseEnter = function (value) {
      _this.setState({
        hoverDate: value
      });
    };

    _this.onMouseLeave = function () {
      _this.setState({
        hoverDate: ''
      });
    };

    var currentDate = props.currentDate;
    _this.store = _this.props.store;
    _this.state = {
      beginDate: currentDate[0] || '',
      endDate: currentDate[1] || '',
      prevProps: props,
      step: 0,
      hoverDate: ''
    };
    return _this;
  }

  RangeRender.getDerivedStateFromProps = function getDerivedStateFromProps(nextProps, prevState) {
    var prevProps = prevState.prevProps;
    var newState = {};

    if ('currentDate' in nextProps && nextProps.currentDate !== prevProps.currentDate || prevProps.visible !== nextProps.visible) {
      newState = (0, _extends2["default"])({}, newState, {
        beginDate: nextProps.currentDate[0] || '',
        endDate: nextProps.currentDate[1] || '',
        prevProps: nextProps,
        step: 0
      });
    }

    return newState;
  };

  var _proto = RangeRender.prototype;

  _proto.getDate = function getDate(date, endOfWeek) {
    var _this$props2 = this.props,
        mode = _this$props2.mode,
        dateFormat = _this$props2.dateFormat,
        validateMinDate = _this$props2.validateMinDate,
        validateMaxDate = _this$props2.validateMaxDate;
    var maxDateTime = validateMaxDate ? (0, _datePickerTools.getTimeTramp)(validateMaxDate) : validateMaxDate;
    var minDateTime = validateMinDate ? (0, _datePickerTools.getTimeTramp)(validateMinDate) : validateMinDate;
    var validTime;

    if (mode === 'week') {
      if (endOfWeek) {
        var dateTime = (0, _datePickerTools.getTimeTramp)((0, _dayjs["default"])(date).endOf('week').startOf('day'));
        validTime = maxDateTime && dateTime > maxDateTime ? maxDateTime : dateTime;
      } else {
        var _dateTime = (0, _datePickerTools.getTimeTramp)((0, _dayjs["default"])(date).startOf('week'));

        validTime = minDateTime && _dateTime > minDateTime ? _dateTime : minDateTime;
      }
    } else {
      validTime = (0, _datePickerTools.getTimeTramp)(date);
    }

    return (0, _dayjs["default"])(validTime).format(dateFormat);
  };

  _proto.render = function render() {
    var containerClassName = this.props.prefixCls + "-range";
    var _this$state2 = this.state,
        beginDate = _this$state2.beginDate,
        endDate = _this$state2.endDate,
        hoverDate = _this$state2.hoverDate;
    var currentDate = [beginDate, endDate];
    return /*#__PURE__*/_react["default"].createElement("div", {
      className: containerClassName
    }, /*#__PURE__*/_react["default"].createElement("div", {
      className: containerClassName + "-item"
    }, /*#__PURE__*/_react["default"].createElement(_monthAndYearPanel["default"], (0, _extends2["default"])({}, this.props, {
      type: "prevMultiple"
    })), /*#__PURE__*/_react["default"].createElement(_rangeDayRender["default"], (0, _extends2["default"])({}, this.props, {
      type: "prevMultiple",
      currentDate: currentDate,
      onChange: (0, _partial2["default"])(this.onPickerDay, 'prevMultiple'),
      onMouseEnter: this.onMouseEnter,
      onMouseLeave: this.onMouseLeave,
      hoverDate: hoverDate
    }))), /*#__PURE__*/_react["default"].createElement("div", {
      className: containerClassName + "-item"
    }, /*#__PURE__*/_react["default"].createElement(_monthAndYearPanel["default"], (0, _extends2["default"])({}, this.props, {
      type: "nextMultiple"
    })), /*#__PURE__*/_react["default"].createElement(_rangeDayRender["default"], (0, _extends2["default"])({}, this.props, {
      type: "nextMultiple",
      currentDate: currentDate,
      onChange: (0, _partial2["default"])(this.onPickerDay, 'nextMultiple'),
      onMouseEnter: this.onMouseEnter,
      onMouseLeave: this.onMouseLeave,
      hoverDate: hoverDate
    }))));
  };

  return RangeRender;
}(_react.PureComponent);

RangeRender.defaultProps = {
  onChange: function onChange() {}
};

var _default = (0, _miniStore.connect)(function (state) {
  return {
    currentDate: state._value,
    endDateShowYear: state.endDateShowYear,
    endDateShowMonth: state.endDateShowMonth,
    showYear: state.showYear,
    showMonth: state.showMonth
  };
})(RangeRender);

exports["default"] = _default;
module.exports = exports.default;