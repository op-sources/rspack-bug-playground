"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

exports.__esModule = true;
exports["default"] = void 0;

var _objectWithoutPropertiesLoose2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutPropertiesLoose"));

var _extends4 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _inheritsLoose2 = _interopRequireDefault(require("@babel/runtime/helpers/inheritsLoose"));

var _isNumber2 = _interopRequireDefault(require("lodash/isNumber"));

var _pick2 = _interopRequireDefault(require("lodash/pick"));

var _react = _interopRequireWildcard(require("react"));

var _dlsIconsReact = require("dls-icons-react");

var _loading = _interopRequireDefault(require("../loading"));

var _table = _interopRequireDefault(require("./common/table"));

var _commonTools = require("../../core/commonTools");

var _pagination = _interopRequireDefault(require("../pagination"));

var _filterDropdown = _interopRequireDefault(require("./common/filterDropdown"));

var _selectionBox = _interopRequireDefault(require("./common/selectionBox"));

var _selectionCheckboxAll = _interopRequireDefault(require("./common/selectionCheckboxAll"));

var _button = _interopRequireDefault(require("../button"));

var _columnTitle = _interopRequireDefault(require("./columnTitle"));

var _context = require("../providerConfig/context");

var _shallowequal = _interopRequireDefault(require("shallowequal"));

var _utils = require("./common/utils");

var _dec, _class, _class2, _temp;

var defaultPageSize = 20;
var selectionColumnWidth = 56;
var selectionColumnWidthwithoutDropdown = 48;
var defaultLocale = {
  filterTitle: '筛选',
  filterConfirm: '应用',
  filterClear: '清空',
  emptyText: '暂无数据',
  selectAll: '全选当页',
  selectInvert: '反选当页',
  loadingText: '加载中...'
};
var defaultPagination = {
  onPageSizeChange: function onPageSizeChange() {},
  onPageNoChange: function onPageNoChange() {}
};

function getColumnKey(column, index) {
  return column.key || column.dataIndex || index;
}

function getFilteredValueColumns(columns, useDefault) {
  if (useDefault === void 0) {
    useDefault = false;
  }

  var filteredValue = (0, _commonTools.flatFilter)(columns || [], function (column) {
    return typeof column.filteredValue !== 'undefined';
  });

  if (useDefault) {
    return (0, _commonTools.flatFilter)(columns || [], function (column) {
      return typeof column.defaultFilteredValue !== 'undefined';
    }).concat(filteredValue);
  }

  return filteredValue;
}

function getFiltersFromColumns(columns, useDefault) {
  if (useDefault === void 0) {
    useDefault = false;
  }

  var filters = {};
  getFilteredValueColumns(columns, useDefault).forEach(function (col) {
    var filteredValue = [];

    if (useDefault) {
      filteredValue = col.filteredValue || col.defaultFilteredValue || [];
    } else {
      filteredValue = col.filteredValue;
    }

    filters[getColumnKey(col)] = filteredValue;
  });
  return filters;
}

function getSortOrderColumns(columns) {
  return (0, _commonTools.flatFilter)(columns || [], function (column) {
    return 'sortOrder' in column;
  });
}

function getSortStateFromColumns(columns) {
  // return first column which sortOrder is not falsy
  var sortedColumn = getSortOrderColumns(columns).filter(function (col) {
    return col.sortOrder;
  })[0];

  if (sortedColumn) {
    return {
      sortColumn: sortedColumn,
      sortOrder: sortedColumn.sortOrder
    };
  }

  return {
    sortColumn: null,
    sortOrder: null
  };
}

var emptyObject = {};
;
var Table = (_dec = (0, _context.withConfigConsumer)('table'), _dec(_class = (_temp = _class2 = /*#__PURE__*/function (_PureComponent) {
  (0, _inheritsLoose2["default"])(Table, _PureComponent);

  function Table(_props) {
    var _this;

    _this = _PureComponent.call(this, _props) || this;
    _this.columns = void 0;
    _this.store = void 0;
    _this.root = void 0;

    _this.getCheckboxPropsByItem = function (item, index) {
      var rowSelection = _this.props.rowSelection;

      if (!rowSelection.getCheckboxProps) {
        return {};
      }

      var props = rowSelection.getCheckboxProps(item);

      if (props.visible === false) {
        props.disabled = true;
      }

      return props;
    };

    _this.getRecordKey = function (record, index) {
      var rowKey = _this.props.rowKey;
      var recordKey = typeof rowKey === 'function' ? rowKey(record, index) : record[rowKey];
      return recordKey === undefined ? index : recordKey;
    };

    _this.getPopupContainer = function () {
      return _this.root.current;
    };

    _this.getScrollContainer = function () {
      return _this.refNodes.bodyTable;
    };

    _this.toggleSortOrder = function (column) {
      var isSortColumn = _this.isSortColumn(column);

      var _this$state = _this.state,
          sortColumn = _this$state.sortColumn,
          sortOrder = _this$state.sortOrder;
      var isAscend = isSortColumn && sortOrder === 'ascend';
      var isDescend = isSortColumn && sortOrder === 'descend';
      var initialSortType = column.initialSortType || 'descend';
      var order = initialSortType;

      if (isAscend) {
        order = 'descend';
      } else if (isDescend) {
        order = 'ascend';
      } // 只同时允许一列进行排序，否则会导致排序顺序的逻辑问题


      if (!isSortColumn) {
        // 当前列未排序
        sortOrder = order;
        sortColumn = column;
      } else if ((isAscend || isDescend) && order === initialSortType) {
        // 当前列已排序
        // 切换为未排序状态
        sortOrder = '';
        sortColumn = null;
      } else {
        // 切换为排序状态
        sortOrder = order;
      }

      var newState = {
        sortOrder: sortOrder,
        sortColumn: sortColumn
      }; // Controlled

      if (getSortOrderColumns(_this.state.columns).length === 0) {
        _this.setState(newState);
      }

      var onSortClick = _this.props.onSortClick;

      if (onSortClick) {
        onSortClick(newState);
      }
    };

    _this.handleFilter = function (columnKey, nextFilters) {
      var _extends2;

      var filters = (0, _extends4["default"])({}, _this.state.filters, (_extends2 = {}, _extends2[columnKey] = nextFilters, _extends2)); // Remove filters not in current columns

      var currentColumnKeys = [];
      (0, _commonTools.treeMap)(_this.state.columns, function (c) {
        if (!c.children) {
          currentColumnKeys.push(getColumnKey(c));
        }
      });
      Object.keys(filters).forEach(function (columnKey) {
        if (currentColumnKeys.indexOf(columnKey) < 0) {
          delete filters[columnKey];
        }
      });
      var newState = {
        // pagination,
        filters: {}
      };
      var filtersToSetState = (0, _extends4["default"])({}, filters); // Remove filters which is controlled

      getFilteredValueColumns(_this.state.columns).forEach(function (col) {
        var columnKey = getColumnKey(col);

        if (columnKey) {
          delete filtersToSetState[columnKey];
        }
      });

      if (Object.keys(filtersToSetState).length > 0) {
        newState.filters = filtersToSetState;
      }

      _this.setState(newState, function () {
        _this.store.setState({
          selectionDirty: false
        });

        var onFilterChange = _this.props.onFilterChange;

        if (onFilterChange) {
          onFilterChange(filters);
        }
      });
    };

    _this.handleSelect = function (record, rowIndex, e) {
      var checked = e.target.checked;
      var defaultSelection = _this.store.getState().selectionDirty ? [] : _this.getDefaultSelection();

      var selectedRowKeys = _this.store.getState().selectedRowKeys.concat(defaultSelection);

      var key = _this.getRecordKey(record, rowIndex);

      if (checked) {
        selectedRowKeys.push(_this.getRecordKey(record, rowIndex));
      } else {
        selectedRowKeys = selectedRowKeys.filter(function (i) {
          return key !== i;
        });
      }

      _this.store.setState({
        selectionDirty: true
      });

      _this.setSelectedRowKeys(selectedRowKeys, {
        selectWay: 'onSelect',
        record: record,
        checked: checked
      });
    };

    _this.handleRadioSelect = function (record, rowIndex, e) {
      var checked = e.target.checked;
      var defaultSelection = _this.store.getState().selectionDirty ? [] : _this.getDefaultSelection();

      var selectedRowKeys = _this.store.getState().selectedRowKeys.concat(defaultSelection);

      var key = _this.getRecordKey(record, rowIndex);

      selectedRowKeys = [key];

      _this.store.setState({
        selectionDirty: true
      });

      _this.setSelectedRowKeys(selectedRowKeys, {
        selectWay: 'onSelect',
        record: record,
        checked: checked
      });
    };

    _this.handleSelectRow = function (selectionKey, index, onSelectFunc) {
      var data = _this.getFlatCurrentPageData();

      var defaultSelection = _this.store.getState().selectionDirty ? [] : _this.getDefaultSelection();

      var selectedRowKeys = _this.store.getState().selectedRowKeys.concat(defaultSelection);

      var changeableRowKeys = data.filter(function (item, i) {
        return !_this.getCheckboxPropsByItem(item, i).disabled;
      }).map(function (item, i) {
        return _this.getRecordKey(item, i);
      });
      var changeRowKeys = [];
      var selectWay = '';
      var checked; // handle default selection

      switch (selectionKey) {
        case 'all':
          changeableRowKeys.forEach(function (key) {
            if (selectedRowKeys.indexOf(key) < 0) {
              selectedRowKeys.push(key);
              changeRowKeys.push(key);
            }
          });
          selectWay = 'onSelectAll';
          checked = true;
          break;

        case 'removeAll':
          changeableRowKeys.forEach(function (key) {
            if (selectedRowKeys.indexOf(key) >= 0) {
              selectedRowKeys.splice(selectedRowKeys.indexOf(key), 1);
              changeRowKeys.push(key);
            }
          });
          selectWay = 'onSelectAll';
          checked = false;
          break;

        case 'invert':
          changeableRowKeys.forEach(function (key) {
            if (selectedRowKeys.indexOf(key) < 0) {
              selectedRowKeys.push(key);
            } else {
              selectedRowKeys.splice(selectedRowKeys.indexOf(key), 1);
            }

            changeRowKeys.push(key);
            selectWay = 'onSelectInvert';
          });
          break;

        default:
          break;
      }

      _this.store.setState({
        selectionDirty: true
      }); // when select custom selection, callback selections[n].onSelect


      var rowSelection = _this.props.rowSelection;
      var customSelectionStartIndex = 2;

      if (rowSelection && rowSelection.hideDefaultSelections) {
        customSelectionStartIndex = 0;
      }

      if (index >= customSelectionStartIndex && typeof onSelectFunc === 'function') {
        return onSelectFunc(changeableRowKeys);
      }

      _this.setSelectedRowKeys(selectedRowKeys, {
        selectWay: selectWay,
        checked: checked,
        changeRowKeys: changeRowKeys
      });
    };

    _this.handlePageChange = function (e) {
      var props = _this.props;
      var pageNo = +e.target.value;
      var pagination = (0, _extends4["default"])({}, _this.state.pagination);

      if (pageNo) {
        pagination.pageNo = pageNo;
      } else {
        pagination.pageNo = pagination.pageNo || 1;
      }

      var newPageNo = pagination.pageNo;
      pagination.onPageNoChange({
        // @ts-ignore
        pageNo: newPageNo,
        pageSize: pagination.pageSize,
        target: {
          value: newPageNo
        }
      });
      var newState = {
        pagination: pagination
      }; // Controlled current prop will not respond user interaction

      if (props.pagination && typeof props.pagination === 'object' && 'pageNo' in props.pagination) {
        newState.pagination = (0, _extends4["default"])({}, pagination, {
          pageNo: _this.state.pagination.pageNo
        });
      }

      _this.setState(newState);

      _this.store.setState({
        selectionDirty: false
      });
    };

    _this.handleShowSizeChange = function (e) {
      var pagination = _this.state.pagination;
      var pageSize = +e.target.value;

      var total = pagination.total || _this.getLocalData().length;

      var pageNo = _this.getMaxCurrent(total);

      pagination.onPageSizeChange({
        // @ts-ignore
        pageNo: pageNo,
        pageSize: pageSize,
        // 应该暴露的e.target.value, 但是因为之前已经这样暴露了，所以封装了一下
        target: {
          value: pageSize
        }
      });
      var nextPagination = (0, _extends4["default"])({}, pagination, {
        pageSize: pageSize,
        pageNo: pageNo
      });

      _this.setState({
        pagination: nextPagination
      });
    };

    _this.renderColumnTitle = function (column) {
      var _classnames3, _classnames4;

      var _this$props = _this.props,
          prefixCls = _this$props.prefixCls,
          dropdownPrefixCls = _this$props.dropdownPrefixCls,
          autoHideOperation = _this$props.autoHideOperation,
          size = _this$props.size,
          lightPrefix = _this$props.lightPrefix;
      var _this$state2 = _this.state,
          sortOrder = _this$state2.sortOrder,
          filters = _this$state2.filters;

      var locale = _this.getLocale();

      var key = getColumnKey(column);
      var filterDropdown;
      var sortButton;
      var filtered = false;

      if ((column.filters && column.filters.length > 0 || column.filterDropdown) && column.filterIconVisible !== false) {
        var colFilters = _this.state.filters[key] || [];
        filtered = colFilters.length > 0;
        filterDropdown = /*#__PURE__*/_react["default"].createElement(_filterDropdown["default"], (0, _extends4["default"])({
          filterTitleText: locale.filterTitle,
          filterConfirmText: locale.filterConfirm,
          filterClearText: locale.filterClear,
          size: size,
          selectedKeys: colFilters,
          confirmFilter: _this.handleFilter,
          prefixCls: prefixCls + "-filter",
          dropdownPrefixCls: dropdownPrefixCls || lightPrefix + "-dropdown",
          getPopupContainer: _this.getPopupContainer,
          getScrollContainer: _this.getScrollContainer,
          columnKey: key
        }, (0, _pick2["default"])(column, ['filterMultiple', 'filterProps', 'filterDropdown', 'filters', 'filterDropdownVisible', 'onFilterDropdownVisibleChange', 'filterIcon', 'filterWithoutConfirm', 'filteredValue', 'defaultFilteredValue', 'onFilter', 'filterDropdownTitle', 'filterDropdownProps'])));
      }

      var customSortNode = column.customSortNode;
      var sorted = false;

      if (column.sorter || customSortNode) {
        var _classnames, _classnames2;

        var isSortColumn = _this.isSortColumn(column);

        sorted = isSortColumn && !!sortOrder;
        var isAscend = isSortColumn && sortOrder === 'ascend';
        var isDescend = isSortColumn && sortOrder === 'descend';

        var clickSorter = function clickSorter() {
          return _this.toggleSortOrder(column);
        }; // 支持自定义排序节点， 如果没传入就用默认的


        sortButton = customSortNode || /*#__PURE__*/_react["default"].createElement(_button["default"], {
          size: size,
          type: "text",
          onClick: clickSorter,
          className: prefixCls + "-sort-icon-set"
        }, /*#__PURE__*/_react["default"].createElement(_dlsIconsReact.IconSortAsc, {
          className: (0, _commonTools.classnames)(prefixCls + "-sorted-up-icon", (_classnames = {}, _classnames[prefixCls + "-sorted-up-icon-active"] = isAscend, _classnames))
        }), /*#__PURE__*/_react["default"].createElement(_dlsIconsReact.IconSortDesc, {
          className: (0, _commonTools.classnames)(prefixCls + "-sorted-down-icon", (_classnames2 = {}, _classnames2[prefixCls + "-sorted-up-icon-active"] = isDescend, _classnames2))
        }));
      }

      var title = typeof column.title === 'function' ? column.title({
        sortOrder: sortOrder,
        filters: filters
      }) : column.title;
      var autohide = autoHideOperation === 'all';
      var autohideFilter = (autohide || autoHideOperation === 'filter') && !filtered;
      var autohideSort = (autohide || autoHideOperation === 'sort') && !sorted;
      return /*#__PURE__*/_react["default"].createElement("div", {
        className: prefixCls + "-column-head"
      }, /*#__PURE__*/_react["default"].createElement("div", {
        className: prefixCls + "-column-title"
      }, /*#__PURE__*/_react["default"].createElement(_columnTitle["default"], {
        title: title,
        desc: column.desc
      })), sortButton || filterDropdown || column.customOperate && column.customOperate.length ? /*#__PURE__*/_react["default"].createElement("div", {
        className: prefixCls + "-column-operate"
      }, sortButton ? /*#__PURE__*/_react["default"].createElement("span", {
        className: (0, _commonTools.classnames)(prefixCls + "-column-operate-item", prefixCls + "-column-operate-sort-item", (_classnames3 = {}, _classnames3[prefixCls + "-column-operate-item-autohide"] = autohideSort, _classnames3))
      }, sortButton) : null, filterDropdown ? /*#__PURE__*/_react["default"].createElement("span", {
        className: (0, _commonTools.classnames)(prefixCls + "-column-operate-item", prefixCls + "-column-operate-filter-item", (_classnames4 = {}, _classnames4[prefixCls + "-column-operate-item-autohide"] = autohideFilter, _classnames4))
      }, filterDropdown) : null, column.customOperate && column.customOperate.map(function (itemNode, key) {
        return itemNode ? /*#__PURE__*/_react["default"].createElement("span", {
          className: prefixCls + "-column-operate-item",
          key: key
        }, itemNode) : null;
      })) : null);
    };

    _this.renderSelectionBox = function (_, record, index) {
      var _this$props$rowSelect = _this.props.rowSelection,
          rowSelection = _this$props$rowSelect === void 0 ? {} : _this$props$rowSelect;

      var rowIndex = _this.getRecordKey(record, index); // 从 1 开始


      var props = _this.getCheckboxPropsByItem(record, index);

      if (props.visible === false) {
        return null;
      }

      var type = rowSelection.type;

      var handleChange = function handleChange(e) {
        if (type === 'radio') {
          _this.handleRadioSelect(record, index, e);
        } else {
          _this.handleSelect(record, index, e);
        }
      };

      var checkboxNode = /*#__PURE__*/_react["default"].createElement("span", {
        onClick: _commonTools.stopPropagation
      }, /*#__PURE__*/_react["default"].createElement(_selectionBox["default"], {
        type: type,
        store: _this.store,
        rowIndex: rowIndex,
        disabled: props.disabled,
        indeterminate: props.indeterminate,
        onChange: handleChange,
        defaultSelection: _this.getDefaultSelection()
      }));

      if (rowSelection.renderCheckbox) {
        return rowSelection.renderCheckbox(record, checkboxNode);
      }

      return checkboxNode;
    };

    _this.tableRef = function (ref) {
      _this.tableContainerRef = ref;
    };

    _this.refNodes = {};
    _this.tableContainerRef = void 0;

    _this.saveRef = function (name, node) {
      _this.refNodes[name] = node;
    };

    _this.updateColumnWidths = function (columns) {
      if (_this.tableContainerRef && typeof _this.tableContainerRef.updateColumnWidths === 'function') {
        _this.tableContainerRef.updateColumnWidths(columns);
      }
    };

    var _columns = _props.columns;
    _this.store = (0, _commonTools.createStore)({
      selectedRowKeys: (_props.rowSelection || {}).selectedRowKeys || [],
      selectionDirty: false
    });
    _this.state = (0, _extends4["default"])({
      columns: _columns
    }, getSortStateFromColumns(_columns), {
      // 减少状态
      filters: getFiltersFromColumns(_columns, true),
      pagination: _this.getDefaultPagination(_props),
      store: _this.store
    });
    _this.root = /*#__PURE__*/(0, _react.createRef)();
    return _this;
  }

  Table.getDerivedStateFromProps = function getDerivedStateFromProps(props, state) {
    var columns = props.columns,
        pagination = props.pagination,
        rowSelection = props.rowSelection,
        dataSource = props.dataSource;
    var newState = {
      columns: columns
    };

    if ('pagination' in props && pagination !== state.pagination) {
      if (pagination === false) {
        newState.pagination = emptyObject;
      } else {
        var newPagination = (0, _extends4["default"])({}, defaultPagination, state.pagination);

        if (typeof pagination !== 'boolean') {
          Object.assign(newPagination, pagination);
        }

        newPagination.pageNo = newPagination.pageNo || 1;
        newPagination.pageSize = newPagination.pageSize || defaultPageSize;
        newState.pagination = newPagination;
      }
    }

    if (rowSelection && 'selectedRowKeys' in rowSelection) {
      state.store.setState({
        selectedRowKeys: rowSelection.selectedRowKeys || []
      });
    }

    if ('dataSource' in props && dataSource !== state.dataSource) {
      state.store.setState({
        selectionDirty: false
      });
    }

    if (getSortOrderColumns(columns).length > 0) {
      var _getSortStateFromColu = getSortStateFromColumns(columns),
          sortColumn = _getSortStateFromColu.sortColumn,
          sortOrder = _getSortStateFromColu.sortOrder;

      if (sortColumn !== state.sortColumn || sortOrder !== state.sortOrder) {
        newState.sortColumn = sortColumn;
        newState.sortOrder = sortOrder;
      }
    }

    var filteredValueColumns = getFilteredValueColumns(columns);

    if (filteredValueColumns.length > 0) {
      var filtersFromColumns = getFiltersFromColumns(columns);
      var newFilters = (0, _extends4["default"])({}, state.filters);
      Object.keys(filtersFromColumns).forEach(function (key) {
        newFilters[key] = filtersFromColumns[key];
      });

      if (!(0, _shallowequal["default"])(newFilters, state.filters)) {
        newState.filters = newFilters;
      }
    }

    return newState;
  };

  var _proto = Table.prototype;

  _proto.getLocale = function getLocale() {
    return (0, _extends4["default"])({}, defaultLocale, this.props.locale);
  };

  _proto.getDefaultPagination = function getDefaultPagination(props) {
    var pagination = props.pagination || {};
    return this.hasPagination(props) ? (0, _extends4["default"])({}, defaultPagination, pagination, {
      pageNo: pagination.pageNo || 1,
      pageSize: pagination.pageSize || defaultPageSize
    }) : {};
  };

  _proto.getDefaultSelection = function getDefaultSelection() {
    var _this2 = this;

    var rowSelection = this.props.rowSelection;

    if (!rowSelection.getCheckboxProps) {
      return [];
    }

    return this.getFlatData().filter(function (item, rowIndex) {
      return _this2.getCheckboxPropsByItem(item, rowIndex).defaultChecked;
    }).map(function (record, rowIndex) {
      return _this2.getRecordKey(record, rowIndex);
    });
  };

  _proto.setSelectedRowKeys = function setSelectedRowKeys(selectedRowKeys, _ref) {
    var _this3 = this;

    var selectWay = _ref.selectWay,
        record = _ref.record,
        checked = _ref.checked,
        changeRowKeys = _ref.changeRowKeys;
    var rowSelection = this.props.rowSelection;

    if (rowSelection && !('selectedRowKeys' in rowSelection)) {
      this.store.setState({
        selectedRowKeys: selectedRowKeys
      });
    }

    var data = this.getFlatData();

    if (!rowSelection.onChange && !rowSelection[selectWay]) {
      return;
    }

    var selectedRows = data.filter(function (row, i) {
      return selectedRowKeys.indexOf(_this3.getRecordKey(row, i)) >= 0;
    });

    if (rowSelection.onChange) {
      rowSelection.onChange(selectedRowKeys, selectedRows);
    }

    if (selectWay === 'onSelect' && rowSelection.onSelect) {
      rowSelection.onSelect(record, checked, selectedRows);
    } else if (selectWay === 'onSelectAll' && rowSelection.onSelectAll) {
      var changeRows = data.filter(function (row, i) {
        return changeRowKeys.indexOf(_this3.getRecordKey(row, i)) >= 0;
      });
      rowSelection.onSelectAll(checked, selectedRows, changeRows);
    } else if (selectWay === 'onSelectInvert' && rowSelection.onSelectInvert) {
      rowSelection.onSelectInvert(selectedRowKeys);
    }
  };

  _proto.getLocalData = function getLocalData() {
    var _this4 = this;

    var state = this.state;
    var dataSource = this.props.dataSource;
    var data = dataSource || []; // 优化本地排序

    data = data.slice(0);
    var sorterFn = this.getSorterFn();

    if (sorterFn) {
      data = this.recursiveSort(data, sorterFn);
    } // 筛选


    if (state.filters) {
      Object.keys(state.filters).forEach(function (columnKey) {
        var col = _this4.findColumn(columnKey);

        if (!col) {
          return;
        }

        var values = state.filters[columnKey] || [];

        if (values.length === 0) {
          return;
        }

        var onFilter = col.onFilter;
        data = onFilter ? data.filter(function (record) {
          return values.some(function (v) {
            return onFilter(v, record);
          });
        }) : data;
      });
    }

    return data;
  };

  _proto.getSorterFn = function getSorterFn() {
    var _this$state3 = this.state,
        sortOrder = _this$state3.sortOrder,
        sortColumn = _this$state3.sortColumn;
    var sorter = sortColumn == null ? void 0 : sortColumn.sorter;

    if (!sortOrder || !sortColumn || typeof sorter !== 'function') {
      return;
    }

    return function (a, b) {
      var result = sorter(a, b);

      if (result !== 0) {
        return sortOrder === 'descend' ? -result : result;
      }

      return 0;
    };
  };

  _proto.getCurrentPageData = function getCurrentPageData() {
    var data = this.getLocalData();
    var pageNo;
    var pageSize;
    var state = this.state; // 如果没有分页的话，默认全部展示

    if (!this.hasPagination()) {
      pageSize = Number.MAX_VALUE;
      pageNo = 1;
    } else {
      pageSize = state.pagination.pageSize;
      pageNo = this.getMaxCurrent(state.pagination.total || data.length);
    } // 分页
    // ---
    // 当数据量少于等于每页数量时，直接设置数据
    // 否则进行读取分页数据


    if (data.length > pageSize || pageSize === Number.MAX_VALUE) {
      data = data.filter(function (_, i) {
        return i >= (pageNo - 1) * pageSize && i < pageNo * pageSize;
      });
    }

    return data;
  };

  _proto.getFlatCurrentPageData = function getFlatCurrentPageData() {
    return (0, _commonTools.flatArray)(this.getCurrentPageData());
  };

  _proto.getMaxCurrent = function getMaxCurrent(total) {
    var _this$state$paginatio = this.state.pagination,
        pageNo = _this$state$paginatio.pageNo,
        pageSize = _this$state$paginatio.pageSize;

    if ((pageNo - 1) * pageSize >= total) {
      return Math.floor((total - 1) / pageSize) + 1;
    }

    return pageNo;
  };

  _proto.getFlatData = function getFlatData() {
    return (0, _commonTools.flatArray)(this.getLocalData());
  };

  _proto.isFiltersChanged = function isFiltersChanged(filters) {
    var _this5 = this;

    var filtersChanged = false;

    if (Object.keys(filters).length !== Object.keys(this.state.filters).length) {
      filtersChanged = true;
    } else {
      Object.keys(filters).forEach(function (columnKey) {
        if (filters[columnKey] !== _this5.state.filters[columnKey]) {
          filtersChanged = true;
        }
      });
    }

    return filtersChanged;
  };

  _proto.hasPagination = function hasPagination(props) {
    return (props || this.props).pagination !== false;
  };

  _proto.isSortColumn = function isSortColumn(column) {
    var sortColumn = this.state.sortColumn;

    if (!column || !sortColumn) {
      return false;
    }

    return getColumnKey(sortColumn) === getColumnKey(column);
  };

  _proto.findColumn = function findColumn(myKey) {
    var column;
    (0, _commonTools.treeMap)(this.state.columns, function (c) {
      if (getColumnKey(c) === myKey) {
        column = c;
      }
    });
    return column;
  };

  _proto.recursiveSort = function recursiveSort(data, sorterFn) {
    var _this6 = this;

    // const {childrenColumnName = 'children'} = this.props;
    var childrenColumnName = 'children';
    return data.sort(sorterFn).map(function (item) {
      var _extends3;

      return item[childrenColumnName] ? (0, _extends4["default"])({}, item, (_extends3 = {}, _extends3[childrenColumnName] = _this6.recursiveSort(item[childrenColumnName], sorterFn), _extends3)) : item;
    });
  };

  _proto.renderPagination = function renderPagination() {
    // 强制不需要分页
    if (!this.hasPagination()) {
      return null;
    }

    var size = this.props.size || 'medium';
    var pagination = this.state.pagination;

    if (pagination.size) {
      size = pagination.size;
    }

    var total = pagination.total || this.getLocalData().length;
    return total > 0 ? /*#__PURE__*/_react["default"].createElement(_pagination["default"], (0, _extends4["default"])({
      key: "pagination",
      theme: this.props.theme
    }, pagination, {
      className: (0, _commonTools.classnames)(pagination.className, this.props.prefixCls + "-pagination"),
      onPageNoChange: this.handlePageChange,
      total: total,
      size: size,
      pageNo: this.getMaxCurrent(total),
      onPageSizeChange: this.handleShowSizeChange
    })) : null;
  };

  _proto.normalizeColumns = function normalizeColumns(columns) {
    var _this7 = this;

    return (0, _commonTools.treeMap)(columns, function (originColumn, i, parent) {
      var column = (0, _extends4["default"])({}, originColumn, {
        renderTitle: _this7.renderColumnTitle
      });

      if ((0, _isNumber2["default"])(column.minWidth) && (0, _isNumber2["default"])(column.width) && column.minWidth > column.width) {
        column.minWidth = column.width;
      }

      if (column.children && column.children.length === 0) {
        column.children = undefined;
      }

      column.key = getColumnKey(column, i);

      var isSortColumn = _this7.isSortColumn(column);

      if (isSortColumn) {
        column.sortOrderFlag = _this7.state.sortOrder;
      }

      if (column.sorter || column.customSortNode) {
        column.toggleSortOrder = _this7.toggleSortOrder;
      }

      column.filtersFlag = _this7.state.filters[column.key];

      if (parent) {
        column.fixed = parent.fixed;
      }

      return column;
    });
  };

  _proto.renderRowSelection = function renderRowSelection() {
    var _this8 = this;

    var _this$props2 = this.props,
        prefixCls = _this$props2.prefixCls,
        rowSelection = _this$props2.rowSelection,
        expandIconAsCell = _this$props2.expandIconAsCell;
    var columns = this.state.columns.concat();

    if (rowSelection) {
      var _classnames5;

      var data = this.getFlatCurrentPageData().filter(function (item, index) {
        if (rowSelection.getCheckboxProps) {
          return !_this8.getCheckboxPropsByItem(item, index).disabled;
        }

        return true;
      });
      var selectionColumnClass = (0, _commonTools.classnames)(prefixCls + "-selection-column", (_classnames5 = {}, _classnames5[prefixCls + "-selection-column-custom"] = rowSelection.selections, _classnames5));
      var selectionColumn = {
        key: 'selection-column',
        fixedWidth: true,
        // type变化更新
        dataIndex: "__ONE__" + rowSelection.type,
        // 当有getCheckboxProps时(无法感知变化)，强制render
        render: rowSelection.getCheckboxProps ? function (value, record, index) {
          return _this8.renderSelectionBox(value, record, index);
        } : this.renderSelectionBox,
        className: selectionColumnClass
      };
      var locale = this.getLocale();

      if (rowSelection.type !== 'radio') {
        var checkboxAllDisabled = data.every(function (item, index) {
          return _this8.getCheckboxPropsByItem(item, index).disabled;
        });
        selectionColumn.title = /*#__PURE__*/_react["default"].createElement(_selectionCheckboxAll["default"], {
          store: this.store,
          selectAllText: locale.selectAll,
          selectInvertText: locale.selectInvert,
          data: data,
          getCheckboxPropsByItem: this.getCheckboxPropsByItem,
          getRecordKey: this.getRecordKey,
          disabled: checkboxAllDisabled,
          prefixCls: prefixCls,
          onSelect: this.handleSelectRow,
          selections: rowSelection.selections,
          hideDefaultSelections: rowSelection.hideDefaultSelections,
          getPopupContainer: this.getPopupContainer
        });
      }

      if (rowSelection.renderCheckbox) {
        selectionColumn.title = rowSelection.renderCheckbox(null, selectionColumn.title);
      }

      if (rowSelection.fixed || columns.some(function (column) {
        return column.fixed === 'left' || column.fixed === true;
      })) {
        selectionColumn.fixed = 'left';
      }

      var hasSelections = false;
      var selections = rowSelection.selections;

      if (selections) {
        if (!rowSelection.hideDefaultSelections || Array.isArray(rowSelection.selections) && rowSelection.selections.length) {
          hasSelections = true;
        }
      }

      selectionColumn.width = hasSelections ? selectionColumnWidth : selectionColumnWidthwithoutDropdown;

      if (columns[0] && columns[0].key === 'selection-column') {
        columns[0] = selectionColumn;
      } else {
        columns.unshift(selectionColumn);
      }
    }

    return columns;
  };

  _proto.render = function render() {
    var _classnames6, _classnames7;

    var _this$props3 = this.props,
        style = _this$props3.style,
        className = _this$props3.className,
        prefixCls = _this$props3.prefixCls,
        showHeader = _this$props3.showHeader,
        loading = _this$props3.loading,
        size = _this$props3.size,
        type = _this$props3.type,
        onDragStart = _this$props3.onDragStart,
        onDraging = _this$props3.onDraging,
        onDragEnd = _this$props3.onDragEnd,
        useStickyFixTop = _this$props3.useStickyFixTop,
        pagination = _this$props3.pagination,
        cellLines = _this$props3.cellLines,
        headCellLines = _this$props3.headCellLines,
        loadingOption = _this$props3.loadingOption,
        bordered = _this$props3.bordered,
        headBordered = _this$props3.headBordered,
        variant = _this$props3.variant,
        lightPrefix = _this$props3.lightPrefix,
        restProps = (0, _objectWithoutPropertiesLoose2["default"])(_this$props3, ["style", "className", "prefixCls", "showHeader", "loading", "size", "type", "onDragStart", "onDraging", "onDragEnd", "useStickyFixTop", "pagination", "cellLines", "headCellLines", "loadingOption", "bordered", "headBordered", "variant", "lightPrefix"]);
    var data = this.getCurrentPageData();
    var columns = this.renderRowSelection();
    var expandIconAsCell = this.props.expandedRowRender && this.props.expandIconAsCell !== false;

    if (expandIconAsCell) {
      var fixedLeft = columns.some(function (column) {
        return column.fixed === 'left' || column.fixed === true;
      });
      columns.unshift({
        key: 'one-table-expand-icon-cell',
        width: _utils.expandIconWidth,
        fixedWidth: true,
        fixed: fixedLeft ? 'left' : null
      });
    }

    var locale = this.getLocale();
    var classString = (0, _commonTools.classnames)(prefixCls + "-" + size, (_classnames6 = {}, _classnames6[prefixCls + "-bordered"] = bordered, _classnames6[prefixCls + "-head-bordered"] = headBordered, _classnames6[prefixCls + "-empty"] = !data.length, _classnames6[prefixCls + "-without-column-header"] = !showHeader, _classnames6[prefixCls + "-with-line-clamp"] = cellLines, _classnames6[prefixCls + "-with-head-line-clamp"] = headCellLines, _classnames6[prefixCls + "-variant-" + variant] = variant, _classnames6[prefixCls + "-loading-backdrop"] = (!loadingOption || loadingOption.type === 'bar' && loadingOption.modal !== false) && loading, _classnames6));
    columns = this.normalizeColumns(columns);
    var expandIconColumnIndex = columns[0] && columns[0].key === 'selection-column' ? 1 : 0;

    if ('expandIconColumnIndex' in restProps) {
      expandIconColumnIndex = restProps.expandIconColumnIndex;
    }

    var table = /*#__PURE__*/_react["default"].createElement(_table["default"], (0, _extends4["default"])({
      ref: this.tableRef,
      saveRef: this.saveRef,
      key: "table"
    }, restProps, {
      prefixCls: prefixCls,
      data: data,
      columns: columns,
      showHeader: showHeader,
      className: classString,
      expandIconColumnIndex: expandIconColumnIndex,
      expandIconAsCell: expandIconAsCell,
      emptyText: locale.emptyText,
      onDragStart: onDragStart,
      onDraging: onDraging,
      onDragEnd: onDragEnd,
      useStickyFixTop: useStickyFixTop,
      loading: loading,
      loadingOption: loadingOption,
      size: size,
      loadingText: locale.loadingText
    }));

    var paginationPatchClass = this.hasPagination() && data && data.length !== 0 ? prefixCls + "-with-pagination" : prefixCls + "-without-pagination";
    var hasColumns = columns && columns.length;
    var clamps = {};

    if (cellLines) {
      clamps['--one-table-line-clamp'] = cellLines;
    }

    if (headCellLines) {
      clamps['--one-table-head-line-clamp'] = headCellLines;
    }

    return /*#__PURE__*/_react["default"].createElement("div", {
      className: (0, _commonTools.classnames)(prefixCls + "-wrapper", className, (_classnames7 = {}, _classnames7[prefixCls + "-wrapper-no-header"] = !showHeader, _classnames7[prefixCls + "-wrapper-no-columns"] = !hasColumns, _classnames7), prefixCls + "-wrapper-" + type),
      style: Object.keys(clamps).length ? (0, _extends4["default"])({}, clamps, style) : style,
      ref: this.root
    }, /*#__PURE__*/_react["default"].createElement("div", {
      className: paginationPatchClass
    }, hasColumns ? table : loading ? /*#__PURE__*/_react["default"].createElement(_loading["default"], {
      className: prefixCls + "-loading-icon",
      tip: locale.loadingText,
      size: size
    }, /*#__PURE__*/_react["default"].createElement("div", {
      className: prefixCls + "-no-columns"
    })) : /*#__PURE__*/_react["default"].createElement("div", {
      className: prefixCls + "-no-columns"
    }), this.renderPagination()));
  };

  return Table;
}(_react.PureComponent), _class2.defaultProps = {
  dataSource: [],
  prefixCls: 'one-table',
  rowSelection: null,
  className: '',
  loading: false,
  bordered: false,
  locale: {},
  rowKey: 'key',
  showHeader: true,
  expandIconClassName: '',
  onClickExpandIcon: function onClickExpandIcon() {},
  size: 'medium',
  type: 'normal',
  onDragStart: function onDragStart() {},
  onDraging: function onDraging() {},
  onDragEnd: function onDragEnd() {},
  headBordered: false,
  updateWidthChange: true,
  variant: 'normal'
}, _temp)) || _class);
var _default = Table;
exports["default"] = _default;
module.exports = exports.default;