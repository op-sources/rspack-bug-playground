"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

exports.__esModule = true;
exports["default"] = void 0;

var _objectWithoutPropertiesLoose2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutPropertiesLoose"));

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _assertThisInitialized2 = _interopRequireDefault(require("@babel/runtime/helpers/assertThisInitialized"));

var _inheritsLoose2 = _interopRequireDefault(require("@babel/runtime/helpers/inheritsLoose"));

var _react = _interopRequireWildcard(require("react"));

var _rcTrigger = _interopRequireDefault(require("rc-trigger"));

var _reactDom = _interopRequireDefault(require("react-dom"));

var _placements = _interopRequireDefault(require("./placements"));

var _button = _interopRequireDefault(require("../../button"));

var _classnames = _interopRequireDefault(require("classnames"));

var _omit = _interopRequireDefault(require("omit.js"));

var Dropdown = /*#__PURE__*/function (_PureComponent) {
  (0, _inheritsLoose2["default"])(Dropdown, _PureComponent);

  function Dropdown(props) {
    var _this;

    _this = _PureComponent.call(this, props) || this;
    _this.trigger = void 0;

    _this.saveTrigger = function (node) {
      _this.trigger = node;
    };

    _this.getPopupDomNode = function () {
      return _this.trigger.getPopupDomNode();
    };

    _this.afterVisibleChange = function (visible) {
      if (visible && _this.getMinOverlayWidthMatchTrigger()) {
        var overlayNode = _this.getPopupDomNode();

        var rootNode = _reactDom["default"].findDOMNode((0, _assertThisInitialized2["default"])(_this));

        if (rootNode && overlayNode && rootNode.offsetWidth > overlayNode.offsetWidth) {
          overlayNode.style.minWidth = _this.props.dropdownIndependentWidth ? 'unset' : rootNode.offsetWidth + "px";

          if (_this.trigger && _this.trigger._component && _this.trigger._component.alignInstance) {
            _this.trigger._component.alignInstance.forceAlign();
          }
        }
      }
    };

    _this.onClick = function (e) {
      // do no call onVisibleChange, if you need click to hide, use onClick and control visible
      if (!('visible' in _this.props)) {
        _this.setState({
          visible: false
        });
      }

      var overlay = _this.props.overlay;

      if (! /*#__PURE__*/(0, _react.isValidElement)(overlay)) {
        return;
      }

      var overlayProps = overlay.props;

      if (overlayProps.onClick) {
        overlayProps.onClick(e);
      }
    };

    _this.getMenuElement = function () {
      var _this$props = _this.props,
          overlay = _this$props.overlay,
          prefixCls = _this$props.prefixCls;

      if (! /*#__PURE__*/(0, _react.isValidElement)(overlay)) {
        return overlay;
      }

      var extraOverlayProps = {
        prefixCls: prefixCls + "-menu",
        onClick: _this.onClick
      };

      if (typeof overlay.type === 'string') {
        delete extraOverlayProps.prefixCls;
      }

      return /*#__PURE__*/_react["default"].cloneElement(overlay, extraOverlayProps);
    };

    _this.handleOnOk = function (e) {
      _this.onVisibleChange(false);

      var onOk = _this.props.onOk;

      if (onOk) {
        onOk(e);
      }
    };

    _this.handleOnCancel = function (e) {
      _this.onVisibleChange(false);

      var onCancel = _this.props.onCancel;

      if (onCancel) {
        onCancel(e);
      }
    };

    _this.onVisibleChange = function (visible) {
      if (!('visible' in _this.props)) {
        _this.setState({
          visible: visible
        });
      }

      _this.props.onVisibleChange(visible);
    };

    _this.getMinOverlayWidthMatchTrigger = function () {
      var _this$props2 = _this.props,
          minOverlayWidthMatchTrigger = _this$props2.minOverlayWidthMatchTrigger,
          alignPoint = _this$props2.alignPoint;

      if ('minOverlayWidthMatchTrigger' in _this.props) {
        return minOverlayWidthMatchTrigger;
      }

      return !alignPoint;
    };

    var _visible = _this.props.visible || _this.props.defaultVisible;

    _this.state = {
      visible: _visible
    };
    return _this;
  }

  var _proto = Dropdown.prototype;

  _proto.getPopup = function getPopup() {
    return /*#__PURE__*/_react["default"].createElement(_react["default"].Fragment, null, this.renderTitle(), this.getMenuElement(), this.renderFooter());
  };

  _proto.renderTitle = function renderTitle() {
    var _this$props3 = this.props,
        title = _this$props3.title,
        header = _this$props3.header,
        prefixCls = _this$props3.prefixCls;

    if (!title && !header) {
      return null;
    }

    return /*#__PURE__*/_react["default"].createElement("div", {
      className: prefixCls + "-header"
    }, title || header);
  };

  _proto.renderFooter = function renderFooter() {
    var _this$props4 = this.props,
        prefixCls = _this$props4.prefixCls,
        showConfirm = _this$props4.showConfirm,
        onOk = _this$props4.onOk,
        okText = _this$props4.okText,
        okProps = _this$props4.okProps,
        onCancel = _this$props4.onCancel,
        cancelText = _this$props4.cancelText,
        cancelProps = _this$props4.cancelProps,
        size = _this$props4.size,
        footer = _this$props4.footer;
    var content = footer;

    if (showConfirm) {
      content = /*#__PURE__*/_react["default"].createElement(_react["default"].Fragment, null, /*#__PURE__*/_react["default"].createElement(_button["default"], (0, _extends2["default"])({
        size: size,
        type: "text-strong"
      }, okProps, {
        onClick: this.handleOnOk
      }), okText), /*#__PURE__*/_react["default"].createElement(_button["default"], (0, _extends2["default"])({
        size: size,
        type: "text"
      }, cancelProps, {
        onClick: this.handleOnCancel
      }), cancelText));
    }

    if (!content) {
      return null;
    }

    return /*#__PURE__*/_react["default"].createElement("div", {
      className: prefixCls + "-footer"
    }, content);
  };

  _proto.render = function render() {
    var _classNames;

    var _this$props5 = this.props,
        prefixCls = _this$props5.prefixCls,
        children = _this$props5.children,
        transitionName = _this$props5.transitionName,
        placement = _this$props5.placement,
        getPopupContainer = _this$props5.getPopupContainer,
        overlayClassName = _this$props5.overlayClassName,
        overlayStyle = _this$props5.overlayStyle,
        trigger = _this$props5.trigger,
        size = _this$props5.size,
        transparent = _this$props5.transparent,
        otherProps = (0, _objectWithoutPropertiesLoose2["default"])(_this$props5, ["prefixCls", "children", "transitionName", "placement", "getPopupContainer", "overlayClassName", "overlayStyle", "trigger", "size", "transparent"]);
    var triggerProps = (0, _omit["default"])(otherProps, ['dropdownIndependentWidth', 'title', 'showConfirm', 'onOk', 'okText', 'okProps', 'onCancel', 'cancelText', 'cancelProps']);
    var triggerHideAction;

    if (!triggerHideAction && trigger.indexOf('contextMenu') !== -1) {
      triggerHideAction = ['click'];
    }

    return /*#__PURE__*/_react["default"].createElement(_rcTrigger["default"], (0, _extends2["default"])({}, triggerProps, {
      prefixCls: prefixCls,
      ref: this.saveTrigger,
      popupClassName: (0, _classnames["default"])(prefixCls + "-" + size, overlayClassName, (_classNames = {}, _classNames[prefixCls + "-transparent"] = transparent, _classNames)),
      popupAlign: {
        ignoreShake: true
      },
      popupStyle: overlayStyle,
      builtinPlacements: _placements["default"],
      action: trigger,
      hideAction: triggerHideAction || [],
      popupPlacement: placement,
      popupTransitionName: transitionName,
      popupVisible: this.state.visible,
      afterPopupVisibleChange: this.afterVisibleChange,
      popup: this.getPopup(),
      onPopupVisibleChange: this.onVisibleChange,
      getPopupContainer: getPopupContainer
    }), children);
  };

  return Dropdown;
}(_react.PureComponent);

Dropdown.defaultProps = {
  trigger: 'hover',
  defaultVisible: false,
  onVisibleChange: function onVisibleChange() {},
  placement: 'bottomLeft'
};

Dropdown.getDerivedStateFromProps = function (nextProps) {
  if ('visible' in nextProps) {
    return {
      visible: nextProps.visible
    };
  }

  return null;
};

var _default = Dropdown;
exports["default"] = _default;
module.exports = exports.default;