"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

exports.__esModule = true;
exports["default"] = Toolbar;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _objectWithoutPropertiesLoose2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutPropertiesLoose"));

var _react = _interopRequireDefault(require("react"));

var _button = _interopRequireDefault(require("../../button"));

var _tooltip = _interopRequireDefault(require("../../tooltip"));

function transformScale(scale) {
  return Math.round(scale * 100);
}

function Toolbar(_ref) {
  var prefixCls = _ref.prefixCls,
      actionItems = _ref.actionItems,
      scale = _ref.scale,
      minScale = _ref.minScale,
      maxScale = _ref.maxScale,
      isSupportZoom = _ref.isSupportZoom,
      isShowIndicator = _ref.isShowIndicator,
      slide = _ref.slide,
      total = _ref.total,
      _onClick = _ref.onClick;
  return /*#__PURE__*/_react["default"].createElement("div", {
    className: prefixCls + "-toolbar"
  }, isShowIndicator && /*#__PURE__*/_react["default"].createElement("span", {
    className: prefixCls + "-indicator-numbers"
  }, slide, /*#__PURE__*/_react["default"].createElement("span", {
    className: prefixCls + "-indicator-numbers-separator"
  }), total), isShowIndicator && isSupportZoom && /*#__PURE__*/_react["default"].createElement("span", {
    className: prefixCls + "-toolbar-separator"
  }), isSupportZoom && !!(actionItems != null && actionItems.length) && actionItems.map(function (_ref2) {
    var key = _ref2.key,
        icon = _ref2.icon,
        tip = _ref2.tip,
        rest = (0, _objectWithoutPropertiesLoose2["default"])(_ref2, ["key", "icon", "tip"]);
    var buttonProps = (0, _extends2["default"])({
      type: 'text',
      size: 'xsmall',
      icon: icon,
      disabled: key === 'zoomIn' && scale >= maxScale || key === 'zoomOut' && scale <= minScale,
      onClick: function onClick() {
        return _onClick(key);
      }
    }, rest);

    if (tip) {
      return /*#__PURE__*/_react["default"].createElement(_tooltip["default"], {
        key: key,
        type: "dark",
        title: /*#__PURE__*/_react["default"].createElement("span", {
          className: prefixCls + "-toolbar-tip"
        }, tip),
        getPopupContainer: function getPopupContainer(node) {
          return node.firstChild;
        } // 主要针对内部button组件

      }, /*#__PURE__*/_react["default"].createElement("span", {
        className: prefixCls + "-toolbar-button"
      }, /*#__PURE__*/_react["default"].createElement(_button["default"], buttonProps)));
    }

    return /*#__PURE__*/_react["default"].createElement(_button["default"], (0, _extends2["default"])({
      key: key
    }, buttonProps));
  }), isSupportZoom && /*#__PURE__*/_react["default"].createElement("span", {
    className: prefixCls + "-toolbar-scale"
  }, transformScale(scale), "%"));
}

module.exports = exports.default;