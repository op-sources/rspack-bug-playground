"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

exports.__esModule = true;
exports["default"] = void 0;

var _extends3 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _inheritsLoose2 = _interopRequireDefault(require("@babel/runtime/helpers/inheritsLoose"));

var _isEmpty2 = _interopRequireDefault(require("lodash/isEmpty"));

var _omit2 = _interopRequireDefault(require("lodash/omit"));

var _cloneDeepWith2 = _interopRequireDefault(require("lodash/cloneDeepWith"));

var _isEqual2 = _interopRequireDefault(require("lodash/isEqual"));

var _last2 = _interopRequireDefault(require("lodash/last"));

var _react = _interopRequireWildcard(require("react"));

var _dlsIconsReact = require("dls-icons-react");

var _domScrollIntoView = _interopRequireDefault(require("dom-scroll-into-view"));

var _commonTools = require("../../core/commonTools");

var _loading = _interopRequireDefault(require("../loading"));

var _menu = _interopRequireDefault(require("./menu"));

var _searchMenu = _interopRequireDefault(require("./searchMenu"));

var _input = _interopRequireDefault(require("./input"));

var _tree = require("../../data/tree");

var _shallowequal = _interopRequireDefault(require("shallowequal"));

var _context = require("../providerConfig/context");

var _dec, _class, _class2, _temp;

var CascaderPane = (_dec = (0, _context.withConfigConsumer)('cascader-pane'), _dec(_class = (_temp = _class2 = /*#__PURE__*/function (_PureComponent) {
  (0, _inheritsLoose2["default"])(CascaderPane, _PureComponent);

  function CascaderPane(props) {
    var _this;

    _this = _PureComponent.call(this, props) || this;
    _this.menuRef = void 0;

    _this.saveMenuRef = function (ref) {
      _this.menuRef = ref;
    };

    _this.onInputChange = function (e) {
      _this.props.onInputChange(e);

      var query = e.value;

      if (!('searchValue' in _this.props)) {
        _this.setState({
          query: query
        });

        _this.setSearchOptions(query);
      }
    };

    _this.handleOnHover = function (key, keyPath, columnIndex) {
      var tree = _this.state.tree;
      var onHover = _this.props.onHover;
      var activeValue = tree.getKeyWithParent(key, keyPath);

      _this.setState({
        activeValue: activeValue
      });

      _this.setColumns(key, keyPath);

      var option = tree.getNormalizedOption(key, keyPath);

      _this.loadData(option, 'children', 'expand');

      onHover && onHover(tree.getOption(key, keyPath), columnIndex, activeValue);
    };

    _this.handleOnSelect = function (key, keyPath, columnIndex) {
      var _this$state = _this.state,
          tree = _this$state.tree,
          query = _this$state.query;
      var _this$props = _this.props,
          onSelect = _this$props.onSelect,
          onClickSearchItem = _this$props.onClickSearchItem,
          showCheckbox = _this$props.showCheckbox;
      var value = tree.getKeyWithParent(key, keyPath) || [];

      _this.setState({
        activeValue: value
      });

      var option = tree.getNormalizedOption(key, keyPath);
      var isInline = option.expandType === 'inline' || option.expandType === 'toggle';

      if (!isInline) {
        _this.setColumns(key, keyPath);
      }

      _this.loadData(option, 'children', 'expand');

      if (option.disabled || isInline) {
        return;
      }

      if (!('searchValue' in _this.props) && query && !showCheckbox) {
        _this.setState({
          query: '',
          searchOptions: []
        });
      }

      if (!('value' in _this.props)) {
        _this.setState({
          value: value
        });
      }

      onSelect && onSelect(tree.getOption(key, keyPath), columnIndex, value);

      if (query && onClickSearchItem) {
        onClickSearchItem(tree.getOptionWithParent(key, keyPath));
      }
    };

    _this.handleOnCheck = function (key) {
      var _this$state2 = _this.state,
          tree = _this$state2.tree,
          query = _this$state2.query;
      var onCheckboxChange = _this.props.onCheckboxChange;
      var checkedKeys = tree.toggleChecked(key);

      if (!('checkedKeys' in _this.props)) {
        _this.setState({
          checkedKeys: checkedKeys
        });

        _this.setColumns(key);

        _this.setSearchOptions(query);
      }

      var option = tree.getNormalizedOption(key);

      _this.loadData(option, 'descendants', 'check');

      onCheckboxChange && onCheckboxChange(checkedKeys);
    };

    var _value = props.defaultValue || [];

    _this.state = {
      value: _value,
      activeValue: _value,
      query: props.defaultSearchValue || '',
      options: [],
      optionsClone: [],
      checkedKeys: props.defaultCheckedKeys || [],
      loadingMap: {}
    };
    return _this;
  }

  CascaderPane.getDerivedStateFromProps = function getDerivedStateFromProps(props, state) {
    var newState = {};
    var options = props.options,
        checkedKeys = props.checkedKeys,
        showCheckAll = props.showCheckAll,
        firstColumnGroup = props.firstColumnGroup,
        showCheckbox = props.showCheckbox,
        changeOnSelect = props.changeOnSelect,
        fieldNames = props.fieldNames,
        value = props.value,
        searchValue = props.searchValue,
        useDefaultFilter = props.useDefaultFilter,
        searchConfig = props.searchConfig;
    var tree = state.tree;
    var buildTree = false;
    var buildColumns = false;
    var buildQuery = false;
    var activeValue = state.activeValue;
    var query = state.query;

    if (!(0, _isEqual2["default"])(options, state.optionsClone) || showCheckbox !== state.showCheckbox || changeOnSelect !== state.changeOnSelect) {
      newState.optionsClone = (0, _cloneDeepWith2["default"])(options, function (value) {
        return /*#__PURE__*/(0, _react.isValidElement)(value) ? /*#__PURE__*/(0, _react.cloneElement)(value) : undefined;
      });
      ;
      newState.options = options;
      newState.showCheckbox = showCheckbox;
      newState.changeOnSelect = changeOnSelect;
      buildTree = true;
    }

    if ('checkedKeys' in props && (!(0, _shallowequal["default"])(checkedKeys, state.checkedKeys) || tree && !(0, _shallowequal["default"])(checkedKeys, tree.checkedKeys))) {
      newState.checkedKeys = checkedKeys;
      buildTree = true;
    }

    if (buildTree) {
      tree = new _tree.Tree(options, checkedKeys || state.checkedKeys, fieldNames, !showCheckbox && !changeOnSelect);
      newState.tree = tree;
    }

    if (firstColumnGroup !== state.firstColumnGroup || showCheckbox !== state.showCheckbox || showCheckAll !== state.showCheckAll) {
      newState.firstColumnGroup = firstColumnGroup;
      newState.showCheckbox = showCheckbox;
      newState.showCheckAll = showCheckAll;
      buildColumns = true;
    }

    if ('value' in props && !(0, _shallowequal["default"])(value || [], state.value)) {
      activeValue = value || [];
      newState.value = activeValue;
      newState.activeValue = activeValue;
      buildColumns = true;
    }

    if (buildTree || buildColumns) {
      newState.columns = tree.getColumns((0, _last2["default"])(activeValue), activeValue, showCheckAll, firstColumnGroup === true);
    }

    if ('searchValue' in props && searchValue !== state.query) {
      query = searchValue;
      newState.query = searchValue;
      buildQuery = true;
    }

    if (useDefaultFilter && (buildTree || buildColumns || buildQuery)) {
      newState.searchOptions = query ? tree.search(query, searchConfig) : [];
    }

    return newState;
  };

  var _proto = CascaderPane.prototype;

  _proto.prefix = function prefix(name) {
    return this.props.prefixCls + "-" + name;
  };

  _proto.render = function render() {
    var _classnames;

    var _this$props2 = this.props,
        prefixCls = _this$props2.prefixCls,
        className = _this$props2.className,
        showSearch = _this$props2.showSearch,
        showCheckbox = _this$props2.showCheckbox,
        size = _this$props2.size,
        style = _this$props2.style;
    var paneClassName = (0, _commonTools.classnames)(className, prefixCls, this.prefix(size), (_classnames = {}, _classnames[this.prefix('show-search')] = showSearch, _classnames[this.prefix('multiple')] = showCheckbox, _classnames));
    return /*#__PURE__*/_react["default"].createElement("div", {
      className: paneClassName,
      style: style
    }, this.renderSearch(), this.renderMenu());
  };

  _proto.renderMenu = function renderMenu() {
    var _this$state3 = this.state,
        columns = _this$state3.columns,
        activeValue = _this$state3.activeValue,
        value = _this$state3.value,
        query = _this$state3.query,
        searchOptions = _this$state3.searchOptions,
        loadingMap = _this$state3.loadingMap;
    var _this$props3 = this.props,
        prefixCls = _this$props3.prefixCls,
        size = _this$props3.size,
        expandIcon = _this$props3.expandIcon,
        loadingIcon = _this$props3.loadingIcon,
        showCheckbox = _this$props3.showCheckbox,
        lightPrefix = _this$props3.lightPrefix,
        _this$props3$checkbox = _this$props3.checkboxPrefixCls,
        checkboxPrefixCls = _this$props3$checkbox === void 0 ? lightPrefix + "-checkbox" : _this$props3$checkbox,
        cascaderPaneStyle = _this$props3.cascaderPaneStyle,
        useDefaultFilter = _this$props3.useDefaultFilter,
        showSearch = _this$props3.showSearch,
        _this$props3$searchCo = _this$props3.searchConfig,
        searchConfig = _this$props3$searchCo === void 0 ? {} : _this$props3$searchCo,
        paneWidth = _this$props3.paneWidth,
        menuWidth = _this$props3.menuWidth,
        expandTrigger = _this$props3.expandTrigger,
        emptyNode = _this$props3.emptyNode,
        emptyType = _this$props3.emptyType,
        CustomItemRender = _this$props3.CustomItemRender,
        firstColumnGroup = _this$props3.firstColumnGroup,
        renderOption = _this$props3.renderOption,
        columnHeader = _this$props3.columnHeader,
        columnFooter = _this$props3.columnFooter,
        header = _this$props3.header,
        footer = _this$props3.footer;

    if (columns.length === 0 || query && useDefaultFilter) {
      return /*#__PURE__*/_react["default"].createElement(_searchMenu["default"], {
        prefixCls: prefixCls,
        style: cascaderPaneStyle,
        size: size,
        width: searchConfig.matchInputWidth === false ? undefined : paneWidth,
        options: searchOptions,
        emptyNode: emptyNode,
        emptyType: emptyType,
        onSelect: this.handleOnSelect,
        onCheck: this.handleOnCheck,
        showCheckbox: showCheckbox,
        query: query,
        renderLabel: searchConfig.render
      });
    }

    var width = showSearch && paneWidth ? paneWidth : null;
    return /*#__PURE__*/_react["default"].createElement(_menu["default"], {
      prefixCls: prefixCls,
      style: cascaderPaneStyle,
      size: size,
      width: width,
      columnWidth: menuWidth,
      columns: columns,
      value: value,
      activeValue: activeValue,
      expandIcon: expandIcon,
      loadingIcon: loadingIcon,
      loadingMap: loadingMap,
      onSelect: this.handleOnSelect,
      onHover: this.handleOnHover,
      onCheck: this.handleOnCheck,
      showCheckbox: showCheckbox,
      checkboxPrefixCls: checkboxPrefixCls,
      expandTrigger: expandTrigger,
      firstColumnGroup: firstColumnGroup,
      CustomItemRender: CustomItemRender,
      columnHeader: columnHeader,
      columnFooter: columnFooter,
      header: header,
      footer: footer,
      forwardRef: this.saveMenuRef,
      renderOption: renderOption
    });
  };

  _proto.componentDidMount = function componentDidMount() {
    this.scrollActiveItemToView();
  };

  _proto.componentDidUpdate = function componentDidUpdate(preProps) {
    var _this$props4 = this.props,
        visible = _this$props4.visible,
        value = _this$props4.value,
        options = _this$props4.options;

    if (!visible) {
      return;
    }

    if (!preProps.visible || (0, _isEmpty2["default"])(preProps.value) && !(0, _isEmpty2["default"])(value) || (0, _isEmpty2["default"])(preProps.options) && !(0, _isEmpty2["default"])(options)) {
      this.scrollActiveItemToView();
    }
  };

  _proto.scrollActiveItemToView = function scrollActiveItemToView() {
    var _this2 = this;

    var menu = this.menuRef;

    if (menu) {
      menu.querySelectorAll('.' + this.prefix('menu')).forEach(function (col) {
        var item = col.querySelector('.' + _this2.prefix('menu-item-active'));

        if (item) {
          (0, _domScrollIntoView["default"])(item, col, {
            onlyScrollIfNeeded: true
          });
        }
      });
    }
  };

  _proto.renderSearch = function renderSearch() {
    var _this$props5 = this.props,
        paneWidth = _this$props5.paneWidth,
        inputType = _this$props5.inputType,
        searchProps = _this$props5.searchProps,
        showSearch = _this$props5.showSearch;

    if (!showSearch) {
      return null;
    }

    var props = {
      width: paneWidth,
      onInputChange: this.onInputChange,
      inputType: inputType,
      value: this.state.query
    };

    if (searchProps) {
      props.searchProps = searchProps;
    }

    return /*#__PURE__*/_react["default"].createElement(_input["default"], props);
  };

  _proto.setSearchOptions = function setSearchOptions(query) {
    var _this$props6 = this.props,
        useDefaultFilter = _this$props6.useDefaultFilter,
        searchConfig = _this$props6.searchConfig;
    var searchOptions = typeof searchConfig === 'boolean' ? undefined : searchConfig;

    if (useDefaultFilter) {
      this.setState({
        searchOptions: query ? this.state.tree.search(query, searchOptions) : []
      });
    }
  };

  _proto.setColumns = function setColumns(key, keyPath) {
    var tree = this.state.tree;
    var _this$props7 = this.props,
        showCheckAll = _this$props7.showCheckAll,
        firstColumnGroup = _this$props7.firstColumnGroup;
    this.setState({
      columns: tree.getColumns(key, keyPath, showCheckAll, firstColumnGroup === true)
    });
  };

  _proto.loadData = function loadData(option, trigger, scope) {
    var _this3 = this;

    var isLeaf = option.isLeaf,
        key = option.key,
        children = option.children;
    var loadData = this.props.loadData;
    var _this$state4 = this.state,
        loadingMap = _this$state4.loadingMap,
        tree = _this$state4.tree;

    if (loadData && isLeaf === false && !children) {
      if (loadingMap[key]) {
        return;
      }

      var promise = loadData({
        parent: option.item,
        value: tree.getKeyPath(option),
        trigger: trigger,
        scope: scope
      });

      if (promise && promise["finally"]) {
        var _extends2;

        loadingMap[key] = true;
        this.setState({
          loadingMap: (0, _extends3["default"])({}, loadingMap, (_extends2 = {}, _extends2[key] = true, _extends2))
        });
        promise["finally"](function () {
          _this3.setState({
            loadingMap: (0, _omit2["default"])(_this3.state.loadingMap, [key])
          });
        });
      }
    }
  };

  return CascaderPane;
}(_react.PureComponent), _class2.defaultProps = {
  options: [],
  prefixCls: 'one-cascader-pane',
  expandTrigger: 'click',
  onSelect: function onSelect() {},
  visible: true,
  fieldNames: {
    label: 'label',
    value: 'value',
    children: 'children',
    icon: 'icon'
  },
  expandIcon: /*#__PURE__*/_react["default"].createElement(_dlsIconsReact.IconChevronRight, null),
  loadingIcon: /*#__PURE__*/_react["default"].createElement(_loading["default"], {
    size: "small"
  }),
  showCheckbox: false,
  onCheckboxChange: function onCheckboxChange() {},
  showSearch: false,
  paneWidth: 360,
  useDefaultFilter: true,
  onInputChange: function onInputChange() {},
  emptyNode: '暂无结果',
  emptyType: 'card',
  onClickSearchItem: function onClickSearchItem() {},
  firstColumnGroup: false,
  inputType: 'inline',
  showCheckAll: false,
  size: 'medium'
}, _temp)) || _class);
var _default = CascaderPane;
exports["default"] = _default;
module.exports = exports.default;