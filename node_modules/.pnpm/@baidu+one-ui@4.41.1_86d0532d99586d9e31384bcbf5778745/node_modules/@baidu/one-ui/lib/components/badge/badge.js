"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

exports.__esModule = true;
exports["default"] = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _objectWithoutPropertiesLoose2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutPropertiesLoose"));

var _inheritsLoose2 = _interopRequireDefault(require("@babel/runtime/helpers/inheritsLoose"));

var _react = _interopRequireWildcard(require("react"));

var _omit = _interopRequireDefault(require("omit.js"));

var _commonTools = require("../../core/commonTools");

var _context = require("../providerConfig/context");

var _dec, _class, _class2, _temp;

;
var Badge = (_dec = (0, _context.withConfigConsumer)('badge'), _dec(_class = (_temp = _class2 = /*#__PURE__*/function (_PureComponent) {
  (0, _inheritsLoose2["default"])(Badge, _PureComponent);

  function Badge(props) {
    var _this;

    _this = _PureComponent.call(this, props) || this;

    _this.render = function () {
      var _classnames, _classnames2, _classnames3;

      var _this$props = _this.props,
          showZero = _this$props.showZero,
          prefixCls = _this$props.prefixCls,
          overflowCount = _this$props.overflowCount,
          className = _this$props.className,
          style = _this$props.style,
          children = _this$props.children,
          isDot = _this$props.isDot,
          type = _this$props.type,
          text = _this$props.text,
          offset = _this$props.offset,
          color = _this$props.color,
          textContent = _this$props.textContent,
          lightPrefix = _this$props.lightPrefix,
          restProps = (0, _objectWithoutPropertiesLoose2["default"])(_this$props, ["showZero", "prefixCls", "overflowCount", "className", "style", "children", "isDot", "type", "text", "offset", "color", "textContent", "lightPrefix"]);
      var _this$state = _this.state,
          visible = _this$state.visible,
          count = _this$state.count;
      var displayCount = +count > +overflowCount ? overflowCount + "+" : count;
      var isZero = displayCount === 0;
      var isDotMode = isDot && !isZero || type; // 小圆点状态下，不展示数字

      if (isDotMode) {
        displayCount = '';
      }

      var isEmpty = (displayCount === null || displayCount === undefined || displayCount === '') && !textContent;
      var hidden = (isEmpty || isZero && !showZero) && !isDotMode || !visible;
      var typeCls = (0, _commonTools.classnames)((_classnames = {}, _classnames[prefixCls + "-type-dot"] = !!type, _classnames[prefixCls + "-type-" + type] = !!type, _classnames));
      var numberBoxCls = (0, _commonTools.classnames)((_classnames2 = {}, _classnames2[prefixCls + "-dot"] = isDotMode, _classnames2[prefixCls + "-count"] = !isDotMode, _classnames2[prefixCls + "-type-" + type] = !!type, _classnames2[prefixCls + "-hidden"] = hidden, _classnames2));
      var badgeCls = (0, _commonTools.classnames)(className, prefixCls, (_classnames3 = {}, _classnames3[prefixCls + "-type"] = !!type, _classnames3[prefixCls + "-not-a-wrapper"] = !children, _classnames3));
      var styleWithOffset = offset ? (0, _extends2["default"])({
        right: -offset[0],
        marginTop: offset[1]
      }, style) : style;

      if (color) {
        styleWithOffset = (0, _extends2["default"])({}, styleWithOffset, {
          backgroundColor: color
        });
      }

      var divProps = (0, _omit["default"])(restProps, ['visible']);

      if (!children && type) {
        var colorStyle = color ? {
          backgroundColor: color
        } : undefined;
        return /*#__PURE__*/_react["default"].createElement("span", (0, _extends2["default"])({}, divProps, {
          className: badgeCls,
          style: style
        }), /*#__PURE__*/_react["default"].createElement("span", {
          className: typeCls,
          style: colorStyle
        }), /*#__PURE__*/_react["default"].createElement("span", {
          className: prefixCls + "-type-text"
        }, text));
      }

      var showContent = displayCount; // 如果有文字形式，数字形式默认失效

      if (textContent) {
        showContent = textContent;
      }

      return /*#__PURE__*/_react["default"].createElement("span", (0, _extends2["default"])({}, divProps, {
        className: badgeCls
      }), children, /*#__PURE__*/_react["default"].createElement("span", {
        className: numberBoxCls,
        style: styleWithOffset
      }, showContent));
    };

    _this.state = {
      count: props.count,
      visible: props.visible
    };
    return _this;
  }

  return Badge;
}(_react.PureComponent), _class2.defaultProps = {
  prefixCls: 'one-badge',
  count: null,
  showZero: false,
  isDot: false,
  overflowCount: 99,
  visible: true,
  textContent: ''
}, _class2.getDerivedStateFromProps = function (nextProps, prevState) {
  var newState = {};

  if ('visible' in nextProps && nextProps.visible !== prevState.visible) {
    newState.visible = nextProps.visible;
  }

  if ('count' in nextProps && nextProps.count !== prevState.count) {
    newState.count = nextProps.count;
  }

  return newState;
}, _temp)) || _class);
var _default = Badge;
exports["default"] = _default;
module.exports = exports.default;