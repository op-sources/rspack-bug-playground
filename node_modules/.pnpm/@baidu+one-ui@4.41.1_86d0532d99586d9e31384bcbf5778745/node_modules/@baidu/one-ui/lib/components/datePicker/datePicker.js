"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

exports.__esModule = true;
exports["default"] = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _inheritsLoose2 = _interopRequireDefault(require("@babel/runtime/helpers/inheritsLoose"));

var _noop2 = _interopRequireDefault(require("lodash/noop"));

var _isEqual2 = _interopRequireDefault(require("lodash/isEqual"));

var _isEmpty2 = _interopRequireDefault(require("lodash/isEmpty"));

var _isArray2 = _interopRequireDefault(require("lodash/isArray"));

var _react = _interopRequireWildcard(require("react"));

var _miniStore = require("mini-store");

var _dlsIconsReact = require("dls-icons-react");

var _datePickerTools = require("../../core/datePickerTools");

var _titleHeader = _interopRequireDefault(require("./common/titleHeader"));

var _dayItemRender = _interopRequireDefault(require("./common/dayItemRender"));

var _monthAndYearPanel = _interopRequireDefault(require("./common/monthAndYearPanel"));

var _commonTools = require("../../core/commonTools");

var _input = _interopRequireDefault(require("./common/input"));

var _overlay = _interopRequireDefault(require("../overlay"));

var _button = _interopRequireDefault(require("../button"));

var _util = require("./util");

var _context = require("../providerConfig/context");

var _dec, _class, _class2, _temp;

var normalizeValue = function normalizeValue(value) {
  if ((0, _isEmpty2["default"])(value)) {
    return [];
  }

  if ((0, _isArray2["default"])(value)) {
    return value;
  }

  return [value];
};

var updateValue = function updateValue(value) {
  var date = value[0] ? (0, _datePickerTools.getDetailDate)(value[0]) : (0, _datePickerTools.getTodayDetail)();
  return {
    _value: value,
    showYear: date.fullYear,
    showMonth: date.fullMonth
  };
};

var DatePicker = (_dec = (0, _context.withConfigConsumer)('date-picker'), _dec(_class = (_temp = _class2 = /*#__PURE__*/function (_PureComponent) {
  (0, _inheritsLoose2["default"])(DatePicker, _PureComponent);

  function DatePicker(props) {
    var _this;

    _this = _PureComponent.call(this, props) || this;
    _this.store = void 0;

    _this.onMouseEnter = function (value) {
      _this.setState({
        hoverDate: value
      });
    };

    _this.onMouseLeave = function () {
      _this.setState({
        hoverDate: ''
      });
    };

    _this.componentDidUpdate = function (prevProps) {
      var newState = {};

      if ('value' in _this.props && !(0, _isEqual2["default"])(_this.props.value, prevProps.value)) {
        var _value = normalizeValue(_this.props.value); // 控制一些组件内部属性


        newState = (0, _extends2["default"])({}, newState, updateValue(_value));
      }

      if ('validateMinDate' in _this.props && _this.props.validateMinDate !== prevProps.validateMinDate) {
        newState = (0, _extends2["default"])({}, newState, {
          validateMinDate: (0, _datePickerTools.transDateFormat)(_this.props.validateMinDate) || (0, _datePickerTools.validateData)().validateMinDate
        });
      }

      if ('validateMaxDate' in _this.props && _this.props.validateMaxDate !== prevProps.validateMaxDate) {
        newState = (0, _extends2["default"])({}, newState, {
          validateMaxDate: (0, _datePickerTools.transDateFormat)(_this.props.validateMaxDate) || (0, _datePickerTools.validateData)().validateMaxDate
        });
      }

      _this.store.setState(newState);
    };

    _this.onSelectDay = function (value, colsePanel) {
      if (colsePanel === void 0) {
        colsePanel = true;
      }

      var _this$props = _this.props,
          onChange = _this$props.onChange,
          validator = _this$props.validator,
          dateFormat = _this$props.dateFormat,
          validateMaxDate = _this$props.validateMaxDate,
          validateMinDate = _this$props.validateMinDate,
          mode = _this$props.mode;
      var newState = {
        hoverDate: ''
      };
      var date = Array.isArray(value) ? value.filter(Boolean)[0] : value;
      var currentValue = mode === 'week' ? (0, _util.getValidWeekDates)(date, dateFormat, validateMinDate, validateMaxDate) : normalizeValue(date);

      if (!('value' in _this.props)) {
        // 非受控
        newState.currentValue = currentValue;
      }

      _this.store.setState(updateValue(currentValue));

      if (!('visible' in _this.props) && colsePanel) {
        // 非受控
        newState.visible = false;
      }

      var validatorError = '';
      validatorError = validator && typeof validator === 'function' ? validator(mode === 'week' ? currentValue : date) : '';

      if (!validatorError) {
        onChange(mode === 'week' ? currentValue : date);
        newState.errorMessage = '';
      } else {
        newState.errorMessage = validatorError;
      }

      _this.setState(newState);
    };

    _this.renderDatePickerBody = function () {
      var _this$props2 = _this.props,
          prefixCls = _this$props2.prefixCls,
          hideInput = _this$props2.hideInput,
          size = _this$props2.size;
      var visible = _this.state.visible;
      var datePickerPanelClassName = (0, _commonTools.classnames)(prefixCls + "-panel", prefixCls + "-panel-" + size, hideInput && prefixCls + "-panel-hide-input");
      return /*#__PURE__*/_react["default"].createElement(_miniStore.Provider, {
        store: _this.store
      }, /*#__PURE__*/_react["default"].createElement("div", {
        className: datePickerPanelClassName
      }, !hideInput && /*#__PURE__*/_react["default"].createElement(_input["default"], (0, _extends2["default"])({}, _this.props, {
        visible: visible,
        onChange: _this.onSelectDay
      })), /*#__PURE__*/_react["default"].createElement(_titleHeader["default"], _this.props), /*#__PURE__*/_react["default"].createElement(_dayItemRender["default"], (0, _extends2["default"])({}, _this.props, {
        onMouseEnter: _this.onMouseEnter,
        onMouseLeave: _this.onMouseLeave,
        hoverDate: _this.state.hoverDate,
        onChange: _this.onSelectDay
      })), /*#__PURE__*/_react["default"].createElement(_monthAndYearPanel["default"], _this.props)));
    };

    _this.onLayerVisibleChange = function (visible) {
      _this.props.onVisibleChange(visible);

      if (!('visible' in _this.props)) {
        _this.setState({
          visible: visible
        });
      }
    };

    _this.onOpenDatePicker = function (e) {
      var _this$props3 = _this.props,
          onClickButton = _this$props3.onClickButton,
          value = _this$props3.value;
      var formatValue;

      if ('value' in _this.props) {
        formatValue = normalizeValue(value);
      } else {
        formatValue = _this.state.currentValue;
      } // 每次打开的时候，重置一下面板的type，并且保证当前value与state的value保持一致


      _this.store.setState((0, _extends2["default"])({
        panelType: 'date'
      }, updateValue(formatValue)));

      _this.onLayerVisibleChange(true);

      onClickButton(e);
    };

    _this.onDetete = function (e) {
      e.stopPropagation();
      e.preventDefault();

      _this.props.onDelete();

      if (!('value' in _this.props)) {
        _this.setState({
          currentValue: []
        });

        _this.store.setState({
          _value: []
        });
      }
    };

    var defaultValue = props.defaultValue,
        _value2 = props.value,
        _visible = props.visible,
        defaultVisible = props.defaultVisible;

    var _value3 = normalizeValue(defaultValue || _value2);

    _this.state = {
      currentValue: _value3,
      visible: defaultVisible || _visible || false,
      errorMessage: '',
      hoverDate: ''
    };
    _this.store = (0, _miniStore.create)((0, _extends2["default"])({}, updateValue(_value3), {
      // 面板展示 date or month - 选择日期 or 月份
      panelType: 'date',
      validateMinDate: (0, _datePickerTools.transDateFormat)(props.validateMinDate) || (0, _datePickerTools.validateData)().validateMinDate,
      validateMaxDate: (0, _datePickerTools.transDateFormat)(props.validateMaxDate) || (0, _datePickerTools.validateData)().validateMaxDate
    }));
    return _this;
  }

  var _proto = DatePicker.prototype;

  _proto.render = function render() {
    var _classnames, _classnames2;

    var _this$props4 = this.props,
        prefixCls = _this$props4.prefixCls,
        className = _this$props4.className,
        disabled = _this$props4.disabled,
        getPopupContainer = _this$props4.getPopupContainer,
        dateFormat = _this$props4.dateFormat,
        popupPlacement = _this$props4.popupPlacement,
        size = _this$props4.size,
        customButtonTitle = _this$props4.customButtonTitle,
        showDeleteIcon = _this$props4.showDeleteIcon,
        placeholder = _this$props4.placeholder,
        style = _this$props4.style,
        value = _this$props4.value,
        hideInput = _this$props4.hideInput,
        children = _this$props4.children;
    var _this$state = this.state,
        currentValue = _this$state.currentValue,
        visible = _this$state.visible,
        errorMessage = _this$state.errorMessage;
    var formatValue;

    if ('value' in this.props) {
      formatValue = normalizeValue(value);
    } else {
      formatValue = currentValue;
    }

    var buttonText = (0, _datePickerTools.formatButtonText)({
      value: formatValue,
      dateFormat: dateFormat
    });
    var text = customButtonTitle || buttonText || placeholder;
    var datePickerClassNames = (0, _commonTools.classnames)(prefixCls, className, (_classnames = {}, _classnames[prefixCls + "-empty"] = !buttonText, _classnames[prefixCls + "-disabled"] = disabled, _classnames[prefixCls + "-showDeleteIcon"] = showDeleteIcon, _classnames));
    var layerProps = (0, _extends2["default"])({
      trigger: disabled ? '' : 'click',
      visible: visible,
      onVisibleChange: this.onLayerVisibleChange,
      overlay: this.renderDatePickerBody(),
      dropdownMatchSelectWidth: false,
      getPopupContainer: getPopupContainer,
      popupPlacement: popupPlacement,
      popupClassName: (0, _commonTools.classnames)(prefixCls + "-overlay", !hideInput && prefixCls + "-overlay-" + size)
    }, hideInput ? {} : {
      align: _util.align
    });
    var textClassName = (0, _commonTools.classnames)(prefixCls + "-title-text", (_classnames2 = {}, _classnames2[prefixCls + "-title-text-empty"] = (0, _isEmpty2["default"])(formatValue), _classnames2));
    return /*#__PURE__*/_react["default"].createElement("div", {
      className: datePickerClassNames,
      style: style
    }, /*#__PURE__*/_react["default"].createElement(_overlay["default"], layerProps, children ? /*#__PURE__*/(0, _react.isValidElement)(children) ? children : /*#__PURE__*/_react["default"].createElement("span", null, children) : /*#__PURE__*/_react["default"].createElement(_button["default"], {
      className: prefixCls + "-title",
      disabled: disabled,
      size: size,
      type: "basic",
      onClick: this.onOpenDatePicker
    }, /*#__PURE__*/_react["default"].createElement("span", {
      className: textClassName
    }, text), /*#__PURE__*/_react["default"].createElement(_dlsIconsReact.IconCalendar, {
      className: prefixCls + "-button-icon " + prefixCls + "-button-icon-calendar"
    }), /*#__PURE__*/_react["default"].createElement(_dlsIconsReact.IconTimesCircle, {
      className: prefixCls + "-button-icon " + prefixCls + "-button-icon-close",
      onClick: this.onDetete
    }))), errorMessage ? /*#__PURE__*/_react["default"].createElement("span", {
      className: prefixCls + "-error-message"
    }, errorMessage) : null);
  };

  return DatePicker;
}(_react.PureComponent), _class2.defaultProps = {
  dateFormat: 'YYYY/MM/DD',
  prefixCls: 'one-date-picker',
  disabled: false,
  size: 'medium',
  onVisibleChange: _noop2["default"],
  onChange: _noop2["default"],
  onClickButton: _noop2["default"],
  getPopupContainer: function getPopupContainer() {
    return document.body;
  },
  onDelete: _noop2["default"],
  showDeleteIcon: false,
  hideInput: false,
  placeholder: '请选择日期'
}, _class2.RangePicker = void 0, _class2.MonthPicker = void 0, _class2.getDerivedStateFromProps = function (nextProps) {
  var newState = {};

  if ('value' in nextProps) {
    newState.currentValue = normalizeValue(nextProps.value);
  }

  if ('visible' in nextProps) {
    newState.visible = nextProps.visible;
  }

  return newState;
}, _temp)) || _class);
var _default = DatePicker;
exports["default"] = _default;
module.exports = exports.default;