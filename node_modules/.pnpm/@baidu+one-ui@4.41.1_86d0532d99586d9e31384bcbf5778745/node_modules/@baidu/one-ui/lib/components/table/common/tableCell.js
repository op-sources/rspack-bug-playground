"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

exports.__esModule = true;
exports["default"] = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _inheritsLoose2 = _interopRequireDefault(require("@babel/runtime/helpers/inheritsLoose"));

var _get2 = _interopRequireDefault(require("lodash/get"));

var _react = _interopRequireWildcard(require("react"));

var _commonTools = require("../../../core/commonTools");

function isInvalidRenderCellText(text) {
  return text && ! /*#__PURE__*/_react["default"].isValidElement(text) && Object.prototype.toString.call(text) === '[object Object]';
}

var TableCell = /*#__PURE__*/function (_PureComponent) {
  (0, _inheritsLoose2["default"])(TableCell, _PureComponent);

  function TableCell() {
    var _this;

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _PureComponent.call.apply(_PureComponent, [this].concat(args)) || this;

    _this.handleClick = function (e) {
      var _this$props = _this.props,
          record = _this$props.record,
          onCellClick = _this$props.onCellClick;

      if (onCellClick) {
        onCellClick(record, e);
      }
    };

    _this.cellRef = void 0;

    _this.getRef = function (ref) {
      _this.cellRef = ref;
    };

    return _this;
  }

  var _proto = TableCell.prototype;

  _proto.render = function render() {
    var _classnames;

    var _this$props2 = this.props,
        record = _this$props2.record,
        indentSize = _this$props2.indentSize,
        prefixCls = _this$props2.prefixCls,
        indent = _this$props2.indent,
        index = _this$props2.index,
        cellIndex = _this$props2.cellIndex,
        expandIcon = _this$props2.expandIcon,
        className = _this$props2.className,
        left = _this$props2.left,
        right = _this$props2.right,
        dataIndex = _this$props2.dataIndex,
        render = _this$props2.render,
        onCell = _this$props2.onCell,
        align = _this$props2.align; // We should return undefined if no dataIndex is specified, but in order to
    // be compatible with object-path's behavior, we return the record object instead.

    var text;

    if (typeof dataIndex === 'number') {
      text = (0, _get2["default"])(record, dataIndex);
    } else if (!dataIndex || dataIndex.length === 0) {
      text = record;
    } else {
      text = (0, _get2["default"])(record, dataIndex);
    }

    var tdProps = {};
    var colSpan;
    var rowSpan;

    if (render) {
      text = render(text, record, index);

      if (isInvalidRenderCellText(text)) {
        tdProps = text.props || tdProps;
        colSpan = tdProps.colSpan;
        rowSpan = tdProps.rowSpan;
        text = text.children;
      }
    }

    if (onCell) {
      tdProps = (0, _extends2["default"])({}, tdProps, onCell(record));
    }

    if (isInvalidRenderCellText(text)) {
      text = null;
    }

    var indentText = expandIcon ? /*#__PURE__*/_react["default"].createElement("span", {
      // @ts-ignore
      style: {
        '--one-table-cell-indent-level': indent
      },
      className: prefixCls + "-indent indent-level-" + indent
    }) : null;

    if (rowSpan === 0 || colSpan === 0) {
      return null;
    }

    if (align) {
      tdProps.style = (0, _extends2["default"])({}, tdProps.style, {
        textAlign: align
      });
    }

    if (left != null) {
      tdProps.style = (0, _extends2["default"])({}, tdProps.style, {
        left: left
      });
    } else if (right != null) {
      tdProps.style = (0, _extends2["default"])({}, tdProps.style, {
        right: right
      });
    }

    var bodyCellClassName = (0, _commonTools.classnames)(prefixCls + "-body-cell", className, (_classnames = {}, _classnames[prefixCls + "-first-cell"] = cellIndex === 0, _classnames));

    var content = /*#__PURE__*/_react["default"].createElement("div", {
      className: prefixCls + "-cell-content"
    }, text);

    if (indentText) {
      content = /*#__PURE__*/_react["default"].createElement("div", {
        className: prefixCls + "-cell-content-wrapper"
      }, /*#__PURE__*/_react["default"].createElement("div", {
        className: prefixCls + "-cell-content-expand"
      }, indentText, expandIcon), content);
    }

    return /*#__PURE__*/_react["default"].createElement("td", (0, _extends2["default"])({
      className: bodyCellClassName,
      onClick: this.handleClick
    }, tdProps, {
      ref: this.getRef
    }), content);
  };

  return TableCell;
}(_react.PureComponent);

exports["default"] = TableCell;
module.exports = exports.default;