"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

exports.__esModule = true;
exports["default"] = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _inheritsLoose2 = _interopRequireDefault(require("@babel/runtime/helpers/inheritsLoose"));

var _map2 = _interopRequireDefault(require("lodash/map"));

var _react = _interopRequireWildcard(require("react"));

var _commonTools = require("../../core/commonTools");

var _dropdown = _interopRequireDefault(require("../dropdown"));

var _menu = _interopRequireDefault(require("../menu"));

var _dlsIconsReact = require("dls-icons-react");

// import Icon from '../icon';
var MenuItem = _menu["default"].Item;
var SubMenu = _menu["default"].SubMenu;
var Divider = _menu["default"].Divider;
;

var SingleSelect = /*#__PURE__*/function (_PureComponent) {
  (0, _inheritsLoose2["default"])(SingleSelect, _PureComponent);

  function SingleSelect(props) {
    var _this;

    _this = _PureComponent.call(this, props) || this;

    _this.onChange = function (e) {
      var onChange = _this.props.onChange;

      if (onChange) {
        onChange(e);
      }

      _this.setState({
        isExpend: false,
        value: e.key
      });
    };

    _this.getSubMenuItem = function (option, index) {
      var disabled = option.disabled,
          value = option.value,
          label = option.label;
      var menuItem = {
        key: value,
        disabled: disabled || false
      };

      if (option.divider) {
        return /*#__PURE__*/_react["default"].createElement(Divider, {
          key: index + "-divider"
        });
      }

      if (option.children && option.children.length) {
        return /*#__PURE__*/_react["default"].createElement(SubMenu, (0, _extends2["default"])({}, menuItem, {
          title: label
        }), option.children.map(function (child) {
          return _this.getSubMenuItem(child);
        }));
      }

      return /*#__PURE__*/_react["default"].createElement(MenuItem, menuItem, label);
    };

    _this.getDropdownOverlay = function () {
      var _this$props = _this.props,
          options = _this$props.options,
          dropdownHeight = _this$props.dropdownHeight;
      var value = _this.state.value;

      if ('value' in _this.props) {
        value = _this.props.value;
      }

      var menu = /*#__PURE__*/_react["default"].createElement(_menu["default"], {
        selectable: true,
        selectedKeys: ["" + value],
        style: {
          height: dropdownHeight
        },
        onClick: _this.onChange,
        mode: "vertical"
      }, options.map(function (option, index) {
        return _this.getSubMenuItem(option, index);
      }));

      return menu;
    };

    _this.renderValueByOptions = function (options, value, label) {
      if (label === void 0) {
        label = '';
      }

      (0, _map2["default"])(options, function (option) {
        if ((typeof value === 'number' || typeof option.value === 'number') && +option.value === +value) {
          label = option.label;
        } else if (option.value === value) {
          label = option.label;
        } else if (option.children) {
          label = _this.renderValueByOptions(option.children, value, label);
        }
      });
      return label;
    };

    _this.getSelectedLabel = function () {
      var value = _this.state.value;

      if ('value' in _this.props) {
        value = _this.props.value;
      }

      var _this$props2 = _this.props,
          options = _this$props2.options,
          selectorName = _this$props2.selectorName;

      var label = _this.renderValueByOptions(options, value);

      return label || selectorName;
    };

    _this.dropdownVisibleChange = function (visible) {
      var onVisibleChange = _this.props.onVisibleChange;

      if (onVisibleChange) {
        onVisibleChange(visible);
      }

      _this.setState({
        isExpend: visible
      });
    };

    _this.state = {
      isExpend: false,
      value: props.value || ''
    };
    return _this;
  }

  var _proto = SingleSelect.prototype;

  _proto.render = function render() {
    var _classnames;

    var _this$props3 = this.props,
        trigger = _this$props3.trigger,
        placement = _this$props3.placement,
        getPopupContainer = _this$props3.getPopupContainer,
        disabled = _this$props3.disabled,
        visible = _this$props3.visible,
        prefixCls = _this$props3.prefixCls,
        style = _this$props3.style;
    var overlay = this.getDropdownOverlay();
    var dropdownProps = {
      overlay: overlay,
      trigger: disabled ? [] : [trigger],
      onVisibleChange: this.dropdownVisibleChange,
      placement: placement,
      getPopupContainer: getPopupContainer
    };

    if ('visible' in this.props) {
      // @ts-ignore
      dropdownProps.visible = visible;
    }

    var isExpend = this.state.isExpend;
    var classes = (0, _commonTools.classnames)(prefixCls, (_classnames = {}, _classnames[prefixCls + "-open"] = isExpend || visible, _classnames[prefixCls + "-disabled"] = disabled, _classnames));
    return /*#__PURE__*/_react["default"].createElement(_dropdown["default"], dropdownProps, /*#__PURE__*/_react["default"].createElement("span", {
      className: classes,
      style: style
    }, /*#__PURE__*/_react["default"].createElement("span", {
      className: prefixCls + "-text"
    }, this.getSelectedLabel()), /*#__PURE__*/_react["default"].createElement(_dlsIconsReact.IconChevronRight, null)));
  };

  return SingleSelect;
}(_react.PureComponent);

exports["default"] = SingleSelect;
SingleSelect.defaultProps = {
  prefixCls: 'one-single-select',
  disabled: false,
  dropdownHeight: 'auto',
  style: {},
  trigger: 'hover',
  selectorName: '请选择...'
};
module.exports = exports.default;