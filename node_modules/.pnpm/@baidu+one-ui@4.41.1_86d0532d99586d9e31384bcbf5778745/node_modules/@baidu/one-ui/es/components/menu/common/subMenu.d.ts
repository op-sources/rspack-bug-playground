import React from 'react';
import { SubPopupMenuProps } from './subPopupMenu';
interface InnerSubMenu extends Omit<SubPopupMenuProps, 'mode'> {
    mode?: 'horizontal' | 'vertical' | 'inline';
    onDestroy?(key: string): any;
    manualRef?: any;
    isOpen?: boolean;
    active?: boolean;
    selectedKeys?: string[];
    openKeys?: string[];
    onMouseEnter?(e: any): void;
    onMouseLeave?: any;
    onTitleMouseEnter?: any;
    onTitleMouseLeave?: any;
    onTitleClick?: any;
    builtinPlacements?: any;
    prefixCls?: any;
    inlineIndent?: any;
    renderMenuItem?: any;
    onItemHover?: any;
    onOpenChange?: any;
    subMenuKey?: any;
}
export declare class SubMenu extends React.Component<InnerSubMenu> {
    static defaultProps: InnerSubMenu;
    static contextType: React.Context<{
        inlineCollapsed?: boolean;
        inlineIndent?: number;
        inlinePaddingLeft?: number;
    }>;
    constructor(props: any);
    isRootMenu: any;
    mouseenterTimeout: any;
    minWidthTimeout: any;
    subMenuTitle: any;
    menuInstance: any;
    haveRendered: any;
    haveOpened: any;
    componentDidMount(): void;
    componentDidUpdate(): void;
    componentWillUnmount(): void;
    onDestroy: (key: any) => void;
    /**
     * note:
     *  This legacy code that `onKeyDown` is called by parent instead of dom self.
     *  which need return code to check if this event is handled
     */
    onKeyDown: (e: any) => any;
    onOpenChange: (e: any) => void;
    onPopupVisibleChange: (visible: any) => void;
    onMouseEnter: (e: any) => void;
    onMouseLeave: (e: any) => void;
    onTitleMouseEnter: (domEvent: any) => void;
    onTitleMouseLeave: (e: any) => void;
    onTitleClick: (e: any) => void;
    onSubMenuClick: (info: any) => void;
    onSelect: (info: any) => void;
    onDeselect: (info: any) => void;
    getPrefixCls: () => string;
    getActiveClassName: () => string;
    getDisabledClassName: () => string;
    getSelectedClassName: () => string;
    getOpenClassName: () => string;
    saveMenuInstance: (c: any) => void;
    addKeyPath: (info: any) => any;
    triggerOpenChange: (open: any, type?: any) => void;
    isChildrenSelected: () => boolean;
    adjustWidth: () => void;
    saveSubMenuTitle: (subMenuTitle: any) => void;
    renderChildren(children: any): JSX.Element;
    internalMenuId: any;
    render(): JSX.Element;
}
declare const connected: any;
export default connected;
