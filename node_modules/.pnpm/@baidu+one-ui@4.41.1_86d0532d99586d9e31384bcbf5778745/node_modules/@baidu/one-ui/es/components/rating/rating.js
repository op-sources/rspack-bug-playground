import _extends from "@babel/runtime/helpers/extends";
import _objectWithoutPropertiesLoose from "@babel/runtime/helpers/objectWithoutPropertiesLoose";
import { IconStarSolid } from 'dls-icons-react';
import React, { useState, forwardRef, useLayoutEffect, useCallback } from 'react';
import Tooltip from '../tooltip';
import { classnames } from '../../core/commonTools';
import { withConfigConsumer } from '../providerConfig';

function RatingOption(props) {
  var _classnames;

  var prefixCls = props.prefixCls,
      value = props.value,
      selectedValue = props.selectedValue,
      currentValue = props.currentValue,
      handleOnClick = props.handleOnClick,
      setHoverValue = props.setHoverValue,
      symbol = props.symbol,
      readOnly = props.readOnly,
      half = props.half,
      labelDisplay = props.labelDisplay,
      labels = props.labels;
  var val = half ? value - .5 : value;
  var node = /*#__PURE__*/React.createElement("label", {
    className: classnames((_classnames = {}, _classnames[prefixCls + "-option-half"] = half, _classnames[prefixCls + "-option-full"] = !half, _classnames[prefixCls + "-option-selected"] = val <= currentValue, _classnames)),
    onMouseEnter: readOnly ? null : function () {
      return setHoverValue(val);
    }
  }, typeof symbol === 'function' ? symbol(val, selectedValue, currentValue) : symbol, /*#__PURE__*/React.createElement("input", {
    type: "radio",
    onClick: function onClick() {
      return handleOnClick(val);
    },
    disabled: readOnly,
    className: prefixCls + "-option-radio"
  }));
  var label = labels == null ? void 0 : labels[currentValue];

  if (label && labelDisplay === 'popup') {
    return /*#__PURE__*/React.createElement(Tooltip, {
      key: value,
      title: label,
      type: "dark"
    }, node);
  }

  return node;
}

export var RatingInternal = /*#__PURE__*/forwardRef(function (props, ref) {
  var _classnames2;

  var className = props.className,
      readOnly = props.readOnly,
      value = props.value,
      defaultValue = props.defaultValue,
      onChange = props.onChange,
      max = props.max,
      allowHalf = props.allowHalf,
      allowClear = props.allowClear,
      symbol = props.symbol,
      prefixCls = props.prefixCls,
      lightPrefix = props.lightPrefix,
      theme = props.theme,
      labels = props.labels,
      labelDisplay = props.labelDisplay,
      placeholder = props.placeholder,
      restProps = _objectWithoutPropertiesLoose(props, ["className", "readOnly", "value", "defaultValue", "onChange", "max", "allowHalf", "allowClear", "symbol", "prefixCls", "lightPrefix", "theme", "labels", "labelDisplay", "placeholder"]);

  var _useState = useState(defaultValue),
      stateValue = _useState[0],
      setStateValue = _useState[1];

  var _useState2 = useState(null),
      hoverValue = _useState2[0],
      setHoverValue = _useState2[1];

  useLayoutEffect(function () {
    if (value != null && value !== stateValue) {
      setStateValue(value);
    }
  }, [value]);
  var handleOnClick = useCallback(function (value) {
    if (stateValue === value && allowClear) {
      value = null;
    }

    setStateValue(value);
    setHoverValue(value);
    onChange == null ? void 0 : onChange(value);
  }, [stateValue, onChange, allowClear]);
  var handleOnMouseLeave = useCallback(function () {
    setHoverValue(null);
  }, []);
  var currentValue = hoverValue != null ? hoverValue : stateValue;
  var options = Array.from({
    length: max
  }).map(function (_, i) {
    return i + 1;
  });
  return /*#__PURE__*/React.createElement("span", _extends({
    ref: ref,
    className: classnames(className, prefixCls, (_classnames2 = {}, _classnames2[prefixCls + "-readonly"] = readOnly, _classnames2)),
    onMouseLeave: handleOnMouseLeave
  }, restProps), /*#__PURE__*/React.createElement("span", {
    className: prefixCls + "-options"
  }, options.map(function (value) {
    return /*#__PURE__*/React.createElement("span", {
      key: value,
      className: prefixCls + "-option"
    }, allowHalf && RatingOption({
      prefixCls: prefixCls,
      value: value,
      selectedValue: stateValue,
      currentValue: currentValue,
      handleOnClick: handleOnClick,
      setHoverValue: setHoverValue,
      symbol: symbol,
      readOnly: readOnly,
      half: true,
      labels: labels,
      labelDisplay: labelDisplay
    }), RatingOption({
      prefixCls: prefixCls,
      value: value,
      selectedValue: stateValue,
      currentValue: currentValue,
      handleOnClick: handleOnClick,
      setHoverValue: setHoverValue,
      symbol: symbol,
      readOnly: readOnly,
      labels: labels,
      labelDisplay: labelDisplay
    }));
  })), labels && labelDisplay !== 'popup' && labels[currentValue] && /*#__PURE__*/React.createElement("span", {
    className: prefixCls + "-label"
  }, labels[currentValue]), placeholder && !currentValue && /*#__PURE__*/React.createElement("span", {
    className: prefixCls + "-placeholder"
  }, placeholder));
});
RatingInternal.defaultProps = {
  prefixCls: 'one-rating',
  readOnly: false,
  allowHalf: false,
  allowClear: false,
  max: 5,
  symbol: /*#__PURE__*/React.createElement(IconStarSolid, null)
};
RatingInternal.displayName = 'Rating';
var Rating = withConfigConsumer('rating')(RatingInternal);
export default Rating;