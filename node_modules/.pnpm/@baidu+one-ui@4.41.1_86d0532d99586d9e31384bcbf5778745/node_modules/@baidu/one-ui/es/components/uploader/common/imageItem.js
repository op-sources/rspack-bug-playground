import _inheritsLoose from "@babel/runtime/helpers/inheritsLoose";
import _partial from "lodash/partial";
import React, { PureComponent, cloneElement } from 'react';
import { IconTrash, IconUpload, IconZoomIn, IconPlayCircle } from 'dls-icons-react';
import Progress from '../../progress';
import Popover from '../../popover';
import { originStatus } from '../../../core/uploaderTools';
import { classnames } from '../../../core/commonTools';
import Overlay from '../../overlay';
import MediaIcon from './mediaIcon';

var ImageItem = /*#__PURE__*/function (_PureComponent) {
  _inheritsLoose(ImageItem, _PureComponent);

  function ImageItem() {
    var _this;

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _PureComponent.call.apply(_PureComponent, [this].concat(args)) || this;
    _this.state = {
      visible: false
    };

    _this.renderItemOverlay = function (item) {
      var children = item.children;
      var _this$props = _this.props,
          prefixCls = _this$props.prefixCls,
          size = _this$props.size;
      return /*#__PURE__*/React.createElement("div", {
        className: classnames(prefixCls + "-entries-item-menus", prefixCls + "-entries-item-menus-" + size)
      }, children.map(function (child, index) {
        return /*#__PURE__*/React.createElement("span", {
          key: index,
          className: prefixCls + "-entries-item-menus-label"
        }, child.label);
      }));
    };

    _this.onVisibleChange = function (visible) {
      _this.setState({
        visible: visible
      });
    };

    _this.renderOptionIcon = function () {
      var _this$props2 = _this.props,
          showUploadListIcon = _this$props2.showUploadListIcon,
          status = _this$props2.status,
          thumbUrl = _this$props2.thumbUrl,
          prefixCls = _this$props2.prefixCls,
          onRemove = _this$props2.onRemove,
          index = _this$props2.index,
          onPreview = _this$props2.onPreview,
          onReUpload = _this$props2.onReUpload,
          fileList = _this$props2.fileList,
          controls = _this$props2.controls,
          type = _this$props2.type;
      var previewIcon = type.indexOf('video') > -1 ? /*#__PURE__*/React.createElement(IconPlayCircle, {
        onClick: _partial(onPreview, index)
      }) : /*#__PURE__*/React.createElement(IconZoomIn, {
        onClick: _partial(onPreview, index)
      });
      var reUploadIcon = /*#__PURE__*/React.createElement(IconUpload, {
        onClick: _partial(onReUpload, index)
      });
      var trashIcon = /*#__PURE__*/React.createElement(IconTrash, {
        onClick: _partial(onRemove, index)
      });
      var actions = [{
        icon: previewIcon,
        key: 'preview'
      }, {
        icon: reUploadIcon,
        key: 'reUpload'
      }, {
        icon: trashIcon,
        key: 'delete'
      }];

      if (typeof controls === 'function') {
        actions = controls(fileList[index], actions) || [];
      } else if (showUploadListIcon != null && typeof showUploadListIcon === 'object') {
        var showPreviewIcon = showUploadListIcon.showPreviewIcon,
            showReUploadIcon = showUploadListIcon.showReUploadIcon,
            showRemoveOnIcon = showUploadListIcon.showRemoveOnIcon;
        actions[0].visible = !!(status === originStatus.SUCCESS && thumbUrl && showPreviewIcon);
        actions[1].visible = !!((status === originStatus.SUCCESS || status === originStatus.ERROR) && showReUploadIcon);
        actions[2].visible = !!showRemoveOnIcon;
      } else if (typeof showUploadListIcon === 'function') {
        actions = showUploadListIcon(fileList[index], actions) || [];
      }

      actions = actions.filter(function (action) {
        return action.visible !== false;
      });

      if (actions.length === 0) {
        return null;
      }

      return /*#__PURE__*/React.createElement("div", {
        className: prefixCls + "-image-item-card-operation-icons"
      }, actions.map(function (item, key) {
        var action = item.children && item.children.length ? /*#__PURE__*/React.createElement(Overlay, {
          overlay: _this.renderItemOverlay(item),
          onVisibleChange: _this.onVisibleChange
        }, item.icon) : item.icon;
        return /*#__PURE__*/cloneElement(action, {
          key: key
        });
      }));
    };

    _this.renderOpertaion = function (iconsSet) {
      var _classnames;

      var _this$props3 = _this.props,
          customUploadListIcon = _this$props3.customUploadListIcon,
          renderCustomIcon = _this$props3.renderCustomIcon,
          prefixCls = _this$props3.prefixCls;

      if (customUploadListIcon) {
        return customUploadListIcon;
      }

      if (typeof renderCustomIcon === 'function') {
        return renderCustomIcon(_this.props);
      }

      return /*#__PURE__*/React.createElement("div", {
        className: classnames(prefixCls + "-image-item-card-operation", (_classnames = {}, _classnames[prefixCls + "-image-item-card-operation-hide"] = !iconsSet, _classnames[prefixCls + "-image-item-card-operation-overlay-open"] = _this.state.visible, _classnames))
      }, /*#__PURE__*/React.createElement("div", {
        className: prefixCls + "-image-item-card-operation-mask"
      }), iconsSet);
    };

    return _this;
  }

  var _proto = ImageItem.prototype;

  _proto.renderHelper = function renderHelper() {
    var _this$props4 = this.props,
        prefixCls = _this$props4.prefixCls,
        showHelper = _this$props4.showHelper,
        helperText = _this$props4.helperText;

    if (!helperText || !showHelper) {
      return null;
    }

    var helperTextNode;

    if (typeof helperText === 'function') {
      helperTextNode = helperText();
    } else {
      helperTextNode = helperText;
    }

    return helperTextNode ? /*#__PURE__*/React.createElement("div", {
      className: prefixCls + "-helper-text"
    }, helperTextNode) : null;
  };

  _proto.render = function render() {
    var _classnames2, _classnames3;

    var _this$props5 = this.props,
        prefixCls = _this$props5.prefixCls,
        status = _this$props5.status,
        name = _this$props5.name,
        size = _this$props5.size,
        progressStep = _this$props5.progressStep,
        thumbUrl = _this$props5.thumbUrl,
        errorMessage = _this$props5.errorMessage,
        realType = _this$props5.realType,
        className = _this$props5.className,
        pickerIcon = _this$props5.pickerIcon,
        errorDisplay = _this$props5.errorDisplay,
        footer = _this$props5.footer,
        showHelper = _this$props5.showHelper,
        helperText = _this$props5.helperText,
        helperTextPosition = _this$props5.helperTextPosition,
        theme = _this$props5.theme;
    var itemClassNames = classnames(prefixCls + "-image-item", prefixCls + "-image-item-" + status, className, (_classnames2 = {}, _classnames2[prefixCls + "-image-item-helper-" + helperTextPosition] = showHelper && helperText, _classnames2));
    var iconsSet = this.renderOptionIcon();
    var iconContainer = this.renderOpertaion(iconsSet);
    var mediaIcon = /*#__PURE__*/React.createElement(MediaIcon, {
      theme: theme,
      type: realType,
      className: prefixCls + "-" + realType + "-add-icon"
    });
    var hasError = errorMessage && errorMessage.length;

    if (hasError && size === 'small') {
      mediaIcon = null;
    }

    var imageItem = /*#__PURE__*/React.createElement("div", {
      className: classnames(prefixCls + "-image-item-card", (_classnames3 = {}, _classnames3[prefixCls + "-image-item-card-hide"] = !iconsSet, _classnames3))
    }, status === originStatus.WAITING || status === originStatus.ERROR && !thumbUrl ? /*#__PURE__*/React.createElement("div", {
      className: prefixCls + "-add-icon"
    }, pickerIcon || mediaIcon) : null, status === originStatus.UPLOADING ? /*#__PURE__*/React.createElement("div", {
      className: prefixCls + "-image-item-uploading-container"
    }, /*#__PURE__*/React.createElement("div", {
      className: prefixCls + "-image-item-uploading-text"
    }, "\u4E0A\u4F20\u4E2D"), /*#__PURE__*/React.createElement(Progress, {
      size: "small",
      percent: progressStep,
      showInfo: false,
      className: prefixCls + "-image-item-progress"
    })) : null, status === originStatus.SUCCESS || thumbUrl ? /*#__PURE__*/React.createElement("span", {
      className: prefixCls + "-image-item-thumbUrl"
    }, thumbUrl ? /*#__PURE__*/React.createElement("img", {
      src: thumbUrl,
      alt: name,
      className: prefixCls + "-image-item-thumbUrl-image"
    }) : mediaIcon) : null, hasError && !thumbUrl ? /*#__PURE__*/React.createElement("div", {
      className: prefixCls + "-image-item-error-message"
    }, /*#__PURE__*/React.createElement("span", {
      className: prefixCls + "-image-item-error-message-tip"
    }, name)) : null, iconContainer);
    var error = hasError ? errorMessage.join('ï¼Œ') : null;
    return /*#__PURE__*/React.createElement("div", {
      className: itemClassNames
    }, /*#__PURE__*/React.createElement("div", null, hasError && errorDisplay === 'popup' ? /*#__PURE__*/React.createElement(Popover, {
      content: error,
      overlayClassName: prefixCls + "-file-item-popover",
      placement: "top"
    }, imageItem) : imageItem, footer ? /*#__PURE__*/React.createElement("div", {
      className: prefixCls + "-image-item-card-footer"
    }, footer) : null, hasError && errorDisplay === 'normal' ? /*#__PURE__*/React.createElement("div", {
      className: prefixCls + "-image-item-card-error"
    }, error) : null), this.renderHelper());
  };

  return ImageItem;
}(PureComponent);

ImageItem.defaultProps = {
  thumbUrl: '',
  type: 'image',
  showUploadListIcon: {
    showPreviewIcon: true,
    showReUploadIcon: true,
    showRemoveOnIcon: true
  }
};
export { ImageItem as default };