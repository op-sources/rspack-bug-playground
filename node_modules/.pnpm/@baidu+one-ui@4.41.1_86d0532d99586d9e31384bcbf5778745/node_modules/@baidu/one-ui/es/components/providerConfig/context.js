import _extends from "@babel/runtime/helpers/extends";
import _objectWithoutPropertiesLoose from "@babel/runtime/helpers/objectWithoutPropertiesLoose";

/**
 * @file 顶层context
 * @author huangshiming
 * @date 2020-04-28
 */
import React, { forwardRef } from 'react';
import classnames from 'classnames';
import { THEME_LIGHT_D22, PREFIX, THEME_LIGHT_AI, THEME_LIGHT_AI_PREFIX } from '../config';
var context = /*#__PURE__*/React.createContext(undefined);
var lightThemeComponents = [// components
'select', 'dropdown', 'cascader', 'uploader', 'pagination', 'radio-group', 'checkbox-group', 'input', 'input-group', 'number-input', 'textarea', 'search-box', 'time-picker', 'date-picker', 'button', // containers
'popover', 'loading', 'tooltip', 'overlay', 'drawer', 'dialog', 'row', 'col', 'card', 'tabs', 'form', 'stack', 'layout', 'layout-header', 'layout-footer', 'layout-sidebar', 'layout-content'];
export var Consumer = context.Consumer;
export default context;
/**
 * 组件decorator，用于处理全局config
 *
 * @param suffixCls 组件className后缀
 */

export var withConfigConsumer = function withConfigConsumer(suffixCls) {
  return function (Component) {
    var ComponentWithConsumer = /*#__PURE__*/forwardRef(function (props, ref) {
      return /*#__PURE__*/React.createElement(Consumer, null, function (config) {
        var _ref = config || {},
            size = _ref.size,
            _ref$prefixCls = _ref.prefixCls,
            prefixCls = _ref$prefixCls === void 0 ? PREFIX : _ref$prefixCls,
            theme = _ref.theme,
            normalized = _ref.normalized,
            table = _ref.table;

        var normalizedConfig = suffixCls === 'table' && table && table.loadingOption ? {
          loadingOption: table.loadingOption
        } : {};

        if (normalized) {
          normalizedConfig.normalized = normalized;
        }

        if (size) {
          normalizedConfig.size = size;
        }

        var className = props.className,
            compnentTheme = props.theme,
            restProps = _objectWithoutPropertiesLoose(props, ["className", "theme"]);

        var normalizedTheme = compnentTheme || theme;
        var normalizedPrefixCls = prefixCls;

        if (normalizedTheme === THEME_LIGHT_AI) {
          normalizedPrefixCls = THEME_LIGHT_AI_PREFIX;
          normalizedTheme = THEME_LIGHT_D22;
        }

        if (prefixCls) {
          normalizedConfig.lightPrefix = normalizedPrefixCls;
          normalizedConfig.prefixCls = normalizedPrefixCls + "-" + suffixCls;
        }

        if (normalizedTheme) {
          normalizedConfig.theme = normalizedTheme;

          if (normalizedTheme !== THEME_LIGHT_D22 || lightThemeComponents.includes(suffixCls)) {
            var themeClassName = normalizedPrefixCls + "-theme-" + normalizedTheme;

            if (!className || className.indexOf(themeClassName) === -1) {
              className = classnames(className, themeClassName);
            }
          }
        }

        var themeName = normalizedConfig.lightPrefix === THEME_LIGHT_AI_PREFIX ? THEME_LIGHT_AI : compnentTheme || theme;
        normalizedConfig.className = !className ? themeName : RegExp("(^|s)" + themeName).test(className) ? className : classnames(className, themeName);
        var component = /*#__PURE__*/React.createElement(Component, _extends({
          ref: ref
        }, normalizedConfig, restProps));

        if (normalizedTheme === THEME_LIGHT_D22 && !lightThemeComponents.includes(suffixCls)) {
          return /*#__PURE__*/React.createElement(context.Provider, {
            value: _extends({}, config, {
              prefixCls: normalizedPrefixCls,
              theme: ''
            })
          }, component);
        }

        return /*#__PURE__*/React.createElement(context.Provider, {
          value: _extends({}, config, {
            theme: normalizedTheme,
            prefixCls: normalizedPrefixCls
          })
        }, component);
      });
    });
    ComponentWithConsumer.displayName = Component.displayName || Component.name;
    return ComponentWithConsumer;
  };
};