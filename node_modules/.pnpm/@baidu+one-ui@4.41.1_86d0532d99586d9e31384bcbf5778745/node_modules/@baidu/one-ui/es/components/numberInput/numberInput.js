import _extends from "@babel/runtime/helpers/extends";
import _objectWithoutPropertiesLoose from "@babel/runtime/helpers/objectWithoutPropertiesLoose";
import _inheritsLoose from "@babel/runtime/helpers/inheritsLoose";

var _dec, _class, _class2, _temp;

import React, { PureComponent } from 'react';
import { IconChevronDown, IconChevronUp, IconPlus, IconMinus } from 'dls-icons-react';
import Popover from '../popover';
import Button from '../button';
import { classnames } from '../../core/commonTools';
import { changeNumber, numberFormater, rangeFormater } from '../../core/numberInputTools';
import { getPopoverProps, tipsAndErrorRender } from '../../core/tipsAndErrorTools';
import { withConfigConsumer } from '../providerConfig/context';
import { COMPONENT_FOCUS, COMPONENT_INVALID, COMPONENT_MAIN } from '../config';
var NumberInput = (_dec = withConfigConsumer('number-input'), _dec(_class = (_temp = _class2 = /*#__PURE__*/function (_PureComponent) {
  _inheritsLoose(NumberInput, _PureComponent);

  function NumberInput(_props) {
    var _this;

    _this = _PureComponent.call(this, _props) || this;
    _this.numberBoxRef = void 0;

    _this.onInputBoxChange = function (e) {
      var _this$props = _this.props,
          min = _this$props.min,
          max = _this$props.max,
          disabled = _this$props.disabled;

      if (disabled) {
        return;
      }

      var value = numberFormater(e.target.value, _this.props);

      _this.setState({
        inputValue: value
      });

      if (String(e.target.value).endsWith('.')) {
        return;
      }

      var normalizedValue = _this.normalizeValue(value);

      if (normalizedValue !== '' && (min != null && normalizedValue < min || max != null && normalizedValue > max)) {
        return;
      }

      _this.handleOnChange(normalizedValue);
    };

    _this.onInputBoxBlur = function (e) {
      var onBlur = _this.props.onBlur;
      var value = e.target.value;

      if (value != null && value !== '') {
        var normalizedValue = _this.normalizeValue(rangeFormater(value, _this.props));

        _this.setState({
          value: normalizedValue,
          inputValue: normalizedValue
        });

        _this.handleOnChange(normalizedValue);
      }

      onBlur(e);

      _this.setState({
        hasFocus: false
      });
    };

    _this.onSpinButtonClick = function (e) {
      var props = _this.props;
      var disabled = props.disabled,
          readOnly = props.readOnly,
          step = props.step,
          min = props.min;

      if (disabled || readOnly) {
        return;
      }

      var dataset = e && e.currentTarget && e.currentTarget.dataset;
      var optValue = dataset.uiCmd === 'add' ? 1 : -1;

      if (optValue === 1 && _this.state.arrowUpDisable || optValue === -1 && _this.state.arrowDownDisable) {
        return;
      }

      var target = _this.numberBoxRef;
      var value = target.value;

      if (isNaN(+value) || value.length === 0) {
        value = "" + min || '0.0';
      }

      _this.handleOnChange(_this.normalizeValue(changeNumber(value, step, optValue)));

      _this.numberBoxRef.focus();
    };

    _this.onInputBoxFocus = function (e) {
      _this.setState({
        hasFocus: true
      });

      _this.props.onFocus(e);
    };

    _this.disableArrow = function (currentValue) {
      var _this$props2 = _this.props,
          min = _this$props2.min,
          max = _this$props2.max;

      if (!_this.state.arrowDownDisable && currentValue <= min && min != null) {
        _this.setState({
          arrowDownDisable: true
        });
      } else if (currentValue > min) {
        _this.setState({
          arrowDownDisable: false
        });
      }

      if (max != null && currentValue >= max && !_this.state.arrowUpDisable) {
        _this.setState({
          arrowUpDisable: true
        });
      } else if (currentValue < max) {
        _this.setState({
          arrowUpDisable: false
        });
      }
    };

    _this.addRef = function (node) {
      _this.numberBoxRef = node;
    };

    _this.onButtonFocusIn = function () {
      _this.setState({
        hasFocus: true
      });
    };

    _this.handleOnKeyDown = function (e) {
      var _this$props3 = _this.props,
          onKeyDown = _this$props3.onKeyDown,
          onPressEnter = _this$props3.onPressEnter;

      if (e.keyCode === 13) {
        onPressEnter == null ? void 0 : onPressEnter({
          value: e.target.value
        });
      }

      onKeyDown == null ? void 0 : onKeyDown(e);
    };

    var _value = typeof _props.value === 'undefined' ? _props.defaultValue : _props.value;

    _this.state = {
      hasFocus: false,
      arrowUpDisable: false,
      arrowDownDisable: false,
      value: _value,
      inputValue: _value
    };
    return _this;
  }

  NumberInput.getDerivedStateFromProps = function getDerivedStateFromProps(nextProps, prevState) {
    var value = nextProps.value;

    if ('value' in nextProps && value !== prevState.value) {
      return {
        value: value,
        inputValue: value
      };
    }

    return null;
  };

  var _proto = NumberInput.prototype;

  _proto.focus = function focus() {
    this.numberBoxRef.focus();
  };

  _proto.blur = function blur() {
    this.numberBoxRef.blur();
  };

  _proto.componentDidUpdate = function componentDidUpdate() {
    this.disableArrow(this.state.value);
  };

  _proto.componentDidMount = function componentDidMount() {
    this.disableArrow(this.state.value);
  };

  _proto.normalizeValue = function normalizeValue(value) {
    return value === '' ? value : +value;
  };

  _proto.handleOnChange = function handleOnChange(value) {
    var val = this.state.value;

    if (value === val || value === Number(val) && String(value).trim() !== '0') {
      return;
    }

    this.disableArrow(value);

    if (!('value' in this.props)) {
      this.setState({
        value: value,
        inputValue: value
      });
    }

    this.props.onChange({
      target: {
        value: this.props.valueAsNumber ? value : String(value)
      }
    });
  };

  _proto.renderPrefix = function renderPrefix() {
    var _this$props4 = this.props,
        prefix = _this$props4.prefix,
        prefixCls = _this$props4.prefixCls;

    if (prefix == null) {
      return null;
    }

    return /*#__PURE__*/React.createElement("span", {
      className: prefixCls + "-affix " + prefixCls + "-prefix"
    }, prefix);
  };

  _proto.renderSuffix = function renderSuffix() {
    var _this$props5 = this.props,
        suffix = _this$props5.suffix,
        prefixCls = _this$props5.prefixCls;

    if (suffix == null) {
      return null;
    }

    return /*#__PURE__*/React.createElement("span", {
      className: prefixCls + "-affix " + prefixCls + "-suffix"
    }, suffix);
  };

  _proto.render = function render() {
    var _classnames, _classnames2, _classnames3, _classnames4, _classnames5, _classnames6;

    var props = this.props;

    var className = props.className,
        placeholder = props.placeholder,
        min = props.min,
        max = props.max,
        prefixCls = props.prefixCls,
        disabled = props.disabled,
        errorMessage = props.errorMessage,
        showTip = props.showTip,
        tipText = props.tipText,
        tipLocation = props.tipLocation,
        tailLabel = props.tailLabel,
        width = props.width,
        errorLocation = props.errorLocation,
        location = props.location,
        modeProp = props.mode,
        size = props.size,
        readOnly = props.readOnly,
        showErrorWithoutErrorMessage = props.showErrorWithoutErrorMessage,
        showErrorMessage = props.showErrorMessage,
        autoFocus = props.autoFocus,
        defaultValue = props.defaultValue,
        onBlur = props.onBlur,
        onChange = props.onChange,
        onFocus = props.onFocus,
        onKeyDown = props.onKeyDown,
        onPressEnter = props.onPressEnter,
        type = props.type,
        step = props.step,
        fixed = props.fixed,
        value = props.value,
        showSpinButtons = props.showSpinButtons,
        prefix = props.prefix,
        suffix = props.suffix,
        lightPrefix = props.lightPrefix,
        valueAsNumber = props.valueAsNumber,
        restProps = _objectWithoutPropertiesLoose(props, ["className", "placeholder", "min", "max", "prefixCls", "disabled", "errorMessage", "showTip", "tipText", "tipLocation", "tailLabel", "width", "errorLocation", "location", "mode", "size", "readOnly", "showErrorWithoutErrorMessage", "showErrorMessage", "autoFocus", "defaultValue", "onBlur", "onChange", "onFocus", "onKeyDown", "onPressEnter", "type", "step", "fixed", "value", "showSpinButtons", "prefix", "suffix", "lightPrefix", "valueAsNumber"]);

    var _this$state = this.state,
        hasFocus = _this$state.hasFocus,
        arrowUpDisable = _this$state.arrowUpDisable,
        arrowDownDisable = _this$state.arrowDownDisable;
    var inputProp = {
      type: 'text',
      placeholder: placeholder || '',
      // 当place是false时，不应该显示false
      value: numberFormater(this.state.inputValue, props),
      onFocus: this.onInputBoxFocus,
      onChange: this.onInputBoxChange,
      onBlur: this.onInputBoxBlur,
      autoFocus: autoFocus
    };
    var mode = showSpinButtons === false ? 'basic' : modeProp;
    var mainClass = prefixCls + "-main";
    var mainProps = {
      className: classnames(mainClass, (_classnames = {}, _classnames[COMPONENT_MAIN(lightPrefix)] = true, _classnames[COMPONENT_FOCUS(lightPrefix)] = hasFocus, _classnames[mainClass + "-focus"] = hasFocus, _classnames[mainClass + "-disabled"] = disabled, _classnames[mainClass + "-readonly"] = readOnly, _classnames)),
      style: {
        width: width
      }
    };
    var addonClass = mainClass + "-addon";
    var containerProps = {
      className: classnames(prefixCls, (_classnames2 = {}, _classnames2[prefixCls + "-with-spin"] = showSpinButtons, _classnames2))
    };
    var wrapperClass = prefixCls + "-wrapper";

    var wrapperProps = _extends({
      className: classnames(className, wrapperClass, prefixCls + "-" + size, prefixCls + "-" + mode, (_classnames3 = {}, _classnames3[prefixCls + "-error"] = errorMessage || showErrorWithoutErrorMessage, _classnames3[wrapperClass + "-" + mode] = mode, _classnames3[COMPONENT_INVALID(lightPrefix)] = errorMessage || showErrorWithoutErrorMessage, _classnames3))
    }, restProps);

    var btnContainer = {
      className: classnames(prefixCls + "-spin-buttons-container", (_classnames4 = {}, _classnames4[prefixCls + "-spin-buttons-container-focus"] = hasFocus, _classnames4))
    };
    var inputDisabled = disabled;
    var tailLabelClass = prefixCls + "-tail-label";
    var popParams = {
      tipLocation: tipLocation,
      errorMessage: errorMessage,
      tipText: showTip && (tipText || (min == null || max == null ? '' : "\u8303\u56F4\uFF1A" + min + "~" + max)),
      errorLocation: errorLocation,
      location: location,
      prefixCls: prefixCls,
      size: size
    };
    var beforeCommon = {
      className: classnames((_classnames5 = {}, _classnames5[prefixCls + "-icon-disabled"] = arrowDownDisable || inputDisabled || readOnly, _classnames5)),
      'data-ui-cmd': 'sub',
      onClick: this.onSpinButtonClick
    };

    var beforeAddonProps = _extends({}, beforeCommon, {
      className: classnames(addonClass, addonClass + "-before", beforeCommon.className),
      disabled: arrowDownDisable || inputDisabled || readOnly
    });

    var afterCommon = {
      className: classnames((_classnames6 = {}, _classnames6[prefixCls + "-icon-disabled"] = arrowUpDisable || inputDisabled || readOnly, _classnames6)),
      'data-ui-cmd': 'add',
      onClick: this.onSpinButtonClick
    };

    var afterAddonProps = _extends({}, afterCommon, {
      className: classnames(addonClass, addonClass + "-after", afterCommon.className),
      disabled: arrowUpDisable || inputDisabled || readOnly
    });

    return /*#__PURE__*/React.createElement("div", wrapperProps, /*#__PURE__*/React.createElement(Popover, getPopoverProps(popParams, {
      hasFocus: hasFocus
    }), /*#__PURE__*/React.createElement("div", mainProps, /*#__PURE__*/React.createElement(Button, _extends({
      type: "text-aux"
    }, beforeAddonProps), /*#__PURE__*/React.createElement(IconMinus, null)), /*#__PURE__*/React.createElement("div", containerProps, this.renderPrefix(), /*#__PURE__*/React.createElement("input", _extends({}, inputProp, {
      disabled: inputDisabled,
      readOnly: readOnly,
      onKeyDown: this.handleOnKeyDown,
      ref: this.addRef
    })), showSpinButtons && /*#__PURE__*/React.createElement("div", _extends({}, btnContainer, {
      onFocus: this.onButtonFocusIn
    }), /*#__PURE__*/React.createElement(Button, _extends({
      type: "text-aux"
    }, afterCommon, {
      tabIndex: 1
    }), /*#__PURE__*/React.createElement(IconChevronUp, null)), /*#__PURE__*/React.createElement(Button, _extends({
      type: "text-aux"
    }, beforeCommon, {
      tabIndex: 2
    }), /*#__PURE__*/React.createElement(IconChevronDown, null))), this.renderSuffix()), /*#__PURE__*/React.createElement(Button, _extends({
      type: "text-aux"
    }, afterAddonProps), /*#__PURE__*/React.createElement(IconPlus, null)))), tailLabel ? /*#__PURE__*/React.createElement("span", {
      className: tailLabelClass
    }, tailLabel) : null, showErrorMessage ? tipsAndErrorRender(popParams) : null);
  };

  return NumberInput;
}(PureComponent), _class2.defaultProps = {
  type: 'float',
  placeholder: '',
  prefixCls: 'one-number-input',
  disabled: false,
  max: null,
  min: null,
  step: 1.0,
  fixed: Number.POSITIVE_INFINITY,
  onChange: function onChange() {},
  onFocus: function onFocus() {},
  onBlur: function onBlur() {},
  showTip: true,
  errorMessage: '',
  location: 'right',
  tipLocation: null,
  errorLocation: null,
  tailLabel: null,
  width: null,
  mode: 'basic',
  size: 'medium',
  showErrorWithoutErrorMessage: false,
  showErrorMessage: true,
  autoFocus: false,
  showSpinButtons: true,
  valueAsNumber: false
}, _temp)) || _class);
export default NumberInput;