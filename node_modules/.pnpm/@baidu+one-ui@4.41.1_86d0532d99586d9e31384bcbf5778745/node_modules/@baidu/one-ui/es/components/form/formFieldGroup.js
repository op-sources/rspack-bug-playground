import _extends from "@babel/runtime/helpers/extends";
import _objectWithoutPropertiesLoose from "@babel/runtime/helpers/objectWithoutPropertiesLoose";
import _isNil from "lodash/isNil";
import React, { useContext } from 'react';
import { classnames } from '../../core/commonTools';
import { FormContext } from './context';

/**
 * @visibleName FormFieldGroup
 */
export var FormFieldGroup = function FormFieldGroup(_ref) {
  var _classnames, _classnames2;

  var children = _ref.children,
      className = _ref.className,
      prefixCls = _ref.prefixCls,
      layout = _ref.layout,
      labelAlign = _ref.labelAlign,
      labelPosition = _ref.labelPosition,
      fillWidth = _ref.fillWidth,
      density = _ref.density,
      size = _ref.size,
      props = _objectWithoutPropertiesLoose(_ref, ["children", "className", "prefixCls", "layout", "labelAlign", "labelPosition", "fillWidth", "density", "size"]);

  var formContext = useContext(FormContext);

  var context = _extends({}, formContext, {
    labelAlign: labelAlign,
    labelPosition: labelPosition
  });

  if (!_isNil(fillWidth)) {
    context.fillWidth = fillWidth;
  }

  return /*#__PURE__*/React.createElement(FormContext.Provider, {
    value: context
  }, /*#__PURE__*/React.createElement("div", _extends({
    className: classnames(prefixCls + "-field-group", className, prefixCls + "-" + layout, prefixCls + "-" + size, prefixCls + "-type-" + density, (_classnames = {}, _classnames[prefixCls + "-field-group-fill"] = context.fillWidth, _classnames), (_classnames2 = {}, _classnames2[prefixCls + "-label-position-" + labelPosition] = labelPosition, _classnames2))
  }, props), children));
};
FormFieldGroup.defaultProps = {
  prefixCls: 'one-form',
  layout: 'default',
  labelAlign: 'left',
  labelPosition: 'side',
  density: 'compact'
};
export default FormFieldGroup;