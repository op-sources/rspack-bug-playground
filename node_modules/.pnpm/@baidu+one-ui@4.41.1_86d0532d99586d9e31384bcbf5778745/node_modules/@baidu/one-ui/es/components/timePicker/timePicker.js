import _extends from "@babel/runtime/helpers/extends";
import _inheritsLoose from "@babel/runtime/helpers/inheritsLoose";

var _dec, _class, _class2, _temp;

import React, { PureComponent } from 'react';
import Trigger from 'rc-trigger';
import moment from 'moment';
import { generateOptions, toNearestValidTime, noop } from '../../core/timePickerTools';
import TimeInput from './common/timeInput';
import TimePickerPanel from './common/timePickerPanel';
import placements from './common/placements';
import { classnames } from '../../core/commonTools';
import { withConfigConsumer } from '../providerConfig/context';
export var getFormat = function getFormat(props) {
  var format = props.format,
      showHour = props.showHour,
      showMinute = props.showMinute,
      showSecond = props.showSecond,
      use12Hours = props.use12Hours;

  if (format) {
    return format;
  }

  if (use12Hours) {
    var fmtString = [showHour ? 'h' : '', showMinute ? 'mm' : '', showSecond ? 'ss' : ''].filter(function (item) {
      return !!item;
    }).join(':');
    return fmtString.concat(' a');
  }

  return [showHour ? 'HH' : '', showMinute ? 'mm' : '', showSecond ? 'ss' : ''].filter(function (item) {
    return !!item;
  }).join(':');
};
export var momentValue = function momentValue(value, props) {
  return value ? moment(value, getFormat(props), true) : null;
};
;
var TimePicker = (_dec = withConfigConsumer('time-picker'), _dec(_class = (_temp = _class2 = /*#__PURE__*/function (_PureComponent) {
  _inheritsLoose(TimePicker, _PureComponent);

  function TimePicker(props) {
    var _this;

    _this = _PureComponent.call(this, props) || this;
    _this.timePickerTargetRef = void 0;
    _this.panelInstance = void 0;

    _this.setDropdownWidth = function () {
      var width = _this.timePickerTargetRef.offsetWidth;

      if (width !== _this.state.dropdownWidth) {
        _this.setState({
          dropdownWidth: width
        });
      }
    };

    _this.saveRef = function (ref) {
      _this.timePickerTargetRef = ref;
    };

    _this.onPanelChange = function (value) {
      _this.setValue(value);
    };

    _this.onAmPmChange = function (ampm) {
      _this.props.onAmPmChange(ampm);
    };

    _this.onClear = function (event) {
      event.stopPropagation();

      _this.setValue(null);

      _this.setOpen(false);
    };

    _this.onVisibleChange = function (open) {
      _this.setOpen(open);
    };

    _this.onEsc = function () {
      _this.setOpen(false);
    };

    _this.onKeyDown = function (e) {
      if (e.keyCode === 40) {
        _this.setOpen(true);
      }

      _this.props.onKeyDown(e);
    };

    _this.onFocus = function () {
      _this.props.onFocus();
    };

    _this.onBlur = function () {
      _this.props.onBlur();
    };

    _this.getPlaceHolder = function () {
      var _this$props = _this.props,
          placeholder = _this$props.placeholder,
          showHour = _this$props.showHour,
          showMinute = _this$props.showMinute,
          showSecond = _this$props.showSecond;

      if ('placeholder' in _this.props) {
        return placeholder;
      }

      return [showHour ? '小时' : '', showMinute ? '分钟' : '', showSecond ? '秒钟' : ''].filter(function (item) {
        return !!item;
      }).join(':');
    };

    _this.setValue = function (value) {
      if (!('value' in _this.props)) {
        _this.setState({
          value: value
        });
      }

      var formatValue = value;

      if (value && typeof value === 'object' && value.format) {
        formatValue = value.format(getFormat(_this.props));
      }

      _this.props.onChange(formatValue);
    };

    _this.setOpen = function (open) {
      var _this$props2 = _this.props,
          onOpen = _this$props2.onOpen,
          onClose = _this$props2.onClose;
      var currentOpen = _this.state.open;

      if (currentOpen !== open) {
        if (!('open' in _this.props)) {
          _this.setState({
            open: open
          });
        }

        if (open) {
          onOpen({
            open: open
          });
        } else {
          onClose({
            open: open
          });
        }
      }
    };

    _this.getPopupClassName = function () {
      var _this$props3 = _this.props,
          showHour = _this$props3.showHour,
          showMinute = _this$props3.showMinute,
          showSecond = _this$props3.showSecond,
          use12Hours = _this$props3.use12Hours,
          prefixCls = _this$props3.prefixCls,
          popupClassName = _this$props3.popupClassName;
      var className = popupClassName; // Keep it for old compatibility

      if ((!showHour || !showMinute || !showSecond) && !use12Hours) {
        className += " " + prefixCls + "-panel-narrow";
      }

      var selectColumnCount = 0;

      if (showHour) {
        selectColumnCount += 1;
      }

      if (showMinute) {
        selectColumnCount += 1;
      }

      if (showSecond) {
        selectColumnCount += 1;
      }

      if (use12Hours) {
        selectColumnCount += 1;
      }

      className += " " + prefixCls + "-panel-column-" + selectColumnCount;
      return className;
    };

    _this.getOptions = function () {
      var _this$props4 = _this.props,
          disabledMinutes = _this$props4.disabledMinutes,
          disabledSeconds = _this$props4.disabledSeconds,
          hideDisabledOptions = _this$props4.hideDisabledOptions,
          hourStep = _this$props4.hourStep,
          minuteStep = _this$props4.minuteStep,
          secondStep = _this$props4.secondStep;
      var value = _this.state.value;

      var disabledHourOptions = _this.disabledHours();

      var disabledMinuteOptions = disabledMinutes(value ? value.hour() : null);
      var disabledSecondOptions = disabledSeconds(value ? value.hour() : null, value ? value.minute() : null);
      var hourOptions = generateOptions(24, disabledHourOptions, hideDisabledOptions, hourStep);
      var minuteOptions = generateOptions(60, disabledMinuteOptions, hideDisabledOptions, minuteStep);
      var secondOptions = generateOptions(60, disabledSecondOptions, hideDisabledOptions, secondStep);
      return {
        hourOptions: hourOptions,
        minuteOptions: minuteOptions,
        secondOptions: secondOptions
      };
    };

    _this.getPanelElement = function () {
      var _this$props5 = _this.props,
          prefixCls = _this$props5.prefixCls,
          disabledMinutes = _this$props5.disabledMinutes,
          disabledSeconds = _this$props5.disabledSeconds,
          hideDisabledOptions = _this$props5.hideDisabledOptions,
          showHour = _this$props5.showHour,
          showMinute = _this$props5.showMinute,
          showSecond = _this$props5.showSecond,
          defaultOpenValue = _this$props5.defaultOpenValue,
          use12Hours = _this$props5.use12Hours,
          size = _this$props5.size;
      var value = _this.state.value;

      var _this$getOptions = _this.getOptions(),
          hourOptions = _this$getOptions.hourOptions,
          minuteOptions = _this$getOptions.minuteOptions,
          secondOptions = _this$getOptions.secondOptions;

      return /*#__PURE__*/React.createElement(TimePickerPanel, {
        prefixCls: prefixCls + "-panel",
        ref: function ref(_ref) {
          _this.panelInstance = _ref;
        },
        className: prefixCls + "-panel-" + size,
        value: value,
        onChange: _this.onPanelChange,
        onAmPmChange: _this.onAmPmChange,
        defaultOpenValue: defaultOpenValue,
        showHour: showHour,
        showMinute: showMinute,
        showSecond: showSecond,
        onEsc: _this.onEsc,
        format: getFormat(_this.props),
        disabledHours: _this.disabledHours,
        disabledMinutes: disabledMinutes,
        disabledSeconds: disabledSeconds,
        use12Hours: use12Hours,
        hourOptions: hourOptions,
        minuteOptions: minuteOptions,
        secondOptions: secondOptions,
        isAM: _this.isAM()
      });
    };

    _this.disabledHours = function () {
      var _this$props6 = _this.props,
          use12Hours = _this$props6.use12Hours,
          disabledHours = _this$props6.disabledHours;
      var disabledOptions = disabledHours();

      if (use12Hours && Array.isArray(disabledOptions)) {
        if (_this.isAM()) {
          disabledOptions = disabledOptions.filter(function (h) {
            return h < 12;
          }).map(function (h) {
            return h === 0 ? 12 : h;
          });
        } else {
          disabledOptions = disabledOptions.map(function (h) {
            return h === 12 ? 12 : h - 12;
          });
        }
      }

      return disabledOptions;
    };

    var _open = props.open,
        _value = props.value;
    _this.state = {
      open: _open,
      value: momentValue(_value, props),
      dropdownWidth: null
    };
    return _this;
  }

  var _proto = TimePicker.prototype;

  _proto.componentDidMount = function componentDidMount() {
    this.setDropdownWidth();
  };

  _proto.componentDidUpdate = function componentDidUpdate() {
    this.setDropdownWidth();
  };

  TimePicker.getDerivedStateFromProps = function getDerivedStateFromProps(nextProps) {
    var value = nextProps.value,
        open = nextProps.open;
    var newState = {};

    if ('value' in nextProps) {
      newState.value = momentValue(value, nextProps);
    }

    if (open !== undefined) {
      newState.open = open;
    }

    return newState;
  };

  _proto.isAM = function isAM() {
    var defaultOpenValue = this.props.defaultOpenValue;
    var value = this.state.value;
    var realValue = value || defaultOpenValue;
    return realValue.hour() >= 0 && realValue.hour() < 12;
  };

  _proto.render = function render() {
    var _classnames;

    var _this$props7 = this.props,
        prefixCls = _this$props7.prefixCls,
        placement = _this$props7.placement,
        align = _this$props7.align,
        disabled = _this$props7.disabled,
        style = _this$props7.style,
        className = _this$props7.className,
        getPopupContainer = _this$props7.getPopupContainer,
        name = _this$props7.name,
        inputReadOnly = _this$props7.inputReadOnly,
        popupStyle = _this$props7.popupStyle,
        defaultOpenValue = _this$props7.defaultOpenValue,
        disabledMinutes = _this$props7.disabledMinutes,
        disabledSeconds = _this$props7.disabledSeconds,
        allowEmpty = _this$props7.allowEmpty,
        errorMessage = _this$props7.errorMessage,
        errorLocation = _this$props7.errorLocation,
        size = _this$props7.size,
        width = _this$props7.width,
        transitionName = _this$props7.transitionName;
    var _this$state = this.state,
        open = _this$state.open,
        value = _this$state.value;
    var popupClassName = this.getPopupClassName();

    var _this$getOptions2 = this.getOptions(),
        hourOptions = _this$getOptions2.hourOptions,
        minuteOptions = _this$getOptions2.minuteOptions,
        secondOptions = _this$getOptions2.secondOptions;

    var validDefaultOpenValue = toNearestValidTime(defaultOpenValue, hourOptions, minuteOptions, secondOptions);
    var errorClass = prefixCls + "-error";
    var errorProps = {
      className: classnames(errorClass, errorClass + "-" + errorLocation)
    };
    var timePickerClassName = classnames(prefixCls, className, prefixCls + "-" + size, (_classnames = {}, _classnames[prefixCls + "-disabled"] = disabled, _classnames[prefixCls + "-open"] = open, _classnames));

    var timePickerStyle = _extends({}, popupStyle);

    var dropdownWidth = this.state.dropdownWidth;

    if (dropdownWidth) {
      timePickerStyle.minWidth = dropdownWidth + "px";
    }

    var timePickerElement = /*#__PURE__*/React.createElement("span", {
      className: timePickerClassName
    }, /*#__PURE__*/React.createElement(Trigger, {
      prefixCls: prefixCls + "-panel",
      popupClassName: popupClassName,
      popupStyle: timePickerStyle,
      popup: this.getPanelElement(),
      popupAlign: align,
      builtinPlacements: placements,
      popupPlacement: placement,
      popupTransitionName: transitionName,
      action: disabled ? [] : ['click'],
      destroyPopupOnHide: true,
      getPopupContainer: getPopupContainer,
      popupVisible: open,
      onPopupVisibleChange: this.onVisibleChange
    }, /*#__PURE__*/React.createElement("span", {
      className: prefixCls + "-input-container",
      ref: this.saveRef
    }, /*#__PURE__*/React.createElement(TimeInput, {
      style: style,
      prefixCls: prefixCls,
      defaultOpenValue: validDefaultOpenValue,
      value: value,
      onEsc: this.onEsc,
      format: getFormat(this.props),
      placeholder: this.getPlaceHolder(),
      hourOptions: hourOptions,
      minuteOptions: minuteOptions,
      secondOptions: secondOptions,
      disabledHours: this.disabledHours,
      disabledMinutes: disabledMinutes,
      disabledSeconds: disabledSeconds,
      onChange: this.onPanelChange,
      allowEmpty: allowEmpty,
      onKeyDown: this.onKeyDown,
      inputReadOnly: inputReadOnly,
      onFocus: this.onFocus,
      onBlur: this.onBlur,
      disabled: disabled,
      name: name,
      onClear: this.onClear,
      errorMessage: errorMessage,
      size: size,
      width: width
    }))), errorMessage ? /*#__PURE__*/React.createElement("div", errorProps, errorMessage) : null);
    return timePickerElement;
  };

  return TimePicker;
}(PureComponent), _class2.defaultProps = {
  prefixCls: 'one-time-picker',
  inputReadOnly: false,
  popupClassName: '',
  popupStyle: {},
  align: {
    ignoreShake: true
  },
  defaultOpenValue: moment(),
  format: 'HH:mm:ss',
  allowEmpty: true,
  showHour: true,
  showMinute: true,
  showSecond: true,
  disabledHours: noop,
  disabledMinutes: noop,
  disabledSeconds: noop,
  hideDisabledOptions: false,
  transitionName: 'one-transition-slide-down',
  placement: 'bottomLeft',
  onChange: noop,
  onAmPmChange: noop,
  onOpen: noop,
  onClose: noop,
  onFocus: noop,
  onBlur: noop,
  onKeyDown: noop,
  use12Hours: false,
  errorMessage: '',
  errorLocation: 'bottom',
  size: 'medium',
  width: 150
}, _temp)) || _class);
export default TimePicker;