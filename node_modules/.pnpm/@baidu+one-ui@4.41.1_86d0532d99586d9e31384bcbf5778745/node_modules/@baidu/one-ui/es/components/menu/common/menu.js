import _objectWithoutPropertiesLoose from "@babel/runtime/helpers/objectWithoutPropertiesLoose";
import _extends from "@babel/runtime/helpers/extends";
import _inheritsLoose from "@babel/runtime/helpers/inheritsLoose";
import React from 'react';
import { Provider, create } from 'mini-store';
import SubPopupMenu, { getActiveKey } from './subPopupMenu';
import { classnames } from '../../../core/commonTools';
;

var Menu = /*#__PURE__*/function (_React$Component) {
  _inheritsLoose(Menu, _React$Component);

  function Menu(props) {
    var _this;

    _this = _React$Component.call(this, props) || this;
    _this.isRootMenu = void 0;
    _this.store = void 0;
    _this.innerMenu = void 0;

    _this.onSelect = function (selectInfo) {
      var _this$props = _this.props,
          selectable = _this$props.selectable,
          multiple = _this$props.multiple,
          onSelect = _this$props.onSelect;

      if (selectable) {
        var _this$store$getState = _this.store.getState(),
            selectedKeys = _this$store$getState.selectedKeys;

        var selectedKey = selectInfo.key;

        if (multiple) {
          if (!selectedKeys.includes(selectedKey)) {
            selectedKeys = selectedKeys.concat(selectedKey);
          }
        } else {
          selectedKeys = [selectedKey];
        }

        if (!('selectedKeys' in _this.props)) {
          _this.store.setState({
            selectedKeys: selectedKeys
          });
        }

        if (onSelect) {
          onSelect(_extends({}, selectInfo, {
            selectedKeys: selectedKeys
          }));
        }
      }
    };

    _this.onKeyDown = function (e, callback) {
      _this.innerMenu.getWrappedInstance().onKeyDown(e, callback);
    };

    _this.onOpenChange = function (event) {
      var openKeys = _this.store.getState().openKeys.concat();

      var changed = false;

      var processSingle = function processSingle(e) {
        var oneChanged = false;

        if (e.open) {
          oneChanged = openKeys.indexOf(e.key) === -1;

          if (oneChanged) {
            openKeys.push(e.key);
          }
        } else {
          var index = openKeys.indexOf(e.key);
          oneChanged = index !== -1;

          if (oneChanged) {
            openKeys.splice(index, 1);
          }
        }

        changed = changed || oneChanged;
      };

      if (Array.isArray(event)) {
        // batch change call
        event.forEach(processSingle);
      } else {
        processSingle(event);
      }

      if (changed) {
        if (!('openKeys' in _this.props)) {
          _this.store.setState({
            openKeys: openKeys
          });
        }

        _this.props.onOpenChange(openKeys);
      }
    };

    _this.onDeselect = function (selectInfo) {
      var _this$props2 = _this.props,
          selectable = _this$props2.selectable,
          onDeselect = _this$props2.onDeselect;

      if (selectable) {
        var selectedKeys = _this.store.getState().selectedKeys.concat();

        var selectedKey = selectInfo.key;
        var index = selectedKeys.indexOf(selectedKey);

        if (index !== -1) {
          selectedKeys.splice(index, 1);
        }

        if (!('selectedKeys' in _this.props)) {
          _this.store.setState({
            selectedKeys: selectedKeys
          });
        }

        if (onDeselect) {
          onDeselect(_extends({}, selectInfo, {
            selectedKeys: selectedKeys
          }));
        }
      }
    };

    _this.setInnerMenu = function (node) {
      _this.innerMenu = node;
    };

    _this.isRootMenu = true;
    var _selectedKeys = props.defaultSelectedKeys;
    var _openKeys = props.defaultOpenKeys;

    if ('selectedKeys' in props) {
      _selectedKeys = props.selectedKeys || [];
    }

    if ('openKeys' in props) {
      _openKeys = props.openKeys || [];
    }

    _this.store = create({
      selectedKeys: _selectedKeys,
      openKeys: _openKeys,
      activeKey: {
        '0-menu-': getActiveKey(props, props.activeKey)
      }
    });
    return _this;
  }

  var _proto = Menu.prototype;

  _proto.componentDidMount = function componentDidMount() {
    this.updateMiniStore();
  };

  _proto.componentDidUpdate = function componentDidUpdate() {
    this.updateMiniStore();
  };

  _proto.updateMiniStore = function updateMiniStore() {
    if ('selectedKeys' in this.props) {
      this.store.setState({
        selectedKeys: this.props.selectedKeys || []
      });
    }

    if ('openKeys' in this.props) {
      this.store.setState({
        openKeys: this.props.openKeys || []
      });
    }
  };

  _proto.render = function render() {
    var _this$props3 = this.props,
        prefixCls = _this$props3.prefixCls,
        className = _this$props3.className,
        lightPrefix = _this$props3.lightPrefix,
        restProps = _objectWithoutPropertiesLoose(_this$props3, ["prefixCls", "className", "lightPrefix"]);

    var props = _extends({}, restProps, {
      prefixCls: prefixCls,
      className: classnames(className, prefixCls + "-root"),
      onOpenChange: this.onOpenChange,
      onDeselect: this.onDeselect,
      onSelect: this.onSelect,
      parentMenu: this
    });

    return /*#__PURE__*/React.createElement(Provider, {
      store: this.store
    }, /*#__PURE__*/React.createElement(SubPopupMenu, _extends({}, props, {
      ref: this.setInnerMenu
    }), this.props.children));
  };

  return Menu;
}(React.Component);

Menu.defaultProps = {
  selectable: true,
  onClick: function onClick() {},
  onSelect: function onSelect() {},
  onOpenChange: function onOpenChange() {},
  onDeselect: function onDeselect() {},
  defaultSelectedKeys: [],
  defaultOpenKeys: [],
  subMenuOpenDelay: 0.1,
  subMenuCloseDelay: 0.1,
  triggerSubMenuAction: 'hover',
  prefixCls: 'one-menu',
  className: '',
  mode: 'vertical',
  builtinPlacements: {}
};
export default Menu;