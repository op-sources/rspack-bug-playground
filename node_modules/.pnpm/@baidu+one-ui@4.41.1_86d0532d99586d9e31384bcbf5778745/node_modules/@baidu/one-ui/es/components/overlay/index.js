import _objectWithoutPropertiesLoose from "@babel/runtime/helpers/objectWithoutPropertiesLoose";
import _extends from "@babel/runtime/helpers/extends";
import _inheritsLoose from "@babel/runtime/helpers/inheritsLoose";

var _dec, _class, _class2, _temp;

/**
 * @file 下拉弹层
 * @author huangshiming
 * @date 2020-05-04
 */
import React, { PureComponent } from 'react';
import { IconChevronUp, IconChevronDown } from 'dls-icons-react';
import Button from '../button';
import InnerOverlay from './innerOverlay';
import { classnames } from '../../core/commonTools';
import { withConfigConsumer } from '../providerConfig/context';
var Overlay = (_dec = withConfigConsumer('overlay'), _dec(_class = (_temp = _class2 = /*#__PURE__*/function (_PureComponent) {
  _inheritsLoose(Overlay, _PureComponent);

  function Overlay(props) {
    var _this;

    _this = _PureComponent.call(this, props) || this;

    _this.onVisibleChange = function (visible) {
      if (!('visible' in _this.props)) {
        _this.setState({
          visible: visible
        });
      }

      var onVisibleChange = _this.props.onVisibleChange;

      if (onVisibleChange) {
        onVisibleChange(visible);
      }
    };

    _this.renderHeader = function (prefixCls) {
      var _classnames;

      var _this$props = _this.props,
          children = _this$props.children,
          disabled = _this$props.disabled,
          header = _this$props.header,
          buttonProps = _this$props.buttonProps;
      var visible = _this.state.visible;

      if (children) {
        return children;
      }

      var headerClassName = prefixCls + "-header";
      var classes = classnames(headerClassName, (_classnames = {}, _classnames[headerClassName + "-open"] = visible, _classnames[headerClassName + "-disabled"] = disabled, _classnames));
      return /*#__PURE__*/React.createElement("span", {
        className: classes
      }, /*#__PURE__*/React.createElement(Button, _extends({
        icon: visible ? /*#__PURE__*/React.createElement(IconChevronUp, null) : /*#__PURE__*/React.createElement(IconChevronDown, null),
        disabled: disabled,
        type: "basic"
      }, buttonProps), header));
    };

    _this.state = {
      visible: props.visible,
      prevProps: props
    };
    return _this;
  }

  Overlay.getDerivedStateFromProps = function getDerivedStateFromProps(nextProps, prevState) {
    var newState = {
      prevProps: nextProps
    };

    if ('visible' in nextProps && nextProps.visible !== prevState.prevProps.visible) {
      newState.visible = nextProps.visible;
    }

    return newState;
  };

  var _proto = Overlay.prototype;

  _proto.render = function render() {
    var _classnames2;

    var _this$props2 = this.props,
        prefixCls = _this$props2.prefixCls,
        lightPrefix = _this$props2.lightPrefix,
        restProps = _objectWithoutPropertiesLoose(_this$props2, ["prefixCls", "lightPrefix"]);

    var children = this.renderHeader(prefixCls);

    var overlayProps = _extends({}, restProps, {
      visible: this.state.visible,
      onVisibleChange: this.onVisibleChange,
      prefixCls: prefixCls
    });

    var childrenClassName = classnames(children.props && children.props.className || '', (_classnames2 = {}, _classnames2[prefixCls + "-open"] = !!this.state.visible, _classnames2[prefixCls + "-close"] = !this.state.visible, _classnames2));
    return /*#__PURE__*/React.createElement(InnerOverlay, overlayProps, /*#__PURE__*/React.cloneElement(children, {
      className: childrenClassName
    }));
  };

  return Overlay;
}(PureComponent), _class2.defaultProps = {
  prefixCls: 'one-overlay',
  trigger: 'hover',
  disabled: false,
  header: '',
  onVisibleChange: function onVisibleChange() {},
  dropdownMatchSelectWidth: true,
  buttonProps: {},
  transitionName: 'one-transition-slide-down'
}, _temp)) || _class);
;
export default Overlay;
export * from './interface';