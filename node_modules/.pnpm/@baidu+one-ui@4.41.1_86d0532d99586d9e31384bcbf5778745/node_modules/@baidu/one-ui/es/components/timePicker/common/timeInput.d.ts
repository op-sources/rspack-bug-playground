import { KeyboardEventHandler, PureComponent } from 'react';
import moment, { Moment } from 'moment';
import { BaseProps } from '../../interface';
interface TimeInputProps extends BaseProps {
    format: string;
    placeholder: string;
    value: Moment;
    defaultOpenValue: Moment;
    inputReadOnly: boolean;
    hourOptions: number[];
    minuteOptions: number[];
    secondOptions: number[];
    disabledHours(): number[];
    disabledMinutes(hour: number): number[];
    disabledSeconds(hour: number, minute: number): number[];
    allowEmpty: boolean;
    disabled: boolean;
    errorMessage: string;
    onChange(value: Moment): any;
    onEsc(): any;
    onKeyDown: KeyboardEventHandler;
    onFocus(): any;
    onBlur(): any;
    onClear(e: any): any;
    size: 'xsmall' | 'small' | 'medium' | 'large';
    width: number;
    name: string;
}
interface TimeInputState {
    str?: string;
    value?: Moment;
    invalid?: boolean;
    isFocus?: boolean;
    prevProps?: TimeInputProps;
}
declare class TimeInput extends PureComponent<TimeInputProps, TimeInputState> {
    static defaultProps: {
        inputReadOnly: boolean;
        style: {};
    };
    constructor(props: any);
    static getDerivedStateFromProps: (nextProps: any, prevState: any) => TimeInputState;
    refInput: any;
    ___stopBlur___: any;
    onEsc: () => void;
    onInputChange: (event: any) => void;
    onKeyDown: (e: any) => void;
    onFocus: () => void;
    blurTimeout: any;
    onBlur: () => void;
    componentWillUnmount(): void;
    onClear: (e: any) => void;
    getProtoValue: () => moment.Moment;
    renderClearButton: () => JSX.Element;
    renderInput: () => JSX.Element;
    render(): JSX.Element;
}
export default TimeInput;
