import { Component, ReactNode } from 'react';
import { TableColumnFilterProps } from '../interface';
interface FilterMenuProps extends TableColumnFilterProps {
    filterTitleText: string;
    filterConfirmText: ReactNode;
    filterClearText: ReactNode;
    selectedKeys: string[];
    handleFilter(): any;
    confirmFilter(columnKey: any, selectedKeys: string[]): any;
    prefixCls: string;
    dropdownPrefixCls: string;
    getPopupContainer(): any;
    getScrollContainer(): any;
    columnKey: string;
    size: any;
}
interface FilterMenuState {
    selectedKeys?: string[];
    selectedKeysProp?: string[];
    keyPathOfSelectedItem?: any;
    visible?: boolean;
}
declare class FilterMenu extends Component<FilterMenuProps, FilterMenuState> {
    static defaultProps: {
        handleFilter(): void;
        filterMultiple: boolean;
        filterWithoutConfirm: boolean;
    };
    constructor(props: any);
    static getDerivedStateFromProps: (nextProps: any, prevState: any) => FilterMenuState;
    watchScroll: any;
    onVisibleChange: (visible: any) => void;
    setSelectedKeys: ({ selectedKeys }: {
        selectedKeys: any;
    }) => void;
    setVisible(visible: any): void;
    handleConfirm: () => void;
    handleCancel: () => void;
    handleClear: () => void;
    confirmFilter(): void;
    hasSubMenu(): boolean;
    handleMenuItemClick: (info: any) => void;
    renderMenus(items: any): any;
    renderFilterIcon: () => JSX.Element;
    renderMenuItem(item: any): JSX.Element;
    shouldComponentUpdate(nextProps: any, nextState: any): boolean;
    render(): JSX.Element;
    handleScroll: () => void;
    componentDidUpdate(): void;
}
export default FilterMenu;
