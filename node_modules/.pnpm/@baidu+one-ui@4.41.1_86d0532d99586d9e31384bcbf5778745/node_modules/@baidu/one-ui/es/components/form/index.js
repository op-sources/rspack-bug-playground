import _extends from "@babel/runtime/helpers/extends";
import _objectWithoutPropertiesLoose from "@babel/runtime/helpers/objectWithoutPropertiesLoose";
import React, { forwardRef, useCallback, useContext, useRef } from 'react';
import createFormField from './common/createFormField';
import FormItem from './formItem';
import FormField from './formField';
import FormFieldGroup from './formFieldGroup';
import createBaseForm, { BaseForm } from './common/createBaseForm';
import { LegacyFormContext, FormContext } from './context';
import { classnames } from '../../core/commonTools';
import { withConfigConsumer } from '../providerConfig/context';
/**
 * @visibleName Form
 */

export var InnerForm = /*#__PURE__*/forwardRef(function (props, ref) {
  var _classnames;

  var context = useContext(LegacyFormContext);

  var prefixCls = props.prefixCls,
      className = props.className,
      wrapperCol = props.wrapperCol,
      labelAlign = props.labelAlign,
      labelPosition = props.labelPosition,
      fillWidth = props.fillWidth,
      labelCol = props.labelCol,
      layout = props.layout,
      colon = props.colon,
      hideRequiredMark = props.hideRequiredMark,
      size = props.size,
      onFinish = props.onFinish,
      onFinishFailed = props.onFinishFailed,
      scrollToFirstError = props.scrollToFirstError,
      fieldNameProp = props.fieldNameProp,
      validateMessages = props.validateMessages,
      onFieldsChange = props.onFieldsChange,
      onValuesChange = props.onValuesChange,
      mapProps = props.mapProps,
      mapPropsToFields = props.mapPropsToFields,
      formPropName = props.formPropName,
      density = props.density,
      lightPrefix = props.lightPrefix,
      restProps = _objectWithoutPropertiesLoose(props, ["prefixCls", "className", "wrapperCol", "labelAlign", "labelPosition", "fillWidth", "labelCol", "layout", "colon", "hideRequiredMark", "size", "onFinish", "onFinishFailed", "scrollToFirstError", "fieldNameProp", "validateMessages", "onFieldsChange", "onValuesChange", "mapProps", "mapPropsToFields", "formPropName", "density", "lightPrefix"]);

  var formClassName = classnames(prefixCls, className, prefixCls + "-" + layout, (_classnames = {}, _classnames[prefixCls + "-hide-required-mark"] = hideRequiredMark, _classnames[prefixCls + "-label-position-" + labelPosition] = labelPosition, _classnames[prefixCls + "-legacy"] = context.legacy, _classnames), prefixCls + "-" + size, prefixCls + "-type-" + density);
  var formRef = useRef();
  var formProps = restProps;

  if (!context.legacy) {
    formProps.onSubmit = useCallback(function (event) {
      event && event.preventDefault();
      event && event.stopPropagation();
      formRef.current.validateForm(scrollToFirstError).then(function (values) {
        return onFinish && onFinish(values);
      })["catch"](function (_ref) {
        var errors = _ref.errors,
            values = _ref.values;
        return onFinishFailed && onFinishFailed(errors, values);
      });
      props.onSubmit && props.onSubmit(event);
    }, [onFinish, onFinishFailed, props.onSubmit]);
    formProps.onReset = useCallback(function (event) {
      event && event.preventDefault();
      event && event.stopPropagation();
      formRef.current.resetFields();
      props.onReset && props.onReset(event);
    }, [props.onReset]);
    React.useImperativeHandle(ref, function () {
      return _extends({}, formRef.current.getForm(), {
        submit: function submit() {
          formProps.onSubmit(null);
        },
        reset: function reset() {
          formProps.onReset(null);
        }
      });
    });
  }

  var formNode = /*#__PURE__*/React.createElement("form", _extends({}, formProps, {
    className: formClassName,
    autoComplete: "off"
  }));
  return /*#__PURE__*/React.createElement(FormContext.Provider, {
    value: {
      wrapperCol: wrapperCol,
      labelAlign: labelAlign,
      labelCol: labelCol,
      labelPosition: labelPosition,
      fillWidth: fillWidth,
      // @ts-ignore
      vertical: layout === 'vertical',
      colon: colon,
      size: size
    }
  }, context.legacy ? formNode : /*#__PURE__*/React.createElement(BaseForm, _extends({
    ref: formRef
  }, {
    fieldNameProp: fieldNameProp,
    validateMessages: validateMessages,
    onFieldsChange: onFieldsChange,
    onValuesChange: onValuesChange,
    mapProps: mapProps,
    mapPropsToFields: mapPropsToFields,
    formPropName: formPropName
  }), formNode));
});
InnerForm.defaultProps = {
  prefixCls: 'one-form',
  layout: 'default',
  className: '',
  size: 'medium',
  labelAlign: 'right',
  labelPosition: 'side',
  density: 'default',
  colon: false
};
var Form = withConfigConsumer('form')(InnerForm);
Form.Item = FormItem;
Form.Field = FormField;
Form.FieldGroup = FormFieldGroup;
Form.createFormField = createFormField;
Form.create = createBaseForm;
export default Form;
export * from './interface';