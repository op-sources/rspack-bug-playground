import _extends from "@babel/runtime/helpers/extends";
import _objectWithoutPropertiesLoose from "@babel/runtime/helpers/objectWithoutPropertiesLoose";
import _inheritsLoose from "@babel/runtime/helpers/inheritsLoose";
import _throttle from "lodash/throttle";
import React, { PureComponent } from 'react';
import Trigger from 'rc-trigger';
import ResizeObserver from 'resize-observer-polyfill';
import Content from './content';

var Tooltip = /*#__PURE__*/function (_PureComponent) {
  _inheritsLoose(Tooltip, _PureComponent);

  function Tooltip() {
    var _this;

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _PureComponent.call.apply(_PureComponent, [this].concat(args)) || this;
    _this.resizeObserver = void 0;
    _this.trigger = void 0;

    _this.getPopupElement = function () {
      var _this$props = _this.props,
          overlay = _this$props.overlay,
          prefixCls = _this$props.prefixCls;
      return [/*#__PURE__*/React.createElement("div", {
        className: prefixCls + "-arrow",
        key: "arrow"
      }), /*#__PURE__*/React.createElement(Content, {
        key: "content",
        prefixCls: prefixCls,
        overlay: overlay
      })];
    };

    _this.saveTrigger = function (node) {
      _this.trigger = node;
    };

    _this.handleAfterVisibleChange = function (visible) {
      if (_this.props.afterPopupVisibleChange) {
        _this.props.afterPopupVisibleChange(visible);
      }

      if (_this.resizeObserver) {
        return;
      }

      var popup = _this.getPopupDOMNode();

      if (popup) {
        _this.resizeObserver = new ResizeObserver(_throttle(function () {
          _this.trigger && _this.trigger.forcePopupAlign();
        }, 200));

        _this.resizeObserver.observe(popup);
      }
    };

    return _this;
  }

  var _proto = Tooltip.prototype;

  _proto.getPopupDOMNode = function getPopupDOMNode() {
    return this.trigger.getPopupDomNode();
  };

  _proto.componentWillUnmount = function componentWillUnmount() {
    if (this.resizeObserver) {
      this.resizeObserver.disconnect();
    }
  };

  _proto.render = function render() {
    var _this$props2 = this.props,
        overlayClassName = _this$props2.overlayClassName,
        _this$props2$trigger = _this$props2.trigger,
        trigger = _this$props2$trigger === void 0 ? 'hover' : _this$props2$trigger,
        _this$props2$mouseEnt = _this$props2.mouseEnterDelay,
        mouseEnterDelay = _this$props2$mouseEnt === void 0 ? 0 : _this$props2$mouseEnt,
        _this$props2$mouseLea = _this$props2.mouseLeaveDelay,
        mouseLeaveDelay = _this$props2$mouseLea === void 0 ? 0.1 : _this$props2$mouseLea,
        overlayStyle = _this$props2.overlayStyle,
        children = _this$props2.children,
        _this$props2$onVisibl = _this$props2.onVisibleChange,
        onVisibleChange = _this$props2$onVisibl === void 0 ? function () {} : _this$props2$onVisibl,
        transitionName = _this$props2.transitionName,
        _this$props2$placemen = _this$props2.placement,
        placement = _this$props2$placemen === void 0 ? 'right' : _this$props2$placemen,
        _this$props2$align = _this$props2.align,
        align = _this$props2$align === void 0 ? {
      ignoreShake: true
    } : _this$props2$align,
        _this$props2$destroyT = _this$props2.destroyTooltipOnHide,
        destroyTooltipOnHide = _this$props2$destroyT === void 0 ? false : _this$props2$destroyT,
        defaultVisible = _this$props2.defaultVisible,
        getTooltipContainer = _this$props2.getTooltipContainer,
        prefixCls = _this$props2.prefixCls,
        builtinPlacements = _this$props2.builtinPlacements,
        lightPrefix = _this$props2.lightPrefix,
        restProps = _objectWithoutPropertiesLoose(_this$props2, ["overlayClassName", "trigger", "mouseEnterDelay", "mouseLeaveDelay", "overlayStyle", "children", "onVisibleChange", "transitionName", "placement", "align", "destroyTooltipOnHide", "defaultVisible", "getTooltipContainer", "prefixCls", "builtinPlacements", "lightPrefix"]);

    var extraProps = _extends({}, restProps);

    if ('visible' in this.props) {
      // @ts-ignore
      extraProps.popupVisible = this.props.visible;
    }

    return /*#__PURE__*/React.createElement(Trigger, _extends({
      popupClassName: overlayClassName,
      prefixCls: prefixCls,
      popup: this.getPopupElement(),
      action: trigger,
      builtinPlacements: builtinPlacements,
      popupPlacement: placement,
      ref: this.saveTrigger,
      popupAlign: align,
      getPopupContainer: getTooltipContainer,
      onPopupVisibleChange: onVisibleChange,
      popupMotion: null,
      defaultPopupVisible: defaultVisible,
      destroyPopupOnHide: destroyTooltipOnHide,
      mouseLeaveDelay: mouseLeaveDelay,
      popupStyle: overlayStyle,
      mouseEnterDelay: mouseEnterDelay
    }, extraProps, {
      afterPopupVisibleChange: this.handleAfterVisibleChange
    }), children);
  };

  return Tooltip;
}(PureComponent);

export { Tooltip as default };