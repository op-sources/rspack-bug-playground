import _extends from "@babel/runtime/helpers/extends";
import _inheritsLoose from "@babel/runtime/helpers/inheritsLoose";

var _dec, _class, _class2, _temp;

import React, { PureComponent } from 'react';
import { loading as LoadingSvg } from 'dls-graphics';
import { classnames } from '../../core/commonTools';
import { withConfigConsumer } from '../providerConfig/context';
import Transition from '../transition';
var Loading = (_dec = withConfigConsumer('loading'), _dec(_class = (_temp = _class2 = /*#__PURE__*/function (_PureComponent) {
  _inheritsLoose(Loading, _PureComponent);

  function Loading() {
    return _PureComponent.apply(this, arguments) || this;
  }

  var _proto = Loading.prototype;

  _proto.isNestedPattern = function isNestedPattern() {
    return !!(this.props && this.props.children);
  };

  _proto.render = function render() {
    var _classnames;

    var _this$props = this.props,
        prefixCls = _this$props.prefixCls,
        className = _this$props.className,
        size = _this$props.size,
        loading = _this$props.loading,
        style = _this$props.style,
        tip = _this$props.tip,
        type = _this$props.type,
        children = _this$props.children,
        textDirection = _this$props.textDirection,
        CustomIconNode = _this$props.CustomIconNode;
    var classes = classnames(prefixCls, (_classnames = {}, _classnames[prefixCls + "-" + size] = size, _classnames[prefixCls + "-visible"] = loading, _classnames[prefixCls + "-show-text"] = !!tip, _classnames[prefixCls + "-type-" + type] = type, _classnames), prefixCls + "-" + textDirection, className);
    var attrs = LoadingSvg.attrs,
        contents = LoadingSvg.contents;

    var loadingSvgProps = _extends({}, attrs);

    delete loadingSvgProps["class"];
    var loadingSvgClassName = classnames(attrs["class"], prefixCls + "-loading-icon");
    var loadingElement = /*#__PURE__*/React.createElement("div", {
      className: classes,
      style: style
    }, /*#__PURE__*/React.createElement("div", {
      className: prefixCls + "-icon-element"
    }, CustomIconNode || /*#__PURE__*/React.createElement("svg", _extends({}, loadingSvgProps, {
      dangerouslySetInnerHTML: {
        __html: contents
      },
      className: loadingSvgClassName
    })), tip ? /*#__PURE__*/React.createElement("span", {
      className: prefixCls + "-text"
    }, tip) : null));

    if (this.isNestedPattern()) {
      var _classnames2;

      var containerClassName = classnames(prefixCls + "-container", (_classnames2 = {}, _classnames2[prefixCls + "-blur"] = loading, _classnames2));
      return /*#__PURE__*/React.createElement("div", {
        className: classnames(prefixCls + "-nested-loading", prefixCls + "-nested-loading-" + type)
      }, /*#__PURE__*/React.createElement("div", {
        className: containerClassName
      }, children), loading ? /*#__PURE__*/React.createElement(Transition, {
        name: "fade",
        "in": true,
        appear: true,
        timeout: 500
      }, loadingElement) : null);
    }

    return loadingElement;
  };

  return Loading;
}(PureComponent), _class2.defaultProps = {
  loading: true,
  prefixCls: 'one-loading',
  className: '',
  size: 'medium',
  style: {},
  tip: '',
  type: 'normal',
  textDirection: 'horizontal',
  CustomIconNode: null
}, _class2.Bar = void 0, _temp)) || _class);
export default Loading;