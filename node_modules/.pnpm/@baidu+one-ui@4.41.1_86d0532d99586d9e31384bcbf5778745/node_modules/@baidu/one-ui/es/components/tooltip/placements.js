import _extends from "@babel/runtime/helpers/extends";
var targetOffset = [0, 0];
export function getOverflowOptions(autoAdjustOverflow) {
  var autoAdjustOverflowEnabled = {
    adjustX: 1,
    adjustY: 1
  };
  var autoAdjustOverflowDisabled = {
    adjustX: 1,
    adjustY: 1
  };

  if (typeof autoAdjustOverflow === 'boolean') {
    return autoAdjustOverflow ? autoAdjustOverflowEnabled : autoAdjustOverflowDisabled;
  }

  return _extends({}, autoAdjustOverflowDisabled, autoAdjustOverflow);
}
export default function getPlacements(config) {
  var _config$arrowWidth = config.arrowWidth,
      arrowWidth = _config$arrowWidth === void 0 ? 5 : _config$arrowWidth,
      _config$horizontalArr = config.horizontalArrowShift,
      horizontalArrowShift = _config$horizontalArr === void 0 ? 16 : _config$horizontalArr,
      _config$verticalArrow = config.verticalArrowShift,
      verticalArrowShift = _config$verticalArrow === void 0 ? 12 : _config$verticalArrow,
      _config$autoAdjustOve = config.autoAdjustOverflow,
      autoAdjustOverflow = _config$autoAdjustOve === void 0 ? true : _config$autoAdjustOve,
      arrowPointAtCenter = config.arrowPointAtCenter;
  var placementMap = {
    left: {
      points: ['cr', 'cl'],
      offset: [-4, 0]
    },
    right: {
      points: ['cl', 'cr'],
      offset: [4, 0]
    },
    top: {
      points: ['bc', 'tc'],
      offset: [0, -4]
    },
    bottom: {
      points: ['tc', 'bc'],
      offset: [0, 4]
    },
    topLeft: {
      points: arrowPointAtCenter ? ['bl', 'tc'] : ['bl', 'tl'],
      offset: arrowPointAtCenter ? [-(horizontalArrowShift + arrowWidth), -4] : [0, -4]
    },
    leftTop: {
      points: arrowPointAtCenter ? ['tr', 'cl'] : ['tr', 'tl'],
      offset: arrowPointAtCenter ? [-4, -(verticalArrowShift + arrowWidth)] : [-4, 0]
    },
    topRight: {
      points: arrowPointAtCenter ? ['br', 'tc'] : ['br', 'tr'],
      offset: arrowPointAtCenter ? [horizontalArrowShift + arrowWidth, -4] : [0, -4]
    },
    rightTop: {
      points: arrowPointAtCenter ? ['tl', 'cr'] : ['tl', 'tr'],
      offset: arrowPointAtCenter ? [4, -(verticalArrowShift + arrowWidth)] : [4, 0]
    },
    bottomRight: {
      points: arrowPointAtCenter ? ['tr', 'bc'] : ['tr', 'br'],
      offset: arrowPointAtCenter ? [horizontalArrowShift + arrowWidth, 4] : [0, 4]
    },
    rightBottom: {
      points: arrowPointAtCenter ? ['bl', 'cr'] : ['bl', 'br'],
      offset: arrowPointAtCenter ? [4, verticalArrowShift + arrowWidth] : [4, 0]
    },
    bottomLeft: {
      points: arrowPointAtCenter ? ['tl', 'bc'] : ['tl', 'bl'],
      offset: arrowPointAtCenter ? [-(horizontalArrowShift + arrowWidth), 4] : [0, 4]
    },
    leftBottom: {
      points: arrowPointAtCenter ? ['br', 'cl'] : ['br', 'bl'],
      offset: arrowPointAtCenter ? [-4, verticalArrowShift + arrowWidth] : [-4, 0]
    }
  };
  Object.keys(placementMap).forEach(function (key) {
    placementMap[key] = _extends({}, placementMap[key], {
      overflow: getOverflowOptions(autoAdjustOverflow),
      targetOffset: targetOffset
    });
  });
  return placementMap;
}