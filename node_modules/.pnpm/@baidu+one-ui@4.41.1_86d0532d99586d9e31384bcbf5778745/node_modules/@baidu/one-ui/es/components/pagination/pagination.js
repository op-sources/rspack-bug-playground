import _extends from "@babel/runtime/helpers/extends";
import _assertThisInitialized from "@babel/runtime/helpers/assertThisInitialized";
import _inheritsLoose from "@babel/runtime/helpers/inheritsLoose";
import _noop from "lodash/noop";

var _dec, _class, _class2, _temp;

import React, { PureComponent } from 'react';
import { classnames } from '../../core/commonTools';
import { IconChevronLeft, IconChevronRight, IconEllipsis } from 'dls-icons-react';
import Select from '../select';
import Button from '../button';
import Tooltip from '../tooltip';
import { withConfigConsumer } from '../providerConfig/context';
import NumberInput from '../numberInput';
;
var SelectOption = Select.Option;

var isInteger = function isInteger(value) {
  return typeof value === 'number' && isFinite(value) && Math.floor(value) === value;
};

var calculatePage = function calculatePage(pageSize, total) {
  return Math.floor((total - 1) / pageSize) + 1;
};

var Pagination = (_dec = withConfigConsumer('pagination'), _dec(_class = (_temp = _class2 = /*#__PURE__*/function (_PureComponent) {
  _inheritsLoose(Pagination, _PureComponent);

  function Pagination(_props) {
    var _this;

    _this = _PureComponent.call(this, _props) || this;

    _this.getOptionByList = function () {
      var pageSizeOptions = _this.props.pageSizeOptions;
      var options = [];
      pageSizeOptions.forEach(function (option) {
        options.push({
          value: Number(option),
          label: option
        });
      });
      return options;
    };

    _this.isValidPage = function (page) {
      return isInteger(page) && page >= 1 && page !== _this.state.pageNo;
    };

    _this.handlePageSizeChange = function (pageSize) {
      var size = +pageSize;
      var newPage = calculatePage(size, _this.state.total);
      var newState = {};

      if (!('pageSize' in _this.props)) {
        newState.pageSize = size;
      }

      if (!('pageNo' in _this.props)) {
        // 统一为页码更改，非受控情况下，页码跳转回第一页
        newState.pageNo = 1;
      }

      newState.lastPage = newPage;

      _this.setState(newState);

      _this.props.onPageSizeChange({
        target: {
          value: size
        }
      });
    };

    _this.handleChange = function (p) {
      var page = p;
      var _this$state = _this.state,
          pageSize = _this$state.pageSize,
          total = _this$state.total;

      if (_this.isValidPage(page)) {
        var lastPage = calculatePage(pageSize, total);

        if (page >= lastPage) {
          page = lastPage;
        }

        if (!('pageNo' in _this.props)) {
          _this.setState({
            pageNo: page
          });
        }

        _this.props.onPageNoChange({
          target: {
            value: page
          }
        });
      }
    };

    _this.handleItemPageChange = function (e) {
      var dataset = e && e.currentTarget && e.currentTarget.dataset;
      var key = dataset && dataset.key;

      if (key) {
        _this.handleChange(+key);
      }
    };

    _this.goToPrevPage = function () {
      var pageNo = _this.state.pageNo;

      if (pageNo > 1) {
        if (!('pageNo' in _this.props)) {
          _this.setState({
            pageNo: pageNo - 1
          });
        }

        _this.handleChange(pageNo - 1);
      }
    };

    _this.goToNextPage = function () {
      var _this$state2 = _this.state,
          pageNo = _this$state2.pageNo,
          lastPage = _this$state2.lastPage;

      if (lastPage > pageNo) {
        if (!('pageNo' in _this.props)) {
          _this.setState({
            pageNo: pageNo + 1
          });
        }

        _this.handleChange(pageNo + 1);
      }
    };

    _this.jumpToPrevPage = function () {
      var pageNo = _this.state.pageNo;
      var range = 5;
      var newPage = pageNo - range > 1 ? pageNo - range : 1;

      if (!('pageNo' in _this.props)) {
        _this.setState({
          pageNo: newPage
        });
      }

      _this.handleChange(newPage);
    };

    _this.jumpToNextPage = function () {
      var _this$state3 = _this.state,
          pageNo = _this$state3.pageNo,
          pageSize = _this$state3.pageSize,
          total = _this$state3.total;
      var range = 5;
      var lastPage = calculatePage(pageSize, total);
      var newPage = pageNo + range > lastPage ? lastPage : pageNo + range;

      if (!('pageNo' in _this.props)) {
        _this.setState({
          pageNo: newPage
        });
      }

      _this.handleChange(newPage);
    };

    _this.generateItemRender = function () {
      var _assertThisInitialize = _assertThisInitialized(_this),
          props = _assertThisInitialize.props,
          state = _assertThisInitialize.state;

      var prefixCls = props.prefixCls,
          size = props.size;
      var lastPage = state.lastPage,
          pageNo = state.pageNo;
      var pageBufferSize = 2;
      var itemList = [];
      var hasPrevDot = false;
      var hasNextDot = false;
      var buttonProps = {
        onClick: _this.handleItemPageChange,
        size: size,
        type: 'text'
      };

      if (lastPage === 0) {
        itemList.push( /*#__PURE__*/React.createElement(Button, {
          key: "none",
          size: size,
          type: "text",
          disabled: true
        }, "1"));
        return itemList;
      }

      if (lastPage < 7) {
        for (var i = 1; i <= lastPage; i++) {
          var _classnames;

          var itemProps = _extends({
            className: classnames(prefixCls + "-pager-item", (_classnames = {}, _classnames[prefixCls + "-pager-item-active"] = i === +pageNo, _classnames)),
            //@ts-ignore
            'data-key': i,
            key: i
          }, buttonProps);

          itemList.push( /*#__PURE__*/React.createElement(Button, itemProps, i));
        }

        return itemList;
      }

      var left = Math.max(1, pageNo - pageBufferSize);
      var right = Math.min(pageNo + pageBufferSize, lastPage);

      if (pageNo - 1 <= pageBufferSize) {
        right = 1 + pageBufferSize * 2;
      }

      if (lastPage - pageNo <= pageBufferSize) {
        left = lastPage - pageBufferSize * 2;
      }

      for (var _i = left; _i <= right; _i++) {
        var _classnames2;

        var _itemProps = _extends({
          className: classnames(prefixCls + "-pager-item", (_classnames2 = {}, _classnames2[prefixCls + "-pager-item-active"] = _i === +pageNo, _classnames2)),
          //@ts-ignore
          'data-key': _i,
          key: _i
        }, buttonProps);

        itemList.push( /*#__PURE__*/React.createElement(Button, _itemProps, _i));
      }

      if (pageNo - 1 >= pageBufferSize * 2 && pageNo !== 1 + pageBufferSize) {
        itemList.unshift( /*#__PURE__*/React.createElement(Tooltip, {
          title: "\u5411\u524D 5 \u9875",
          key: "jump-prev"
        }, /*#__PURE__*/React.createElement(Button, {
          className: prefixCls + "-pager-item " + prefixCls + "-pager-item-dot " + prefixCls + "-pager-item-dot-prev",
          onClick: _this.jumpToPrevPage,
          type: "text"
        }, /*#__PURE__*/React.createElement(IconEllipsis, {
          className: prefixCls + "-pager-item-ellipsis"
        }))));
        hasPrevDot = true;
      }

      if (lastPage - pageNo >= pageBufferSize * 2 && pageNo !== lastPage - 2) {
        itemList.push( /*#__PURE__*/React.createElement(Tooltip, {
          title: "\u5411\u540E 5 \u9875",
          key: "jump-next"
        }, /*#__PURE__*/React.createElement(Button, {
          className: prefixCls + "-pager-item " + prefixCls + "-pager-item-dot " + prefixCls + "-pager-item-dot-next",
          onClick: _this.jumpToNextPage,
          type: "text"
        }, /*#__PURE__*/React.createElement(IconEllipsis, {
          className: prefixCls + "-pager-item-ellipsis"
        }))));
        hasNextDot = true;
      }

      if (hasPrevDot && hasNextDot) {
        delete itemList[1];
        delete itemList[itemList.length - 2];
      }

      if (left !== 1) {
        itemList.unshift( /*#__PURE__*/React.createElement(Button, _extends({
          className: prefixCls + "-pager-item",
          "data-key": 1,
          key: 1
        }, buttonProps), "1"));
      }

      if (right !== lastPage) {
        itemList.push( /*#__PURE__*/React.createElement(Button, _extends({
          className: prefixCls + "-pager-item",
          "data-key": lastPage,
          key: lastPage
        }, buttonProps), lastPage));
      }

      return itemList;
    };

    _this.onChangeInput = function (e) {
      var value = e.target.value;

      _this.setState({
        searchValue: value
      });
    };

    _this.onJumpToPager = function (value) {
      var _this$state4 = _this.state,
          pageSize = _this$state4.pageSize,
          total = _this$state4.total;
      var lastPage = calculatePage(pageSize, total);
      var jumpToPage = value;

      if (jumpToPage > lastPage) {
        jumpToPage = lastPage;
      }

      if (jumpToPage <= 0) {
        jumpToPage = 1;
      }

      var newState = {
        searchValue: ''
      };

      if (!('pageNo' in _this.props)) {
        newState.pageNo = jumpToPage;
      }

      _this.setState(newState);

      _this.props.onPageNoChange({
        target: {
          value: jumpToPage
        }
      });
    };

    _this.onInputKeyDown = function (e) {
      var value = +e.value;

      _this.onJumpToPager(value);
    };

    _this.onInputKeyConfirm = function () {
      _this.onJumpToPager(+_this.state.searchValue);
    };

    var _pageSize = _props.pageSize || _props.defaultPageSize;

    var _total = _props.total;
    _this.state = {
      pageSize: _pageSize,
      pageNo: _props.pageNo || _props.defaultPageNo,
      total: _total,
      lastPage: calculatePage(_pageSize, _total),
      searchValue: ''
    };
    return _this;
  }

  var _proto = Pagination.prototype;

  _proto.render = function render() {
    var _classnames3, _classnames4, _classnames5;

    var _this$props = this.props,
        prefixCls = _this$props.prefixCls,
        selectPrefixCls = _this$props.selectPrefixCls,
        hideOnSinglePage = _this$props.hideOnSinglePage,
        showSizeChange = _this$props.showSizeChange,
        className = _this$props.className,
        showPageJumper = _this$props.showPageJumper,
        selectProps = _this$props.selectProps,
        size = _this$props.size,
        total = _this$props.total,
        showTotal = _this$props.showTotal,
        style = _this$props.style;
    var _this$state5 = this.state,
        pageNo = _this$state5.pageNo,
        pageSize = _this$state5.pageSize,
        lastPage = _this$state5.lastPage,
        searchValue = _this$state5.searchValue;
    var paginationProps = {
      className: classnames("" + prefixCls, className, (_classnames3 = {}, _classnames3[prefixCls + "-" + size] = size, _classnames3)),
      style: style
    };

    var paginationSelectProps = _extends({}, selectProps, {
      width: 'auto',
      onChange: this.handlePageSizeChange,
      value: Number(pageSize),
      size: size
    });

    var itemList = this.generateItemRender();
    var itemLength = itemList.length;

    if (itemLength < 2 && hideOnSinglePage) {
      // 只有一页的时候隐藏分页器
      return null;
    }

    var options = this.getOptionByList();
    return /*#__PURE__*/React.createElement("div", paginationProps, showTotal && /*#__PURE__*/React.createElement("div", {
      className: prefixCls + "-total"
    }, "\u5171 ", total || 0, " \u6761"), showSizeChange && total > 0 ? /*#__PURE__*/React.createElement("div", {
      className: prefixCls + "-select"
    }, /*#__PURE__*/React.createElement(Select, paginationSelectProps, options.map(function (option) {
      return /*#__PURE__*/React.createElement(SelectOption, {
        key: option.value,
        value: option.value
      }, option.label, "\u6761/\u9875");
    }))) : null, /*#__PURE__*/React.createElement("div", {
      className: prefixCls + "-pager"
    }, /*#__PURE__*/React.createElement("span", {
      className: prefixCls + "-pager-list"
    }, /*#__PURE__*/React.createElement(Button, {
      className: classnames(prefixCls + "-pager-item " + prefixCls + "-pager-item-jumper", (_classnames4 = {}, _classnames4[prefixCls + "-pager-item-disabled"] = pageNo <= 1, _classnames4)),
      size: size,
      disabled: pageNo <= 1,
      onClick: this.goToPrevPage,
      type: "text",
      key: "pre"
    }, /*#__PURE__*/React.createElement(IconChevronLeft, null)), itemList.map(function (item) {
      return item;
    }), /*#__PURE__*/React.createElement(Button, {
      className: classnames(prefixCls + "-pager-item " + prefixCls + "-pager-item-jumper", (_classnames5 = {}, _classnames5[prefixCls + "-pager-item-disabled"] = pageNo >= lastPage, _classnames5)),
      size: size,
      disabled: pageNo >= lastPage,
      onClick: this.goToNextPage,
      type: "text",
      key: "next"
    }, /*#__PURE__*/React.createElement(IconChevronRight, null))), showPageJumper && /*#__PURE__*/React.createElement("div", {
      className: prefixCls + "-jumper"
    }, /*#__PURE__*/React.createElement("span", {
      className: prefixCls + "-jumper-title"
    }, "\u53BB\u7B2C"), /*#__PURE__*/React.createElement(NumberInput, {
      width: 40,
      className: prefixCls + "-input",
      showSpinButtons: false,
      size: size,
      value: searchValue,
      onChange: this.onChangeInput,
      onPressEnter: this.onInputKeyDown
    }), /*#__PURE__*/React.createElement("span", {
      className: prefixCls + "-jumper-title"
    }, "\u9875"), /*#__PURE__*/React.createElement(Button, {
      className: prefixCls + "-jumper-confirm",
      onClick: this.onInputKeyConfirm,
      size: size
    }, "\u786E\u5B9A"))));
  };

  return Pagination;
}(PureComponent), _class2.defaultProps = {
  prefixCls: 'one-pagination',
  selectPrefixCls: 'one-select',
  pageSizeOptions: [20, 50, 100],
  total: 0,
  defaultPageSize: 20,
  defaultPageNo: 1,
  size: 'medium',
  className: '',
  onPageNoChange: _noop,
  onPageSizeChange: _noop,
  hideOnSinglePage: false,
  showSizeChange: true,
  showPageJumper: true,
  showTotal: false
}, _class2.getDerivedStateFromProps = function (nextProps, prevState) {
  var newState = {};

  if ('pageNo' in nextProps && nextProps.pageNo !== prevState.pageNo) {
    newState.pageNo = nextProps.pageNo;
  }

  if ('pageSize' in nextProps && nextProps.pageSize !== prevState.pageSize) {
    var pageSize = nextProps.pageSize;
    var newPage = calculatePage(pageSize, prevState.total);

    if (!('pageNo' in nextProps)) {
      // 统一为页码更改，非受控情况下，页码跳转回第一页 (pageSize受控，pageNo不受控)
      newState.pageNo = 1;
    }

    newState.lastPage = newPage;
    newState.pageSize = pageSize;
  }

  if ('total' in nextProps && nextProps.total !== prevState.total) {
    var total = nextProps.total;

    var _pageSize2 = newState.pageSize || prevState.pageSize;

    var _newPage = calculatePage(_pageSize2, total);

    if (!('pageNo' in nextProps)) {
      newState.pageNo = 1;
    }

    newState.lastPage = _newPage;
    newState.total = total;
  }

  return newState;
}, _temp)) || _class);
export default Pagination;