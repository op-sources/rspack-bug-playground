/// <reference types="node" />
import { PureComponent, ChangeEvent } from 'react';
import UploaderAnchor from './common/uploaderAnchor';
import { UploaderProps, UploadFile, UploaderProgressEvent } from './interface';
interface UploaderState {
    fileList: UploadFile[];
    insertImage: boolean;
    insetIndex: number;
}
declare class Uploader extends PureComponent<UploaderProps, UploaderState> {
    static defaultProps: UploaderProps;
    uploaderXhrMap: {
        [key: string]: {
            abort(): void;
        };
    };
    _fileList: UploadFile[];
    uploaderAnchorRef: UploaderAnchor;
    constructor(props: UploaderProps);
    state: UploaderState;
    static getDerivedStateFromProps: (nextProps: UploaderProps, prevState: UploaderState) => {
        fileList: UploadFile[];
    };
    componentDidUpdate(prevProps: UploaderProps): void;
    componentWillUnmount(): void;
    onInputChange: (e: ChangeEvent<HTMLInputElement>) => void;
    upload: (file: UploadFile, fileList: UploadFile[]) => NodeJS.Timeout;
    post: (file: UploadFile) => Promise<unknown>;
    getFileIndex: (file: UploadFile) => number;
    onProgress: (e: UploaderProgressEvent, file: UploadFile) => void;
    onSuccess: (ret: any, file: UploadFile) => void;
    onError: (err: Error | ProgressEvent<EventTarget>, ret: any, file: UploadFile) => void;
    onStart: (file: UploadFile) => void;
    onValidatorFiles: (files: UploadFile[]) => {
        allFailures: boolean;
        _fileList: UploadFile[];
    };
    onValidatorSingleFile: (file: File) => string[];
    onRemove: ({ fileList, index, originFileList }: {
        fileList: UploadFile[];
        index: number;
        originFileList: UploadFile[];
    }) => void;
    onSort: (fileList: UploadFile[]) => void;
    onInsertImage: (insertImage: boolean, index: number) => void;
    onPickerClick: () => boolean | void;
    uploadAnchorRef: (ref: UploaderAnchor) => void;
    normalizePickerPosition(): "top" | "none" | "after" | "before";
    render(): JSX.Element;
}
export default Uploader;
