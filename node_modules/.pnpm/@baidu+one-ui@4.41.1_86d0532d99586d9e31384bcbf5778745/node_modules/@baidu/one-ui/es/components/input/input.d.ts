import { PureComponent } from 'react';
import InputGroup from './group';
import { InputProps } from './interface';
interface InputState {
    value?: string;
    prevValue?: string;
    cacheValue?: string;
    hasFocus?: boolean;
    errorMessage?: string;
    countLabelWidth?: number;
}
declare class Input extends PureComponent<InputProps, InputState> {
    static defaultProps: {
        prefixCls: string;
        disabled: boolean;
        readOnly: boolean;
        maxLen: any;
        minLen: any;
        errorMessage: any;
        showErrorMessage: boolean;
        errorLocation: string;
        isRequired: boolean;
        requiredErrorMessage: string;
        maxLenErrorMessage: string;
        minLenErrorMessage: string;
        width: any;
        style: {};
        filterArray: any[];
        isErrorHTML: boolean;
        className: string;
        countMode: any;
        getLength: any;
        size: string;
        originInputProps: {};
        type: string;
        showClear: boolean;
        onClear(): void;
    };
    constructor(props: any);
    static Group: typeof InputGroup;
    inputRef: any;
    inputContainerRef: any;
    inputDetailRef: any;
    addonBeforeRef: any;
    addonAfterRef: any;
    inputCountAnchor: any;
    ___countLabelTimer___: any;
    ___imeStart___: any;
    componentDidMount(): void;
    static getDerivedStateFromProps(nextProps: any, prevState: any): InputState;
    componentWillUnmount(): void;
    onInputCompositionStart: () => void;
    onInputCompositionEnd: (e: any) => void;
    onChange: (e: any) => void;
    onClear: () => void;
    onKeyDown: (e: any) => void;
    setLabelWidth: (showLabel?: boolean) => void;
    getInputClassName(): any;
    focus: () => void;
    blur: () => void;
    onFocus: (e: any) => void;
    onBlur: (e: any) => void;
    renderInnerSuffix(): JSX.Element;
    renderLabeledIcon(children: any): JSX.Element;
    renderInput(): JSX.Element;
    saveRef: (name: any) => (node: any) => void;
    renderLabeledInput(children: any): any;
    renderClearIcon(): JSX.Element;
    isAddonInput: () => {};
    validateLength: () => any;
    render(): JSX.Element;
}
export default Input;
