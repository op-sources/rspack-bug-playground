import _objectWithoutPropertiesLoose from "@babel/runtime/helpers/objectWithoutPropertiesLoose";
import _extends from "@babel/runtime/helpers/extends";
import _inheritsLoose from "@babel/runtime/helpers/inheritsLoose";

var _dec, _class, _class2, _temp;

import React, { PureComponent } from 'react';
import RcSlider from 'rc-slider/lib/Slider';
import RcRange from 'rc-slider/lib/Range';
import RcHandle from 'rc-slider/lib/Handle';
import Tooltip from '../tooltip';
import { classnames } from '../../core/commonTools';
import { withConfigConsumer } from '../providerConfig/context';
var Slider = (_dec = withConfigConsumer('slider'), _dec(_class = (_temp = _class2 = /*#__PURE__*/function (_PureComponent) {
  _inheritsLoose(Slider, _PureComponent);

  function Slider(_props) {
    var _this;

    _this = _PureComponent.call(this, _props) || this;
    _this.tooltipRef = void 0;
    _this.rcSlider = void 0;

    _this.toggleTooltipVisible = function (index, visible) {
      if (_this.props.disabled) {
        return;
      }

      _this.setState(function (_ref) {
        var _extends2;

        var visibles = _ref.visibles;
        return {
          visibles: _extends({}, visibles, (_extends2 = {}, _extends2[index] = visible, _extends2))
        };
      });
    };

    _this.getTooltipRef = function (ref) {
      _this.tooltipRef = ref;
    };

    _this.onChange = function (props) {
      _this.props.onChange(props);

      if (_this.tooltipRef && _this.tooltipRef.trigger && _this.tooltipRef.trigger.forcePopupAlign && typeof _this.tooltipRef.trigger.forcePopupAlign === 'function') {
        _this.tooltipRef.trigger.forcePopupAlign();
      }
    };

    _this.saveSlider = function (node) {
      _this.rcSlider = node;
    };

    _this.state = {
      visibles: {}
    };
    return _this;
  }

  var _proto = Slider.prototype;

  _proto.handleWithTooltip = function handleWithTooltip(_ref2) {
    var _this2 = this;

    var value = _ref2.value,
        dragging = _ref2.dragging,
        index = _ref2.index,
        restProps = _objectWithoutPropertiesLoose(_ref2, ["value", "dragging", "index"]);

    var _this$props = this.props,
        tipFormatter = _this$props.tipFormatter,
        tooltipVisible = _this$props.tooltipVisible,
        tooltipPlacement = _this$props.tooltipPlacement,
        getTooltipPopupContainer = _this$props.getTooltipPopupContainer;
    var visibles = this.state.visibles;
    var isTipFormatter = tipFormatter ? visibles[index] || dragging : false;
    var visible = tooltipVisible || tooltipVisible === undefined && isTipFormatter;
    return /*#__PURE__*/React.createElement(Tooltip, {
      title: tipFormatter ? tipFormatter(value) : '',
      visible: visible,
      placement: tooltipPlacement,
      transitionName: "zoom-down",
      key: index,
      getPopupContainer: getTooltipPopupContainer,
      type: "dark",
      toolTipRef: this.getTooltipRef
    }, /*#__PURE__*/React.createElement(RcHandle, _extends({}, restProps, {
      value: value,
      onMouseEnter: function onMouseEnter() {
        return _this2.toggleTooltipVisible(index, true);
      },
      onMouseLeave: function onMouseLeave() {
        return _this2.toggleTooltipVisible(index, false);
      },
      onChange: this.onChange
    })));
  };

  _proto.focus = function focus() {
    this.rcSlider.focus();
  };

  _proto.blur = function blur() {
    this.rcSlider.blur();
  };

  _proto.render = function render() {
    var _classnames,
        _this3 = this;

    var _this$props2 = this.props,
        customizePrefixCls = _this$props2.prefixCls,
        size = _this$props2.size,
        customizeTooltipPrefixCls = _this$props2.tooltipPrefixCls,
        range = _this$props2.range,
        readOnly = _this$props2.readOnly,
        disabled = _this$props2.disabled,
        className = _this$props2.className,
        defaultValue = _this$props2.defaultValue,
        lightPrefix = _this$props2.lightPrefix,
        restProps = _objectWithoutPropertiesLoose(_this$props2, ["prefixCls", "size", "tooltipPrefixCls", "range", "readOnly", "disabled", "className", "defaultValue", "lightPrefix"]);

    var classNames = classnames(className, customizePrefixCls + "-" + size, (_classnames = {}, _classnames[customizePrefixCls + "-readOnly"] = readOnly, _classnames));

    if (range) {
      return /*#__PURE__*/React.createElement(RcRange, _extends({
        defaultValue: defaultValue || [0, 0]
      }, restProps, {
        ref: this.saveSlider,
        handle: function handle(info) {
          return _this3.handleWithTooltip(info);
        },
        prefixCls: customizePrefixCls,
        className: classNames,
        tooltipPrefixCls: customizeTooltipPrefixCls,
        disabled: disabled || readOnly,
        onChange: this.onChange
      }));
    }

    return /*#__PURE__*/React.createElement(RcSlider, _extends({
      defaultValue: defaultValue
    }, restProps, {
      ref: this.saveSlider,
      handle: function handle(info) {
        return _this3.handleWithTooltip(info);
      },
      prefixCls: customizePrefixCls,
      className: classNames,
      tooltipPrefixCls: customizeTooltipPrefixCls,
      disabled: disabled || readOnly,
      onChange: this.onChange
    }));
  };

  return Slider;
}(PureComponent), _class2.defaultProps = {
  prefixCls: 'one-slider',
  defaultValue: 0,
  disabled: false,
  readOnly: false,
  dots: false,
  included: true,
  max: 100,
  min: 0,
  range: false,
  step: 1,
  onChange: function onChange() {},
  onAfterChange: function onAfterChange() {},
  tipFormatter: function tipFormatter(value) {
    return value.toString();
  },
  tooltipPlacement: 'top',
  getTooltipPopupContainer: function getTooltipPopupContainer() {
    return document.body;
  },
  size: 'medium'
}, _temp)) || _class);
export default Slider;