import _extends from "@babel/runtime/helpers/extends";
import _inheritsLoose from "@babel/runtime/helpers/inheritsLoose";
import _last from "lodash/last";

/**
 * @file 菜单
 */
import React, { PureComponent } from 'react';
import Column from './column';

var Menu = /*#__PURE__*/function (_PureComponent) {
  _inheritsLoose(Menu, _PureComponent);

  function Menu() {
    return _PureComponent.apply(this, arguments) || this;
  }

  var _proto = Menu.prototype;

  _proto.prefix = function prefix(name) {
    return this.props.prefixCls + "-" + name;
  };

  _proto.render = function render() {
    var _this$props = this.props,
        prefixCls = _this$props.prefixCls,
        size = _this$props.size,
        showCheckbox = _this$props.showCheckbox,
        style = _this$props.style,
        CustomItemRender = _this$props.CustomItemRender,
        firstColumnGroup = _this$props.firstColumnGroup,
        expandIcon = _this$props.expandIcon,
        loadingIcon = _this$props.loadingIcon,
        value = _this$props.value,
        onSelect = _this$props.onSelect,
        expandTrigger = _this$props.expandTrigger,
        columnHeader = _this$props.columnHeader,
        columnFooter = _this$props.columnFooter,
        activeValue = _this$props.activeValue,
        onHover = _this$props.onHover,
        onCheck = _this$props.onCheck,
        width = _this$props.width,
        columnWidth = _this$props.columnWidth,
        columns = _this$props.columns,
        forwardRef = _this$props.forwardRef,
        renderOption = _this$props.renderOption,
        loadingMap = _this$props.loadingMap;

    var menuStyle = _extends({}, style);

    if (width) {
      menuStyle.width = width;
    }

    return /*#__PURE__*/React.createElement("div", {
      className: this.prefix('menus'),
      style: menuStyle,
      ref: forwardRef
    }, this.renderHeader(), /*#__PURE__*/React.createElement("div", {
      className: this.prefix('menus-container')
    }, columns.map(function (options, index) {
      var lastOne = columns.length - 1 === index;
      return /*#__PURE__*/React.createElement(Column, {
        prefixCls: prefixCls,
        key: index,
        size: size,
        index: index,
        width: lastOne ? undefined : columnWidth,
        options: options,
        value: _last(value),
        valuePath: value,
        activeValuePath: activeValue,
        expandIcon: expandIcon,
        loadingIcon: loadingIcon,
        loadingMap: loadingMap,
        onSelect: onSelect,
        onHover: onHover,
        onCheck: onCheck,
        showCheckbox: showCheckbox,
        expandTrigger: expandTrigger,
        firstColumnGroup: index === 0 && firstColumnGroup,
        CustomItemRender: index === 0 && CustomItemRender,
        header: columnHeader,
        footer: columnFooter,
        renderOption: renderOption
      });
    })), this.renderFooter());
  };

  _proto.renderHeader = function renderHeader() {
    var header = this.props.header;

    if (typeof header === 'function') {
      header = header();
    }

    if (header) {
      return /*#__PURE__*/React.createElement("div", {
        className: this.prefix('header')
      }, header);
    }

    return null;
  };

  _proto.renderFooter = function renderFooter() {
    var footer = this.props.footer;

    if (typeof footer === 'function') {
      footer = footer();
    }

    if (footer) {
      return /*#__PURE__*/React.createElement("div", {
        className: this.prefix('footer')
      }, footer);
    }

    return null;
  };

  return Menu;
}(PureComponent);

export { Menu as default };