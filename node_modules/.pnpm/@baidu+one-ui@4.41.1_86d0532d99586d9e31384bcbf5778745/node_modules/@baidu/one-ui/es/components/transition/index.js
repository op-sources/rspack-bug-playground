import _extends from "@babel/runtime/helpers/extends";
import _objectWithoutPropertiesLoose from "@babel/runtime/helpers/objectWithoutPropertiesLoose";
import _inheritsLoose from "@babel/runtime/helpers/inheritsLoose";
import React, { PureComponent } from 'react';
import { CSSTransition } from 'react-transition-group';
import { classnames } from '../../core/commonTools';

var Transition = /*#__PURE__*/function (_PureComponent) {
  _inheritsLoose(Transition, _PureComponent);

  function Transition() {
    return _PureComponent.apply(this, arguments) || this;
  }

  var _proto = Transition.prototype;

  _proto.getDurations = function getDurations(timeout) {
    if (typeof timeout === 'number') {
      return {
        "in": timeout + 'ms',
        out: timeout + 'ms'
      };
    }

    return {
      "in": timeout.enter + 'ms',
      out: timeout.exit + 'ms'
    };
  };

  _proto.render = function render() {
    var _this$props = this.props,
        show = _this$props["in"],
        appear = _this$props.appear,
        timeout = _this$props.timeout,
        children = _this$props.children,
        name = _this$props.name,
        prefixCls = _this$props.prefixCls,
        className = _this$props.className,
        unmountOnExit = _this$props.unmountOnExit,
        style = _this$props.style,
        lightPrefix = _this$props.lightPrefix,
        restProps = _objectWithoutPropertiesLoose(_this$props, ["in", "appear", "timeout", "children", "name", "prefixCls", "className", "unmountOnExit", "style", "lightPrefix"]);

    var durations = this.getDurations(timeout);

    var transitionStyle = _extends({
      '--dls-transition-duration-in': durations["in"],
      '--dls-transition-duration-out': durations.out
    }, style);

    var cls = name === 'move' ? classnames(prefixCls + "-" + name, className) : className;
    return /*#__PURE__*/React.createElement(CSSTransition, _extends({
      "in": show,
      appear: appear,
      timeout: timeout,
      unmountOnExit: unmountOnExit,
      classNames: prefixCls + "-" + name
    }, restProps), /*#__PURE__*/React.isValidElement(children) ? /*#__PURE__*/React.cloneElement(children, {
      className: classnames(children.props.className, cls),
      style: _extends({}, children.props.style, transitionStyle)
    }) : children);
  };

  return Transition;
}(PureComponent);

Transition.defaultProps = {
  prefixCls: 'one-transition',
  "in": true,
  appear: true,
  timeout: {
    appear: 100,
    enter: 100,
    exit: 100
  },
  unmountOnExit: false
};
export default Transition;