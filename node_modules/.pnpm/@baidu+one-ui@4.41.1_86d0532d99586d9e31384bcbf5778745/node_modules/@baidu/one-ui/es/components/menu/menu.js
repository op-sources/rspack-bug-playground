import _extends from "@babel/runtime/helpers/extends";
import _objectWithoutPropertiesLoose from "@babel/runtime/helpers/objectWithoutPropertiesLoose";
import _inheritsLoose from "@babel/runtime/helpers/inheritsLoose";

var _dec, _class, _class2, _temp;

import React, { PureComponent } from 'react';
import { classnames } from '../../core/commonTools';
import warning from 'warning';
import Item from './menuItem';
import Divider from './divider';
import ItemGroup from './menuItemGroup';
import SubMenu from './subMenu';
import InnerMenu from './common/menu';
import { withConfigConsumer } from '../providerConfig/context';
import Context from './context';
var horizontalMap = {
  1: 'large',
  2: 'medium',
  3: 'small'
};
var Menu = (_dec = withConfigConsumer('menu'), _dec(_class = (_temp = _class2 = /*#__PURE__*/function (_PureComponent) {
  _inheritsLoose(Menu, _PureComponent);

  function Menu(props) {
    var _this;

    _this = _PureComponent.call(this, props) || this;

    _this.getContext = function () {
      var _this$props = _this.props,
          inlineCollapsed = _this$props.inlineCollapsed,
          inlineIndent = _this$props.inlineIndent,
          inlinePaddingLeft = _this$props.inlinePaddingLeft;
      return {
        inlineCollapsed: inlineCollapsed,
        inlineIndent: inlineIndent,
        inlinePaddingLeft: inlinePaddingLeft
      };
    };

    _this.setOpenKeys = function (openKeys) {
      if (!('openKeys' in _this.props)) {
        _this.setState({
          openKeys: openKeys
        });
      }
    };

    _this.getRealMenuMode = function () {
      var _this$props2 = _this.props,
          inlineCollapsed = _this$props2.inlineCollapsed,
          mode = _this$props2.mode;

      if (_this.state.switchModeFromInline && inlineCollapsed) {
        return 'inline';
      }

      return inlineCollapsed ? 'vertical' : mode;
    };

    _this.getInlineCollapsed = function () {
      var inlineCollapsed = _this.props.inlineCollapsed;
      return inlineCollapsed;
    };

    _this.handleOpenChange = function (openKeys) {
      _this.setOpenKeys(openKeys);

      var onOpenChange = _this.props.onOpenChange;

      if (onOpenChange) {
        onOpenChange(openKeys);
      }
    };

    _this.handleClick = function (e) {
      _this.handleOpenChange([]);

      var onClick = _this.props.onClick;

      if (onClick) {
        onClick(e);
      }
    };

    warning(!('inlineCollapsed' in props && props.mode !== 'inline'), '`inlineCollapsed` should only be used when Menu\'s `mode` is inline.');

    var _openKeys;

    if ('defaultOpenKeys' in props) {
      _openKeys = props.defaultOpenKeys;
    } else if ('openKeys' in props) {
      _openKeys = props.openKeys;
    }

    _this.state = {
      openKeys: _openKeys || []
    };
    return _this;
  }

  Menu.getDerivedStateFromProps = function getDerivedStateFromProps(props, state) {
    var mode = props.mode,
        openKeys = props.openKeys,
        inlineCollapsed = props.inlineCollapsed;
    var newState = {
      mode: mode,
      inlineCollapsed: inlineCollapsed
    };

    if (state.mode === 'inline' && mode !== 'inline') {
      newState.switchModeFromInline = true;
    }

    if ('openKeys' in props) {
      newState.openKeys = openKeys;
      return newState;
    }

    if (inlineCollapsed && !state.inlineCollapsed) {
      newState.switchModeFromInline = !inlineCollapsed;
      newState.inlineOpenKeys = state.openKeys;
      newState.openKeys = [];
    }

    if (!inlineCollapsed && state.inlineCollapsed) {
      newState.openKeys = state.inlineOpenKeys || [];
      newState.inlineOpenKeys = [];
    }

    return newState;
  };

  var _proto = Menu.prototype;

  _proto.render = function render() {
    var _classnames, _classnames2;

    var _this$props3 = this.props,
        prefixCls = _this$props3.prefixCls,
        className = _this$props3.className,
        mode = _this$props3.mode,
        style = _this$props3.style,
        needBorder = _this$props3.needBorder,
        arrowPosition = _this$props3.arrowPosition,
        size = _this$props3.size,
        type = _this$props3.type,
        menuLevel = _this$props3.menuLevel,
        inlinePaddingLeft = _this$props3.inlinePaddingLeft,
        inlineCollapsed = _this$props3.inlineCollapsed,
        lightPrefix = _this$props3.lightPrefix,
        restProps = _objectWithoutPropertiesLoose(_this$props3, ["prefixCls", "className", "mode", "style", "needBorder", "arrowPosition", "size", "type", "menuLevel", "inlinePaddingLeft", "inlineCollapsed", "lightPrefix"]);

    var menuMode = this.getRealMenuMode();
    var menuClassName = classnames(prefixCls + "-light", (_classnames = {}, _classnames[prefixCls + "-inline-collapsed"] = inlineCollapsed, _classnames[prefixCls + "-container-border"] = mode === 'inline' && needBorder, _classnames[prefixCls + "-container-arrow-left"] = arrowPosition === 'left', _classnames[prefixCls + "-type-basic"] = type === 'basic', _classnames));
    var currentSize = size || horizontalMap[menuLevel > 3 ? 3 : menuLevel] || 'medium';
    var menuBoxCls = classnames(prefixCls + "-" + mode + "-box", prefixCls + "-" + mode + "-" + currentSize, (_classnames2 = {}, _classnames2[prefixCls + "-" + mode + "-container-collapsed"] = inlineCollapsed, _classnames2), className);
    var menuProps = {
      openKeys: this.state.openKeys,
      onOpenChange: this.handleOpenChange,
      className: menuClassName,
      mode: menuMode,
      prefixCls: prefixCls
    };

    if (menuMode !== 'inline') {
      menuProps.onClick = this.handleClick;
    }

    return /*#__PURE__*/React.createElement(Context.Provider, {
      value: this.getContext()
    }, /*#__PURE__*/React.createElement("div", {
      className: menuBoxCls,
      style: style
    }, /*#__PURE__*/React.createElement(InnerMenu, _extends({}, restProps, menuProps))));
  };

  return Menu;
}(PureComponent), _class2.Divider = Divider, _class2.Item = Item, _class2.SubMenu = SubMenu, _class2.ItemGroup = ItemGroup, _class2.defaultProps = {
  mode: 'vertical',
  type: 'strong',
  menuLevel: 2,
  // 默认是二级导航
  needBorder: false,
  popupClassName: '',
  arrowPosition: 'right',
  inlineIndent: 16,
  inlinePaddingLeft: 20,
  prefixCls: 'one-menu'
}, _temp)) || _class);
export default Menu;