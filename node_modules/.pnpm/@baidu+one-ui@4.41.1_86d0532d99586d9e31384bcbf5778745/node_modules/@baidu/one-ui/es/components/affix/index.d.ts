import { Component, CSSProperties } from 'react';
import { AffixProps } from './interface';
declare type AffixState = {
    affixStyle?: CSSProperties;
    placeholderStyle?: {
        width: number;
        height: number;
    };
};
declare type EventHandler = ({
    remove: () => {};
});
declare type EventHandlers = {
    [key: string]: EventHandler;
};
declare class Affix extends Component<AffixProps, AffixState> {
    static defaultProps: {
        prefixCls: string;
        target: () => Window & typeof globalThis;
        onChange: (...args: any[]) => void;
        zIndex: number;
    };
    timeout?: number;
    fixedNode: HTMLElement | undefined;
    affixNode: any;
    state: AffixState;
    componentDidMount(): void;
    componentDidUpdate(prevProps: AffixProps): void;
    componentWillUnmount(): void;
    setTargetEventListeners: (getTarget: any) => void;
    setAffixStyle: (eventType: string, affixStyle?: CSSProperties) => void;
    saveAffixNode: (affixNode: any) => void;
    setPlaceholderStyle: (placeholderStyle: any) => void;
    getFixedNode: (node: HTMLDivElement) => void;
    updatePosition: (event?: Event) => void;
    eventHandlers: EventHandlers;
    clearEventListeners: () => void;
    events: string[];
    render(): JSX.Element;
}
export default Affix;
export type { AffixProps };
