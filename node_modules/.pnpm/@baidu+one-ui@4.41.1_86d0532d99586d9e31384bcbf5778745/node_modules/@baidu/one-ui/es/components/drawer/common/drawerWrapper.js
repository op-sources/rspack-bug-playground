import _extends from "@babel/runtime/helpers/extends";
import _objectWithoutPropertiesLoose from "@babel/runtime/helpers/objectWithoutPropertiesLoose";
import _inheritsLoose from "@babel/runtime/helpers/inheritsLoose";
import Portal from 'rc-util/lib/PortalWrapper';
import * as React from 'react';
import Child from './drawerChild';
;
;

var DrawerWrapper = /*#__PURE__*/function (_React$Component) {
  _inheritsLoose(DrawerWrapper, _React$Component);

  function DrawerWrapper(props) {
    var _this;

    _this = _React$Component.call(this, props) || this;
    _this.dom = void 0;

    _this.onHandleClick = function (e) {
      var _this$props = _this.props,
          onHandleClick = _this$props.onHandleClick,
          $open = _this$props.open;

      if (onHandleClick) {
        onHandleClick(e);
      }

      if (typeof $open === 'undefined') {
        var open = _this.state.open;

        _this.setState({
          open: !open
        });
      }
    };

    _this.onClose = function (e) {
      var _this$props2 = _this.props,
          onClose = _this$props2.onClose,
          open = _this$props2.open;

      if (onClose) {
        onClose(e);
      }

      if (typeof open === 'undefined') {
        _this.setState({
          open: false
        });
      }
    };

    var _open = typeof props.open !== 'undefined' ? props.open : !!props.defaultOpen;

    _this.state = {
      open: _open
    };
    return _this;
  }

  var _proto = DrawerWrapper.prototype;

  _proto.render = function render() {
    var _this2 = this;

    var _this$props3 = this.props,
        defaultOpen = _this$props3.defaultOpen,
        getContainer = _this$props3.getContainer,
        wrapperClassName = _this$props3.wrapperClassName,
        forceRender = _this$props3.forceRender,
        handler = _this$props3.handler,
        closeDrawerByClickBody = _this$props3.closeDrawerByClickBody,
        props = _objectWithoutPropertiesLoose(_this$props3, ["defaultOpen", "getContainer", "wrapperClassName", "forceRender", "handler", "closeDrawerByClickBody"]);

    var open = this.state.open; // 渲染在当前 dom 里；

    if (!getContainer) {
      return /*#__PURE__*/React.createElement("div", {
        className: wrapperClassName,
        ref: function ref(c) {
          _this2.dom = c;
        }
      }, /*#__PURE__*/React.createElement(Child, _extends({}, props, {
        open: open,
        handler: handler,
        getContainer: function getContainer() {
          return _this2.dom;
        },
        onClose: this.onClose,
        onHandleClick: this.onHandleClick,
        closeDrawerByClickBody: closeDrawerByClickBody
      })));
    } // 如果有 handler 为内置强制渲染；


    var $forceRender = !!handler || forceRender;
    return /*#__PURE__*/React.createElement(Portal, {
      visible: open,
      forceRender: $forceRender,
      getContainer: getContainer,
      wrapperClassName: wrapperClassName
    }, function (_ref) {
      var childProps = _extends({}, _ref);

      return /*#__PURE__*/React.createElement(Child, _extends({}, props, childProps, {
        afterVisibleChange: props.afterVisibleChange,
        handler: handler,
        onClose: _this2.onClose,
        onHandleClick: _this2.onHandleClick,
        closeDrawerByClickBody: closeDrawerByClickBody
      }));
    });
  };

  return DrawerWrapper;
}(React.Component);

DrawerWrapper.defaultProps = {
  prefixCls: 'one-drawer',
  placement: 'left',
  getContainer: function getContainer() {
    return document.body;
  },
  defaultOpen: false,
  level: 'all',
  duration: '.3s',
  ease: 'cubic-bezier(0.78, 0.14, 0.15, 0.86)',
  onChange: function onChange() {},
  afterVisibleChange: function afterVisibleChange() {},
  handler: /*#__PURE__*/React.createElement("div", {
    className: "drawer-handle"
  }, /*#__PURE__*/React.createElement("i", {
    className: "drawer-handle-icon"
  })),
  showMask: true,
  maskClosable: true,
  maskStyle: {},
  wrapperClassName: '',
  className: '',
  keyboard: true,
  forceRender: false
};

DrawerWrapper.getDerivedStateFromProps = function (props, _ref2) {
  var prevProps = _ref2.prevProps;
  var newState = {
    prevProps: props
  };

  if (typeof prevProps !== 'undefined' && props.open !== prevProps.open) {
    newState.open = props.open;
  }

  return newState;
};

export default DrawerWrapper;