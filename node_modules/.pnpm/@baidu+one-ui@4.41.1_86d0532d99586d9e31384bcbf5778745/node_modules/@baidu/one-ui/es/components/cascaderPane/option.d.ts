/**
 * @file 菜单的项
 */
import { PureComponent, ReactElement, ReactNode } from 'react';
import { CascaderOption } from '../cascader/interface';
export declare type DataOption = {
    label: ReactNode;
    title?: string;
    icon?: ReactElement;
    checked?: boolean;
    indeterminate?: boolean;
    disabled?: boolean;
    selectable?: boolean;
    loading?: boolean;
    isLeaf?: boolean;
    key?: string;
    keyPath?: string;
    item?: CascaderOption;
    expandType?: 'inline' | 'toggle' | 'column';
    children?: DataOption[];
};
interface ColumnOptionProps {
    prefixCls?: string;
    option?: DataOption;
    active?: boolean;
    selected?: boolean;
    checked?: boolean;
    indeterminate?: boolean;
    loading?: boolean;
    expandIcon?: ReactNode;
    loadingIcon?: ReactNode;
    onSelect?: (key: string, keyPath: string) => void;
    onHover?: (key: string, keyPath: string) => void;
    onCheck?: (key: string) => void;
    showCheckbox?: boolean;
    group?: boolean;
    checkboxPrefixCls?: string;
    size?: 'xsmall' | 'large' | 'small' | 'medium';
    expandTrigger?: 'click' | 'hover';
    expanded?: boolean;
    renderOption?: (param: {
        node: ReactElement;
        option: CascaderOption;
    }) => ReactElement;
}
export default class Option extends PureComponent<ColumnOptionProps> {
    prefix(name: any): string;
    render(): JSX.Element;
    hasChildren(): boolean;
    handleOnSelect: () => void;
    delayTimer: any;
    handleMouseEnter: () => void;
    handleMouseLeave: () => void;
    componentWillUnmount(): void;
    handleOnCheck: (event?: any) => void;
    renderIcon(icon: any): JSX.Element;
    renderLabel(label: any): JSX.Element;
    renderExpandIcon(): JSX.Element;
}
export declare function EmptyOption({ emptyNode, prefixCls }: {
    emptyNode: any;
    prefixCls: any;
}): JSX.Element;
export {};
