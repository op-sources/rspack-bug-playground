import { ReactNode } from "react";
import { BaseProps } from "../interface";
export interface LightboxPosition {
    x: number;
    y: number;
}
export interface LightboxTransformInfo extends LightboxPosition {
    scale: number;
}
export declare type LightboxActionType = 'scaleToFit' | 'zoomIn' | 'zoomOut' | 'scaleToOriginal' | 'wheel' | 'move';
export interface LightboxToolbarActionItem {
    key: 'scaleToFit' | 'zoomIn' | 'zoomOut' | 'scaleToOriginal' | string;
    icon: ReactNode;
    disabled?: boolean;
    tip?: ReactNode;
    onClick?: () => void;
}
declare type LightboxToolbar = (val: LightboxToolbarActionItem[]) => LightboxToolbarActionItem[];
export declare type LightboxDataItem = {
    src: string;
    alt?: string;
    type: 'image' | 'video';
    desc?: ReactNode;
} | {
    src: ReactNode;
    alt?: string;
    type: 'custom';
    desc?: ReactNode;
};
export interface LightboxProps extends BaseProps {
    /**
     * 默认当前slide，从0开始
     */
    defaultActiveIndex?: number;
    /**
     * 当前受控slide，从0开始
     */
    activeIndex?: number;
    /**
     * dataSource 预览的数据源
     */
    dataSource?: LightboxDataItem[];
    /**
     * @deprecated
     */
    datasource?: LightboxDataItem[];
    /**
     * 翻页后回调
     */
    onChange?(activeIndex: number): void;
    /**
     * 是否展示
     */
    open?: boolean;
    /**
     * 点击关闭后回调
     */
    onClose?(): void;
    /**
     * 翻页索引的类型，数字或者直接不展示翻页
     */
    indicator?: 'number' | 'none';
    /**
     * 切换模式，auto循环
     */
    mode?: 'auto' | 'normal';
    /**
     * 弹窗的z-index
     */
    zIndex?: number;
    /**
     * 点击遮罩关闭
     */
    maskClosable?: boolean;
    /**
     * 最小缩放比例限制
     */
    minScale?: number;
    /**
     * 最大缩放比例限制
     */
    maxScale?: number;
    /**
     * 缩放比例步长
     */
    scaleStep?: number;
    /**
     * 工具栏配置
     * 类似于uploader的controls api，仅对数据源中的图片类型生效，默认配置缩放工具栏组
     */
    toolbar?: LightboxToolbar;
    /**
     * 点击缩放到最适展示比例时的回调
     */
    onScaleToFit?: (activeIndex: number) => void;
    /**
     * 点击放大比例按钮时的回调
     */
    onZoomIn?: (activeIndex: number, scale: number) => void;
    /**
     * 点击放大比例按钮时的回调
     */
    onZoomOut?: (iactiveIndex: number, scale: number) => void;
    /**
     * 点击缩放到原始尺寸比例按钮时的回调
     */
    onScaleToOriginal?: (activeIndex: number) => void;
    /**
     * 拖拽或者缩放比例时的回调
     */
    onTransform?: (activeIndex: number, value: LightboxTransformInfo, action: LightboxActionType) => void;
}
export {};
