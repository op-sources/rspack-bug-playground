import React, { useCallback, useMemo, forwardRef, useRef, useState, useEffect } from 'react';
import { classnames } from '../../../core/commonTools';
import { onMouseDown as _onMouseDown } from '../../../core/dragTools';
import { DEFAULT_WHEEL_SCALE_STEP } from '../configs';
var Carousel = /*#__PURE__*/forwardRef(function (props, ref) {
  var prefixCls = props.prefixCls,
      slide = props.slide,
      dataSource = props.dataSource,
      position = props.position,
      scale = props.scale,
      supportTransition = props.supportTransition,
      wheelScaleStep = props.wheelScaleStep,
      onChangePosition = props.onChangePosition,
      onScaleChange = props.onScaleChange;

  var _useState = useState(false),
      isDragging = _useState[0],
      setIsDragging = _useState[1];

  var positionObj = useRef({
    mousePosition: {
      x: 0,
      y: 0
    },
    originPosition: {
      x: 0,
      y: 0
    }
  });
  var videosRef = useRef([]);
  var transformStyle = useMemo(function () {
    var x = position.x,
        y = position.y;
    return {
      transform: "scale(" + scale + ") translate(" + x + "px, " + y + "px)"
    };
  }, [scale, position]);
  var onDragged = useCallback(function (_ref) {
    var mousePosition = _ref.position;
    setIsDragging(true);
    positionObj.current = {
      mousePosition: mousePosition,
      originPosition: position
    };
  }, [position]);
  var onMoving = useCallback(function (_ref2) {
    var _ref2$position = _ref2.position,
        x = _ref2$position.x,
        y = _ref2$position.y;
    var _positionObj$current = positionObj.current,
        mousePosition = _positionObj$current.mousePosition,
        originPosition = _positionObj$current.originPosition;
    var diffX = x - mousePosition.x;
    var diffY = y - mousePosition.y;
    var orginX = originPosition.x,
        originY = originPosition.y;
    var nextX = orginX + diffX / scale;
    var nextY = originY + diffY / scale;
    onChangePosition({
      x: nextX,
      y: nextY
    });
  }, [scale]);
  var onDropped = useCallback(function () {
    setIsDragging(false);
  }, []);
  var onWheel = useCallback(function (event) {
    event.stopPropagation();
    var deltaY = event.deltaY;
    var newScale = scale + (deltaY > 0 ? -1 : 1) * wheelScaleStep;
    newScale = Math.round(newScale * 100) / 100; // 保留两位小数

    onScaleChange(newScale);
  }, [scale, wheelScaleStep]);
  useEffect(function () {
    if (videosRef.current) {
      videosRef.current.forEach(function (video, index) {
        if (!video) {
          return;
        }

        index === slide - 1 ? video.play() : video.pause();
      });
    }
  }, [slide]);
  return /*#__PURE__*/React.createElement("div", {
    ref: ref,
    className: prefixCls + "-items"
  }, dataSource.map(function (item, index) {
    var _classnames;

    var active = index + 1 === slide;
    return /*#__PURE__*/React.createElement("div", {
      className: classnames(prefixCls + "-item", (_classnames = {}, _classnames[prefixCls + "-item-hide"] = index + 1 !== slide, _classnames)),
      key: index
    }, /*#__PURE__*/React.createElement("div", {
      className: prefixCls + "-container-item-media"
    }, item.type === 'image' ? /*#__PURE__*/React.createElement("img", {
      className: classnames(prefixCls + "-container-item-media-img", isDragging && prefixCls + "-container-item-media-img-dragging", supportTransition && prefixCls + "-container-item-media-img-transition"),
      "data-active": active,
      src: "" + item.src,
      alt: "" + item.alt,
      style: transformStyle,
      onMouseDown: function onMouseDown(event) {
        return _onMouseDown({
          event: event,
          onDragged: onDragged,
          onMoving: onMoving,
          onDropped: onDropped
        });
      },
      onWheel: onWheel
    }) : null, item.type === 'video' ? /*#__PURE__*/React.createElement("video", {
      ref: function ref(_ref3) {
        return videosRef.current[index] = _ref3;
      },
      src: "" + item.src,
      controls: true,
      muted: true
    }) : null, item.type === 'custom' ? item.src : null));
  }));
});
Carousel.defaultProps = {
  wheelScaleStep: DEFAULT_WHEEL_SCALE_STEP
};
Carousel.displayName = 'LightboxCarousel';
export default Carousel;