import _extends from "@babel/runtime/helpers/extends";
import _inheritsLoose from "@babel/runtime/helpers/inheritsLoose";

var _dec, _class, _class2, _temp;

import React, { PureComponent } from 'react';
import { classnames } from '../../core/commonTools';
import { IconChevronDown } from 'dls-icons-react';
import Dropdown from './dropdown';
import Menu from '../menu';
import SearchBox from '../searchBox';
import SearchText from '../select/searchText';
import Button from '../button';
import { withConfigConsumer } from '../providerConfig/context';
import Loading from '../loading';

var noop = function noop() {};

var MenuItem = Menu.Item;
var SubMenu = Menu.SubMenu;
var ItemGroup = Menu.ItemGroup;
var Divider = Menu.Divider;
var itemHeightBySize = {
  xsmall: 24,
  small: 28,
  medium: 32,
  large: 36
};
var DropdownButton = (_dec = withConfigConsumer('dropdown'), _dec(_class = (_temp = _class2 = /*#__PURE__*/function (_PureComponent) {
  _inheritsLoose(DropdownButton, _PureComponent);

  function DropdownButton(props) {
    var _this;

    _this = _PureComponent.call(this, props) || this;
    _this.dropdown = void 0;
    _this.buttonRef = void 0;
    _this.menuItemRef = void 0;

    _this.onSearch = function () {
      var onClickSearch = _this.props.onClickSearch;
      var searchValue = _this.state.searchValue;

      if (onClickSearch) {
        onClickSearch(searchValue);
      }
    };

    _this.onChangeSearch = function (e) {
      var value = e.target.value;
      var _this$props = _this.props,
          onSearchChange = _this$props.onSearchChange,
          searchControlled = _this$props.searchControlled,
          options = _this$props.options;

      _this.setState({
        searchValue: value
      });

      if (onSearchChange) {
        onSearchChange(value);
      }

      if (!searchControlled) {
        // 不受控的话 内部进行搜索
        var newOptions = options.filter(function (option) {
          return 'label' in option && option.label.indexOf(value) > -1;
        });

        _this.setState({
          options: newOptions
        });
      }
    };

    _this.onClearClick = function () {
      var onClearSearch = _this.props.onClearSearch;
      var value = '';

      if (onClearSearch) {
        onClearSearch(value);
      }

      _this.setState({
        searchValue: value
      });
    };

    _this.getButtonRef = function (ref) {
      _this.buttonRef = ref;
    };

    _this.getMenuItemRef = function (ref) {
      _this.menuItemRef = ref;
    };

    _this.getSubMenuItem = function (option, optionLength, index) {
      var _this$props2 = _this.props,
          onMenuItemHeight = _this$props2.onMenuItemHeight,
          showSearch = _this$props2.showSearch,
          size = _this$props2.size,
          prefixCls = _this$props2.prefixCls;
      var label = option.label;
      var isStringLabel = typeof label === 'string';
      var searchValue = _this.state.searchValue;

      if (option.children && option.children.length) {
        var childrenLength = option.children.length;
        var subMenu = option.children.map(function (item, index) {
          var key = item.value;
          var menuItemProps = {
            key: key
          };

          if (item.disabled) {
            menuItemProps.disabled = true;
          }

          if (item.divider) {
            return /*#__PURE__*/React.createElement(Divider, {
              key: index + "-divider"
            });
          }

          var onClick = item.onClick || noop;

          if (showSearch && isStringLabel) {
            return /*#__PURE__*/React.createElement(MenuItem, menuItemProps, /*#__PURE__*/React.createElement("span", {
              onClick: onClick
            }, /*#__PURE__*/React.createElement(SearchText, {
              text: item.label,
              showSearch: true,
              searchValue: searchValue
            })));
          }

          return /*#__PURE__*/React.createElement(MenuItem, _extends({}, menuItemProps, {
            key: key
          }), /*#__PURE__*/React.createElement("span", {
            onClick: onClick
          }, item.label));
        });
        var subMenuProps = {
          key: option.value,
          title: option.label,
          popupClassName: prefixCls + "-menu-submenu-" + size
        };

        if (option.disabled) {
          subMenuProps.disabled = true;
        } // 判断子菜单是否长，如果子菜单比母菜单长则判定为超长


        if (childrenLength >= optionLength && index) {
          var itemHeight = onMenuItemHeight || itemHeightBySize[size];
          subMenuProps.placements = {
            rightTop: {
              points: ['tl', 'tr'],
              overflow: {
                adjustX: 1,
                adjustY: 1
              },
              offset: [4, -(itemHeight * index)]
            }
          };
        }

        if (showSearch) {
          return /*#__PURE__*/React.createElement(SubMenu, subMenuProps, subMenu);
        }

        return /*#__PURE__*/React.createElement(SubMenu, subMenuProps, subMenu);
      }

      if (option.groupChildren && option.groupChildren.length) {
        // 分组
        var children = option.groupChildren.map(function (child) {
          var menuItemProps = {
            key: child.value
          };

          if (child.disabled) {
            menuItemProps.disabled = true;
          }

          if (child.divider) {
            return /*#__PURE__*/React.createElement(Divider, {
              key: index + "-divider"
            });
          }

          var onClick = child.onClick || noop;

          if (showSearch && isStringLabel) {
            return /*#__PURE__*/React.createElement(MenuItem, menuItemProps, /*#__PURE__*/React.createElement("span", {
              onClick: onClick
            }, /*#__PURE__*/React.createElement(SearchText, {
              text: child.label,
              showSearch: true,
              searchValue: searchValue
            })));
          }

          return /*#__PURE__*/React.createElement(MenuItem, _extends({}, menuItemProps, {
            key: child.value
          }), /*#__PURE__*/React.createElement("span", {
            onClick: onClick
          }, child.label));
        });
        return /*#__PURE__*/React.createElement(ItemGroup, {
          key: option.value,
          title: option.label
        }, children);
      }

      var menuItemProps = {
        key: option.value
      };

      if (option.disabled) {
        menuItemProps.disabled = true;
      }

      if (option.divider) {
        return /*#__PURE__*/React.createElement(Divider, {
          key: index + "-divider"
        });
      }

      var onClick = option.onClick || noop;

      if (showSearch && isStringLabel) {
        return /*#__PURE__*/React.createElement(MenuItem, _extends({
          ref: _this.getMenuItemRef
        }, menuItemProps), /*#__PURE__*/React.createElement("span", {
          onClick: onClick
        }, /*#__PURE__*/React.createElement(SearchText, {
          text: option.label,
          showSearch: true,
          searchValue: searchValue
        })));
      }

      return /*#__PURE__*/React.createElement(MenuItem, menuItemProps, /*#__PURE__*/React.createElement("span", {
        onClick: onClick
      }, option.label));
    };

    _this.getDropdownOverlay = function () {
      var _this$props3 = _this.props,
          dropdownHeight = _this$props3.dropdownHeight,
          showSearch = _this$props3.showSearch,
          searchPlaceholder = _this$props3.searchPlaceholder,
          searchWidth = _this$props3.searchWidth,
          lightPrefix = _this$props3.lightPrefix,
          prefixCls = _this$props3.prefixCls,
          size = _this$props3.size,
          searchPrefixCls = _this$props3.searchPrefixCls,
          BottomCustomPanel = _this$props3.BottomCustomPanel,
          notFound = _this$props3.notFound,
          loading = _this$props3.loading,
          loadingText = _this$props3.loadingText;
      var _this$state = _this.state,
          options = _this$state.options,
          searchValue = _this$state.searchValue;
      var optionsLength = options.length;
      var searchMenuProps = {
        disabled: true,
        style: {
          padding: 0,
          cursor: 'auto'
        }
      };
      var searchProps = {
        placeholder: searchPlaceholder,
        value: searchValue,
        isShowDropDown: false,
        onSearch: _this.onSearch,
        onChange: _this.onChangeSearch,
        onClearClick: _this.onClearClick,
        size: size,
        prefixCls: searchPrefixCls || lightPrefix + "-search-box"
      };

      if (searchWidth) {
        searchProps.width = searchWidth;
      } else {
        searchProps.width = '100%';
      }

      var normalizedSize = size === 'xsmall' ? 'small' : size;
      var empty = options.length === 0 || loading ? /*#__PURE__*/React.createElement(MenuItem, {
        disabled: true,
        className: prefixCls + "-menu-item-empty"
      }, loading ? /*#__PURE__*/React.createElement(Loading, {
        size: normalizedSize,
        tip: loadingText
      }) : notFound) : null;
      var bottomCustomPanel = typeof BottomCustomPanel === 'function' ? /*#__PURE__*/React.createElement(BottomCustomPanel, _this.props) : BottomCustomPanel;
      var menu = /*#__PURE__*/React.createElement(Menu, {
        style: {
          height: dropdownHeight
        },
        onClick: _this.handleMenuClick,
        className: prefixCls + "-menu-" + size
      }, showSearch ? /*#__PURE__*/React.createElement(MenuItem, _extends({}, searchMenuProps, {
        className: prefixCls + "-search-item"
      }), /*#__PURE__*/React.createElement(SearchBox, searchProps)) : null, empty || options.map(function (option, index) {
        return _this.getSubMenuItem(option, optionsLength, index);
      }), bottomCustomPanel);
      return menu;
    };

    _this.getDropdownContainer = function (ref) {
      _this.dropdown = ref;
    };

    _this.handleMenuClick = function (e) {
      var _this$props4 = _this.props,
          handleMenuClick = _this$props4.handleMenuClick,
          onHandleMenuClick = _this$props4.onHandleMenuClick;
      onHandleMenuClick(e);
      handleMenuClick(e);

      _this.dropdownVisibleChange(false);
    };

    _this.dropdownVisibleChange = function (visible) {
      var _this$props5 = _this.props,
          onVisibleChange = _this$props5.onVisibleChange,
          options = _this$props5.options;
      onVisibleChange(visible);

      _this.setState({
        isExpand: visible,
        searchValue: '',
        options: options
      });
    };

    _this.setDropdownWidth = function () {
      var width = _this.buttonRef.offsetWidth;

      if (width !== _this.state.dropdownWidth) {
        _this.setState({
          dropdownWidth: width
        });
      }
    };

    _this.state = {
      isExpand: false,
      options: props.options || [],
      searchValue: '',
      dropdownWidth: null
    };
    return _this;
  }

  var _proto = DropdownButton.prototype;

  _proto.componentDidMount = function componentDidMount() {
    this.setDropdownWidth();
  };

  _proto.componentDidUpdate = function componentDidUpdate() {
    this.setDropdownWidth();
  };

  _proto.render = function render() {
    var _classnames;

    var _this$props6 = this.props,
        trigger = _this$props6.trigger,
        placement = _this$props6.placement,
        disabled = _this$props6.disabled,
        visible = _this$props6.visible,
        title = _this$props6.title,
        style = _this$props6.style,
        getPopupContainer = _this$props6.getPopupContainer,
        className = _this$props6.className,
        overlayStyle = _this$props6.overlayStyle,
        overlayClassName = _this$props6.overlayClassName,
        width = _this$props6.width,
        onMouseEnter = _this$props6.onMouseEnter,
        onMouseLeave = _this$props6.onMouseLeave,
        size = _this$props6.size,
        type = _this$props6.type,
        onClickButton = _this$props6.onClickButton,
        _this$props6$buttonPr = _this$props6.buttonProps,
        buttonProps = _this$props6$buttonPr === void 0 ? {} : _this$props6$buttonPr,
        primaryType = _this$props6.primaryType,
        textLink = _this$props6.textLink,
        split = _this$props6.split,
        buttonType = _this$props6.buttonType,
        dropdownIndependentWidth = _this$props6.dropdownIndependentWidth,
        showArrow = _this$props6.showArrow,
        icon = _this$props6.icon,
        header = _this$props6.header,
        footer = _this$props6.footer;
    var overlay = this.props.overlay || this.getDropdownOverlay();

    var normalizedTypeOverlayStyle = _extends({}, overlayStyle);

    var dropdownProps = {
      overlay: overlay,
      trigger: disabled ? [] : trigger,
      onVisibleChange: this.dropdownVisibleChange,
      onMouseEnter: onMouseEnter,
      onMouseLeave: onMouseLeave,
      getPopupContainer: getPopupContainer,
      dropdownIndependentWidth: dropdownIndependentWidth,
      overlayStyle: normalizedTypeOverlayStyle,
      overlayClassName: overlayClassName,
      transparent: false,
      size: size,
      header: header,
      footer: footer
    };
    var visibleControlled = ('visible' in this.props);

    if (visibleControlled) {
      dropdownProps.visible = visible;
    }

    if ('placement' in this.props) {
      dropdownProps.placement = placement;
    }

    var prefixCls = this.props.prefixCls + "-button";
    var isExpand = this.state.isExpand; // 原逻辑type, primaryType, textLink 收敛到 buttonType, split
    // type: normal => buttonType: basic
    // type: normal, textLink: true => buttonType: link
    // type: !normal => split, buttonType: normal
    // type: !normal, primaryType: xxx => split, buttonType: xxx

    var normalizedSplit = split || type !== 'normal';
    var normalizedType = buttonType || buttonProps.type || (type === 'normal' ? textLink ? 'text' : 'basic' : primaryType);

    if (!dropdownIndependentWidth && this.state.dropdownWidth) {
      normalizedTypeOverlayStyle.minWidth = this.state.dropdownWidth + "px";
    }

    var dropdownButtonClassName = classnames(prefixCls, prefixCls + "-" + size, prefixCls + "-" + normalizedType, (_classnames = {}, _classnames[prefixCls + "-split"] = normalizedSplit, _classnames[prefixCls + "-open"] = visibleControlled ? visible : isExpand, _classnames));

    var buttonStyle = _extends({}, style);

    if (width) {
      buttonStyle.width = width;
    }

    var dropdownButtonContainerClassName = classnames(prefixCls + "-containers", className);
    return /*#__PURE__*/React.createElement("span", {
      className: dropdownButtonContainerClassName,
      ref: this.getDropdownContainer
    }, !normalizedSplit ? /*#__PURE__*/React.createElement(Dropdown, dropdownProps, /*#__PURE__*/React.createElement("span", {
      ref: this.getButtonRef
    }, /*#__PURE__*/React.createElement(Button, _extends({
      className: dropdownButtonClassName,
      style: buttonStyle,
      disabled: disabled,
      size: size,
      type: normalizedType,
      icon: icon
    }, buttonProps), title, showArrow ? /*#__PURE__*/React.createElement(IconChevronDown, {
      className: prefixCls + "-arrow-down-icon"
    }) : null))) : /*#__PURE__*/React.createElement("span", {
      ref: this.getButtonRef,
      className: prefixCls + "-primary-container"
    }, /*#__PURE__*/React.createElement(Button, {
      disabled: disabled,
      onClick: onClickButton,
      type: normalizedType,
      size: size,
      icon: icon
    }, title), /*#__PURE__*/React.createElement(Dropdown, _extends({
      placement: "bottomRight"
    }, dropdownProps), /*#__PURE__*/React.createElement("span", {
      className: prefixCls + "-primary-container-item"
    }, /*#__PURE__*/React.createElement(Button, _extends({
      className: dropdownButtonClassName,
      style: buttonStyle,
      size: size,
      disabled: disabled,
      type: normalizedType,
      icon: /*#__PURE__*/React.createElement(IconChevronDown, {
        className: prefixCls + "-arrow-down-icon"
      })
    }, buttonProps))))));
  };

  return DropdownButton;
}(PureComponent), _class2.defaultProps = {
  prefixCls: 'one-dropdown',
  disabled: false,
  dropdownHeight: 'auto',
  showSearch: false,
  style: {},
  trigger: ['hover'],
  notFound: '暂无内容',
  loadingText: '加载中...',
  loading: false,
  className: '',
  searchPlaceholder: '请输入需要搜索的内容',
  size: 'medium',
  type: 'normal',
  dropdownIndependentWidth: false,
  onClickButton: function onClickButton() {},
  buttonProps: {},
  primaryType: 'normal',
  textLink: false,
  searchControlled: false,
  showArrow: true,
  overlayStyle: {},
  onVisibleChange: function onVisibleChange() {},
  onHandleMenuClick: function onHandleMenuClick() {},
  handleMenuClick: function handleMenuClick() {},
  BottomCustomPanel: null
}, _class2.getDerivedStateFromProps = function (nextProps, prevState) {
  var newState = {};

  if ('options' in nextProps) {
    newState.options = nextProps.options;
  }

  return newState;
}, _temp)) || _class);
export default DropdownButton;