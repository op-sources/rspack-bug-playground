import _extends from "@babel/runtime/helpers/extends";
import _objectWithoutPropertiesLoose from "@babel/runtime/helpers/objectWithoutPropertiesLoose";
import React from 'react';
import Button from '../../button';
import Tooltip from '../../tooltip';

function transformScale(scale) {
  return Math.round(scale * 100);
}

export default function Toolbar(_ref) {
  var prefixCls = _ref.prefixCls,
      actionItems = _ref.actionItems,
      scale = _ref.scale,
      minScale = _ref.minScale,
      maxScale = _ref.maxScale,
      isSupportZoom = _ref.isSupportZoom,
      isShowIndicator = _ref.isShowIndicator,
      slide = _ref.slide,
      total = _ref.total,
      _onClick = _ref.onClick;
  return /*#__PURE__*/React.createElement("div", {
    className: prefixCls + "-toolbar"
  }, isShowIndicator && /*#__PURE__*/React.createElement("span", {
    className: prefixCls + "-indicator-numbers"
  }, slide, /*#__PURE__*/React.createElement("span", {
    className: prefixCls + "-indicator-numbers-separator"
  }), total), isShowIndicator && isSupportZoom && /*#__PURE__*/React.createElement("span", {
    className: prefixCls + "-toolbar-separator"
  }), isSupportZoom && !!(actionItems != null && actionItems.length) && actionItems.map(function (_ref2) {
    var key = _ref2.key,
        icon = _ref2.icon,
        tip = _ref2.tip,
        rest = _objectWithoutPropertiesLoose(_ref2, ["key", "icon", "tip"]);

    var buttonProps = _extends({
      type: 'text',
      size: 'xsmall',
      icon: icon,
      disabled: key === 'zoomIn' && scale >= maxScale || key === 'zoomOut' && scale <= minScale,
      onClick: function onClick() {
        return _onClick(key);
      }
    }, rest);

    if (tip) {
      return /*#__PURE__*/React.createElement(Tooltip, {
        key: key,
        type: "dark",
        title: /*#__PURE__*/React.createElement("span", {
          className: prefixCls + "-toolbar-tip"
        }, tip),
        getPopupContainer: function getPopupContainer(node) {
          return node.firstChild;
        } // 主要针对内部button组件

      }, /*#__PURE__*/React.createElement("span", {
        className: prefixCls + "-toolbar-button"
      }, /*#__PURE__*/React.createElement(Button, buttonProps)));
    }

    return /*#__PURE__*/React.createElement(Button, _extends({
      key: key
    }, buttonProps));
  }), isSupportZoom && /*#__PURE__*/React.createElement("span", {
    className: prefixCls + "-toolbar-scale"
  }, transformScale(scale), "%"));
}