import _extends from "@babel/runtime/helpers/extends";
import _inheritsLoose from "@babel/runtime/helpers/inheritsLoose";

var _dec, _class, _class2, _temp;

import React, { cloneElement, isValidElement, PureComponent } from 'react';
import Grid from '../grid';
import { intersperseSpace, classnames } from '../../core/commonTools';
import { FormContext } from './context';
import { withConfigConsumer } from '../providerConfig/context';
import { IconAsterisk } from 'dls-icons-react';
var Row = Grid.Row,
    Col = Grid.Col;
export var FIELD_META_PROP = 'data-__meta';
export var FIELD_DATA_PROP = 'data-__field';
var FormItem = (_dec = withConfigConsumer('form'), _dec(_class = (_temp = _class2 = /*#__PURE__*/function (_PureComponent) {
  _inheritsLoose(FormItem, _PureComponent);

  function FormItem() {
    var _this;

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _PureComponent.call.apply(_PureComponent, [this].concat(args)) || this;
    _this.helpShow = false;

    _this.getHelpMessage = function () {
      var help = _this.props.help;

      if (help === undefined && _this.getOnlyControl()) {
        var errors = _this.getField().errors;

        if (errors) {
          return intersperseSpace(errors.map(function (e, index) {
            var node = null;

            if ( /*#__PURE__*/isValidElement(e)) {
              node = e;
            } else if ( /*#__PURE__*/isValidElement(e.message)) {
              node = e.message;
            }

            return node ? /*#__PURE__*/cloneElement(node, {
              key: index
            }) : e.message;
          }));
        }

        return '';
      }

      return help;
    };

    _this.getControls = function (children, recursively) {
      var controls = [];
      var childrenArray = React.Children.toArray(children);

      for (var i = 0; i < childrenArray.length; i++) {
        if (!recursively && controls.length > 0) {
          break;
        }

        var child = childrenArray[i];

        if (! /*#__PURE__*/isValidElement(child) || /*#__PURE__*/isValidElement(child) && child.type === FormItem) {
          continue;
        }

        if (FIELD_META_PROP in child.props) {
          controls.push(child);
        } else if (child.props.children) {
          controls = controls.concat(_this.getControls(child.props.children, recursively));
        }
      }

      return controls;
    };

    _this.getOnlyControl = function () {
      var child = _this.getControls(_this.props.children, false)[0];

      return child !== undefined ? child : null;
    };

    _this.getChildProp = function (prop) {
      var child = _this.getOnlyControl();

      if ( /*#__PURE__*/isValidElement(child)) {
        return child.props[prop];
      }

      return null;
    };

    _this.getId = function () {
      return _this.getChildProp('id');
    };

    _this.getMeta = function () {
      return _this.getChildProp(FIELD_META_PROP);
    };

    _this.getField = function () {
      return _this.getChildProp(FIELD_DATA_PROP);
    };

    _this.isRequired = function () {
      var required = _this.props.required;

      if (required !== undefined) {
        return required;
      }

      if (_this.getOnlyControl()) {
        var meta = _this.getMeta() || {};
        var validate = meta.validate || [];
        return validate.filter(function (item) {
          return !!item.rules;
        }).some(function (item) {
          return item.rules.some(function (rule) {
            return rule.required;
          });
        });
      }

      return false;
    };

    return _this;
  }

  var _proto = FormItem.prototype;

  _proto.renderHelp = function renderHelp() {
    var help = this.getHelpMessage();

    if (help) {
      return /*#__PURE__*/React.createElement("div", {
        className: this.props.prefixCls + "-explain",
        key: "help"
      }, help);
    }

    return null;
  };

  _proto.renderExtra = function renderExtra() {
    var _this$props = this.props,
        prefixCls = _this$props.prefixCls,
        extra = _this$props.extra;
    return extra ? /*#__PURE__*/React.createElement("div", {
      className: prefixCls + "-extra"
    }, extra) : null;
  };

  _proto.getValidateStatus = function getValidateStatus() {
    var onlyControl = this.getOnlyControl();

    if (!onlyControl) {
      return '';
    }

    var field = this.getField();

    if (field.validating) {
      return 'validating';
    }

    if (field.errors) {
      return 'error';
    }

    var fieldValue = 'value' in field ? field.value : this.getMeta().initialValue;

    if (fieldValue !== undefined && fieldValue !== null && fieldValue !== '') {
      return 'success';
    }

    return '';
  };

  _proto.renderControl = function renderControl() {
    var _this$props2 = this.props,
        prefixCls = _this$props2.prefixCls,
        children = _this$props2.children,
        wrapperCol = _this$props2.wrapperCol,
        extralPlacemenet = _this$props2.extralPlacemenet,
        validateStatusProp = _this$props2.validateStatus;
    var _this$context = this.context,
        contextWrapperCol = _this$context.wrapperCol,
        vertical = _this$context.vertical;
    var mergedWrapperCol = ('wrapperCol' in this.props ? wrapperCol : contextWrapperCol) || {};
    var className = classnames(prefixCls + "-item-control-wrapper", mergedWrapperCol.className);
    var onlyControl = this.getOnlyControl;
    var validateStatus = validateStatusProp === undefined && onlyControl ? this.getValidateStatus() : validateStatusProp;
    var classes = prefixCls + "-item-control";

    if (validateStatus) {
      var _classnames;

      classes = classnames(prefixCls + "-item-control", (_classnames = {}, _classnames[prefixCls + "-has-success"] = validateStatus === 'success', _classnames[prefixCls + "-has-warning"] = validateStatus === 'warning', _classnames[prefixCls + "-has-error"] = validateStatus === 'error', _classnames[prefixCls + "-is-validating"] = validateStatus === 'validating', _classnames), prefixCls + "-item-explain-" + extralPlacemenet);
    } // 其他context不整体往下传


    return /*#__PURE__*/React.createElement(FormContext.Provider, {
      value: {
        vertical: vertical
      }
    }, /*#__PURE__*/React.createElement(Col, _extends({}, mergedWrapperCol, {
      className: className
    }), /*#__PURE__*/React.createElement("div", {
      className: classes
    }, /*#__PURE__*/React.createElement("span", {
      className: prefixCls + "-item-children"
    }, children), this.renderHelp(), this.renderExtra())));
  };

  _proto.renderLabel = function renderLabel() {
    var _classnames2;

    var _this$props3 = this.props,
        prefixCls = _this$props3.prefixCls,
        label = _this$props3.label,
        labelCol = _this$props3.labelCol,
        labelAlign = _this$props3.labelAlign,
        colon = _this$props3.colon,
        id = _this$props3.id,
        htmlFor = _this$props3.htmlFor;

    if (!label) {
      return null;
    }

    var _this$context2 = this.context,
        vertical = _this$context2.vertical,
        contextLabelAlign = _this$context2.labelAlign,
        contextLabelCol = _this$context2.labelCol,
        contextColon = _this$context2.colon;
    var required = this.isRequired();
    var mergedLabelCol = ('labelCol' in this.props ? labelCol : contextLabelCol) || {};
    var mergedLabelAlign = 'labelAlign' in this.props ? labelAlign : contextLabelAlign;
    var labelClsBasic = prefixCls + "-item-label";
    var labelColClassName = classnames(labelClsBasic, mergedLabelAlign === 'left' && labelClsBasic + "-left", mergedLabelCol.className);
    var labelChildren = label; // Keep label is original where there should have no colon

    var computedColon = colon === true || contextColon !== false && colon !== false;
    var haveColon = computedColon && !vertical; // Remove duplicated user input colon

    if (haveColon && typeof label === 'string' && label.trim() !== '') {
      labelChildren = label.replace(/[：|:]\s*$/, '');
    }

    var labelClassName = classnames((_classnames2 = {}, _classnames2[prefixCls + "-item-required"] = required, _classnames2[prefixCls + "-item-no-colon"] = !computedColon, _classnames2));
    return /*#__PURE__*/React.createElement(Col, _extends({}, mergedLabelCol, {
      className: labelColClassName
    }), /*#__PURE__*/React.createElement("label", {
      htmlFor: htmlFor || id || this.getId(),
      className: labelClassName,
      title: typeof label === 'string' ? label : ''
    }, required && /*#__PURE__*/React.createElement(IconAsterisk, {
      className: prefixCls + "-field-icon-required"
    }), labelChildren));
  };

  _proto.render = function render() {
    var _classnames3;

    var _this$props4 = this.props,
        prefixCls = _this$props4.prefixCls,
        style = _this$props4.style,
        className = _this$props4.className;
    return /*#__PURE__*/React.createElement(Row, {
      className: classnames((_classnames3 = {}, _classnames3[prefixCls + "-item"] = true, _classnames3[prefixCls + "-item-with-help"] = this.helpShow, _classnames3["" + className] = !!className, _classnames3)),
      style: style
    }, this.renderLabel(), this.renderControl());
  };

  return FormItem;
}(PureComponent), _class2.defaultProps = {
  prefixCls: 'one-form',
  className: '',
  style: {},
  extralPlacemenet: 'left'
}, _class2.contextType = FormContext, _temp)) || _class);
export default FormItem;