import _extends from "@babel/runtime/helpers/extends";
import _inheritsLoose from "@babel/runtime/helpers/inheritsLoose";
import _noop from "lodash/noop";
import _partial from "lodash/partial";

var _dec, _class, _class2, _temp;

import React, { PureComponent, isValidElement, cloneElement } from 'react';
import warning from 'warning';
import { IconChevronRight, IconChevronLeft } from 'dls-icons-react';
import { classnames } from '../../core/commonTools';
import { withConfigConsumer } from '../providerConfig/context';
var AlertPage = (_dec = withConfigConsumer('alert-page'), _dec(_class = (_temp = _class2 = /*#__PURE__*/function (_PureComponent) {
  _inheritsLoose(AlertPage, _PureComponent);

  function AlertPage(_props) {
    var _this;

    _this = _PureComponent.call(this, _props) || this;
    _this.alertPageRef = void 0;

    _this.onClose = function (closeFunc, index, e) {
      // 全局的
      _this.props.onClose(index); // 每一个alert自身的onClose


      if (typeof closeFunc === 'function') {
        closeFunc(e);
      }

      if (!('dataSource' in _this.props)) {
        // 移除
        var dataSource = _this.state.dataSource;
        dataSource.splice(index, 1);

        _this.setState({
          dataSource: [].concat(dataSource)
        });
      }

      var activeIndex = _this.state.activeIndex;

      if (activeIndex > 0) {
        activeIndex = activeIndex - 1;
      }

      if (!_this.isActiveIndexControlled()) {
        _this.setState({
          activeIndex: activeIndex
        });
      }

      _this.props.onPrevChange(activeIndex);
    };

    _this.getItems = function () {
      var dataSource = [].concat(_this.state.dataSource);
      var children = dataSource.map(function (child, index) {
        if (! /*#__PURE__*/isValidElement(child)) {
          return null;
        }

        var prefixCls = _this.props.prefixCls;
        var key = child.key || String(index);

        var props = _extends({
          key: key
        }, child.props, {
          onClose: _partial(_this.onClose, child.props.onClose, index),
          visible: true
        });

        return /*#__PURE__*/React.createElement("span", {
          className: prefixCls + "-slick-item",
          key: key
        }, /*#__PURE__*/cloneElement(child, props));
      });
      return children;
    };

    _this.saveRef = function (ref) {
      _this.alertPageRef = ref;
    };

    _this.prevChange = function () {
      var current = _this.state.activeIndex;

      if (current === 0) {
        return;
      }

      var prevSlide = current - 1;

      if (!_this.isActiveIndexControlled()) {
        _this.setState({
          activeIndex: prevSlide
        });
      }

      _this.props.onPrevChange(prevSlide);
    };

    _this.nextChange = function (childrenLength) {
      var current = _this.state.activeIndex;

      if (current === childrenLength - 1) {
        return;
      }

      var nextSlide = current + 1;

      if (!_this.isActiveIndexControlled()) {
        _this.setState({
          activeIndex: nextSlide
        });
      }

      _this.props.onNextChange(nextSlide);
    };

    var _dataSource = _props.dataSource,
        defaultDataSource = _props.defaultDataSource,
        slider = _props.slider,
        _activeIndex = _props.activeIndex,
        initialSlide = _props.initialSlide,
        defaultActiveIndex = _props.defaultActiveIndex;

    if ('initialSlide' in _props) {
      warning(false, 'The `initialSlide` prop of `Alert.Page` is deprecated, use `defaultActiveIndex` instead');
    }

    if ('slider' in _props) {
      warning(false, 'The `slider` prop of `Alert.Page` is deprecated, use `activeIndex` instead');
    }

    _this.state = {
      dataSource: _dataSource || defaultDataSource || [],
      activeIndex: defaultActiveIndex || initialSlide || 0
    };
    return _this;
  }

  AlertPage.getDerivedStateFromProps = function getDerivedStateFromProps(nextProps, prevState) {
    var newState = {};

    if ('dataSource' in nextProps) {
      newState.dataSource = [].concat(nextProps.dataSource);
    }

    if ('slider' in nextProps && nextProps.slider !== prevState.activeIndex) {
      newState.activeIndex = nextProps.slider;
    }

    if ('activeIndex' in nextProps && nextProps.activeIndex !== prevState.activeIndex) {
      newState.activeIndex = nextProps.activeIndex;
    }

    return newState;
  };

  var _proto = AlertPage.prototype;

  _proto.isActiveIndexControlled = function isActiveIndexControlled() {
    return 'slider' in this.props || 'activeIndex' in this.props;
  };

  _proto.render = function render() {
    var _classnames;

    var _this$props = this.props,
        prefixCls = _this$props.prefixCls,
        className = _this$props.className,
        style = _this$props.style,
        size = _this$props.size;
    var _this$state = this.state,
        dataSource = _this$state.dataSource,
        activeIndex = _this$state.activeIndex;

    if (!dataSource.length) {
      return null;
    }

    var children = this.getItems();
    var single = dataSource.length === 1;
    var alertClassNames = classnames(prefixCls, className, prefixCls + "-" + size, (_classnames = {}, _classnames[prefixCls + "-first-page"] = activeIndex === 0, _classnames[prefixCls + "-last-page"] = activeIndex === children.length - 1, _classnames[prefixCls + "-single"] = single, _classnames));

    if (!children[activeIndex]) {
      return null;
    }

    return /*#__PURE__*/React.createElement("div", {
      ref: this.saveRef,
      className: alertClassNames,
      style: style
    }, children[activeIndex], !single && /*#__PURE__*/React.createElement("div", {
      className: prefixCls + "-count"
    }, /*#__PURE__*/React.createElement(IconChevronLeft, {
      className: prefixCls + "-count-prev",
      onClick: this.prevChange
    }), /*#__PURE__*/React.createElement("span", null, activeIndex + 1, "/", children.length), /*#__PURE__*/React.createElement(IconChevronRight, {
      className: prefixCls + "-count-next",
      onClick: _partial(this.nextChange, children.length)
    })));
  };

  return AlertPage;
}(PureComponent), _class2.defaultProps = {
  prefixCls: 'one-alert-page',
  defaultActiveIndex: 0,
  size: 'medium',
  onClose: _noop,
  onPrevChange: _noop,
  onNextChange: _noop
}, _temp)) || _class);
export default AlertPage;