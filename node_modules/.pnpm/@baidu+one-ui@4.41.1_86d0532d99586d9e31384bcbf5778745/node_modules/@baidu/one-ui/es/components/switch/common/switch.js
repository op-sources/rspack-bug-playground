import _extends from "@babel/runtime/helpers/extends";
import _objectWithoutPropertiesLoose from "@babel/runtime/helpers/objectWithoutPropertiesLoose";
import _inheritsLoose from "@babel/runtime/helpers/inheritsLoose";
import React, { PureComponent } from 'react';
import IconLoading from '../../loading';
import { classnames } from '../../../core/commonTools';
;

var InnerSwitch = /*#__PURE__*/function (_PureComponent) {
  _inheritsLoose(InnerSwitch, _PureComponent);

  function InnerSwitch(props) {
    var _this;

    _this = _PureComponent.call(this, props) || this;
    _this.switchRef = void 0;

    _this.onHandleClick = function (e) {
      var checked = _this.state.checked;
      var onClick = _this.props.onClick;
      var newChecked = !checked;

      _this.setChecked(newChecked, e);

      if (onClick) {
        onClick(newChecked, e);
      }
    };

    _this.onHandleKeyDown = function (e) {
      if (e.keyCode === 37) {
        // Left
        _this.setChecked(false, e);
      } else if (e.keyCode === 39) {
        // Right
        _this.setChecked(true, e);
      }
    };

    _this.saveRef = function (ref) {
      _this.switchRef = ref;
    };

    var _checked = false;

    if ('checked' in props) {
      _checked = !!props.checked;
    } else {
      _checked = !!props.defaultChecked;
    }

    _this.state = {
      checked: _checked
    };
    return _this;
  }

  var _proto = InnerSwitch.prototype;

  _proto.setChecked = function setChecked(checked, e) {
    var _this$props = this.props,
        disabled = _this$props.disabled,
        onChange = _this$props.onChange,
        loading = _this$props.loading;

    if (disabled || loading) {
      return;
    }

    if (!('checked' in this.props)) {
      this.setState({
        checked: checked
      });
    }

    if (onChange) {
      onChange(checked, e);
    }
  };

  _proto.focus = function focus() {
    if (this.switchRef) {
      this.switchRef.focus();
    }
  };

  _proto.blur = function blur() {
    if (this.switchRef) {
      this.switchRef.blur();
    }
  };

  _proto.render = function render() {
    var _classnames;

    var _this$props2 = this.props,
        className = _this$props2.className,
        prefixCls = _this$props2.prefixCls,
        disabled = _this$props2.disabled,
        loadingIcon = _this$props2.loadingIcon,
        loading = _this$props2.loading,
        onChange = _this$props2.onChange,
        lightPrefix = _this$props2.lightPrefix,
        restProps = _objectWithoutPropertiesLoose(_this$props2, ["className", "prefixCls", "disabled", "loadingIcon", "loading", "onChange", "lightPrefix"]);

    var checked = this.state.checked;
    var switchClassName = classnames(prefixCls, (_classnames = {}, _classnames[prefixCls + "-checked"] = checked, _classnames[prefixCls + "-disabled"] = disabled || loading, _classnames), className);
    return /*#__PURE__*/React.createElement("button", _extends({}, restProps, {
      type: "button",
      role: "switch",
      "aria-checked": checked,
      disabled: disabled,
      className: switchClassName,
      onKeyDown: this.onHandleKeyDown,
      onClick: this.onHandleClick,
      ref: this.saveRef
    }), /*#__PURE__*/React.createElement("span", {
      className: prefixCls + "-thumb"
    }, loading ? loadingIcon || /*#__PURE__*/React.createElement("span", {
      className: prefixCls + "-loading-icon"
    }, /*#__PURE__*/React.createElement(IconLoading, null)) : null));
  };

  return InnerSwitch;
}(PureComponent);

InnerSwitch.defaultProps = {
  className: '',
  defaultChecked: false
};

InnerSwitch.getDerivedStateFromProps = function (nextProps) {
  var newState = {};

  if ('checked' in nextProps) {
    newState.checked = !!nextProps.checked;
  }

  return newState;
};

export default InnerSwitch;