import _extends from "@babel/runtime/helpers/extends";
import _inheritsLoose from "@babel/runtime/helpers/inheritsLoose";

/**
 * @file transfer candidate pane
 * @author huangshiming
 * @date 2020-05-16
 */
import React, { PureComponent } from 'react';
import Tree from '../../tree/tree';
import VirtualTreeNode from '../../tree/common/virtualTreeNode';
import TreeNode from '../../tree/common/treeNode';
import CandidateItemRender from './itemRender';
import Tooltip from '../../tooltip';
import Loading from '../../loading';
import Message from '../../message';
import Stack from '../../stack';
;

var CandidatePane = /*#__PURE__*/function (_PureComponent) {
  _inheritsLoose(CandidatePane, _PureComponent);

  function CandidatePane() {
    var _this;

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _PureComponent.call.apply(_PureComponent, [this].concat(args)) || this;

    _this.getLevelText = function (text, id, parentRelationMap, allDataMap) {
      if (parentRelationMap[id] == null) {
        return text;
      }

      text.unshift(allDataMap[parentRelationMap[id]].title);
      return _this.getLevelText(text, parentRelationMap[id], parentRelationMap, allDataMap);
    };

    _this.loadData = function (node, key, type) {
      var _this$props = _this.props,
          allDataMap = _this$props.allDataMap,
          loadData = _this$props.loadData;
      var parent = allDataMap[key];
      var trigger = type === 'select' ? 'check' : type;
      return loadData({
        parent: parent,
        scope: trigger === 'expand' ? 'children' : 'descendants',
        trigger: trigger
      });
    };

    return _this;
  }

  var _proto = CandidatePane.prototype;

  _proto.renderNode = function renderNode(key) {
    var _this$props2 = this.props,
        prefixCls = _this$props2.prefixCls,
        allDataMap = _this$props2.allDataMap,
        maxSelectedNum = _this$props2.maxSelectedNum,
        selectedList = _this$props2.selectedList,
        hasSearch = _this$props2.hasSearch,
        searchValue = _this$props2.searchValue,
        candidateItemProps = _this$props2.candidateItemProps,
        CandidateItem = _this$props2.CandidateItem,
        isShowLevel = _this$props2.isShowLevel,
        parentRelationMap = _this$props2.parentRelationMap,
        virtualListHeight = _this$props2.virtualListHeight;
    var CustomTreeNode = virtualListHeight ? VirtualTreeNode : TreeNode;
    var candidateItem = allDataMap[key] || {};
    var treeNodeKey = candidateItem.key,
        isLeaf = candidateItem.isLeaf,
        disabled = candidateItem.disabled,
        loading = candidateItem.loading,
        children = candidateItem.children;
    var isOverMaxNum = false;

    if (maxSelectedNum && selectedList.length >= maxSelectedNum) {
      isOverMaxNum = true;
    }

    var candidateProps = _extends({}, candidateItem, {
      hasSearch: hasSearch,
      searchValue: searchValue,
      prefixCls: prefixCls,
      itemKey: treeNodeKey
    }, candidateItemProps, {
      CandidateItem: CandidateItem
    });

    var renderItem;
    var relationText = '';

    if (isShowLevel) {
      var textArray = this.getLevelText([], key, parentRelationMap, allDataMap);
      relationText = textArray.length > 0 ? "(" + textArray.join('>') + ")" : '';
    }

    candidateProps.relationText = relationText;

    if (CandidateItem && typeof CandidateItem === 'function') {
      var CustomCandidateItemRender = CandidateItem;
      renderItem = /*#__PURE__*/React.createElement(CustomCandidateItemRender, candidateProps);
    } else if (CandidateItem && typeof CandidateItem === 'object') {
      renderItem = CandidateItem;
    } else {
      renderItem = /*#__PURE__*/React.createElement(CandidateItemRender, candidateProps);
    }

    var treeNodeProps = {
      disabled: isOverMaxNum || disabled,
      disableCheckbox: isOverMaxNum || disabled,
      checkable: true,
      isLeaf: isLeaf,
      loading: loading,
      title: isOverMaxNum ? /*#__PURE__*/React.createElement(Tooltip, {
        title: "\u6570\u91CF\u5DF2\u8FBE\u4E0A\u9650\uFF0C\u8BF7\u5220\u9664\u540E\u6DFB\u52A0",
        placement: "rightBottom",
        mouseEnterDelay: 0,
        mouseLeaveDelay: 0
      }, renderItem) : renderItem
    };

    if (children) {
      return /*#__PURE__*/React.createElement(CustomTreeNode, _extends({}, treeNodeProps, {
        key: treeNodeKey
      }), this.candidateNodeTrees(children));
    }

    return /*#__PURE__*/React.createElement(CustomTreeNode, _extends({}, treeNodeProps, {
      key: treeNodeKey
    }));
  };

  _proto.candidateNodeTrees = function candidateNodeTrees(candidateList) {
    var _this2 = this;

    return candidateList.map(function (key) {
      return _this2.renderNode(key);
    });
  };

  _proto.render = function render() {
    var _this$props3 = this.props,
        prefixCls = _this$props3.prefixCls,
        selectedList = _this$props3.selectedList,
        candidateList = _this$props3.candidateList,
        expandedCandidateKeys = _this$props3.expandedCandidateKeys,
        size = _this$props3.size,
        onCheck = _this$props3.onCheck,
        onSelect = _this$props3.onSelect,
        onExpand = _this$props3.onExpand,
        candidateTreeRef = _this$props3.candidateTreeRef,
        virtualListHeight = _this$props3.virtualListHeight,
        loading = _this$props3.loading,
        loadingText = _this$props3.loadingText,
        onCandidateScroll = _this$props3.onCandidateScroll,
        loadData = _this$props3.loadData,
        candidateEmpty = _this$props3.candidateEmpty;
    var treeProps = {
      expandedKeys: expandedCandidateKeys,
      selectedKeys: [],
      checkedKeys: [].concat(selectedList),
      checkable: true,
      selectable: true,
      size: size,
      className: prefixCls + "-candidate-tree",
      onCheck: onCheck,
      onSelect: onSelect,
      onExpand: onExpand,
      checkActionEqualSelet: true,
      parentContainerHeight: virtualListHeight || null,
      onScroll: onCandidateScroll
    };

    if (loadData) {
      treeProps.loadData = this.loadData;
    }

    var content = candidateList.length ? /*#__PURE__*/React.createElement(Tree, _extends({}, treeProps, {
      ref: candidateTreeRef,
      key: "candidate-tree"
    }), this.candidateNodeTrees(candidateList)) : /*#__PURE__*/React.createElement(Stack, {
      justify: "center",
      className: prefixCls + "-empty"
    }, /*#__PURE__*/React.createElement(Message, {
      type: "aux",
      display: "simple",
      size: size
    }, candidateEmpty));
    return /*#__PURE__*/React.createElement(Loading, {
      tip: loadingText,
      size: size,
      loading: loading
    }, content);
  };

  return CandidatePane;
}(PureComponent);

export default CandidatePane;