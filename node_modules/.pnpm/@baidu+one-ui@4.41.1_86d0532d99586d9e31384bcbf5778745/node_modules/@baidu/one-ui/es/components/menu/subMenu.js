import _extends from "@babel/runtime/helpers/extends";
import _inheritsLoose from "@babel/runtime/helpers/inheritsLoose";
import React, { PureComponent } from 'react';
import InnerSubMenu from './common/subMenu';
import { classnames } from '../../core/commonTools';
import omit from 'omit.js';
var sizeArray = ['xsmall', 'small', 'medium', 'large', 'xlarge'];

var SubMenu = /*#__PURE__*/function (_PureComponent) {
  _inheritsLoose(SubMenu, _PureComponent);

  function SubMenu() {
    return _PureComponent.apply(this, arguments) || this;
  }

  var _proto = SubMenu.prototype;

  _proto.render = function render() {
    var _classnames, _classnames2;

    var _this$props = this.props,
        placements = _this$props.placements,
        mode = _this$props.mode,
        prefixCls = _this$props.prefixCls,
        size = _this$props.size,
        popupClassName = _this$props.popupClassName,
        icon = _this$props.icon,
        title = _this$props.title,
        className = _this$props.className,
        type = _this$props.type;
    var alreadyHasSizeClassName = false;
    sizeArray.forEach(function (string) {
      if (popupClassName.indexOf(prefixCls + "-submenu-" + string) > -1) {
        alreadyHasSizeClassName = true;
        return false;
      }
    });
    var newTitleNode = [/*#__PURE__*/React.createElement("span", {
      key: "title-node"
    }, title)];
    var hasIcon = icon && /*#__PURE__*/React.isValidElement(icon);

    if (hasIcon) {
      newTitleNode.unshift( /*#__PURE__*/React.createElement("span", {
        key: "custom-icon",
        className: prefixCls + "-submenu-custom-icon anchor"
      }, icon));
    }

    var props = _extends({}, omit(this.props, ['placements', 'icon']), {
      builtinPlacements: placements,
      popupClassName: classnames(popupClassName, (_classnames = {}, _classnames[prefixCls + "-submenu-" + size] = !!prefixCls && !alreadyHasSizeClassName, _classnames[prefixCls + "-type-basic"] = type === 'basic', _classnames)),
      className: classnames(className, (_classnames2 = {}, _classnames2[prefixCls + "-submenu-has-icon"] = mode === 'inline' && hasIcon, _classnames2)),
      title: newTitleNode
    });

    return /*#__PURE__*/React.createElement(InnerSubMenu, props);
  };

  return SubMenu;
}(PureComponent);

SubMenu.defaultProps = {
  placements: {},
  popupClassName: '',
  size: 'medium',
  type: 'strong',
  prefixCls: 'one-menu'
};
SubMenu.isSubMenu = true;
export default SubMenu;