import { PureComponent } from 'react';
import moment, { Moment } from 'moment';
import { TimePickerProps } from './interface';
export declare const getFormat: (props: any) => any;
export declare const momentValue: (value: any, props: any) => moment.Moment;
interface TimePickerState {
    value?: Moment;
    open?: boolean;
    dropdownWidth?: number;
}
declare class TimePicker extends PureComponent<TimePickerProps, TimePickerState> {
    static defaultProps: {
        prefixCls: string;
        inputReadOnly: boolean;
        popupClassName: string;
        popupStyle: {};
        align: {
            ignoreShake: boolean;
        };
        defaultOpenValue: moment.Moment;
        format: string;
        allowEmpty: boolean;
        showHour: boolean;
        showMinute: boolean;
        showSecond: boolean;
        disabledHours: any;
        disabledMinutes: any;
        disabledSeconds: any;
        hideDisabledOptions: boolean;
        transitionName: string;
        placement: string;
        onChange: any;
        onAmPmChange: any;
        onOpen: any;
        onClose: any;
        onFocus: any;
        onBlur: any;
        onKeyDown: any;
        use12Hours: boolean;
        errorMessage: string;
        errorLocation: string;
        size: string;
        width: number;
    };
    constructor(props: any);
    timePickerTargetRef: any;
    panelInstance: any;
    componentDidMount(): void;
    componentDidUpdate(): void;
    static getDerivedStateFromProps(nextProps: any): TimePickerState;
    setDropdownWidth: () => void;
    saveRef: (ref: any) => void;
    onPanelChange: (value: any) => void;
    onAmPmChange: (ampm: any) => void;
    onClear: (event: any) => void;
    onVisibleChange: (open: any) => void;
    onEsc: () => void;
    onKeyDown: (e: any) => void;
    onFocus: () => void;
    onBlur: () => void;
    getPlaceHolder: () => string;
    setValue: (value: any) => void;
    setOpen: (open: any) => void;
    getPopupClassName: () => string;
    getOptions: () => {
        hourOptions: any;
        minuteOptions: any;
        secondOptions: any;
    };
    getPanelElement: () => JSX.Element;
    disabledHours: () => number[];
    isAM(): boolean;
    render(): JSX.Element;
}
export default TimePicker;
