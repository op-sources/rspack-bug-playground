import _extends from "@babel/runtime/helpers/extends";
import _objectWithoutPropertiesLoose from "@babel/runtime/helpers/objectWithoutPropertiesLoose";
import React from 'react';
import TreeNode from './treeNode';
import toArray from '../../../core/childrenTools';

var internalProcessProps = function internalProcessProps(props) {
  return props;
};

export function convertDataToTree(treeData, processer) {
  if (!treeData) {
    return [];
  }

  var _ref = processer || {},
      _ref$processProps = _ref.processProps,
      processProps = _ref$processProps === void 0 ? internalProcessProps : _ref$processProps;

  var list = Array.isArray(treeData) ? treeData : [treeData];
  return list.map(function (_ref2, index) {
    var children = _ref2.children,
        props = _objectWithoutPropertiesLoose(_ref2, ["children"]);

    var childrenNodes = convertDataToTree(children, processer);
    return /*#__PURE__*/React.createElement(TreeNode, _extends({
      key: index
    }, processProps(props)), childrenNodes);
  });
}
export function getPosition(level, index) {
  return level + "-" + index;
}
export function getKey(key, pos) {
  if (key !== null && key !== undefined) {
    return key;
  }

  return pos;
}
export function flattenTreeData(treeNodeList, expandedKeys) {
  var expandedKeySet = new Set(expandedKeys === true ? [] : expandedKeys);
  var flattenList = [];

  function dig(list, parent) {
    return list.map(function (treeNode, index) {
      var pos = getPosition(parent ? parent.pos : '0', index);
      var mergedKey = getKey(treeNode.key, pos); // Add FlattenDataNode into list

      var flattenNode = _extends({}, treeNode, {
        parent: parent,
        pos: pos,
        children: null,
        data: treeNode,
        level: parent ? parent.level + 1 : 0
      });

      var disabledCheckbox = treeNode.props && treeNode.props.disableCheckbox;
      var disabled = treeNode.props && treeNode.props.disabled;

      if (parent && parent.props && parent.props.disableCheckbox) {
        flattenNode.props = _extends({}, flattenNode.props, {
          disableCheckbox: disabledCheckbox || parent.props.disableCheckbox
        });
      }

      if (parent && parent.props && parent.props.disabled) {
        flattenNode.props = _extends({}, flattenNode.props, {
          disabled: disabled || parent.props.disabled
        });
      }

      flattenList.push(flattenNode); // Loop treeNode children

      if (expandedKeys === true || expandedKeySet.has(mergedKey)) {
        var children = toArray(treeNode.props.children) || [];
        flattenNode.children = children.length > 0 ? dig(children, flattenNode) : children;
      } else {
        flattenNode.children = [];
      }

      return flattenNode;
    });
  }

  dig(treeNodeList);
  return flattenList;
}