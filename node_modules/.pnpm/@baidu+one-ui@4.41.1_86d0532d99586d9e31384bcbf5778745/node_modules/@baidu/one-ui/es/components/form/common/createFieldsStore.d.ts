import { FormField, FormFieldOption } from '../interface';
declare type Fields = Record<string, FormField>;
export declare class FieldsStore {
    fields: Fields;
    fieldsMeta: Record<string, FormFieldOption>;
    constructor(fields: any);
    updateFields(fields: any): void;
    flattenRegisteredFields(fields: any): any;
    setFieldsInitialValue: (initialValues: any) => void;
    setFields(fields: Fields): void;
    resetFields(ns: any): {};
    setFieldMeta(name: string, meta: FormFieldOption): void;
    setFieldsAsDirty(): void;
    getFieldMeta(name: string): FormFieldOption;
    getValueFromFields(name: string, fields: Fields): any;
    getAllValues: () => {};
    getValidFieldsName(): string[];
    getAllFieldsName(): string[];
    getValidFieldsFullName(maybePartialName: any): string[];
    getFieldValuePropValue(fieldMeta: any): any;
    getField(name: string): FormField;
    getNotCollectedFields(): {};
    getNestedAllFields(): {};
    getFieldMember(name: any, member: any): any;
    getNestedFields(names: any, getter: any): any;
    getNestedField(name: any, getter: any): any;
    getFieldsValue: (names: any) => any;
    getFieldValue: (name: any) => any;
    getFieldMessage: (name: any, type: any) => any;
    getFieldsError: (names: any) => any;
    getFieldError: (name: any) => any;
    getFieldsWarning: (names: any) => any;
    getFieldWarning: (name: any) => any;
    getFieldsSuccess: (names: any) => any;
    getFieldSuccess: (name: any) => any;
    isFieldValidating: (name: any) => any;
    isFieldsValidating: (ns: any) => any;
    isFieldTouched: (name: any) => any;
    isFieldsTouched: (ns: any) => any;
    isValidNestedFieldName(name: any): boolean;
    clearField(name: any): void;
}
export default function createFieldsStore(fields: any): FieldsStore;
export {};
