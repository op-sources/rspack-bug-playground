import _extends from "@babel/runtime/helpers/extends";
import _objectWithoutPropertiesLoose from "@babel/runtime/helpers/objectWithoutPropertiesLoose";
import _inheritsLoose from "@babel/runtime/helpers/inheritsLoose";

var _dec, _class, _class2, _temp;

/**
 * 文字链
 * @author huangshiming
 * @email huangshiming@baidu.com
 */
import React, { PureComponent } from 'react';
import { classnames } from '../../core/commonTools';
import { withConfigConsumer } from '../providerConfig/context';
var Link = (_dec = withConfigConsumer('text-link'), _dec(_class = (_temp = _class2 = /*#__PURE__*/function (_PureComponent) {
  _inheritsLoose(Link, _PureComponent);

  function Link() {
    var _this;

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _PureComponent.call.apply(_PureComponent, [this].concat(args)) || this;

    _this.onClick = function () {
      var _this$props = _this.props,
          toUrl = _this$props.toUrl,
          target = _this$props.target,
          disabled = _this$props.disabled;

      if (disabled) {
        return;
      }

      window.open(toUrl, target);
    };

    return _this;
  }

  var _proto = Link.prototype;

  _proto.render = function render() {
    var _classnames;

    var _this$props2 = this.props,
        type = _this$props2.type,
        className = _this$props2.className,
        prefixCls = _this$props2.prefixCls,
        children = _this$props2.children,
        disabled = _this$props2.disabled,
        size = _this$props2.size,
        isAtag = _this$props2.isAtag,
        target = _this$props2.target,
        toUrl = _this$props2.toUrl,
        lightPrefix = _this$props2.lightPrefix,
        rest = _objectWithoutPropertiesLoose(_this$props2, ["type", "className", "prefixCls", "children", "disabled", "size", "isAtag", "target", "toUrl", "lightPrefix"]);

    var linkClassName = classnames(prefixCls, className, prefixCls + "-" + size, (_classnames = {}, _classnames[prefixCls + "-" + type] = type, _classnames[prefixCls + "-disabled"] = disabled, _classnames[prefixCls + "-is-a-tag"] = isAtag, _classnames));

    if (isAtag) {
      return disabled ? /*#__PURE__*/React.createElement("a", _extends({}, rest, {
        className: linkClassName
      }), children) : /*#__PURE__*/React.createElement("a", _extends({}, rest, {
        className: linkClassName,
        target: target,
        href: toUrl
      }), children);
    }

    return /*#__PURE__*/React.createElement("span", _extends({}, rest, {
      className: linkClassName,
      onClick: this.onClick
    }), children);
  };

  return Link;
}(PureComponent), _class2.defaultProps = {
  type: 'normal',
  target: '_self',
  size: 'medium',
  prefixCls: 'one-text-link',
  disabled: false,
  isAtag: false
}, _class2.NavLink = void 0, _temp)) || _class);
export default Link;