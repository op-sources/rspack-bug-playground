import _inheritsLoose from "@babel/runtime/helpers/inheritsLoose";
import _noop from "lodash/noop";

var _dec, _class, _class2, _temp;

import React, { PureComponent } from 'react';
import { IconArrowToTop } from 'dls-icons-react';
import Button from '../button';
import { classnames } from '../../core/commonTools';
import { withConfigConsumer } from '../providerConfig/context';
var defaultVisibilityHeight = 400;
var BackTop = (_dec = withConfigConsumer('back-top'), _dec(_class = (_temp = _class2 = /*#__PURE__*/function (_PureComponent) {
  _inheritsLoose(BackTop, _PureComponent);

  function BackTop() {
    var _this;

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _PureComponent.call.apply(_PureComponent, [this].concat(args)) || this;
    _this.state = {
      visible: false
    };
    _this.scrollEvent = void 0;

    _this.onVisibleChange = function (visible) {
      if (!('visible' in _this.props)) {
        _this.setState({
          visible: visible
        });
      }
    };

    _this.getDefaultTarget = function () {
      return window;
    };

    _this.getScroll = function (target) {
      // 获取滚动高度
      if (typeof window === 'undefined') {
        return 0;
      }

      var prop = 'pageYOffset';
      var method = 'scrollTop';
      var isWindow = target === window;
      var ret = isWindow ? target[prop] : target[method];

      if (isWindow && typeof ret !== 'number') {
        ret = document.documentElement[method];
      }

      return ret;
    };

    _this.handleScroll = function () {
      var _this$props = _this.props,
          visibilityHeight = _this$props.visibilityHeight,
          _this$props$target = _this$props.target,
          target = _this$props$target === void 0 ? _this.getDefaultTarget : _this$props$target;

      var scrollTop = _this.getScroll(target());

      var visible = scrollTop > visibilityHeight;

      _this.onVisibleChange(visible);
    };

    _this.scrollToTop = function () {
      var getTarget = _this.props.target || _this.getDefaultTarget;
      var targetNode = getTarget();

      if ('scrollTop' in targetNode) {
        targetNode.scrollTop = 0;
      } else {
        document.body.scrollTop = 0;
        document.documentElement.scrollTop = 0;
      }

      _this.props.onClick();
    };

    return _this;
  }

  var _proto = BackTop.prototype;

  _proto.componentDidMount = function componentDidMount() {
    var getTarget = this.props.target || this.getDefaultTarget;
    var target = getTarget();

    if (target && target.addEventListener && typeof target.addEventListener === 'function') {
      this.scrollEvent = target.addEventListener('scroll', this.handleScroll);
      this.handleScroll();
    }
  };

  _proto.componentWillUnmount = function componentWillUnmount() {
    if (this.scrollEvent) {
      // 初始化清除上一次监听的滚动元素
      this.scrollEvent.remove();
    }
  };

  _proto.render = function render() {
    var _classnames;

    var _this$props2 = this.props,
        prefixCls = _this$props2.prefixCls,
        className = _this$props2.className,
        target = _this$props2.target,
        style = _this$props2.style;
    var classes = classnames(prefixCls, className, (_classnames = {}, _classnames[prefixCls + "-default"] = !target, _classnames));
    return this.state.visible ? /*#__PURE__*/React.createElement(Button, {
      className: classes,
      style: style,
      onClick: this.scrollToTop,
      type: "translucent",
      size: "xsmall"
    }, /*#__PURE__*/React.createElement(IconArrowToTop, {
      className: prefixCls + "-icon"
    })) : null;
  };

  return BackTop;
}(PureComponent), _class2.defaultProps = {
  onClick: _noop,
  visibilityHeight: defaultVisibilityHeight,
  prefixCls: 'one-back-top',
  className: ''
}, _class2.getDerivedStateFromProps = function (nextProps, prevState) {
  if ('visible' in nextProps && nextProps.visible !== prevState.visible) {
    return {
      visible: nextProps.visible
    };
  }

  return null;
}, _temp)) || _class);
export default BackTop;