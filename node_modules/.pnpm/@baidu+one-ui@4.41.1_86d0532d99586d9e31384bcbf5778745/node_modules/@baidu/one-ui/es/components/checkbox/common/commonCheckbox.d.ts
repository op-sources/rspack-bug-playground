import { MouseEvent, FocusEvent, PureComponent, ChangeEvent } from 'react';
import { BaseProps } from '../../interface';
interface CheckboxProps extends BaseProps {
    type?: string;
    defaultChecked?: boolean;
    checked?: boolean;
    indeterminate?: boolean;
    disabled?: boolean;
    onFocus?(e: FocusEvent): void;
    onBlur?(e: FocusEvent): void;
    onChange?(e: {
        target: CheckboxProps;
        stopPropagation(): void;
        preventDefault(): void;
        nativeEvent: Event;
    }): void;
    onClick?(e: MouseEvent): void;
    inputOriginProps?: {};
    name?: string;
    mode?: 'basic' | 'strong';
    autoFocus?: boolean;
}
interface CheckboxState {
    checked: boolean;
}
declare class Checkbox extends PureComponent<CheckboxProps, CheckboxState> {
    static defaultProps: {
        type: string;
        defaultChecked: boolean;
        onFocus: (...args: any[]) => void;
        onBlur: (...args: any[]) => void;
        onChange: (...args: any[]) => void;
    };
    constructor(props: CheckboxProps);
    static getDerivedStateFromProps: (nextProps: CheckboxProps) => {
        checked: boolean;
    };
    input: HTMLInputElement;
    focus(): void;
    blur(): void;
    saveInput: (node: HTMLInputElement) => void;
    onHandleChange: (e: ChangeEvent<HTMLInputElement>) => void;
    render(): JSX.Element;
}
export default Checkbox;
