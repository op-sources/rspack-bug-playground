import _extends from "@babel/runtime/helpers/extends";
import _objectWithoutPropertiesLoose from "@babel/runtime/helpers/objectWithoutPropertiesLoose";
import _inheritsLoose from "@babel/runtime/helpers/inheritsLoose";

var _dec, _class, _class2, _temp;

import React, { PureComponent } from 'react';
import { withConfigConsumer } from '../providerConfig/context';
import { classnames } from '../../core/commonTools';
import Button from '../button';
import { IconChevronLeft, IconChevronRight, IconIndent, IconOutdent } from 'dls-icons-react';
import Context from './context';
var AUTO_COLLAPSE_WIDTH = 1248;
var LayoutSidebar = (_dec = withConfigConsumer('layout-sidebar'), _dec(_class = (_temp = _class2 = /*#__PURE__*/function (_PureComponent) {
  _inheritsLoose(LayoutSidebar, _PureComponent);

  function LayoutSidebar(props) {
    var _window;

    var _this;

    _this = _PureComponent.call(this, props) || this;

    _this.toggleCollapsed = function (auto) {
      var onCollapsedChange = _this.props.onCollapsedChange;
      var collapsed = !_this.state.collapsed;

      if (!('collapsed' in _this.props)) {
        _this.setState({
          collapsed: collapsed
        });
      }

      if (onCollapsedChange) {
        onCollapsedChange(collapsed, auto === true);
      }
    };

    _this.autoCollapse = function () {
      var _this$state = _this.state,
          collapsed = _this$state.collapsed,
          prevWidth = _this$state.windowWidth;
      var width = window.innerWidth;

      if (!collapsed && (prevWidth == null || prevWidth >= AUTO_COLLAPSE_WIDTH) && width < AUTO_COLLAPSE_WIDTH) {
        _this.toggleCollapsed(true);
      }

      _this.setState({
        windowWidth: width
      });
    };

    var _this$props = _this.props,
        defaultCollapsed = _this$props.defaultCollapsed,
        autoCollapse = _this$props.autoCollapse,
        _onCollapsedChange = _this$props.onCollapsedChange;
    var state = {
      collapsed: defaultCollapsed || false,
      windowWidth: null
    };
    var windowWidth = (_window = window) == null ? void 0 : _window.innerWidth;

    if (autoCollapse && windowWidth && windowWidth < AUTO_COLLAPSE_WIDTH) {
      state.collapsed = true;
      state.windowWidth = windowWidth;

      if (_onCollapsedChange) {
        _onCollapsedChange(true, true);
      }
    }

    _this.state = state;
    return _this;
  }

  LayoutSidebar.getDerivedStateFromProps = function getDerivedStateFromProps(props, state) {
    if ('collapsed' in props && props.collapsed !== state.collapsed) {
      return {
        collapsed: props.collapsed
      };
    }

    return null;
  };

  var _proto = LayoutSidebar.prototype;

  _proto.renderCollapseTrigger = function renderCollapseTrigger() {
    var _classnames;

    var _this$props2 = this.props,
        prefixCls = _this$props2.prefixCls,
        showToggle = _this$props2.showToggle,
        collapseMode = _this$props2.collapseMode;

    if (!showToggle) {
      return null;
    }

    var collapsed = this.state.collapsed;
    var hiddenMode = collapseMode === 'hidden';
    var icon = hiddenMode ? collapsed ? IconChevronRight : IconChevronLeft : collapsed ? IconIndent : IconOutdent;
    return /*#__PURE__*/React.createElement("div", {
      className: classnames(prefixCls + "-toggle", (_classnames = {}, _classnames[prefixCls + "-toggle-bottom"] = !hiddenMode, _classnames[prefixCls + "-toggle-right"] = hiddenMode, _classnames))
    }, /*#__PURE__*/React.createElement(Button, {
      type: hiddenMode ? 'translucent' : 'text',
      icon: icon,
      onClick: this.toggleCollapsed,
      className: prefixCls + "-toggle-icon"
    }));
  };

  _proto.componentDidMount = function componentDidMount() {
    var _this$context;

    (_this$context = this.context) == null ? void 0 : _this$context.registerSidebar();
    var autoCollapse = this.props.autoCollapse;

    if (autoCollapse && window) {
      window.addEventListener('resize', this.autoCollapse);

      if (this.state.windowWidth == null) {
        this.autoCollapse();
      }
    }
  };

  _proto.componentDidUpdate = function componentDidUpdate(preProps) {
    var autoCollapse = this.props.autoCollapse;

    if (preProps.autoCollapse !== autoCollapse && window) {
      autoCollapse ? window.addEventListener('resize', this.autoCollapse) : window.removeEventListener('resize', this.autoCollapse);

      if (autoCollapse) {
        this.autoCollapse();
      }
    }
  };

  _proto.componentWillUnmount = function componentWillUnmount() {
    var _this$context2;

    (_this$context2 = this.context) == null ? void 0 : _this$context2.unregisterSidebar();
    var autoCollapse = this.props.autoCollapse;

    if (autoCollapse && window) {
      window.removeEventListener('resize', this.autoCollapse);
    }
  };

  _proto.render = function render() {
    var _classnames2;

    var _this$props3 = this.props,
        className = _this$props3.className,
        prefixCls = _this$props3.prefixCls,
        children = _this$props3.children,
        showToggle = _this$props3.showToggle,
        collapseMode = _this$props3.collapseMode,
        defaultCollapsed = _this$props3.defaultCollapsed,
        collapsed = _this$props3.collapsed,
        onCollapsedChange = _this$props3.onCollapsedChange,
        width = _this$props3.width,
        style = _this$props3.style,
        sticky = _this$props3.sticky,
        autoCollapse = _this$props3.autoCollapse,
        lightPrefix = _this$props3.lightPrefix,
        restProps = _objectWithoutPropertiesLoose(_this$props3, ["className", "prefixCls", "children", "showToggle", "collapseMode", "defaultCollapsed", "collapsed", "onCollapsedChange", "width", "style", "sticky", "autoCollapse", "lightPrefix"]);

    var styleProp;

    if (style != null || width != null) {
      styleProp = _extends({
        width: width
      }, style);
    }

    var hiddenMode = collapseMode === 'hidden';
    return /*#__PURE__*/React.createElement("aside", _extends({
      className: classnames(prefixCls, className, (_classnames2 = {}, _classnames2[prefixCls + "-collapsed"] = this.state.collapsed, _classnames2[prefixCls + "-mode-hidden"] = hiddenMode, _classnames2[prefixCls + "-sticky"] = sticky, _classnames2))
    }, restProps, {
      style: styleProp
    }), /*#__PURE__*/React.createElement("div", {
      className: prefixCls + "-main"
    }, children), this.renderCollapseTrigger());
  };

  return LayoutSidebar;
}(PureComponent), _class2.defaultProps = {
  prefixCls: 'one-layout-sidebar',
  defaultCollapsed: false,
  collapseMode: 'slim',
  sticky: false,
  autoCollapse: false,
  showToggle: false
}, _class2.contextType = Context, _temp)) || _class);
export default LayoutSidebar;