import _extends from "@babel/runtime/helpers/extends";
import _assertThisInitialized from "@babel/runtime/helpers/assertThisInitialized";
import _inheritsLoose from "@babel/runtime/helpers/inheritsLoose";
import _isEmpty from "lodash/isEmpty";
import _partial from "lodash/partial";

var _dec, _class, _class2, _temp;

import React, { PureComponent } from 'react';
import { classnames, getLengthInBytes } from '../../core/commonTools';
import omit from 'omit.js';
import { IconTimesCircle } from 'dls-icons-react';
import Overlay from '../overlay';
import Menu from '../menu';
import SearchText from '../select/searchText';
import Button from '../button';
import { withConfigConsumer } from '../providerConfig/context';
import warning from 'warning';
import { COMPONENT_FOCUS, COMPONENT_MAIN } from '../config';
var MenuItem = Menu.Item;

function fixControlledValue(value) {
  if (value == null) {
    return '';
  }

  return value;
}

function isFunc(value) {
  return typeof value === 'function';
}

var SearchBox = (_dec = withConfigConsumer('search-box'), _dec(_class = (_temp = _class2 = /*#__PURE__*/function (_PureComponent) {
  _inheritsLoose(SearchBox, _PureComponent);

  function SearchBox(props) {
    var _this;

    _this = _PureComponent.call(this, props) || this;
    _this.searchIconAnchor = void 0;
    _this.composition = void 0;
    _this.search = void 0;
    _this.___stopBlur___ = void 0;
    _this.container = void 0;

    _this.onCompositionStart = function () {
      _this.composition = true;
    };

    _this.onCompositionEnd = function (e) {
      _this.composition = false;

      _this.onChange(e);
    };

    _this.onChange = function (e) {
      var value = e.target.value;

      if (_this.composition) {
        _this.setState({
          inputValue: value
        });

        return;
      }

      if (!('value' in _this.props)) {
        _this.setState({
          value: value,
          inputValue: value
        });
      } else {
        _this.setState({
          inputValue: _this.state.value
        });
      }

      var onChange = _this.props.onChange;

      if (onChange) {
        onChange(e);
      }
    };

    _this.onVisibleChange = function (visible) {
      if (!('isShowDropDown' in _this.props)) {
        _this.setState({
          visible: visible
        });
      }

      var onVisibleChange = _this.props.onVisibleChange;

      if (onVisibleChange) {
        onVisibleChange(visible);
      }
    };

    _this.onFocus = function (e) {
      if (_this.search) {
        _this.search.focus();
      }

      _this.onVisibleChange(true);

      _this.setState({
        hasFocus: true
      });

      var onFocus = _this.props.onFocus;

      if (isFunc(onFocus)) {
        onFocus(e);
      }
    };

    _this.onBlur = function (e) {
      var me = _assertThisInitialized(_this);

      setTimeout(function () {
        if (me.___stopBlur___) {
          me.___stopBlur___ = false;
          return;
        }

        me.setState({
          hasFocus: false
        });
        me.onVisibleChange(false);

        if (me.search) {
          me.search.blur();
        }
      }, 250);
      var onBlur = _this.props.onBlur;

      if (isFunc(onBlur)) {
        onBlur(e);
      }
    };

    _this.getInputClassName = function () {
      var _classnames;

      var _this$props = _this.props,
          prefixCls = _this$props.prefixCls,
          size = _this$props.size,
          disabled = _this$props.disabled,
          readOnly = _this$props.readOnly;
      return classnames(prefixCls, prefixCls + "-" + size, (_classnames = {}, _classnames[prefixCls + "-disabled"] = disabled, _classnames[prefixCls + "-readOnly"] = readOnly, _classnames));
    };

    _this.getSubMenuItem = function (option) {
      var menuItemProps = {
        key: option.value,
        ref: _partial(_this.addAnchor, 'getMenuItemRef'),
        disabled: false
      };

      if (option.disabled) {
        menuItemProps.disabled = true;
      }

      return /*#__PURE__*/React.createElement(MenuItem, menuItemProps, /*#__PURE__*/React.createElement(SearchText, {
        text: option.label,
        showSearch: true,
        searchValue: _this.state.value
      }));
    };

    _this.handleMenuClick = function (e) {
      _this.___stopBlur___ = false;

      _this.onVisibleChange(false);

      var _this$props2 = _this.props,
          handleMenuClick = _this$props2.handleMenuClick,
          options = _this$props2.options;

      if (handleMenuClick) {
        handleMenuClick(e);
      }

      if (!('value' in _this.props)) {
        var selectOption = options.filter(function (option) {
          return option.value === e.key;
        }) || [];
        var value = selectOption[0].label || e.key;

        _this.setState({
          value: value,
          inputValue: value
        });
      }
    };

    _this.handleKeyDown = function (e) {
      var _this$props3 = _this.props,
          onPressEnter = _this$props3.onPressEnter,
          onKeyDown = _this$props3.onKeyDown,
          onSearch = _this$props3.onSearch;

      if (e.keyCode === 13) {
        var search = _this.search;
        var _e = {
          target: search
        };
        _e.target.value = _this.state.value;

        if (onPressEnter) {
          onPressEnter(_e);
        } else {
          onSearch(_e);
        }

        _this.onVisibleChange(false);

        if (search) {
          search.blur();
        }

        _this.setState({
          hasFocus: false
        });
      }

      if (onKeyDown) {
        onKeyDown(e);
      }
    };

    _this.addAnchor = function (key, el) {
      _this[key] = el;
    };

    _this.handleClose = function () {
      var options = _this.props.options;
      var search = _this.search;
      _this.___stopBlur___ = true;

      if (search) {
        search.focus();
      }

      _this.setState({
        value: '',
        inputValue: '',
        hasFocus: true
      });

      if (!_isEmpty(options)) {
        _this.onVisibleChange(true);
      }

      var e = {
        target: search
      };
      e.target.value = '';
      var onClearClick = _this.props.onClearClick;

      if (isFunc(onClearClick)) {
        onClearClick(e);
      }
    };

    _this.handleSearch = function () {
      var _this$props4 = _this.props,
          disabled = _this$props4.disabled,
          defaultQuery = _this$props4.defaultQuery,
          onSearch = _this$props4.onSearch;

      var _assertThisInitialize = _assertThisInitialized(_this),
          container = _assertThisInitialize.container,
          search = _assertThisInitialize.search;

      if (disabled) {
        return;
      }

      var value = search.value;

      if (!value && defaultQuery && defaultQuery.value) {
        value = defaultQuery.value;
        _this.___stopBlur___ = true;

        _this.setState({
          value: value
        });
      }

      _this.onVisibleChange(false);

      var e = {
        target: container
      };
      e.target.value = value;

      if (isFunc(onSearch)) {
        onSearch(e);
      }
    };

    _this.renderIcon = function () {
      var _classnames2;

      var _this$props5 = _this.props,
          prefixCls = _this$props5.prefixCls,
          isShowSearchIcon = _this$props5.isShowSearchIcon,
          searchIconType = _this$props5.searchIconType,
          buttonWidth = _this$props5.buttonWidth,
          height = _this$props5.height,
          disabled = _this$props5.disabled,
          size = _this$props5.size,
          readOnly = _this$props5.readOnly,
          showCloseIcon = _this$props5.showCloseIcon,
          showSearchIcon = _this$props5.showSearchIcon,
          customRender = _this$props5.customRender;
      var shouldShowSearchIcon = isShowSearchIcon && showSearchIcon;

      if (!shouldShowSearchIcon && !showCloseIcon) {
        return null;
      }

      var _this$state = _this.state,
          value = _this$state.value,
          hasFocus = _this$state.hasFocus;
      var len = getLengthInBytes(value);
      var closeProps = {
        // type: 'IconTimesCircle',
        className: classnames((_classnames2 = {}, _classnames2[prefixCls + "-icon"] = true, _classnames2[prefixCls + "-icon-close"] = true, _classnames2[prefixCls + "-icon-close-show"] = len && hasFocus, _classnames2[prefixCls + "-icon-close-spacing"] = !shouldShowSearchIcon || searchIconType === 'button' || searchIconType === 'custom', _classnames2)),
        onClick: _this.handleClose
      };
      var searchProps = {
        type: 'link',
        onClick: _this.handleSearch,
        size: size,
        disabled: disabled,
        readOnly: readOnly
      };
      var style = {};

      if (buttonWidth != null) {
        style.width = buttonWidth;
      }

      if (height != null) {
        style.height = height;
      }

      var buttonProps = {
        type: 'primary',
        className: prefixCls + "-icon-search-btn",
        disabled: disabled,
        onClick: _this.handleSearch,
        style: style,
        size: size,
        readOnly: readOnly
      };
      return /*#__PURE__*/React.createElement("div", {
        ref: _partial(_this.addAnchor, 'searchIconAnchor'),
        className: prefixCls + "-icon-wrap"
      }, showCloseIcon ? /*#__PURE__*/React.createElement(IconTimesCircle, closeProps) : null, shouldShowSearchIcon && /*#__PURE__*/React.createElement("span", null, searchIconType === 'icon' && /*#__PURE__*/React.createElement(Button, _extends({
        className: prefixCls + "-search-icon"
      }, searchProps, {
        icon: "search"
      })), searchIconType === 'button' && /*#__PURE__*/React.createElement(Button, _extends({}, buttonProps, {
        icon: "search"
      })), searchIconType === 'custom' && /*#__PURE__*/React.createElement(Button, buttonProps, customRender)));
    };

    _this.renderInput = function () {
      var _this$props6 = _this.props,
          defaultQuery = _this$props6.defaultQuery,
          height = _this$props6.height;
      var _this$state2 = _this.state,
          inputValue = _this$state2.inputValue,
          searchIconWidth = _this$state2.searchIconWidth;
      var otherProps = omit(_this.props, ['prefixCls', 'defaultQuery', 'onPressEnter', 'onSearch', 'onClearClick', 'handleMenuClick', 'options', 'isShowDropDown', 'isShowSearchIcon', 'dropdownHeight', 'dropdownMatchSelectWidth', 'overlay', 'searchIconType', 'buttonWidth', 'onVisibleChange', 'showSearchIcon', 'showCloseIcon', 'customRender', 'size', 'defaultValue', 'lightPrefix']);
      otherProps.value = fixControlledValue(inputValue);
      var prefixQuery = defaultQuery.prefix,
          valueQuery = defaultQuery.value;

      if (prefixQuery && valueQuery) {
        otherProps.placeholder = prefixQuery + ": " + valueQuery;
      }

      otherProps.style = {
        // width: width || defaultInputWidth,
        paddingRight: searchIconWidth + 4
      };

      if (height != null) {
        otherProps.style.height = height;
      }

      otherProps.onFocus = _this.onFocus;
      otherProps.onBlur = _this.onBlur;
      otherProps.onChange = _this.onChange;
      otherProps.onCompositionStart = _this.onCompositionStart;
      otherProps.onCompositionEnd = _this.onCompositionEnd;
      return /*#__PURE__*/React.createElement("input", _extends({}, otherProps, {
        className: classnames(_this.getInputClassName()),
        onKeyDown: _this.handleKeyDown,
        ref: _partial(_this.addAnchor, 'search')
      }));
    };

    _this.renderLayer = function () {
      var _this$props7 = _this.props,
          options = _this$props7.options,
          dropdownHeight = _this$props7.dropdownHeight,
          prefixCls = _this$props7.prefixCls,
          size = _this$props7.size;
      var menu = /*#__PURE__*/React.createElement(Menu, {
        style: {
          height: dropdownHeight
        },
        onClick: _this.handleMenuClick,
        selectable: false,
        className: prefixCls + "-layer-menu",
        size: size === 'xsmall' ? 'small' : size
      }, options.map(function (option) {
        return _this.getSubMenuItem(option);
      }));
      return menu;
    };

    warning(!('width' in props), 'The `width` prop of `SearchBox` is deprecated, use `className` or `style` instead');
    warning(!('height' in props), 'The `height` prop of `SearchBox` is deprecated, use `className` or `style` instead');
    var _value = props.value,
        isShowDropDown = props.isShowDropDown,
        defaultValue = props.defaultValue;
    var initValue = _value || defaultValue || '';
    _this.state = {
      searchIconWidth: 0,
      hasFocus: false,
      value: initValue,
      inputValue: initValue,
      visible: isShowDropDown || false,
      prevProps: props
    };
    return _this;
  }

  var _proto = SearchBox.prototype;

  _proto.componentDidMount = function componentDidMount() {
    this.setSearchIconWidth();
  };

  _proto.componentDidUpdate = function componentDidUpdate() {
    this.setSearchIconWidth();
  };

  _proto.setSearchIconWidth = function setSearchIconWidth() {
    var searchIconAnchor = this.searchIconAnchor;

    if (!searchIconAnchor) {
      this.setState({
        searchIconWidth: 0
      });
      return;
    }

    var searchIconWidth = searchIconAnchor.offsetWidth;

    if (searchIconWidth === this.state.searchIconWidth) {
      return;
    }

    this.setState({
      searchIconWidth: searchIconWidth
    });
  };

  _proto.focus = function focus() {
    this.search.focus();
  };

  _proto.blur = function blur() {
    this.search.blur();
  };

  _proto.render = function render() {
    var _classnames3, _classnames4, _classnames5;

    var _this$props8 = this.props,
        prefixCls = _this$props8.prefixCls,
        width = _this$props8.width,
        height = _this$props8.height,
        disabled = _this$props8.disabled,
        overlay = _this$props8.overlay,
        searchIconType = _this$props8.searchIconType,
        size = _this$props8.size,
        dropdownMatchSelectWidth = _this$props8.dropdownMatchSelectWidth,
        className = _this$props8.className,
        options = _this$props8.options,
        style = _this$props8.style,
        lightPrefix = _this$props8.lightPrefix;
    var _this$state3 = this.state,
        visible = _this$state3.visible,
        hasFocus = _this$state3.hasFocus;
    var sizeStyle = {};

    if (width != null) {
      sizeStyle.width = width;
    }

    if (height != null) {
      sizeStyle.height = height;
    }

    var containerProps = {
      ref: _partial(this.addAnchor, 'container'),
      style: _extends({}, sizeStyle, style),
      className: classnames(className, (_classnames3 = {}, _classnames3[prefixCls + "-container"] = true, _classnames3[prefixCls + "-container-disabled"] = disabled, _classnames3[prefixCls + "-container-focused"] = hasFocus, _classnames3[COMPONENT_FOCUS(lightPrefix)] = hasFocus, _classnames3), prefixCls + "-container-" + searchIconType, prefixCls + "-container-" + size)
    };
    var detailProps = {
      className: classnames(prefixCls + "-detail", COMPONENT_MAIN(lightPrefix), (_classnames4 = {}, _classnames4[prefixCls + "-detail-focus"] = hasFocus, _classnames4[prefixCls + "-detail-disabled"] = disabled, _classnames4))
    };
    var overlayClassName = classnames((_classnames5 = {}, _classnames5[prefixCls + "-layer"] = true, _classnames5[className + "-layer"] = className, _classnames5));
    var layerProps = {
      visible: visible && (overlay ? true : !!options.length),
      overlayClassName: overlayClassName,
      overlay: overlay != null ? overlay : this.renderLayer()
    };

    if ('dropdownMatchSelectWidth' in this.props) {
      layerProps.dropdownMatchSelectWidth = dropdownMatchSelectWidth;
    }

    return /*#__PURE__*/React.createElement("div", containerProps, /*#__PURE__*/React.createElement(Overlay, layerProps, /*#__PURE__*/React.createElement("div", detailProps, this.renderInput(), this.renderIcon())));
  };

  return SearchBox;
}(PureComponent), _class2.defaultProps = {
  prefixCls: 'one-search-box',
  type: 'text',
  disabled: false,
  defaultQuery: {},
  isShowSearchIcon: true,
  dropdownHeight: 'auto',
  options: [],
  searchIconType: 'icon',
  size: 'medium',
  showSearchIcon: true,
  showCloseIcon: true,
  autoFocus: false,
  customRender: null
}, _class2.getDerivedStateFromProps = function (nextProps, prevState) {
  var value = nextProps.value,
      isShowDropDown = nextProps.isShowDropDown;
  var newState = {
    prevProps: nextProps
  };

  if ('value' in nextProps && value !== prevState.prevProps.value) {
    newState.value = value;
    newState.inputValue = value;
  }

  if ('isShowDropDown' in nextProps) {
    newState.visible = isShowDropDown;
  }

  return newState;
}, _temp)) || _class);
export default SearchBox;