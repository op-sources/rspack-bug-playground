import _extends from "@babel/runtime/helpers/extends";

/**
 * @file 公用工具方法入口
 * @author huangshiming
 * @date 2020-04-29
 */

/**
 * 定义组件的size和prefixCls等全局变量
 * @param {Object} 组件的props
 * @param {Object} 顶层context变量
 * @return {Object} 格式化后的size和prefixCls
 */
export var defaultPrefixCls = 'one';
export var defaultSize = 'medium';
export var locationRemoveProps = ['location', 'tipLocation', 'errorLocation', 'tipText'];
export var formatCommonConfig = function formatCommonConfig(props, consumerConfig) {
  if (consumerConfig === void 0) {
    consumerConfig = {};
  }

  var size = props.size,
      prefixCls = props.prefixCls,
      suffixCls = props.suffixCls;
  var consumerSize = consumerConfig.size;
  var consumerPrefixCls = consumerConfig.prefixCls;
  var prefix = consumerPrefixCls || defaultPrefixCls;
  return {
    size: size || consumerSize || defaultSize,
    prefixCls: prefixCls || prefix + "-" + suffixCls
  };
};
/**
 * 获取classNams
 * @return {string} classNames集合
 */

export function classnames() {
  var _arguments = arguments;
  var classes = [];

  var _loop = function _loop(i) {
    var arg = i < 0 || _arguments.length <= i ? undefined : _arguments[i];

    if (!arg) {
      return "continue";
    }

    var argType = typeof arg;

    if (argType === 'string' || argType === 'number') {
      classes.push(arg);
    } else if (Array.isArray(arg) && arg.length) {
      classes = [].concat(classes, arg);
    } else if (argType === 'object') {
      Object.keys(arg).forEach(function (key) {
        if (arg[key]) {
          classes.push(key);
        }
      });
    }
  };

  for (var i = 0; i < arguments.length; i++) {
    var _ret = _loop(i);

    if (_ret === "continue") continue;
  }

  return classes.join(' ');
}
export var partial = function partial(fn) {
  for (var _len = arguments.length, partialArgs = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
    partialArgs[_key - 1] = arguments[_key];
  }

  var args = partialArgs;
  return function () {
    var arg = 0;

    for (var i = 0; i < args.length && arg < arguments.length; i++) {
      if (args[i] === undefined) {
        var _arg;

        args[i] = (_arg = arg++, _arg < 0 || arguments.length <= _arg ? undefined : arguments[_arg]);
      }
    }

    return fn.apply(null, args);
  };
};
export var handleCountTips = function handleCountTips(currentLine, maxLine) {
  return maxLine != null ? currentLine + "/" + maxLine : null;
};
export var COUNT_MODE = {
  CHINA: 'cn',
  ENGLISH: 'en'
};
export var CHINA_COUNT_MODE = COUNT_MODE.CHINA;
export var ENGLISH_COUNT_MODE = COUNT_MODE.ENGLISH;

var handleFilter = function handleFilter(str, arr) {
  if (str === void 0) {
    str = '';
  }

  if (arr === void 0) {
    arr = [];
  }

  arr.forEach(function (element) {
    if (typeof element === 'string') {
      str = str.replace(new RegExp(element, 'g'), '');
    }
  });
  return str;
};

var toString = Object.prototype.toString;
/**
 * Gets the `toStringTag` of `value`.
 *
 * @private
 * @param {*} value The value to query.
 * @returns {string} Returns the `toStringTag`.
 */

function getTag(value) {
  if (value == null) {
    return value === undefined ? '[object Undefined]' : '[object Null]';
  }

  return toString.call(value);
}

export var isString = function isString(value) {
  var type = typeof value;
  return type === 'string' || type === 'object' && value != null && !Array.isArray(value) && getTag(value) === '[object String]';
};
export var isObjectLike = function isObjectLike(value) {
  return typeof value === 'object' && value !== null;
};
export var isNumber = function isNumber(value) {
  return typeof value === 'number' || isObjectLike(value) && getTag(value) === '[object Number]';
};
export var getLengthInBytes = function getLengthInBytes(str, needTrim, filterArray, countMode) {
  if (needTrim === void 0) {
    needTrim = true;
  }

  if (filterArray === void 0) {
    filterArray = [];
  }

  if (countMode === void 0) {
    countMode = CHINA_COUNT_MODE;
  }

  if (str == null) {
    return 0;
  }

  if (!isString(str) && !isNumber(str)) {
    throw new Error('传入的数据为非字符串或数字');
  }

  str = String(str);

  if (needTrim) {
    str = ("" + str).trim();
  }

  if (filterArray.length) {
    str = handleFilter(str, filterArray);
  }

  if (countMode === CHINA_COUNT_MODE) {
    return str.replace(/[^\x00-\xff]/g, '**').length;
  }

  return str.length;
};
export var getRealLength = function getRealLength(_ref, value) {
  var getLength = _ref.getLength,
      filterArray = _ref.filterArray,
      countMode = _ref.countMode;
  return getLength ? getLength(value) : getLengthInBytes(value, false, filterArray, countMode);
};
export var handleEventParams = function handleEventParams(e, that) {
  if (e === void 0) {
    e = {};
  }

  var _that$state = that.state,
      value = _that$state.value,
      errorMessage = _that$state.errorMessage;
  e.value = value;
  e.errorMessage = errorMessage;
  return e;
};
export function flatFilter(tree, callback) {
  return tree.reduce(function (acc, node) {
    if (callback(node)) {
      acc.push(node);
    }

    if (node.children) {
      var children = flatFilter(node.children, callback);
      acc.push.apply(acc, children);
    }

    return acc;
  }, []);
}
export function createStore(initialState) {
  var state = initialState;
  var listeners = [];

  function setState(partial) {
    state = _extends({}, state, partial);

    for (var i = 0; i < listeners.length; i++) {
      listeners[i]();
    }
  }

  function getState() {
    return state;
  }

  function subscribe(listener) {
    listeners.push(listener);
    return function unsubscribe() {
      var index = listeners.indexOf(listener);
      listeners.splice(index, 1);
    };
  }

  return {
    setState: setState,
    getState: getState,
    subscribe: subscribe
  };
}
export function treeMap(tree, mapper, childrenName, parentNode) {
  if (childrenName === void 0) {
    childrenName = 'children';
  }

  return tree.map(function (node, index) {
    var newNode = mapper(node, index, parentNode) || {};
    var children = node[childrenName];

    if (children && children.length > 0) {
      newNode[childrenName] = treeMap(children, mapper, childrenName, newNode);
    }

    return newNode;
  });
}
export function flatArray(data, childrenName) {
  if (childrenName === void 0) {
    childrenName = 'children';
  }

  var result = [];

  var loop = function loop(array) {
    array.forEach(function (item) {
      if (item[childrenName]) {
        var newItem = _extends({}, item);

        delete newItem[childrenName];
        result.push(newItem);

        if (item[childrenName].length > 0) {
          loop(item[childrenName]);
        }
      } else {
        result.push(item);
      }
    });
  };

  loop(data);
  return result;
}
export var stopPropagation = function stopPropagation(e) {
  e.stopPropagation();

  if (e && e.nativeEvent && e.nativeEvent.stopImmediatePropagation) {
    e.nativeEvent.stopImmediatePropagation();
  }
};
export function remove(array, item) {
  var index = array.indexOf(item);
  var front = array.slice(0, index);
  var last = array.slice(index + 1, array.length);
  return front.concat(last);
}
export var getScroll = function getScroll(target, top) {
  if (typeof window === 'undefined') {
    return 0;
  }

  var prop = top ? 'pageYOffset' : 'pageXOffset';
  var method = top ? 'scrollTop' : 'scrollLeft';
  var isWindow = target === window;
  var ret = isWindow ? target[prop] : target[method]; // ie6,7,8 standard mode

  if (isWindow && typeof ret !== 'number') {
    ret = document.documentElement[method];
  }

  return ret;
};
export var intersperseSpace = function intersperseSpace(list) {
  return list.reduce(function (current, item) {
    return [].concat(current, [' ', item]);
  }, []).slice(1);
};
/**
 * 判断一个元素是否匹配某个指定的选择器。

 * @param {Element} elem 指定元素
 * @param {string} selector 选择器字符串
 * @return {boolean} 是否匹配
 */

export function matches(elem, selector) {
  var match = elem.matches || elem.matchesSelector || elem.mozMatchesSelector || elem.msMatchesSelector || elem.oMatchesSelector || elem.webkitMatchesSelector;
  return match ? match.call(elem, selector) : false;
}
var FOCUSABLE_SELECTOR = "\na[href],\narea[href],\ninput:not([disabled]),\nselect:not([disabled]),\ntextarea:not([disabled]),\nbutton:not([disabled]),\niframe,\n[tabindex],\n[contentEditable=true]";

function isPreventFocus(el) {
  return !matches(el, '[tabindex="-1"]') && (el.offsetWidth || el.offsetHeight || el.getClientRects().length);
} // 代码来自veui


export function isFocusable(el) {
  return matches(el, FOCUSABLE_SELECTOR) && isPreventFocus(el);
} // 浏览器视口的高度

export function getWindowHeight() {
  if (!window) {
    return 0;
  }

  var windowHeight = 0;
  var document = window.document;

  if (document.compatMode === 'CSS1Compat') {
    windowHeight = document.documentElement.clientHeight;
  } else {
    windowHeight = document.body.clientHeight;
  }

  return windowHeight;
}
export var windowIsUndefined = !(typeof window !== 'undefined' && window.document && window.document.createElement);
var PASSIVESUPPORTED = false;

if (!windowIsUndefined) {
  window.addEventListener('test', function () {}, Object.defineProperty({}, 'passive', {
    get: function get() {
      PASSIVESUPPORTED = true;
      return null;
    }
  }));
}

export var passiveSupported = PASSIVESUPPORTED; // copy from veui dom util

export function isInsideTransformedContainer(el) {
  var current = el.parentElement;

  while (current) {
    var styles = window.getComputedStyle(current);

    if (styles.transform !== 'none' || styles.transformStyle !== 'flat') {
      return true;
    }

    current = current.parentElement;
  }

  return false;
}

function getNavigator(key) {
  // 为了支持 ssr，需要判断下有没有 bom
  return typeof navigator === 'undefined' ? undefined : navigator[key];
}

export function isSafari() {
  return /apple/i.test(getNavigator('vendor'));
}